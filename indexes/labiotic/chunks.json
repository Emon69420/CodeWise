[{"id": "Directory structure:_0", "file": "Directory structure:", "content": "\u2514\u2500\u2500 emon69420-labiotic/\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 eslint.config.js\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 postcss.config.js\n    \u251c\u2500\u2500 tailwind.config.js\n    \u251c\u2500\u2500 tsconfig.app.json\n    \u251c\u2500\u2500 tsconfig.json\n    \u251c\u2500\u2500 tsconfig.node.json\n    \u251c\u2500\u2500 vite.config.ts\n    \u251c\u2500\u2500 src/\n    \u2502   \u251c\u2500\u2500 App.tsx\n    \u2502   \u251c\u2500\u2500 index.css\n    \u2502   \u251c\u2500\u2500 main.tsx\n    \u2502   \u251c\u2500\u2500 vite-env.d.ts\n    \u2502   \u251c\u2500\u2500 components/\n    \u2502   \u2502   \u251c\u2500\u2500 AuthPage.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 BoltBadge.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 ColorPicker.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 CreateLabModal.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Dashboard.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 InvitationsModal.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 InviteMembersModal.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 JoinLabModal.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 LabDashboard.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Research.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 StructureStudio.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 TaskManagement.tsx"}, {"id": "Directory structure:_1", "file": "Directory structure:", "content": "\u2502   \u2502   \u251c\u2500\u2500 Research.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 StructureStudio.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 TaskManagement.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 ToolPanel.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 UserCursors.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Whiteboard.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 WhiteboardCanvas.tsx\n    \u2502   \u2502   \u2514\u2500\u2500 research/\n    \u2502   \u2502       \u251c\u2500\u2500 AminoAcidVisualizer.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 BindingAffinityVisualizer.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 ChatWindow.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 CompoundVisualizer.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 GeminiMessageParser.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 InputModal.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 PerplexityMessageParser.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 ReportModal.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 SidebarLeft.tsx\n    \u2502   \u2502       \u251c\u2500\u2500 SidebarRight.tsx\n    \u2502   \u2502       \u2514\u2500\u2500 ToolButtonRow.tsx\n    \u2502   \u251c\u2500\u2500 hooks/\n    \u2502   \u2502   \u251c\u2500\u2500 useAuth.ts\n    \u2502   \u2502   \u251c\u2500\u2500 usePerplexity.ts"}, {"id": "Directory structure:_2", "file": "Directory structure:", "content": "\u2502   \u251c\u2500\u2500 hooks/\n    \u2502   \u2502   \u251c\u2500\u2500 useAuth.ts\n    \u2502   \u2502   \u251c\u2500\u2500 usePerplexity.ts\n    \u2502   \u2502   \u251c\u2500\u2500 useReportGeneration.ts\n    \u2502   \u2502   \u2514\u2500\u2500 useResponsiveSidebar.ts\n    \u2502   \u251c\u2500\u2500 lib/\n    \u2502   \u2502   \u2514\u2500\u2500 supabase.ts\n    \u2502   \u2514\u2500\u2500 types/\n    \u2502       \u2514\u2500\u2500 whiteboard.ts\n    \u251c\u2500\u2500 supabase/\n    \u2502   \u2514\u2500\u2500 migrations/\n    \u2502       \u251c\u2500\u2500 20250607124954_frosty_meadow.sql\n    \u2502       \u251c\u2500\u2500 20250607181419_super_truth.sql\n    \u2502       \u251c\u2500\u2500 20250607182825_red_snowflake.sql\n    \u2502       \u251c\u2500\u2500 20250607183612_purple_sun.sql\n    \u2502       \u251c\u2500\u2500 20250607183911_curly_valley.sql\n    \u2502       \u251c\u2500\u2500 20250607184124_dark_mud.sql\n    \u2502       \u251c\u2500\u2500 20250607184325_holy_unit.sql\n    \u2502       \u251c\u2500\u2500 20250607185245_proud_desert.sql\n    \u2502       \u251c\u2500\u2500 20250607190141_golden_castle.sql\n    \u2502       \u251c\u2500\u2500 20250607191305_long_shape.sql"}, {"id": "Directory structure:_3", "file": "Directory structure:", "content": "\u2502       \u251c\u2500\u2500 20250607190141_golden_castle.sql\n    \u2502       \u251c\u2500\u2500 20250607191305_long_shape.sql\n    \u2502       \u251c\u2500\u2500 20250607192048_dry_pond.sql\n    \u2502       \u251c\u2500\u2500 20250607192604_polished_fog.sql\n    \u2502       \u251c\u2500\u2500 20250607194730_crimson_trail.sql\n    \u2502       \u251c\u2500\u2500 20250609210157_tight_unit.sql\n    \u2502       \u251c\u2500\u2500 20250609212538_fancy_flame.sql\n    \u2502       \u251c\u2500\u2500 20250609213207_delicate_shore.sql\n    \u2502       \u251c\u2500\u2500 20250614202216_tender_queen.sql\n    \u2502       \u251c\u2500\u2500 20250616115919_bronze_feather.sql\n    \u2502       \u2514\u2500\u2500 20250616120102_cool_mountain.sql\n    \u2514\u2500\u2500 .bolt/\n        \u251c\u2500\u2500 config.json\n        \u251c\u2500\u2500 prompt\n        \u2514\u2500\u2500 supabase_discarded_migrations/\n            \u2514\u2500\u2500 20250607183750_lingering_sky.sql"}, {"id": "README.md_0", "file": "README.md", "content": "================================================\nremedi-lab"}, {"id": "eslint.config.js_0", "file": "eslint.config.js", "content": "================================================\nimport js from '@eslint/js';\nimport globals from 'globals';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  { ignores: ['dist'] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: ['**/*.{ts,tsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  }\n);"}, {"id": "index.html_0", "file": "index.html", "content": "================================================\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>reMedi AI Research Lab Landing Page</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>"}, {"id": "package.json_0", "file": "package.json", "content": "================================================\n{\n  \"name\": \"vite-react-typescript-starter\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@google/generative-ai\": \"^0.21.0\",\n    \"@supabase/supabase-js\": \"^2.39.0\",\n    \"axios\": \"^1.9.0\",\n    \"docx\": \"^8.5.0\",\n    \"file-saver\": \"^2.0.5\",\n    \"lucide-react\": \"^0.344.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"roughjs\": \"^4.6.6\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.9.1\",\n    \"@types/file-saver\": \"^2.0.7\",\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.18\","}, {"id": "package.json_1", "file": "package.json", "content": "\"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.18\",\n    \"eslint\": \"^9.9.1\",\n    \"eslint-plugin-react-hooks\": \"^5.1.0-rc.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.11\",\n    \"globals\": \"^15.9.0\",\n    \"postcss\": \"^8.4.35\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5.5.3\",\n    \"typescript-eslint\": \"^8.3.0\",\n    \"vite\": \"^5.4.2\"\n  }\n}"}, {"id": "postcss.config.js_0", "file": "postcss.config.js", "content": "================================================\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};"}, {"id": "tailwind.config.js_0", "file": "tailwind.config.js", "content": "================================================\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};"}, {"id": "tsconfig.app.json_0", "file": "tsconfig.app.json", "content": "================================================\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src\"]\n}"}, {"id": "tsconfig.json_0", "file": "tsconfig.json", "content": "================================================\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ]\n}"}, {"id": "tsconfig.node.json_0", "file": "tsconfig.node.json", "content": "================================================\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"lib\": [\"ES2023\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"noEmit\": true,\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n}"}, {"id": "vite.config.ts_0", "file": "vite.config.ts", "content": "================================================\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  optimizeDeps: {\n    exclude: ['lucide-react'],\n  },\n});"}, {"id": "src/App.tsx_0", "file": "src/App.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react';\nimport { Brain, Zap, Target, Users, ArrowRight, ChevronDown } from 'lucide-react';\nimport { useAuth } from './hooks/useAuth';\nimport { AuthPage } from './components/AuthPage';\nimport { Dashboard } from './components/Dashboard';\nimport { BoltBadge } from './components/BoltBadge';\n\nfunction App() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [showAuth, setShowAuth] = useState(false);\n  const { user, loading } = useAuth();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);"}, {"id": "src/App.tsx_1", "file": "src/App.tsx", "content": "return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Hide auth page when user becomes authenticated\n  useEffect(() => {\n    if (user && showAuth) {\n      setShowAuth(false);\n    }\n  }, [user, showAuth]);\n\n  const scrollToSection = (id: string) => {\n    document.getElementById(id)?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleGetStarted = () => {\n    if (user) {\n      // User is logged in, this will be handled by the render logic below\n      return;\n    } else {\n      // User is not logged in, show auth page\n      setShowAuth(true);\n    }\n  };\n\n  // Show loading state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0F0F0F] flex items-center justify-center\">\n        <BoltBadge />"}, {"id": "src/App.tsx_2", "file": "src/App.tsx", "content": "<BoltBadge />\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Show dashboard if user is logged in (and not showing auth)\n  if (user && !showAuth) {\n    return <Dashboard />;\n  }\n\n  // Show auth page if requested\n  if (showAuth) {\n    return <AuthPage onBack={() => setShowAuth(false)} />;\n  }\n\n  // Show landing page\n  return (\n    <div className=\"bg-[#0F0F0F] text-white min-h-screen\">\n      <div className=\"fixed top-2 right-4 z-[9999]\">\n      <BoltBadge />\n      </div>\n      \n      \n      {/* Header */}\n      <header \n        className={`fixed top-0 w-full z-50 h-[65px] transition-all duration-300 ${\n          isScrolled \n            ? 'bg-[#0F0F0F] backdrop-blur-md border-b border-gray-800' \n            : 'bg-transparent'\n        }`}"}, {"id": "src/App.tsx_3", "file": "src/App.tsx", "content": ": 'bg-transparent'\n        }`}\n      >\n        <nav className=\"max-w-7xl mx-auto px-6 py-4 flex justify-between items-center\">\n          <div className=\"text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n            reMedi\n          </div>\n          <div className=\"hidden md:flex space-x-8\">\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <section id=\"home\" className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-[#0F0F0F] via-[#1a1a1a] to-[#0F0F0F]\"></div>\n        \n        {/* Background gradient blurs */}\n        <div className=\"absolute inset-0 opacity-20\">"}, {"id": "src/App.tsx_4", "file": "src/App.tsx", "content": "{/* Background gradient blurs */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500 rounded-full filter blur-[100px] animate-pulse\"></div>\n          <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500 rounded-full filter blur-[100px] animate-pulse animation-delay-1000\"></div>\n        </div>\n\n        {/* Animated protein structures and cells - positioned away from center text */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          {/* Top left protein structure */}\n          <div className=\"absolute top-16 left-8 opacity-25 animate-float-slow\">\n            <svg width=\"140\" height=\"140\" viewBox=\"0 0 140 140\" className=\"text-blue-400\">"}, {"id": "src/App.tsx_5", "file": "src/App.tsx", "content": "<svg width=\"140\" height=\"140\" viewBox=\"0 0 140 140\" className=\"text-blue-400\">\n              <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                <circle cx=\"35\" cy=\"35\" r=\"10\" className=\"animate-pulse\" />\n                <circle cx=\"70\" cy=\"25\" r=\"8\" className=\"animate-pulse animation-delay-500\" />\n                <circle cx=\"105\" cy=\"45\" r=\"9\" className=\"animate-pulse animation-delay-1000\" />\n                <circle cx=\"25\" cy=\"80\" r=\"7\" className=\"animate-pulse animation-delay-1500\" />\n                <circle cx=\"95\" cy=\"95\" r=\"11\" className=\"animate-pulse animation-delay-2000\" />\n                <circle cx=\"60\" cy=\"105\" r=\"8\" className=\"animate-pulse animation-delay-2500\" />"}, {"id": "src/App.tsx_6", "file": "src/App.tsx", "content": "<circle cx=\"60\" cy=\"105\" r=\"8\" className=\"animate-pulse animation-delay-2500\" />\n                <path d=\"M35 35 L70 25 L105 45 M25 80 L60 105 L95 95 M35 35 L25 80 M70 25 L60 105\" className=\"opacity-60\" />\n              </g>\n            </svg>\n          </div>\n\n          {/* Top right protein structure */}\n          <div className=\"absolute top-20 right-12 opacity-22 animate-float-reverse\">\n            <svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\" className=\"text-purple-400\">\n              <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                <circle cx=\"30\" cy=\"30\" r=\"8\" className=\"animate-pulse animation-delay-3000\" />\n                <circle cx=\"90\" cy=\"30\" r=\"10\" className=\"animate-pulse animation-delay-3500\" />"}, {"id": "src/App.tsx_7", "file": "src/App.tsx", "content": "<circle cx=\"90\" cy=\"30\" r=\"10\" className=\"animate-pulse animation-delay-3500\" />\n                <circle cx=\"60\" cy=\"60\" r=\"9\" className=\"animate-pulse animation-delay-4000\" />\n                <circle cx=\"30\" cy=\"90\" r=\"7\" className=\"animate-pulse animation-delay-4500\" />\n                <circle cx=\"90\" cy=\"90\" r=\"8\" className=\"animate-pulse animation-delay-5000\" />\n                <path d=\"M30 30 L90 30 L60 60 L30 90 L90 90 L60 60 M30 30 L30 90 M90 30 L90 90\" className=\"opacity-50\" />\n              </g>\n            </svg>\n          </div>\n\n          {/* Bottom left cell structure */}\n          <div className=\"absolute bottom-24 left-16 opacity-28 animate-float-slow animation-delay-2000\">"}, {"id": "src/App.tsx_8", "file": "src/App.tsx", "content": "<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" className=\"text-green-400\">\n              <circle cx=\"50\" cy=\"50\" r=\"45\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" className=\"opacity-40\" />\n              <circle cx=\"50\" cy=\"50\" r=\"28\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.2\" className=\"opacity-60\" />\n              <circle cx=\"50\" cy=\"50\" r=\"12\" fill=\"currentColor\" className=\"opacity-70 animate-pulse\" />\n              <circle cx=\"30\" cy=\"35\" r=\"4\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-1000\" />\n              <circle cx=\"70\" cy=\"40\" r=\"5\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-1500\" />"}, {"id": "src/App.tsx_9", "file": "src/App.tsx", "content": "<circle cx=\"35\" cy=\"70\" r=\"3\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-2000\" />\n              <circle cx=\"65\" cy=\"65\" r=\"4\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-2500\" />\n            </svg>\n          </div>\n\n          {/* Bottom right cell structure */}\n          <div className=\"absolute bottom-32 right-20 opacity-24 animate-float-reverse animation-delay-3000\">\n            <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" className=\"text-pink-400\">\n              <ellipse cx=\"55\" cy=\"55\" rx=\"50\" ry=\"35\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" className=\"opacity-35\" />\n              <ellipse cx=\"55\" cy=\"55\" rx=\"32\" ry=\"22\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.2\" className=\"opacity-50\" />"}, {"id": "src/App.tsx_10", "file": "src/App.tsx", "content": "<circle cx=\"55\" cy=\"55\" r=\"8\" fill=\"currentColor\" className=\"opacity-60 animate-pulse animation-delay-2500\" />\n              <circle cx=\"35\" cy=\"50\" r=\"3\" fill=\"currentColor\" className=\"opacity-40 animate-pulse animation-delay-3000\" />\n              <circle cx=\"75\" cy=\"60\" r=\"4\" fill=\"currentColor\" className=\"opacity-40 animate-pulse animation-delay-3500\" />\n              <circle cx=\"45\" cy=\"70\" r=\"2\" fill=\"currentColor\" className=\"opacity-40 animate-pulse animation-delay-4000\" />\n            </svg>\n          </div>\n\n          {/* Left side DNA helix structure */}\n          <div className=\"absolute top-1/2 left-4 transform -translate-y-1/2 opacity-20 animate-float-slow animation-delay-4000\">"}, {"id": "src/App.tsx_11", "file": "src/App.tsx", "content": "<svg width=\"80\" height=\"180\" viewBox=\"0 0 80 180\" className=\"text-cyan-400\">\n              <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                <path d=\"M20 15 Q40 35 60 55 Q40 75 20 95 Q40 115 60 135 Q40 155 20 175\" className=\"opacity-50\" />\n                <path d=\"M60 15 Q40 35 20 55 Q40 75 60 95 Q40 115 20 135 Q40 155 60 175\" className=\"opacity-50\" />\n                <g className=\"animate-pulse\">\n                  <line x1=\"20\" y1=\"35\" x2=\"60\" y2=\"35\" className=\"opacity-40\" />\n                  <line x1=\"20\" y1=\"75\" x2=\"60\" y2=\"75\" className=\"opacity-40\" />\n                  <line x1=\"20\" y1=\"115\" x2=\"60\" y2=\"115\" className=\"opacity-40\" />\n                  <line x1=\"20\" y1=\"155\" x2=\"60\" y2=\"155\" className=\"opacity-40\" />\n                </g>"}, {"id": "src/App.tsx_12", "file": "src/App.tsx", "content": "</g>\n              </g>\n            </svg>\n          </div>\n\n          {/* Right side DNA helix structure */}\n          <div className=\"absolute top-1/3 right-4 opacity-18 animate-float-reverse animation-delay-5000\">\n            <svg width=\"70\" height=\"160\" viewBox=\"0 0 70 160\" className=\"text-yellow-400\">\n              <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n                <path d=\"M15 10 Q35 25 55 40 Q35 55 15 70 Q35 85 55 100 Q35 115 15 130 Q35 145 55 160\" className=\"opacity-45\" />\n                <path d=\"M55 10 Q35 25 15 40 Q35 55 55 70 Q35 85 15 100 Q35 115 55 130 Q35 145 15 160\" className=\"opacity-45\" />\n                <g className=\"animate-pulse animation-delay-1000\">"}, {"id": "src/App.tsx_13", "file": "src/App.tsx", "content": "<g className=\"animate-pulse animation-delay-1000\">\n                  <line x1=\"15\" y1=\"25\" x2=\"55\" y2=\"25\" className=\"opacity-35\" />\n                  <line x1=\"15\" y1=\"55\" x2=\"55\" y2=\"55\" className=\"opacity-35\" />\n                  <line x1=\"15\" y1=\"85\" x2=\"55\" y2=\"85\" className=\"opacity-35\" />\n                  <line x1=\"15\" y1=\"115\" x2=\"55\" y2=\"115\" className=\"opacity-35\" />\n                  <line x1=\"15\" y1=\"145\" x2=\"55\" y2=\"145\" className=\"opacity-35\" />\n                </g>\n              </g>\n            </svg>\n          </div>\n\n          {/* Floating particles in corners */}\n          <div className=\"absolute top-32 left-32 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-float-particle\"></div>"}, {"id": "src/App.tsx_14", "file": "src/App.tsx", "content": "<div className=\"absolute top-40 right-40 w-2 h-2 bg-purple-400 rounded-full opacity-35 animate-float-particle animation-delay-2000\"></div>\n          <div className=\"absolute bottom-40 left-40 w-2.5 h-2.5 bg-green-400 rounded-full opacity-32 animate-float-particle animation-delay-4000\"></div>\n          <div className=\"absolute bottom-48 right-32 w-2 h-2 bg-pink-400 rounded-full opacity-28 animate-float-particle animation-delay-6000\"></div>\n          <div className=\"absolute top-1/2 left-24 w-1.5 h-1.5 bg-cyan-400 rounded-full opacity-25 animate-float-particle animation-delay-3000\"></div>\n          <div className=\"absolute top-2/3 right-24 w-2 h-2 bg-yellow-400 rounded-full opacity-30 animate-float-particle animation-delay-5000\"></div>"}, {"id": "src/App.tsx_15", "file": "src/App.tsx", "content": "{/* Additional molecular structures in far corners */}\n          <div className=\"absolute top-8 right-1/4 opacity-15 animate-float-slow animation-delay-6000\">\n            <svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" className=\"text-indigo-400\">\n              <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\">\n                <circle cx=\"30\" cy=\"15\" r=\"4\" className=\"animate-pulse\" />\n                <circle cx=\"15\" cy=\"45\" r=\"3\" className=\"animate-pulse animation-delay-1000\" />\n                <circle cx=\"45\" cy=\"45\" r=\"4\" className=\"animate-pulse animation-delay-2000\" />\n                <path d=\"M30 15 L15 45 L45 45 Z\" className=\"opacity-40\" />\n              </g>\n            </svg>\n          </div>"}, {"id": "src/App.tsx_16", "file": "src/App.tsx", "content": "</g>\n            </svg>\n          </div>\n\n          <div className=\"absolute bottom-16 left-1/4 opacity-18 animate-float-reverse animation-delay-3000\">\n            <svg width=\"70\" height=\"70\" viewBox=\"0 0 70 70\" className=\"text-teal-400\">\n              <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1\">\n                <circle cx=\"35\" cy=\"20\" r=\"5\" className=\"animate-pulse animation-delay-500\" />\n                <circle cx=\"20\" cy=\"50\" r=\"4\" className=\"animate-pulse animation-delay-1500\" />\n                <circle cx=\"50\" cy=\"50\" r=\"5\" className=\"animate-pulse animation-delay-2500\" />\n                <circle cx=\"35\" cy=\"35\" r=\"3\" className=\"animate-pulse animation-delay-3500\" />"}, {"id": "src/App.tsx_17", "file": "src/App.tsx", "content": "<circle cx=\"35\" cy=\"35\" r=\"3\" className=\"animate-pulse animation-delay-3500\" />\n                <path d=\"M35 20 L20 50 M35 20 L50 50 M20 50 L50 50 M35 20 L35 35 M20 50 L35 35 M50 50 L35 35\" className=\"opacity-35\" />\n              </g>\n            </svg>\n          </div>\n        </div>\n\n        {/* Subtle fade overlay only around edges to protect text readability */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-[#0F0F0F]/60 via-transparent to-[#0F0F0F]/60\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-b from-[#0F0F0F]/40 via-transparent to-[#0F0F0F]/40\"></div>\n        \n        <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6\">\n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6 leading-tight\">"}, {"id": "src/App.tsx_18", "file": "src/App.tsx", "content": "<h1 className=\"text-5xl md:text-7xl font-bold mb-6 leading-tight\">\n            <span className=\"bg-gradient-to-r from-white via-gray-200 to-gray-400 bg-clip-text text-transparent\">\n              Bioresearch Redefined\n            </span>\n            <br />\n            <span className=\"bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n              with AI\n            </span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-gray-300 mb-12 leading-relaxed max-w-2xl mx-auto\">\n            Accelerate medical breakthroughs, simulate intelligent drug research, and unlock insights that shape the future of human health \u00e2\u20ac\u201d all from your browser\n          </p>"}, {"id": "src/App.tsx_19", "file": "src/App.tsx", "content": "</p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n            <button \n              onClick={handleGetStarted}\n              className=\"group bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4 rounded-full font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25\"\n            >\n              <span className=\"flex items-center justify-center gap-2\">\n                Get Started\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n              </span>\n            </button>"}, {"id": "src/App.tsx_20", "file": "src/App.tsx", "content": "</span>\n            </button>\n            \n            <button className=\"group border-2 border-gray-600 hover:border-white text-gray-300 hover:text-white px-8 py-4 rounded-full font-semibold transition-all duration-300 transform hover:scale-105\">\n              Explore Research\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"solutions\" className=\"py-24 relative\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent\">\n              Breakthrough Solutions\n            </h2>"}, {"id": "src/App.tsx_21", "file": "src/App.tsx", "content": "Breakthrough Solutions\n            </h2>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto\">\n              Harnessing the power of AI to accelerate medical discoveries and improve patient outcomes worldwide.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: Brain,\n                title: \"Neural Research\",\n                description: \"Advanced neural networks analyzing complex medical data to identify patterns invisible to traditional methods.\"\n              },\n              {\n                icon: Zap,\n                title: \"Rapid Analysis\","}, {"id": "src/App.tsx_22", "file": "src/App.tsx", "content": "{\n                icon: Zap,\n                title: \"Rapid Analysis\",\n                description: \"Lightning-fast processing of medical imagery and patient data, reducing diagnosis time from hours to minutes.\"\n              },\n              {\n                icon: Target,\n                title: \"Precision Medicine\",\n                description: \"Personalized treatment recommendations based on individual genetic profiles and medical history analysis.\"\n              }\n            ].map((feature, index) => (\n              <div\n                key={index}"}, {"id": "src/App.tsx_23", "file": "src/App.tsx", "content": "].map((feature, index) => (\n              <div\n                key={index}\n                className=\"group bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-8 hover:border-gray-600 transition-all duration-300 hover:transform hover:-translate-y-2 hover:shadow-2xl hover:shadow-blue-500/10\"\n              >\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 w-14 h-14 rounded-xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <feature.icon className=\"w-7 h-7 text-white\" />\n                </div>\n                \n                <h3 className=\"text-2xl font-semibold mb-4 group-hover:text-blue-400 transition-colors duration-300\">"}, {"id": "src/App.tsx_24", "file": "src/App.tsx", "content": "{feature.title}\n                </h3>\n                \n                <p className=\"text-gray-400 leading-relaxed\">\n                  {feature.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"about\" className=\"py-24 bg-gradient-to-b from-transparent to-gray-900/50\">\n        <div className=\"max-w-4xl mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-8 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent\">\n            About reMedi\n          </h2>\n          <p className=\"text-xl text-gray-300 leading-relaxed mb-8\">"}, {"id": "src/App.tsx_25", "file": "src/App.tsx", "content": "</h2>\n          <p className=\"text-xl text-gray-300 leading-relaxed mb-8\">\n            Founded by leading researchers and AI experts, reMedi is at the forefront of medical AI innovation. \n            Our mission is to bridge the gap between artificial intelligence and healthcare, creating solutions \n            that save lives and improve the quality of medical care worldwide.\n          </p>\n          <div className=\"grid md:grid-cols-3 gap-8 mt-16\">\n            {[\n              { number: \"500+\", label: \"Research Papers\" },\n              { number: \"50M+\", label: \"Data Points Analyzed\" },\n              { number: \"25+\", label: \"Partner Hospitals\" }\n            ].map((stat, index) => (\n              <div key={index} className=\"text-center\">"}, {"id": "src/App.tsx_26", "file": "src/App.tsx", "content": "].map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent mb-2\">\n                  {stat.number}\n                </div>\n                <div className=\"text-gray-400\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section id=\"team\" className=\"py-24\">\n        <div className=\"max-w-6xl mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-8 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent\">\n            Our Team\n          </h2>"}, {"id": "src/App.tsx_27", "file": "src/App.tsx", "content": "Our Team\n          </h2>\n          <p className=\"text-xl text-gray-400 mb-16 max-w-2xl mx-auto\">\n            A diverse group of AI researchers, medical professionals, and engineers working together to revolutionize healthcare.\n          </p>\n          \n          <div className=\"flex justify-center\">\n            <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-8 max-w-md\">\n              <Users className=\"w-16 h-16 mx-auto mb-6 text-blue-400\" />\n              <h3 className=\"text-2xl font-semibold mb-4\">World-Class Experts</h3>\n              <p className=\"text-gray-400\">\n                Our interdisciplinary team combines decades of experience in artificial intelligence, \n                medical research, and clinical practice."}, {"id": "src/App.tsx_28", "file": "src/App.tsx", "content": "medical research, and clinical practice.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-900/20 to-purple-900/20\"></div>\n        <div className=\"relative z-10 max-w-4xl mx-auto px-6 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-8 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n            Ready For Some Research?\n          </h2>\n          <p className=\"text-xl text-gray-300 mb-12 max-w-2xl mx-auto\">\n            Join us in shaping the future of medical AI and making a lasting impact on global healthcare.\n          </p>"}, {"id": "src/App.tsx_29", "file": "src/App.tsx", "content": "</p>\n          \n          <button \n            onClick={handleGetStarted}\n            className=\"group bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 hover:from-blue-600 hover:via-purple-600 hover:to-pink-600 text-white px-12 py-4 rounded-full font-semibold text-lg transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25\"\n          >\n            <span className=\"flex items-center justify-center gap-2\">\n              Join Now\n              <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n            </span>\n          </button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer id=\"contact\" className=\"border-t border-gray-800 py-16\">"}, {"id": "src/App.tsx_30", "file": "src/App.tsx", "content": "{/* Footer */}\n      <footer id=\"contact\" className=\"border-t border-gray-800 py-16\">\n        <div className=\"max-w-7xl mx-auto px-6\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-12\">\n            <div>\n              <h3 className=\"text-2xl font-bold mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n                reMedi\n              </h3>\n              <p className=\"text-gray-400 leading-relaxed\">\n                Advancing medical research through artificial intelligence innovation.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4 text-white\">Company</h4>\n              <div className=\"space-y-2\">\n                {['About', 'Careers', 'News', 'Press'].map((item) => ("}, {"id": "src/App.tsx_31", "file": "src/App.tsx", "content": "{['About', 'Careers', 'News', 'Press'].map((item) => (\n                  <button key={item} className=\"block text-gray-400 hover:text-white transition-colors duration-300\">\n                    {item}\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4 text-white\">Products</h4>\n              <div className=\"space-y-2\">\n                {['AI Platform', 'Research Tools', 'Analytics', 'API'].map((item) => (\n                  <button key={item} className=\"block text-gray-400 hover:text-white transition-colors duration-300\">\n                    {item}\n                  </button>\n                ))}\n              </div>\n            </div>"}, {"id": "src/App.tsx_32", "file": "src/App.tsx", "content": "))}\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4 text-white\">Resources</h4>\n              <div className=\"space-y-2\">\n                {['Documentation', 'Support', 'Community', 'Blog'].map((item) => (\n                  <button key={item} className=\"block text-gray-400 hover:text-white transition-colors duration-300\">\n                    {item}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 pt-8 text-center text-gray-400\">\n            <p>&copy; 2025 reMedi. All rights reserved. Advancing healthcare through AI innovation.</p>\n          </div>\n        </div>\n      </footer>\n    </div>"}, {"id": "src/App.tsx_33", "file": "src/App.tsx", "content": "</div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"}, {"id": "src/index.css_0", "file": "src/index.css", "content": "================================================\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\n.animation-delay-1000 {\n  animation-delay: 1s;\n}\n\n.animation-delay-500 {\n  animation-delay: 0.5s;\n}\n\n.animation-delay-1500 {\n  animation-delay: 1.5s;\n}\n\n.animation-delay-2000 {\n  animation-delay: 2s;\n}\n\n.animation-delay-2500 {\n  animation-delay: 2.5s;\n}"}, {"id": "src/index.css_1", "file": "src/index.css", "content": "animation-delay: 2s;\n}\n\n.animation-delay-2500 {\n  animation-delay: 2.5s;\n}\n\n.animation-delay-3000 {\n  animation-delay: 3s;\n}\n\n.animation-delay-3500 {\n  animation-delay: 3.5s;\n}\n\n.animation-delay-4000 {\n  animation-delay: 4s;\n}\n\n.animation-delay-4500 {\n  animation-delay: 4.5s;\n}\n\n.animation-delay-5000 {\n  animation-delay: 5s;\n}\n\n.animation-delay-6000 {\n  animation-delay: 6s;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #0F0F0F;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #374151;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #4B5563;\n}\n\n/* Thin scrollbar for specific components */\n.scrollbar-thin {\n  scrollbar-width: thin;\n}\n\n.scrollbar-thumb-gray-600::-webkit-scrollbar-thumb {"}, {"id": "src/index.css_2", "file": "src/index.css", "content": ".scrollbar-thin {\n  scrollbar-width: thin;\n}\n\n.scrollbar-thumb-gray-600::-webkit-scrollbar-thumb {\n  background-color: #4B5563;\n  border-radius: 4px;\n}\n\n.scrollbar-track-gray-800::-webkit-scrollbar-track {\n  background-color: #1F2937;\n}\n\n/* Smooth transitions for all elements */\n* {\n  transition: color 0.3s ease, background-color 0.3s ease, border-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n/* Gradient animation */\n@keyframes gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n.animate-gradient {\n  background: linear-gradient(-45deg, #3B82F6, #8B5CF6, #EC4899, #10B981);\n  background-size: 400% 400%;\n  animation: gradient 15s ease infinite;\n}"}, {"id": "src/index.css_3", "file": "src/index.css", "content": "background-size: 400% 400%;\n  animation: gradient 15s ease infinite;\n}\n\n/* Floating animations for scientific elements */\n@keyframes float-slow {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg);\n  }\n  50% {\n    transform: translateY(-20px) rotate(5deg);\n  }\n}\n\n@keyframes float-reverse {\n  0%, 100% {\n    transform: translateY(0px) rotate(0deg);\n  }\n  50% {\n    transform: translateY(15px) rotate(-3deg);\n  }\n}\n\n@keyframes float-particle {\n  0%, 100% {\n    transform: translateY(0px) translateX(0px);\n    opacity: 0.2;\n  }\n  25% {\n    transform: translateY(-10px) translateX(5px);\n    opacity: 0.4;\n  }\n  50% {\n    transform: translateY(-5px) translateX(-3px);\n    opacity: 0.3;\n  }\n  75% {\n    transform: translateY(-15px) translateX(8px);\n    opacity: 0.5;\n  }\n}\n\n.animate-float-slow {"}, {"id": "src/index.css_4", "file": "src/index.css", "content": "transform: translateY(-15px) translateX(8px);\n    opacity: 0.5;\n  }\n}\n\n.animate-float-slow {\n  animation: float-slow 8s ease-in-out infinite;\n}\n\n.animate-float-reverse {\n  animation: float-reverse 10s ease-in-out infinite;\n}\n\n.animate-float-particle {\n  animation: float-particle 12s ease-in-out infinite;\n}\n\n/* Text truncation utilities */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Handwritten text styling */\n.handwritten {\n  font-family: 'Kalam', 'Comic Sans MS', cursive;\n  font-weight: 400;\n}\n\n.handwritten-bold {\n  font-family: 'Kalam', 'Comic Sans MS', cursive;\n  font-weight: 700;\n}\n\n.handwritten-light {\n  font-family: 'Kalam', 'Comic Sans MS', cursive;\n  font-weight: 300;\n}"}, {"id": "src/main.tsx_0", "file": "src/main.tsx", "content": "================================================\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"}, {"id": "src/vite-env.d.ts_0", "file": "src/vite-env.d.ts", "content": "================================================\n/// <reference types=\"vite/client\" />"}, {"id": "src/components/AuthPage.tsx_0", "file": "src/components/AuthPage.tsx", "content": "================================================\nimport React, { useState } from 'react'\nimport { Eye, EyeOff, ArrowLeft, Mail, Lock, User } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\nimport { BoltBadge } from './BoltBadge'\n\ninterface AuthPageProps {\n  onBack: () => void\n}\n\nexport function AuthPage({ onBack }: AuthPageProps) {\n  const [isLogin, setIsLogin] = useState(true)\n  const [showPassword, setShowPassword] = useState(false)\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [name, setName] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n\n  const { signIn, signUp } = useAuth()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()"}, {"id": "src/components/AuthPage.tsx_1", "file": "src/components/AuthPage.tsx", "content": "const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      if (isLogin) {\n        const { error } = await signIn(email, password)\n        if (error) throw error\n        // Successful login - the useEffect in App.tsx will handle the redirect\n      } else {\n        const { error } = await signUp(email, password, name)\n        if (error) throw error\n        // Successful signup - the useEffect in App.tsx will handle the redirect\n      }\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0F0F0F] text-white relative overflow-hidden\">\n      <div className=\"fixed top-2 right-4 z-50 \" >\n            <BoltBadge />"}, {"id": "src/components/AuthPage.tsx_2", "file": "src/components/AuthPage.tsx", "content": "<div className=\"fixed top-2 right-4 z-50 \" >\n            <BoltBadge />\n      </div>\n\n      \n      {/* Same background as hero section */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-[#0F0F0F] via-[#1a1a1a] to-[#0F0F0F]\"></div>\n      \n      {/* Background gradient blurs */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500 rounded-full filter blur-[100px] animate-pulse\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500 rounded-full filter blur-[100px] animate-pulse animation-delay-1000\"></div>\n      </div>\n\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">"}, {"id": "src/components/AuthPage.tsx_3", "file": "src/components/AuthPage.tsx", "content": "<div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {/* Top left protein structure */}\n        <div className=\"absolute top-16 left-8 opacity-25 animate-float-slow\">\n          <svg width=\"140\" height=\"140\" viewBox=\"0 0 140 140\" className=\"text-blue-400\">\n            <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n              <circle cx=\"35\" cy=\"35\" r=\"10\" className=\"animate-pulse\" />\n              <circle cx=\"70\" cy=\"25\" r=\"8\" className=\"animate-pulse animation-delay-500\" />\n              <circle cx=\"105\" cy=\"45\" r=\"9\" className=\"animate-pulse animation-delay-1000\" />\n              <circle cx=\"25\" cy=\"80\" r=\"7\" className=\"animate-pulse animation-delay-1500\" />"}, {"id": "src/components/AuthPage.tsx_4", "file": "src/components/AuthPage.tsx", "content": "<circle cx=\"25\" cy=\"80\" r=\"7\" className=\"animate-pulse animation-delay-1500\" />\n              <circle cx=\"95\" cy=\"95\" r=\"11\" className=\"animate-pulse animation-delay-2000\" />\n              <circle cx=\"60\" cy=\"105\" r=\"8\" className=\"animate-pulse animation-delay-2500\" />\n              <path d=\"M35 35 L70 25 L105 45 M25 80 L60 105 L95 95 M35 35 L25 80 M70 25 L60 105\" className=\"opacity-60\" />\n            </g>\n          </svg>\n        </div>\n\n        {/* Top right protein structure */}\n        <div className=\"absolute top-20 right-12 opacity-22 animate-float-reverse\">\n          <svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\" className=\"text-purple-400\">\n            <g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">"}, {"id": "src/components/AuthPage.tsx_5", "file": "src/components/AuthPage.tsx", "content": "<g fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n              <circle cx=\"30\" cy=\"30\" r=\"8\" className=\"animate-pulse animation-delay-3000\" />\n              <circle cx=\"90\" cy=\"30\" r=\"10\" className=\"animate-pulse animation-delay-3500\" />\n              <circle cx=\"60\" cy=\"60\" r=\"9\" className=\"animate-pulse animation-delay-4000\" />\n              <circle cx=\"30\" cy=\"90\" r=\"7\" className=\"animate-pulse animation-delay-4500\" />\n              <circle cx=\"90\" cy=\"90\" r=\"8\" className=\"animate-pulse animation-delay-5000\" />\n              <path d=\"M30 30 L90 30 L60 60 L30 90 L90 90 L60 60 M30 30 L30 90 M90 30 L90 90\" className=\"opacity-50\" />\n            </g>\n          </svg>\n        </div>\n\n        {/* Bottom left cell structure */}"}, {"id": "src/components/AuthPage.tsx_6", "file": "src/components/AuthPage.tsx", "content": "</g>\n          </svg>\n        </div>\n\n        {/* Bottom left cell structure */}\n        <div className=\"absolute bottom-24 left-16 opacity-28 animate-float-slow animation-delay-2000\">\n          <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" className=\"text-green-400\">\n            <circle cx=\"50\" cy=\"50\" r=\"45\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" className=\"opacity-40\" />\n            <circle cx=\"50\" cy=\"50\" r=\"28\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.2\" className=\"opacity-60\" />\n            <circle cx=\"50\" cy=\"50\" r=\"12\" fill=\"currentColor\" className=\"opacity-70 animate-pulse\" />\n            <circle cx=\"30\" cy=\"35\" r=\"4\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-1000\" />"}, {"id": "src/components/AuthPage.tsx_7", "file": "src/components/AuthPage.tsx", "content": "<circle cx=\"70\" cy=\"40\" r=\"5\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-1500\" />\n            <circle cx=\"35\" cy=\"70\" r=\"3\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-2000\" />\n            <circle cx=\"65\" cy=\"65\" r=\"4\" fill=\"currentColor\" className=\"opacity-50 animate-pulse animation-delay-2500\" />\n          </svg>\n        </div>\n\n        {/* Bottom right cell structure */}\n        <div className=\"absolute bottom-32 right-20 opacity-24 animate-float-reverse animation-delay-3000\">\n          <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" className=\"text-pink-400\">\n            <ellipse cx=\"55\" cy=\"55\" rx=\"50\" ry=\"35\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" className=\"opacity-35\" />"}, {"id": "src/components/AuthPage.tsx_8", "file": "src/components/AuthPage.tsx", "content": "<ellipse cx=\"55\" cy=\"55\" rx=\"32\" ry=\"22\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.2\" className=\"opacity-50\" />\n            <circle cx=\"55\" cy=\"55\" r=\"8\" fill=\"currentColor\" className=\"opacity-60 animate-pulse animation-delay-2500\" />\n            <circle cx=\"35\" cy=\"50\" r=\"3\" fill=\"currentColor\" className=\"opacity-40 animate-pulse animation-delay-3000\" />\n            <circle cx=\"75\" cy=\"60\" r=\"4\" fill=\"currentColor\" className=\"opacity-40 animate-pulse animation-delay-3500\" />\n            <circle cx=\"45\" cy=\"70\" r=\"2\" fill=\"currentColor\" className=\"opacity-40 animate-pulse animation-delay-4000\" />\n          </svg>\n        </div>\n\n        {/* Floating particles */}"}, {"id": "src/components/AuthPage.tsx_9", "file": "src/components/AuthPage.tsx", "content": "</svg>\n        </div>\n\n        {/* Floating particles */}\n        <div className=\"absolute top-32 left-32 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-float-particle\"></div>\n        <div className=\"absolute top-40 right-40 w-2 h-2 bg-purple-400 rounded-full opacity-35 animate-float-particle animation-delay-2000\"></div>\n        <div className=\"absolute bottom-40 left-40 w-2.5 h-2.5 bg-green-400 rounded-full opacity-32 animate-float-particle animation-delay-4000\"></div>\n        <div className=\"absolute bottom-48 right-32 w-2 h-2 bg-pink-400 rounded-full opacity-28 animate-float-particle animation-delay-6000\"></div>\n      </div>\n\n      {/* Fade overlay to protect form readability */}"}, {"id": "src/components/AuthPage.tsx_10", "file": "src/components/AuthPage.tsx", "content": "</div>\n\n      {/* Fade overlay to protect form readability */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-[#0F0F0F]/60 via-transparent to-[#0F0F0F]/60\"></div>\n      <div className=\"absolute inset-0 bg-gradient-to-b from-[#0F0F0F]/40 via-transparent to-[#0F0F0F]/40\"></div>\n\n      {/* Back button */}\n      <button\n        onClick={onBack}\n        className=\"absolute top-8 left-8 z-20 flex items-center gap-2 text-gray-300 hover:text-white transition-colors duration-300 group\"\n      >\n        <ArrowLeft className=\"w-5 h-5 group-hover:-translate-x-1 transition-transform duration-300\" />\n        Back to Home\n      </button>\n\n      {/* Auth form */}\n      <div className=\"relative z-10 min-h-screen flex items-center justify-center px-6\">"}, {"id": "src/components/AuthPage.tsx_11", "file": "src/components/AuthPage.tsx", "content": "<div className=\"relative z-10 min-h-screen flex items-center justify-center px-6\">\n        <div className=\"w-full max-w-md\">\n          {/* Frosted glass card */}\n          <div className=\"backdrop-blur-xl bg-white/10 border border-white/20 rounded-2xl p-8 shadow-2xl\">\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold mb-2 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n                {isLogin ? 'Welcome Back' : 'Join reMedi'}\n              </h1>\n              <p className=\"text-gray-400\">\n                {isLogin \n                  ? 'Sign in to continue your research journey' \n                  : 'Create your account to start researching'\n                }\n              </p>"}, {"id": "src/components/AuthPage.tsx_12", "file": "src/components/AuthPage.tsx", "content": ": 'Create your account to start researching'\n                }\n              </p>\n            </div>\n\n            {/* Error message */}\n            {error && (\n              <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg text-red-300 text-sm\">\n                {error}\n              </div>\n            )}\n\n            {/* Form */}\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Name field (signup only) */}\n              {!isLogin && (\n                <div>\n                  <label htmlFor=\"name\\\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Full Name\n                  </label>\n                  <div className=\"relative\">"}, {"id": "src/components/AuthPage.tsx_13", "file": "src/components/AuthPage.tsx", "content": "</label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      className=\"w-full pl-12 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300\"\n                      placeholder=\"Enter your full name\"\n                      required={!isLogin}\n                    />\n                  </div>\n                </div>"}, {"id": "src/components/AuthPage.tsx_14", "file": "src/components/AuthPage.tsx", "content": "/>\n                  </div>\n                </div>\n              )}\n\n              {/* Email field */}\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <input\n                    type=\"email\"\n                    id=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}"}, {"id": "src/components/AuthPage.tsx_15", "file": "src/components/AuthPage.tsx", "content": "value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"w-full pl-12 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300\"\n                    placeholder=\"Enter your email\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Password field */}\n              <div>\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Password\n                </label>\n                <div className=\"relative\">"}, {"id": "src/components/AuthPage.tsx_16", "file": "src/components/AuthPage.tsx", "content": "Password\n                </label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                  <input\n                    type={showPassword ? 'text' : 'password'}\n                    id=\"password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"w-full pl-12 pr-12 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300\"\n                    placeholder=\"Enter your password\"\n                    required\n                    minLength={6}"}, {"id": "src/components/AuthPage.tsx_17", "file": "src/components/AuthPage.tsx", "content": "required\n                    minLength={6}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white transition-colors duration-300\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                  </button>\n                </div>\n              </div>\n\n              {/* Submit button */}\n              <button\n                type=\"submit\"\n                disabled={loading}"}, {"id": "src/components/AuthPage.tsx_18", "file": "src/components/AuthPage.tsx", "content": "<button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-700 text-white py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-[1.02] disabled:scale-100 disabled:cursor-not-allowed\"\n              >\n                {loading ? 'Please wait...' : (isLogin ? 'Sign In' : 'Create Account')}\n              </button>\n            </form>\n\n            {/* Toggle between login/signup */}\n            <div className=\"mt-8 text-center\">\n              <p className=\"text-gray-400\">\n                {isLogin ? \"Don't have an account?\" : 'Already have an account?'}\n                <button"}, {"id": "src/components/AuthPage.tsx_19", "file": "src/components/AuthPage.tsx", "content": "<button\n                  onClick={() => {\n                    setIsLogin(!isLogin)\n                    setError('')\n                    setEmail('')\n                    setPassword('')\n                    setName('')\n                  }}\n                  className=\"ml-2 text-blue-400 hover:text-blue-300 font-medium transition-colors duration-300\"\n                >\n                  {isLogin ? 'Sign up' : 'Sign in'}\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/BoltBadge.tsx_0", "file": "src/components/BoltBadge.tsx", "content": "================================================\nimport React from 'react'\n\nexport function BoltBadge() {\n  return (\n    <a\n      href=\"https://bolt.new\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n\n      style={{ zIndex: 9999 }}\n    >\n      <img\n        src=\"/white_circle_360x360.png\"\n        alt=\"Powered by Bolt\"\n        className=\"w-[50px] h-[50px] md:w-[100px] md:h-[100px] rounded-full shadow-lg hover:shadow-xl transition-shadow duration-300\"\n      />\n    </a>\n  )\n}"}, {"id": "src/components/ColorPicker.tsx_0", "file": "src/components/ColorPicker.tsx", "content": "================================================\nimport React from 'react'\nimport { X } from 'lucide-react'\n\ninterface ColorPickerProps {\n  color: string\n  onChange: (color: string) => void\n  onClose: () => void\n}\n\nexport function ColorPicker({ color, onChange, onClose }: ColorPickerProps) {\n  const colors = [\n    // Whites and grays\n    '#ffffff', '#f8f9fa', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', \n    '#6c757d', '#495057', '#343a40', '#212529', '#000000',\n    \n    // Reds\n    '#ff6b6b', '#ee5a52', '#ff8787', '#ffa8a8', '#ffc9c9', '#ffe3e3',\n    \n    // Greens\n    '#51cf66', '#40c057', '#69db7c', '#8ce99a', '#a9e34b', '#c0eb75',\n    \n    // Blues\n    '#339af0', '#228be6', '#74c0fc', '#a5d8ff', '#d0ebff', '#e7f5ff',\n    \n    // Purples"}, {"id": "src/components/ColorPicker.tsx_1", "file": "src/components/ColorPicker.tsx", "content": "'#339af0', '#228be6', '#74c0fc', '#a5d8ff', '#d0ebff', '#e7f5ff',\n    \n    // Purples\n    '#9775fa', '#845ef7', '#b197fc', '#d0bfff', '#e5dbff', '#f3f0ff',\n    \n    // Yellows\n    '#ffd43b', '#fab005', '#ffe066', '#ffec99', '#fff3bf', '#fff9db',\n    \n    // Oranges\n    '#ff922b', '#fd7e14', '#ffa94d', '#ffc078', '#ffd8a8', '#ffe8cc',\n    \n    // Pinks\n    '#e64980', '#d6336c', '#f06595', '#f783ac', '#faa2c1', '#fcc2d7'\n  ]\n\n  return (\n    <div className=\"bg-gray-900 border border-gray-700 rounded-lg p-4 shadow-2xl min-w-[280px]\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-sm font-medium text-white\">Color Picker</h3>\n        <button\n          onClick={onClose}"}, {"id": "src/components/ColorPicker.tsx_2", "file": "src/components/ColorPicker.tsx", "content": "<button\n          onClick={onClose}\n          className=\"text-gray-400 hover:text-white transition-colors duration-200\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      {/* Color palette */}\n      <div className=\"grid grid-cols-6 gap-2 mb-4\">\n        {colors.map(c => (\n          <button\n            key={c}\n            onClick={() => onChange(c)}\n            className={`w-8 h-8 rounded border-2 transition-all duration-200 hover:scale-110 ${\n              color === c \n                ? 'border-blue-500 scale-110 shadow-lg' \n                : 'border-gray-600 hover:border-gray-500'\n            }`}\n            style={{ backgroundColor: c }}\n            title={c}\n          />\n        ))}\n      </div>\n\n      {/* Custom color input */}"}, {"id": "src/components/ColorPicker.tsx_3", "file": "src/components/ColorPicker.tsx", "content": "title={c}\n          />\n        ))}\n      </div>\n\n      {/* Custom color input */}\n      <div className=\"space-y-3\">\n        <div>\n          <label className=\"block text-xs text-gray-400 mb-2\">Custom Color</label>\n          <div className=\"flex gap-2\">\n            <input\n              type=\"color\"\n              value={color}\n              onChange={(e) => onChange(e.target.value)}\n              className=\"w-12 h-8 rounded border border-gray-600 bg-transparent cursor-pointer\"\n            />\n            <input\n              type=\"text\"\n              value={color}\n              onChange={(e) => onChange(e.target.value)}"}, {"id": "src/components/ColorPicker.tsx_4", "file": "src/components/ColorPicker.tsx", "content": "value={color}\n              onChange={(e) => onChange(e.target.value)}\n              className=\"flex-1 px-3 py-1 text-sm bg-gray-800 border border-gray-600 rounded text-white focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500\"\n              placeholder=\"#ffffff\"\n            />\n          </div>\n        </div>\n\n        {/* Recent colors */}\n        <div>\n          <label className=\"block text-xs text-gray-400 mb-2\">Recent Colors</label>\n          <div className=\"flex gap-1\">\n            {['#ffffff', '#ff6b6b', '#51cf66', '#339af0', '#ffd43b'].map(c => (\n              <button\n                key={c}\n                onClick={() => onChange(c)}"}, {"id": "src/components/ColorPicker.tsx_5", "file": "src/components/ColorPicker.tsx", "content": "<button\n                key={c}\n                onClick={() => onChange(c)}\n                className=\"w-6 h-6 rounded border border-gray-600 hover:border-gray-500 transition-colors duration-200\"\n                style={{ backgroundColor: c }}\n                title={c}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/CreateLabModal.tsx_0", "file": "src/components/CreateLabModal.tsx", "content": "================================================\nimport React, { useState } from 'react'\nimport { X, Users, FileText, Loader2 } from 'lucide-react'\nimport { supabase } from '../lib/supabase'\nimport { useAuth } from '../hooks/useAuth'\n\ninterface CreateLabModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onLabCreated: (labId: string) => void\n}\n\nexport function CreateLabModal({ isOpen, onClose, onLabCreated }: CreateLabModalProps) {\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const { user } = useAuth()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!user) return\n\n    setLoading(true)\n    setError('')\n\n    try {"}, {"id": "src/components/CreateLabModal.tsx_1", "file": "src/components/CreateLabModal.tsx", "content": "e.preventDefault()\n    if (!user) return\n\n    setLoading(true)\n    setError('')\n\n    try {\n      const { data, error } = await supabase\n        .from('labs')\n        .insert({\n          name: name.trim(),\n          description: description.trim(),\n          owner_id: user.id\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      // Reset form\n      setName('')\n      setDescription('')\n      onClose()\n      \n      // Redirect to the new lab\n      onLabCreated(data.id)\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleClose = () => {\n    if (!loading) {\n      setName('')\n      setDescription('')\n      setError('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return ("}, {"id": "src/components/CreateLabModal.tsx_2", "file": "src/components/CreateLabModal.tsx", "content": "setError('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n          {/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={loading}\n            className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300 disabled:opacity-50\"\n          >"}, {"id": "src/components/CreateLabModal.tsx_3", "file": "src/components/CreateLabModal.tsx", "content": ">\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 w-14 h-14 rounded-xl flex items-center justify-center mb-4\">\n              <Users className=\"w-7 h-7 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Create New Lab</h2>\n            <p className=\"text-gray-400\">Set up a new research laboratory for your team</p>\n          </div>\n\n          {/* Error message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg text-red-300 text-sm\">\n              {error}\n            </div>\n          )}\n\n          {/* Form */}"}, {"id": "src/components/CreateLabModal.tsx_4", "file": "src/components/CreateLabModal.tsx", "content": "{error}\n            </div>\n          )}\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Lab name */}\n            <div>\n              <label htmlFor=\"lab-name\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Lab Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"lab-name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300\"\n                placeholder=\"Enter lab name\""}, {"id": "src/components/CreateLabModal.tsx_5", "file": "src/components/CreateLabModal.tsx", "content": "placeholder=\"Enter lab name\"\n                required\n                disabled={loading}\n                maxLength={100}\n              />\n            </div>\n\n            {/* Lab description */}\n            <div>\n              <label htmlFor=\"lab-description\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Description\n              </label>\n              <textarea\n                id=\"lab-description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                rows={4}"}, {"id": "src/components/CreateLabModal.tsx_6", "file": "src/components/CreateLabModal.tsx", "content": "onChange={(e) => setDescription(e.target.value)}\n                rows={4}\n                className=\"w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300 resize-none\"\n                placeholder=\"Describe your lab's research focus and goals...\"\n                disabled={loading}\n                maxLength={500}\n              />\n              <div className=\"mt-1 text-xs text-gray-500\">\n                {description.length}/500 characters\n              </div>\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex gap-4 pt-4\">\n              <button\n                type=\"button\""}, {"id": "src/components/CreateLabModal.tsx_7", "file": "src/components/CreateLabModal.tsx", "content": "<div className=\"flex gap-4 pt-4\">\n              <button\n                type=\"button\"\n                onClick={handleClose}\n                disabled={loading}\n                className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={loading || !name.trim()}"}, {"id": "src/components/CreateLabModal.tsx_8", "file": "src/components/CreateLabModal.tsx", "content": "type=\"submit\"\n                disabled={loading || !name.trim()}\n                className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  'Create Lab'\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/Dashboard.tsx_0", "file": "src/components/Dashboard.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react'\nimport { LogOut, Plus, Users, Video, Atom, MessageSquare, CheckSquare, Bell, UserPlus } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\nimport { supabase } from '../lib/supabase'\nimport { CreateLabModal } from './CreateLabModal'\nimport { LabDashboard } from './LabDashboard'\nimport { InvitationsModal } from './InvitationsModal'\nimport { JoinLabModal } from './JoinLabModal'\nimport { BoltBadge } from './BoltBadge'\n\ninterface Lab {\n  id: string\n  name: string\n  description: string | null\n  owner_id: string\n  created_at: string\n}\n\ninterface TaskActivity {\n  id: string\n  task_id: string\n  lab_id: string\n  user_id: string\n  activity_type: string\n  message: string\n  created_at: string"}, {"id": "src/components/Dashboard.tsx_1", "file": "src/components/Dashboard.tsx", "content": "lab_id: string\n  user_id: string\n  activity_type: string\n  message: string\n  created_at: string\n  lab_name?: string\n  task_title?: string\n}\n\nexport function Dashboard() {\n  const [showCreateModal, setShowCreateModal] = useState(false)\n  const [showInvitationsModal, setShowInvitationsModal] = useState(false)\n  const [showJoinLabModal, setShowJoinLabModal] = useState(false)\n  const [selectedLabId, setSelectedLabId] = useState<string | null>(null)\n  const [labs, setLabs] = useState<Lab[]>([])\n  const [recentActivities, setRecentActivities] = useState<TaskActivity[]>([])\n  const [loading, setLoading] = useState(true)\n  const { user, signOut } = useAuth()\n\n  useEffect(() => {\n    if (user) {\n      fetchUserLabs()\n      fetchRecentActivities()\n    }\n  }, [user])"}, {"id": "src/components/Dashboard.tsx_2", "file": "src/components/Dashboard.tsx", "content": "if (user) {\n      fetchUserLabs()\n      fetchRecentActivities()\n    }\n  }, [user])\n\n  const fetchUserLabs = async () => {\n    if (!user) return\n\n    try {\n      setLoading(true)\n      \n      // Fetch labs where user is a member - ordered by joined_at DESC to show newest first\n      const { data, error } = await supabase\n        .from('lab_members')\n        .select(`\n          lab_id,\n          joined_at,\n          labs (\n            id,\n            name,\n            description,\n            owner_id,\n            created_at\n          )\n        `)\n        .eq('user_id', user.id)\n        .order('joined_at', { ascending: false }) // Order by when user joined, newest first\n\n      if (error) throw error\n\n      const userLabs = data?.map(item => item.labs).filter(Boolean) || []"}, {"id": "src/components/Dashboard.tsx_3", "file": "src/components/Dashboard.tsx", "content": "const userLabs = data?.map(item => item.labs).filter(Boolean) || []\n      setLabs(userLabs as Lab[])\n    } catch (err) {\n      console.error('Error fetching labs:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchRecentActivities = async () => {\n    if (!user) return\n\n    try {\n      // Fetch recent task activities where the logged-in user is assigned to the task\n      const { data, error } = await supabase\n        .from('task_activities')\n        .select(`\n          *,\n          tasks!inner (\n            title,\n            assigned_to,\n            task_lists!inner (\n              lab_id,\n              labs!inner (\n                name,\n                lab_members!inner (user_id)\n              )\n            )\n          )\n        `)"}, {"id": "src/components/Dashboard.tsx_4", "file": "src/components/Dashboard.tsx", "content": "lab_members!inner (user_id)\n              )\n            )\n          )\n        `)\n        .eq('tasks.assigned_to', user.id) // Only show activities for tasks assigned to the logged-in user\n        .eq('tasks.task_lists.labs.lab_members.user_id', user.id) // Ensure user is a member of the lab\n        .eq('activity_type', 'assigned') // Only show assignment activities\n        .order('created_at', { ascending: false })\n        .limit(10)\n\n      if (error) throw error\n\n      const activitiesWithLabInfo = data?.map(activity => ({\n        ...activity,\n        lab_name: activity.tasks?.task_lists?.labs?.name,\n        task_title: activity.tasks?.title\n      })) || []\n\n      setRecentActivities(activitiesWithLabInfo)\n    } catch (err) {"}, {"id": "src/components/Dashboard.tsx_5", "file": "src/components/Dashboard.tsx", "content": "})) || []\n\n      setRecentActivities(activitiesWithLabInfo)\n    } catch (err) {\n      console.error('Error fetching recent activities:', err)\n    }\n  }\n\n  const handleSignOut = async () => {\n    await signOut()\n  }\n\n  const handleLabCreated = (labId: string) => {\n    // Refresh the labs list\n    fetchUserLabs()\n    // Navigate to the new lab\n    setSelectedLabId(labId)\n  }\n\n  const handleBackToDashboard = () => {\n    setSelectedLabId(null)\n    // Refresh labs and activities when returning to dashboard\n    fetchUserLabs()\n    fetchRecentActivities()\n  }\n\n  const handleInvitationAccepted = () => {\n    // Refresh labs when an invitation is accepted\n    fetchUserLabs()\n  }\n\n  const handleLabJoined = (labId: string) => {\n    // Refresh labs when a lab is joined\n    fetchUserLabs()"}, {"id": "src/components/Dashboard.tsx_6", "file": "src/components/Dashboard.tsx", "content": "// Refresh labs when a lab is joined\n    fetchUserLabs()\n    // Navigate to the joined lab\n    setSelectedLabId(labId)\n  }\n\n  const navigateToLabTasks = (labId: string) => {\n    setSelectedLabId(labId)\n    // The LabDashboard component will handle showing the tasks view\n  }\n\n  // Show lab dashboard if a lab is selected\n  if (selectedLabId) {\n    return <LabDashboard labId={selectedLabId} onBack={handleBackToDashboard} />\n  }\n\n  // Show auth page if requested\n  if (showInvitationsModal) {\n    return <InvitationsModal isOpen={showInvitationsModal} onClose={() => setShowInvitationsModal(false)} onInvitationAccepted={handleInvitationAccepted} />\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0F0F0F] text-white\">\n      {/* Header */}"}, {"id": "src/components/Dashboard.tsx_7", "file": "src/components/Dashboard.tsx", "content": "}\n\n  return (\n    <div className=\"min-h-screen bg-[#0F0F0F] text-white\">\n      {/* Header */}\n      <header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4 flex justify-between items-center\">\n          <div className=\"text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent\">\n            reMedi\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <span className=\"hidden md:flex text-gray-300\">Welcome, {user?.user_metadata?.name || user?.email}</span>\n            <button\n              onClick={handleSignOut}\n              className=\"flex items-center gap-2 text-gray-300 hover:text-white transition-colors duration-300\"\n            >"}, {"id": "src/components/Dashboard.tsx_8", "file": "src/components/Dashboard.tsx", "content": ">\n              <LogOut className=\"w-4 h-4\" />\n              Sign Out\n            </button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"fixed top-[65px] md:top-[90px] right-2 md:right-24 z-50\">\n            <BoltBadge />\n      </div>\n\n\n      {/* Main content */}\n      <main className=\"max-w-7xl mx-auto px-6 py-12\">\n        {/* Welcome section */}\n        <div className=\"mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-white to-gray-400 bg-clip-text text-transparent\">\n            Research Dashboard\n          </h1>\n          <p className=\"text-xl text-gray-400\">\n            Manage your labs, collaborate with your team, and advance your research.\n          </p>\n        </div>\n\n        {/* Quick actions */}"}, {"id": "src/components/Dashboard.tsx_9", "file": "src/components/Dashboard.tsx", "content": "</p>\n        </div>\n\n        {/* Quick actions */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          <button \n            onClick={() => setShowCreateModal(true)}\n            className=\"group bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-6 hover:border-gray-600 transition-all duration-300 hover:transform hover:-translate-y-1 text-left\"\n          >\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 w-12 h-12 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n              <Plus className=\"w-6 h-6 text-white\" />\n            </div>"}, {"id": "src/components/Dashboard.tsx_10", "file": "src/components/Dashboard.tsx", "content": "<Plus className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2 group-hover:text-blue-400 transition-colors duration-300\">\n              Create Lab\n            </h3>\n            <p className=\"text-gray-400 text-sm\">\n              Start a new research lab and invite collaborators\n            </p>\n          </button>\n\n          <button \n            onClick={() => setShowJoinLabModal(true)}\n            className=\"group bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-6 hover:border-gray-600 transition-all duration-300 hover:transform hover:-translate-y-1 text-left\"\n          >"}, {"id": "src/components/Dashboard.tsx_11", "file": "src/components/Dashboard.tsx", "content": ">\n            <div className=\"bg-gradient-to-r from-green-500 to-teal-600 w-12 h-12 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n              <UserPlus className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2 group-hover:text-green-400 transition-colors duration-300\">\n              Join Lab\n            </h3>\n            <p className=\"text-gray-400 text-sm\">\n              Join an existing lab with a lab ID\n            </p>\n          </button>\n\n          <button className=\"group bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-6 hover:border-gray-600 transition-all duration-300 hover:transform hover:-translate-y-1 text-left\">"}, {"id": "src/components/Dashboard.tsx_12", "file": "src/components/Dashboard.tsx", "content": "<div className=\"bg-gradient-to-r from-orange-500 to-red-600 w-12 h-12 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n              <Video className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2 group-hover:text-orange-400 transition-colors duration-300\">\n              Talk to Neo\n            </h3>\n            <p className=\"text-gray-400 text-sm\">\n              Chat with AI assistant for research insights\n            </p>\n          </button>\n\n          <button \n            onClick={() => setShowInvitationsModal(true)}"}, {"id": "src/components/Dashboard.tsx_13", "file": "src/components/Dashboard.tsx", "content": "</button>\n\n          <button \n            onClick={() => setShowInvitationsModal(true)}\n            className=\"group bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-6 hover:border-gray-600 transition-all duration-300 hover:transform hover:-translate-y-1 text-left\"\n          >\n            <div className=\"bg-gradient-to-r from-pink-500 to-purple-600 w-12 h-12 rounded-xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300\">\n              <MessageSquare className=\"w-6 h-6 text-white\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2 group-hover:text-pink-400 transition-colors duration-300\">\n              Invitations\n            </h3>\n            <p className=\"text-gray-400 text-sm\">"}, {"id": "src/components/Dashboard.tsx_14", "file": "src/components/Dashboard.tsx", "content": "Invitations\n            </h3>\n            <p className=\"text-gray-400 text-sm\">\n              View and manage lab invitations\n            </p>\n          </button>\n        </div>\n\n        {/* Content sections */}\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* My Labs - Now with scrollable content */}\n          <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-6\">\n            <h2 className=\"text-2xl font-semibold mb-6 flex items-center gap-3\">\n              <Users className=\"w-6 h-6 text-blue-400\" />\n              My Labs ({labs.length})\n            </h2>\n            \n            {/* Scrollable container */}"}, {"id": "src/components/Dashboard.tsx_15", "file": "src/components/Dashboard.tsx", "content": "</h2>\n            \n            {/* Scrollable container */}\n            <div className=\"h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\">\n              <div className=\"space-y-4 pr-2\">\n                {loading ? (\n                  <div className=\"text-center py-8 text-gray-400\">\n                    <div className=\"animate-spin w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    Loading labs...\n                  </div>\n                ) : labs.length > 0 ? (\n                  labs.map((lab) => (\n                    <button\n                      key={lab.id}\n                      onClick={() => setSelectedLabId(lab.id)}"}, {"id": "src/components/Dashboard.tsx_16", "file": "src/components/Dashboard.tsx", "content": "key={lab.id}\n                      onClick={() => setSelectedLabId(lab.id)}\n                      className=\"w-full text-left p-4 bg-white/5 hover:bg-white/10 rounded-lg transition-all duration-300 group\"\n                    >\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"hidden md:flex w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center text-white font-semibold flex-shrink-0\">\n                          {lab.name.charAt(0).toUpperCase()}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-semibold text-white group-hover:text-blue-400 transition-colors duration-300 truncate\">"}, {"id": "src/components/Dashboard.tsx_17", "file": "src/components/Dashboard.tsx", "content": "{lab.name}\n                          </h3>\n                          {lab.description && (\n                            <p className=\"text-sm text-gray-400 mt-1 line-clamp-2\">\n                              {lab.description}\n                            </p>\n                          )}\n                          <p className=\"text-xs text-gray-500 mt-2\">\n                            Created {new Date(lab.created_at).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    </button>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12 text-gray-400\">\n                    <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />"}, {"id": "src/components/Dashboard.tsx_18", "file": "src/components/Dashboard.tsx", "content": "<Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>No labs yet. Create your first lab to get started!</p>\n                    <button\n                      onClick={() => setShowCreateModal(true)}\n                      className=\"mt-4 text-blue-400 hover:text-blue-300 transition-colors duration-300\"\n                    >\n                      Create your first lab \u00e2\u2020\u2019\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            {/* Scroll indicator */}\n            {labs.length > 4 && (\n              <div className=\"mt-4 text-center\">\n                <div className=\"text-xs text-gray-500 flex items-center justify-center gap-2\">"}, {"id": "src/components/Dashboard.tsx_19", "file": "src/components/Dashboard.tsx", "content": "<div className=\"text-xs text-gray-500 flex items-center justify-center gap-2\">\n                  <div className=\"w-1 h-1 bg-gray-500 rounded-full\"></div>\n                  <span>Scroll to see more labs</span>\n                  <div className=\"w-1 h-1 bg-gray-500 rounded-full\"></div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Recent Activity - Now filtered for assigned tasks only */}\n          <div className=\"bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl p-6\">\n            <h2 className=\"text-2xl font-semibold mb-6 flex items-center gap-3\">\n              <Bell className=\"w-6 h-6 text-green-400\" />\n              My Assigned Tasks\n            </h2>"}, {"id": "src/components/Dashboard.tsx_20", "file": "src/components/Dashboard.tsx", "content": "My Assigned Tasks\n            </h2>\n            <div className=\"space-y-4 h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800\">\n              {recentActivities.length > 0 ? (\n                recentActivities.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className=\"p-4 bg-white/5 hover:bg-white/10 rounded-lg transition-all duration-300 cursor-pointer\"\n                    onClick={() => navigateToLabTasks(activity.lab_id)}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"w-8 h-8 bg-gradient-to-r from-green-500 to-teal-600 rounded-full flex items-center justify-center flex-shrink-0\">"}, {"id": "src/components/Dashboard.tsx_21", "file": "src/components/Dashboard.tsx", "content": "<CheckSquare className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm text-white\">{activity.message}</p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <span className=\"text-xs text-blue-400\">{activity.lab_name}</span>\n                          <span className=\"text-xs text-gray-500\">\u00e2\u20ac\u00a2</span>\n                          <span className=\"text-xs text-gray-500\">\n                            {new Date(activity.created_at).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))"}, {"id": "src/components/Dashboard.tsx_22", "file": "src/components/Dashboard.tsx", "content": "</div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-12 text-gray-400\">\n                  <Bell className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No assigned tasks yet</p>\n                  <p className=\"text-sm mt-2\">Tasks assigned to you will appear here</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Create Lab Modal */}\n      <CreateLabModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onLabCreated={handleLabCreated}\n      />\n\n      {/* Join Lab Modal */}\n      <JoinLabModal\n        isOpen={showJoinLabModal}"}, {"id": "src/components/Dashboard.tsx_23", "file": "src/components/Dashboard.tsx", "content": "/>\n\n      {/* Join Lab Modal */}\n      <JoinLabModal\n        isOpen={showJoinLabModal}\n        onClose={() => setShowJoinLabModal(false)}\n        onLabJoined={handleLabJoined}\n      />\n\n      {/* Invitations Modal */}\n      <InvitationsModal\n        isOpen={showInvitationsModal}\n        onClose={() => setShowInvitationsModal(false)}\n        onInvitationAccepted={handleInvitationAccepted}\n      />\n    </div>\n  )\n}"}, {"id": "src/components/InvitationsModal.tsx_0", "file": "src/components/InvitationsModal.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react'\nimport { X, Mail, Check, X as XIcon, Clock, Loader2 } from 'lucide-react'\nimport { supabase } from '../lib/supabase'\nimport { useAuth } from '../hooks/useAuth'\n\ninterface Invitation {\n  id: string\n  lab_id: string\n  invited_email: string\n  invited_by: string\n  status: 'pending' | 'accepted' | 'rejected'\n  created_at: string\n  expires_at: string\n  lab_name: string\n  invited_by_name: string\n}\n\ninterface InvitationsModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onInvitationAccepted: () => void\n}\n\nexport function InvitationsModal({ isOpen, onClose, onInvitationAccepted }: InvitationsModalProps) {\n  const [invitations, setInvitations] = useState<Invitation[]>([])"}, {"id": "src/components/InvitationsModal.tsx_1", "file": "src/components/InvitationsModal.tsx", "content": "const [invitations, setInvitations] = useState<Invitation[]>([])\n  const [loading, setLoading] = useState(false)\n  const [processingId, setProcessingId] = useState<string | null>(null)\n  const [error, setError] = useState('')\n  const { user } = useAuth()\n\n  useEffect(() => {\n    if (isOpen && user) {\n      fetchInvitations()\n    }\n  }, [isOpen, user])\n\n  const fetchInvitations = async () => {\n    if (!user) return\n\n    try {\n      setLoading(true)\n      setError('')\n\n      const { data, error } = await supabase\n        .from('invitations')\n        .select('*')\n        .eq('invited_email', user.email)\n        .eq('status', 'pending')\n        .gt('expires_at', new Date().toISOString())\n        .order('created_at', { ascending: false })\n\n      if (error) throw error"}, {"id": "src/components/InvitationsModal.tsx_2", "file": "src/components/InvitationsModal.tsx", "content": ".order('created_at', { ascending: false })\n\n      if (error) throw error\n\n      setInvitations(data || [])\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleInvitationResponse = async (invitationId: string, action: 'accept' | 'reject') => {\n    if (!user) return\n\n    try {\n      setProcessingId(invitationId)\n      setError('')\n\n      // Update invitation status\n      const { error: updateError } = await supabase\n        .from('invitations')\n        .update({ status: action === 'accept' ? 'accepted' : 'rejected' })\n        .eq('id', invitationId)\n\n      if (updateError) throw updateError\n\n      if (action === 'accept') {\n        // Add user to lab as member with their name from database"}, {"id": "src/components/InvitationsModal.tsx_3", "file": "src/components/InvitationsModal.tsx", "content": "if (action === 'accept') {\n        // Add user to lab as member with their name from database\n        const invitation = invitations.find(inv => inv.id === invitationId)\n        if (invitation) {\n          // Fetch user's current name from the database\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('name, email')\n            .eq('id', user.id)\n            .single()\n\n          if (userError) throw userError\n\n          // Use the name from database, or email as fallback\n          const userName = userData?.name || userData?.email || user.email || 'Unknown User'\n          \n          const { error: memberError } = await supabase\n            .from('lab_members')\n            .insert({\n              user_id: user.id,"}, {"id": "src/components/InvitationsModal.tsx_4", "file": "src/components/InvitationsModal.tsx", "content": ".from('lab_members')\n            .insert({\n              user_id: user.id,\n              lab_id: invitation.lab_id,\n              role: 'member',\n              member_name: userName\n            })\n\n          if (memberError) throw memberError\n\n          // Notify parent component to refresh labs\n          onInvitationAccepted()\n        }\n      }\n\n      // Remove invitation from list\n      setInvitations(prev => prev.filter(inv => inv.id !== invitationId))\n\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setProcessingId(null)\n    }\n  }\n\n  const handleClose = () => {\n    if (!loading && !processingId) {\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}"}, {"id": "src/components/InvitationsModal.tsx_5", "file": "src/components/InvitationsModal.tsx", "content": "return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative w-full max-w-2xl transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n          {/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={loading || !!processingId}\n            className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300 disabled:opacity-50\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>"}, {"id": "src/components/InvitationsModal.tsx_6", "file": "src/components/InvitationsModal.tsx", "content": ">\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"bg-gradient-to-r from-pink-500 to-purple-600 w-14 h-14 rounded-xl flex items-center justify-center mb-4\">\n              <Mail className=\"w-7 h-7 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Lab Invitations</h2>\n            <p className=\"text-gray-400\">Manage your pending lab invitations</p>\n          </div>\n\n          {/* Error message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg text-red-300 text-sm\">\n              {error}\n            </div>\n          )}\n\n          {/* Content */}"}, {"id": "src/components/InvitationsModal.tsx_7", "file": "src/components/InvitationsModal.tsx", "content": "{error}\n            </div>\n          )}\n\n          {/* Content */}\n          <div className=\"space-y-4\">\n            {loading ? (\n              <div className=\"text-center py-12 text-gray-400\">\n                <div className=\"animate-spin w-8 h-8 border-2 border-pink-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                Loading invitations...\n              </div>\n            ) : invitations.length > 0 ? (\n              invitations.map((invitation) => (\n                <div\n                  key={invitation.id}\n                  className=\"bg-white/5 border border-white/10 rounded-lg p-6 hover:bg-white/10 transition-all duration-300\"\n                >\n                  <div className=\"flex items-start justify-between\">"}, {"id": "src/components/InvitationsModal.tsx_8", "file": "src/components/InvitationsModal.tsx", "content": ">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n                          {invitation.lab_name.charAt(0).toUpperCase()}\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-white\">{invitation.lab_name}</h3>\n                          <p className=\"text-sm text-gray-400\">\n                            Invited by {invitation.invited_by_name}\n                          </p>\n                        </div>"}, {"id": "src/components/InvitationsModal.tsx_9", "file": "src/components/InvitationsModal.tsx", "content": "</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-4 text-xs text-gray-500 mb-4\">\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          Expires {new Date(invitation.expires_at).toLocaleDateString()}\n                        </div>\n                        <div>\n                          Sent {new Date(invitation.created_at).toLocaleDateString()}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2 ml-4\">\n                      <button"}, {"id": "src/components/InvitationsModal.tsx_10", "file": "src/components/InvitationsModal.tsx", "content": "<div className=\"flex gap-2 ml-4\">\n                      <button\n                        onClick={() => handleInvitationResponse(invitation.id, 'accept')}\n                        disabled={!!processingId}\n                        className=\"flex items-center gap-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 disabled:cursor-not-allowed\"\n                      >\n                        {processingId === invitation.id ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <Check className=\"w-4 h-4\" />\n                        )}\n                        Accept\n                      </button>"}, {"id": "src/components/InvitationsModal.tsx_11", "file": "src/components/InvitationsModal.tsx", "content": ")}\n                        Accept\n                      </button>\n                      <button\n                        onClick={() => handleInvitationResponse(invitation.id, 'reject')}\n                        disabled={!!processingId}\n                        className=\"flex items-center gap-2 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 disabled:cursor-not-allowed\"\n                      >\n                        {processingId === invitation.id ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <XIcon className=\"w-4 h-4\" />\n                        )}\n                        Decline"}, {"id": "src/components/InvitationsModal.tsx_12", "file": "src/components/InvitationsModal.tsx", "content": ")}\n                        Decline\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-12 text-gray-400\">\n                <Mail className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p>No pending invitations</p>\n                <p className=\"text-sm mt-2\">You'll see lab invitations here when you receive them</p>\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          {invitations.length > 0 && (\n            <div className=\"mt-8 pt-6 border-t border-gray-700\">\n              <button\n                onClick={handleClose}\n                disabled={loading || !!processingId}"}, {"id": "src/components/InvitationsModal.tsx_13", "file": "src/components/InvitationsModal.tsx", "content": "onClick={handleClose}\n                disabled={loading || !!processingId}\n                className=\"w-full bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 disabled:cursor-not-allowed\"\n              >\n                Close\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/InviteMembersModal.tsx_0", "file": "src/components/InviteMembersModal.tsx", "content": "================================================\nimport React, { useState } from 'react'\nimport { X, UserPlus, Mail, Loader2, Check } from 'lucide-react'\nimport { supabase } from '../lib/supabase'\nimport { useAuth } from '../hooks/useAuth'\n\ninterface InviteMembersModalProps {\n  isOpen: boolean\n  onClose: () => void\n  labId: string\n  labName: string\n  onMemberInvited: () => void\n}\n\nexport function InviteMembersModal({ isOpen, onClose, labId, labName, onMemberInvited }: InviteMembersModalProps) {\n  const [email, setEmail] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const { user } = useAuth()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()"}, {"id": "src/components/InviteMembersModal.tsx_1", "file": "src/components/InviteMembersModal.tsx", "content": "const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!user || !email.trim()) return\n\n    setLoading(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      const inviteEmail = email.trim().toLowerCase()\n\n      // Simple query to check if user exists\n      const { data: existingUsers, error: userError } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', inviteEmail)\n\n      if (userError) {\n        throw new Error('Error checking user: ' + userError.message)\n      }\n\n      if (!existingUsers || existingUsers.length === 0) {\n        setError('No user found with this email address. The user must create an account first.')\n        return\n      }\n\n      const existingUser = existingUsers[0]"}, {"id": "src/components/InviteMembersModal.tsx_2", "file": "src/components/InviteMembersModal.tsx", "content": "return\n      }\n\n      const existingUser = existingUsers[0]\n\n      // Check if user is already a member\n      const { data: existingMembers, error: memberError } = await supabase\n        .from('lab_members')\n        .select('*')\n        .eq('lab_id', labId)\n        .eq('user_id', existingUser.id)\n\n      if (memberError) {\n        throw new Error('Error checking membership: ' + memberError.message)\n      }\n\n      if (existingMembers && existingMembers.length > 0) {\n        setError('This user is already a member of the lab')\n        return\n      }\n\n      // Check if there's already a pending invitation\n      const { data: existingInvitations, error: invitationError } = await supabase\n        .from('invitations')\n        .select('*')\n        .eq('lab_id', labId)"}, {"id": "src/components/InviteMembersModal.tsx_3", "file": "src/components/InviteMembersModal.tsx", "content": ".from('invitations')\n        .select('*')\n        .eq('lab_id', labId)\n        .eq('invited_email', inviteEmail)\n        .eq('status', 'pending')\n        .gt('expires_at', new Date().toISOString())\n\n      if (invitationError) {\n        throw new Error('Error checking invitations: ' + invitationError.message)\n      }\n\n      if (existingInvitations && existingInvitations.length > 0) {\n        setError('There is already a pending invitation for this email')\n        return\n      }\n\n      // Get user's name for the invitation\n      const userName = user.user_metadata?.name || user.email || 'Unknown User'\n\n      // Create invitation with lab name and inviter name\n      const { error: inviteError } = await supabase\n        .from('invitations')\n        .insert({\n          lab_id: labId,"}, {"id": "src/components/InviteMembersModal.tsx_4", "file": "src/components/InviteMembersModal.tsx", "content": ".from('invitations')\n        .insert({\n          lab_id: labId,\n          invited_email: inviteEmail,\n          invited_by: user.id,\n          status: 'pending',\n          lab_name: labName,\n          invited_by_name: userName\n        })\n\n      if (inviteError) throw inviteError\n\n      setSuccess(`Invitation sent to ${email}`)\n      setEmail('')\n      onMemberInvited()\n\n      // Auto-close after success\n      setTimeout(() => {\n        setSuccess('')\n        onClose()\n      }, 2000)\n\n    } catch (err: any) {\n      setError(err.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleClose = () => {\n    if (!loading) {\n      setEmail('')\n      setError('')\n      setSuccess('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return ("}, {"id": "src/components/InviteMembersModal.tsx_5", "file": "src/components/InviteMembersModal.tsx", "content": "setSuccess('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n          {/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={loading}\n            className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300 disabled:opacity-50\"\n          >"}, {"id": "src/components/InviteMembersModal.tsx_6", "file": "src/components/InviteMembersModal.tsx", "content": ">\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"bg-gradient-to-r from-green-500 to-teal-600 w-14 h-14 rounded-xl flex items-center justify-center mb-4\">\n              <UserPlus className=\"w-7 h-7 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Invite Members</h2>\n            <p className=\"text-gray-400\">Invite new members to join \"{labName}\"</p>\n          </div>\n\n          {/* Error message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg text-red-300 text-sm\">\n              {error}\n            </div>\n          )}\n\n          {/* Success message */}"}, {"id": "src/components/InviteMembersModal.tsx_7", "file": "src/components/InviteMembersModal.tsx", "content": "{error}\n            </div>\n          )}\n\n          {/* Success message */}\n          {success && (\n            <div className=\"mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-lg text-green-300 text-sm flex items-center gap-2\">\n              <Check className=\"w-4 h-4\" />\n              {success}\n            </div>\n          )}\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Email field */}\n            <div>\n              <label htmlFor=\"invite-email\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Email Address *\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />"}, {"id": "src/components/InviteMembersModal.tsx_8", "file": "src/components/InviteMembersModal.tsx", "content": "<input\n                  type=\"email\"\n                  id=\"invite-email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full pl-12 pr-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500/50 focus:border-green-500/50 transition-all duration-300\"\n                  placeholder=\"Enter email address\"\n                  required\n                  disabled={loading}\n                />\n              </div>\n              <p className=\"mt-2 text-xs text-gray-500\">\n                The person must already have an account to receive the invitation\n              </p>\n            </div>\n\n            {/* Action buttons */}"}, {"id": "src/components/InviteMembersModal.tsx_9", "file": "src/components/InviteMembersModal.tsx", "content": "</p>\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex gap-4 pt-4\">\n              <button\n                type=\"button\"\n                onClick={handleClose}\n                disabled={loading}\n                className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={loading || !email.trim()}"}, {"id": "src/components/InviteMembersModal.tsx_10", "file": "src/components/InviteMembersModal.tsx", "content": "type=\"submit\"\n                disabled={loading || !email.trim()}\n                className=\"flex-1 bg-gradient-to-r from-green-500 to-teal-600 hover:from-green-600 hover:to-teal-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <UserPlus className=\"w-4 h-4\" />\n                    Send Invitation\n                  </>\n                )}\n              </button>\n            </div>"}, {"id": "src/components/InviteMembersModal.tsx_11", "file": "src/components/InviteMembersModal.tsx", "content": "</>\n                )}\n              </button>\n            </div>\n          </form>\n\n          {/* Info */}\n          <div className=\"mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n            <p className=\"text-blue-300 text-sm\">\n              <strong>Note:</strong> Invitations expire after 7 days. The invited person must have an existing account to accept the invitation.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/JoinLabModal.tsx_0", "file": "src/components/JoinLabModal.tsx", "content": "================================================\nimport React, { useState } from 'react'\nimport { X, UserPlus, Loader2, Check, AlertCircle } from 'lucide-react'\nimport { supabase } from '../lib/supabase'\nimport { useAuth } from '../hooks/useAuth'\n\ninterface JoinLabModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onLabJoined: (labId: string) => void\n}\n\nexport function JoinLabModal({ isOpen, onClose, onLabJoined }: JoinLabModalProps) {\n  const [labId, setLabId] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState('')\n  const { user } = useAuth()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!user || !labId.trim()) return\n\n    setLoading(true)"}, {"id": "src/components/JoinLabModal.tsx_1", "file": "src/components/JoinLabModal.tsx", "content": "e.preventDefault()\n    if (!user || !labId.trim()) return\n\n    setLoading(true)\n    setError('')\n    setSuccess('')\n\n    try {\n      const trimmedLabId = labId.trim()\n\n      // Check if lab exists\n      const { data: labData, error: labError } = await supabase\n        .from('labs')\n        .select('id, name')\n        .eq('id', trimmedLabId)\n        .single()\n\n      if (labError || !labData) {\n        setError('Lab not found. Please check the Lab ID and try again.')\n        return\n      }\n\n      // Check if user is already a member\n      const { data: existingMember, error: memberError } = await supabase\n        .from('lab_members')\n        .select('id')\n        .eq('lab_id', trimmedLabId)\n        .eq('user_id', user.id)\n        .single()"}, {"id": "src/components/JoinLabModal.tsx_2", "file": "src/components/JoinLabModal.tsx", "content": ".eq('lab_id', trimmedLabId)\n        .eq('user_id', user.id)\n        .single()\n\n      if (memberError && memberError.code !== 'PGRST116') {\n        throw memberError\n      }\n\n      if (existingMember) {\n        setError('You are already a member of this lab.')\n        return\n      }\n\n      // Get user's name for the lab member record\n      const { data: userData, error: userError } = await supabase\n        .from('users')\n        .select('name, email')\n        .eq('id', user.id)\n        .single()\n\n      if (userError) throw userError\n\n      const userName = userData?.name || userData?.email || user.email || 'Unknown User'\n\n      // Add user as a member\n      const { error: insertError } = await supabase\n        .from('lab_members')\n        .insert({\n          user_id: user.id,"}, {"id": "src/components/JoinLabModal.tsx_3", "file": "src/components/JoinLabModal.tsx", "content": ".from('lab_members')\n        .insert({\n          user_id: user.id,\n          lab_id: trimmedLabId,\n          role: 'member',\n          member_name: userName\n        })\n\n      if (insertError) throw insertError\n\n      setSuccess(`Successfully joined \"${labData.name}\"!`)\n      setLabId('')\n      \n      // Redirect to the lab page immediately\n      onLabJoined(trimmedLabId)\n      onClose()\n\n    } catch (err: any) {\n      console.error('Error joining lab:', err)\n      setError(err.message || 'Failed to join lab. Please try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleClose = () => {\n    if (!loading) {\n      setLabId('')\n      setError('')\n      setSuccess('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return ("}, {"id": "src/components/JoinLabModal.tsx_4", "file": "src/components/JoinLabModal.tsx", "content": "setSuccess('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n          {/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={loading}\n            className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300 disabled:opacity-50\"\n          >"}, {"id": "src/components/JoinLabModal.tsx_5", "file": "src/components/JoinLabModal.tsx", "content": ">\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"bg-gradient-to-r from-green-500 to-teal-600 w-14 h-14 rounded-xl flex items-center justify-center mb-4\">\n              <UserPlus className=\"w-7 h-7 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Join Lab</h2>\n            <p className=\"text-gray-400\">Enter a Lab ID to join an existing research lab</p>\n          </div>\n\n          {/* Error message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg\">\n              <div className=\"flex items-center gap-2 text-red-300\">\n                <AlertCircle className=\"w-4 h-4\" />"}, {"id": "src/components/JoinLabModal.tsx_6", "file": "src/components/JoinLabModal.tsx", "content": "<AlertCircle className=\"w-4 h-4\" />\n                <span className=\"text-sm\">{error}</span>\n              </div>\n            </div>\n          )}\n\n          {/* Success message */}\n          {success && (\n            <div className=\"mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-lg\">\n              <div className=\"flex items-center gap-2 text-green-300\">\n                <Check className=\"w-4 h-4\" />\n                <span className=\"text-sm\">{success}</span>\n              </div>\n            </div>\n          )}\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Lab ID field */}\n            <div>\n              <label htmlFor=\"lab-id\" className=\"block text-sm font-medium text-gray-300 mb-2\">"}, {"id": "src/components/JoinLabModal.tsx_7", "file": "src/components/JoinLabModal.tsx", "content": "<label htmlFor=\"lab-id\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Lab ID *\n              </label>\n              <input\n                type=\"text\"\n                id=\"lab-id\"\n                value={labId}\n                onChange={(e) => setLabId(e.target.value)}\n                className=\"w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500/50 focus:border-green-500/50 transition-all duration-300 font-mono\"\n                placeholder=\"Enter the Lab ID\"\n                required\n                disabled={loading}\n              />\n              <p className=\"mt-2 text-xs text-gray-500\">"}, {"id": "src/components/JoinLabModal.tsx_8", "file": "src/components/JoinLabModal.tsx", "content": "/>\n              <p className=\"mt-2 text-xs text-gray-500\">\n                Ask a lab admin for the Lab ID to join their research lab\n              </p>\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex gap-4 pt-4\">\n              <button\n                type=\"button\"\n                onClick={handleClose}\n                disabled={loading}\n                className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={loading || !labId.trim()}"}, {"id": "src/components/JoinLabModal.tsx_9", "file": "src/components/JoinLabModal.tsx", "content": "type=\"submit\"\n                disabled={loading || !labId.trim()}\n                className=\"flex-1 bg-gradient-to-r from-green-500 to-teal-600 hover:from-green-600 hover:to-teal-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Joining...\n                  </>\n                ) : (\n                  <>\n                    <UserPlus className=\"w-4 h-4\" />\n                    Join Lab\n                  </>\n                )}\n              </button>\n            </div>\n          </form>"}, {"id": "src/components/JoinLabModal.tsx_10", "file": "src/components/JoinLabModal.tsx", "content": ")}\n              </button>\n            </div>\n          </form>\n\n          {/* Info */}\n          <div className=\"mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n            <p className=\"text-blue-300 text-sm\">\n              <strong>How to get a Lab ID:</strong> Ask a lab administrator to share the Lab ID with you. They can find it by clicking the \"Share ID\" button in their lab dashboard.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/LabDashboard.tsx_0", "file": "src/components/LabDashboard.tsx", "content": "================================================\nError reading file with 'cp1252': 'charmap' codec can't decode byte 0x90 in position 4879: character maps to <undefined>"}, {"id": "src/components/Research.tsx_0", "file": "src/components/Research.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react'\nimport { ArrowLeft } from 'lucide-react'\nimport { SidebarLeft } from './research/SidebarLeft'\nimport { SidebarRight } from './research/SidebarRight'\nimport { ChatWindow } from './research/ChatWindow'\nimport { ToolButtonRow } from './research/ToolButtonRow'\nimport { InputModal } from './research/InputModal'\nimport { ReportModal } from './research/ReportModal'\nimport { usePerplexity } from '../hooks/usePerplexity'\nimport { useResponsiveSidebar } from '../hooks/useResponsiveSidebar'\nimport { useReportGeneration } from '../hooks/useReportGeneration'\nimport { BoltBadge } from './BoltBadge'\n\ninterface ResearchProps {\n  labId: string\n  labName: string\n  onBack: () => void\n}"}, {"id": "src/components/Research.tsx_1", "file": "src/components/Research.tsx", "content": "interface ResearchProps {\n  labId: string\n  labName: string\n  onBack: () => void\n}\n\nexport interface ChatMessage {\n  id: string\n  type: 'user' | 'assistant'\n  content: string\n  timestamp: number\n  toolUsed?: string\n  toolData?: any\n  citations?: string[]\n}\n\nexport interface ToolResult {\n  type: 'drug-generation' | 'amino-sequence' | 'binding-affinity' | 'graph-knowledge' | 'chat'\n  data: any\n  rawResponse?: any\n  citations?: string[]\n}\n\nexport function Research({ labId, labName, onBack }: ResearchProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([])\n  const [currentToolResult, setCurrentToolResult] = useState<ToolResult | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [showModal, setShowModal] = useState<string | null>(null)"}, {"id": "src/components/Research.tsx_2", "file": "src/components/Research.tsx", "content": "const [showModal, setShowModal] = useState<string | null>(null)\n  const [showReportModal, setShowReportModal] = useState(false)\n  \n  const { leftSidebarOpen, rightSidebarOpen, toggleLeftSidebar, toggleRightSidebar } = useResponsiveSidebar()\n  const { sendToPerplexity, isPerplexityLoading } = usePerplexity()\n  const { generateReport, isGenerating, progress } = useReportGeneration()\n\n  // Clear messages when component unmounts (route change)\n  useEffect(() => {\n    return () => {\n      setMessages([])\n      setCurrentToolResult(null)\n    }\n  }, [])\n\n  const handleUserMessage = async (content: string, toolUsed?: string, toolData?: any) => {\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      type: 'user',\n      content,\n      timestamp: Date.now(),\n      toolUsed,"}, {"id": "src/components/Research.tsx_3", "file": "src/components/Research.tsx", "content": "type: 'user',\n      content,\n      timestamp: Date.now(),\n      toolUsed,\n      toolData\n    }\n\n    setMessages(prev => [...prev, userMessage])\n    setIsLoading(true)\n\n    try {\n      // Send to Perplexity with context\n      const context = messages.map(msg => ({\n        role: msg.type === 'user' ? 'user' : 'assistant',\n        content: msg.content\n      }))\n\n      const perplexityResponse = await sendToPerplexity(content, context, toolData)\n      \n      const assistantMessage: ChatMessage = {\n        id: `assistant-${Date.now()}`,\n        type: 'assistant',\n        content: perplexityResponse.output,\n        timestamp: Date.now(),\n        citations: perplexityResponse.citations\n      }\n\n      setMessages(prev => [...prev, assistantMessage])"}, {"id": "src/components/Research.tsx_4", "file": "src/components/Research.tsx", "content": "}\n\n      setMessages(prev => [...prev, assistantMessage])\n\n      // Update right sidebar based on tool used\n      if (toolUsed && toolData) {\n        setCurrentToolResult({\n          type: toolUsed as any,\n          data: toolData,\n          rawResponse: toolData,\n          citations: perplexityResponse.citations\n        })\n      } else {\n        // For regular chat and binding affinity, show citations\n        setCurrentToolResult({\n          type: 'chat',\n          data: { response: perplexityResponse.output },\n          rawResponse: perplexityResponse.output,\n          citations: perplexityResponse.citations\n        })\n      }\n    } catch (error) {\n      console.error('Error processing message:', error)\n      const errorMessage: ChatMessage = {\n        id: `error-${Date.now()}`,"}, {"id": "src/components/Research.tsx_5", "file": "src/components/Research.tsx", "content": "const errorMessage: ChatMessage = {\n        id: `error-${Date.now()}`,\n        type: 'assistant',\n        content: 'Sorry, I encountered an error processing your request. Please try again.',\n        timestamp: Date.now()\n      }\n      setMessages(prev => [...prev, errorMessage])\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleToolAction = (toolType: string) => {\n    setShowModal(toolType)\n  }\n\n  const handleModalSubmit = async (toolType: string, data: any) => {\n    setShowModal(null)\n    setIsLoading(true)\n\n    try {\n      let response\n      let userPrompt = ''\n      let result\n\n      switch (toolType) {\n        case 'drug-generation':\n          userPrompt = `Generate drug compounds for PDB ID: ${data.pdb_id}`\n          try {"}, {"id": "src/components/Research.tsx_6", "file": "src/components/Research.tsx", "content": "userPrompt = `Generate drug compounds for PDB ID: ${data.pdb_id}`\n          try {\n            response = await fetch('https://backmedi.tech/generate-compounds', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ pdb_id: data.pdb_id })\n            })\n            \n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`)\n            }\n            \n            result = await response.json()\n          } catch (fetchError) {\n            console.error('API fetch error:', fetchError)\n            result = {\n              error: 'Backend service unavailable',"}, {"id": "src/components/Research.tsx_7", "file": "src/components/Research.tsx", "content": "result = {\n              error: 'Backend service unavailable',\n              message: 'The drug generation service is currently unavailable. This is a demo showing how the tool would work.',\n              mockData: {\n                compounds: [\n                  { smiles: 'CCO', name: 'Ethanol', score: 0.85 },\n                  { smiles: 'CC(C)O', name: 'Isopropanol', score: 0.72 },\n                  { smiles: 'CCCCO', name: 'Butanol', score: 0.68 }\n                ],\n                pdb_id: data.pdb_id\n              }\n            }\n          }\n          break\n\n        case 'amino-sequence':\n          userPrompt = `Get amino acid sequence for PDB ID: ${data.pdb_id}`\n          try {\n            response = await fetch(`https://backmedi.tech/pdb-sequence?pdb_id=${data.pdb_id}`)"}, {"id": "src/components/Research.tsx_8", "file": "src/components/Research.tsx", "content": "response = await fetch(`https://backmedi.tech/pdb-sequence?pdb_id=${data.pdb_id}`)\n            \n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`)\n            }\n            \n            result = await response.json()\n          } catch (fetchError) {\n            console.error('API fetch error:', fetchError)\n            result = {\n              error: 'Backend service unavailable',\n              message: 'The sequence retrieval service is currently unavailable. This is a demo showing how the tool would work.',\n              mockData: {\n                sequence: 'MKTVRQERLKSIVRILERSKEPVSGAQLAEELSVSRQVIVQDIAYLRSLGYNIVATPRGYVLAGG',\n                pdb_id: data.pdb_id,\n                length: 63\n              }\n            }"}, {"id": "src/components/Research.tsx_9", "file": "src/components/Research.tsx", "content": "pdb_id: data.pdb_id,\n                length: 63\n              }\n            }\n          }\n          break\n\n        case 'binding-affinity':\n          userPrompt = `Predict binding affinity for SMILES: ${data.smile} and target sequence: ${data.target_sequence.substring(0, 50)}...`\n          try {\n            response = await fetch('https://backmedi.tech/predict-binding-affinity', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ \n                smile: data.smile, \n                target_sequence: data.target_sequence \n              })\n            })\n            \n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`)\n            }"}, {"id": "src/components/Research.tsx_10", "file": "src/components/Research.tsx", "content": "throw new Error(`HTTP error! status: ${response.status}`)\n            }\n            \n            result = await response.json()\n          } catch (fetchError) {\n            console.error('API fetch error:', fetchError)\n            result = {\n              error: 'Backend service unavailable',\n              message: 'The binding affinity prediction service is currently unavailable. This is a demo showing how the tool would work.',\n              mockData: {\n                predicted_binding_affinity: 4.958944797515869,\n                confidence: 0.78,\n                smiles: data.smile,\n                target_sequence: data.target_sequence,\n                units: 'pKd'\n              }\n            }\n          }\n          break\n\n        case 'graph-knowledge':"}, {"id": "src/components/Research.tsx_11", "file": "src/components/Research.tsx", "content": "}\n            }\n          }\n          break\n\n        case 'graph-knowledge':\n          userPrompt = `Graph knowledge query: ${data.query}`\n          try {\n            response = await fetch('https://backmedi.tech/text-to-aql', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ query: data.query })\n            })\n            \n            if (!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`)\n            }\n            \n            result = await response.json()\n          } catch (fetchError) {\n            console.error('API fetch error:', fetchError)\n            result = {\n              error: 'Backend service unavailable',"}, {"id": "src/components/Research.tsx_12", "file": "src/components/Research.tsx", "content": "result = {\n              error: 'Backend service unavailable',\n              message: 'The graph knowledge service is currently unavailable. This is a demo showing how the tool would work.',\n              mockData: {\n                aql_query: `FOR doc IN collection FILTER doc.name LIKE \"%${data.query}%\" RETURN doc`,\n                results: [\n                  { name: 'Sample Result 1', type: 'protein', id: 'P001' },\n                  { name: 'Sample Result 2', type: 'compound', id: 'C001' }\n                ],\n                query: data.query\n              }\n            }\n          }\n          break\n\n        default:\n          throw new Error('Unknown tool type')\n      }\n\n      await handleUserMessage(userPrompt, toolType, result)\n    } catch (error) {"}, {"id": "src/components/Research.tsx_13", "file": "src/components/Research.tsx", "content": "}\n\n      await handleUserMessage(userPrompt, toolType, result)\n    } catch (error) {\n      console.error('Tool action error:', error)\n      await handleUserMessage(`Error with ${toolType}: ${error.message}`, toolType, { error: error.message })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleGenerateReport = async (title: string) => {\n    try {\n      await generateReport(messages, labId, title)\n    } catch (error) {\n      console.error('Error generating report:', error)\n      throw error\n    }\n  }\n\n  const isDisabled = isLoading || isPerplexityLoading\n\n  return (\n    <div className=\"h-screen bg-[#0F0F0F] text-white flex flex-col overflow-hidden\">\n      {/* Header */}\n      <div className=\"fixed top-[90px] md:top-[10px] right-8 z-50\">\n        <BoltBadge />"}, {"id": "src/components/Research.tsx_14", "file": "src/components/Research.tsx", "content": "<div className=\"fixed top-[90px] md:top-[10px] right-8 z-50\">\n        <BoltBadge />\n      </div>\n      \n      <header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md flex-shrink-0\">\n        <div className=\"px-6 py-4 flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={onBack}\n              className=\"flex items-center gap-2 text-gray-300 hover:text-white transition-colors duration-300 group\"\n            >\n              <ArrowLeft className=\"w-5 h-5 group-hover:-translate-x-1 transition-transform duration-300\" />\n              Back to Lab\n            </button>\n            <div className=\"h-6 w-px bg-gray-700\" />\n            <div className=\"hidden md:block\">"}, {"id": "src/components/Research.tsx_15", "file": "src/components/Research.tsx", "content": "<div className=\"h-6 w-px bg-gray-700\" />\n            <div className=\"hidden md:block\">\n              <h1 className=\"text-xl font-bold text-white\">Research Assistant</h1>\n              <p className=\"text-sm text-gray-400\">\n                {labName} \u00e2\u20ac\u00a2 AI-powered research tools with Perplexity\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3 md:hidden\">\n            <button\n              onClick={toggleLeftSidebar}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n            >\n              \u00e2\u02dc\u00b0\n            </button>\n            <button\n              onClick={toggleRightSidebar}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\""}, {"id": "src/components/Research.tsx_16", "file": "src/components/Research.tsx", "content": "className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n            >\n              \u00f0\u0178\u201c\u0160\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Left Sidebar */}\n        <SidebarLeft \n          isOpen={leftSidebarOpen}\n          onToggle={toggleLeftSidebar}\n          onTalkToNew={() => {\n            setMessages([])\n            setCurrentToolResult(null)\n          }}\n          onGenerateReport={() => setShowReportModal(true)}\n        />\n\n        {/* Main Chat Area */}\n        <div className=\"flex-1 flex flex-col min-w-0\">\n          <ChatWindow \n            messages={messages}\n            isLoading={isDisabled}"}, {"id": "src/components/Research.tsx_17", "file": "src/components/Research.tsx", "content": "<ChatWindow \n            messages={messages}\n            isLoading={isDisabled}\n            onSendMessage={(content) => handleUserMessage(content)}\n          />\n          \n          <ToolButtonRow \n            onToolAction={handleToolAction}\n            disabled={isDisabled}\n          />\n        </div>\n\n        {/* Right Sidebar */}\n        <SidebarRight \n          isOpen={rightSidebarOpen}\n          onToggle={toggleRightSidebar}\n          toolResult={currentToolResult}\n        />\n      </div>\n\n      {/* Modals */}\n      <InputModal\n        isOpen={showModal === 'drug-generation'}\n        onClose={() => setShowModal(null)}\n        onSubmit={(data) => handleModalSubmit('drug-generation', data)}\n        title=\"Drug Generation\"\n        fields={["}, {"id": "src/components/Research.tsx_18", "file": "src/components/Research.tsx", "content": "title=\"Drug Generation\"\n        fields={[\n          { name: 'pdb_id', label: 'PDB ID', type: 'text', placeholder: 'e.g., 1HTM', required: true }\n        ]}\n      />\n\n      <InputModal\n        isOpen={showModal === 'amino-sequence'}\n        onClose={() => setShowModal(null)}\n        onSubmit={(data) => handleModalSubmit('amino-sequence', data)}\n        title=\"Amino Acid Sequence\"\n        fields={[\n          { name: 'pdb_id', label: 'PDB ID', type: 'text', placeholder: 'e.g., 1HTM', required: true }\n        ]}\n      />\n\n      <InputModal\n        isOpen={showModal === 'binding-affinity'}\n        onClose={() => setShowModal(null)}\n        onSubmit={(data) => handleModalSubmit('binding-affinity', data)}\n        title=\"Binding Affinity Prediction\"\n        fields={["}, {"id": "src/components/Research.tsx_19", "file": "src/components/Research.tsx", "content": "title=\"Binding Affinity Prediction\"\n        fields={[\n          { name: 'smile', label: 'SMILES', type: 'text', placeholder: 'e.g., CCO', required: true, className: 'overflow-x-auto' },\n          { name: 'target_sequence', label: 'Target Sequence', type: 'textarea', placeholder: 'e.g., MKVLYNLV...', required: true }\n        ]}\n      />\n\n      <InputModal\n        isOpen={showModal === 'graph-knowledge'}\n        onClose={() => setShowModal(null)}\n        onSubmit={(data) => handleModalSubmit('graph-knowledge', data)}\n        title=\"Graph Knowledge (AQL)\"\n        fields={[\n          { name: 'query', label: 'Query', type: 'textarea', placeholder: 'Enter your AQL query...', required: true }\n        ]}\n      />\n\n      <ReportModal\n        isOpen={showReportModal}"}, {"id": "src/components/Research.tsx_20", "file": "src/components/Research.tsx", "content": "]}\n      />\n\n      <ReportModal\n        isOpen={showReportModal}\n        onClose={() => setShowReportModal(false)}\n        onGenerate={handleGenerateReport}\n        isGenerating={isGenerating}\n        progress={progress}\n      />\n    </div>\n  )\n}"}, {"id": "src/components/StructureStudio.tsx_0", "file": "src/components/StructureStudio.tsx", "content": "================================================\nimport React, { useState, useRef, useEffect, useCallback } from 'react'\nimport { ArrowLeft, Search, Loader2, Eye, EyeOff, Palette, Ruler, Zap, RotateCcw, Download, Info, AlertTriangle, Target, ZoomIn, ZoomOut, X } from 'lucide-react'\nimport { BoltBadge } from './BoltBadge'\n\ninterface StructureStudioProps {\n  labId: string\n  labName: string\n  onBack: () => void\n}\n\ndeclare global {\n  interface Window {\n    $3Dmol: any\n  }\n}\n\nexport function StructureStudio({ labId, labName, onBack }: StructureStudioProps) {\n  const viewerRef = useRef<HTMLDivElement>(null)\n  const [viewer, setViewer] = useState<any>(null)\n  const [pdbId, setPdbId] = useState('')\n  const [smilesString, setSmilesString] = useState('')"}, {"id": "src/components/StructureStudio.tsx_1", "file": "src/components/StructureStudio.tsx", "content": "const [pdbId, setPdbId] = useState('')\n  const [smilesString, setSmilesString] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [proteinLoaded, setProteinLoaded] = useState(false)\n  const [compoundLoaded, setCompoundLoaded] = useState(false)\n  const [measurementMode, setMeasurementMode] = useState<'off' | 'protein' | 'compound' | 'both'>('off')\n  const [selectedAtoms, setSelectedAtoms] = useState<any[]>([])\n  const [distances, setDistances] = useState<string[]>([])\n  const [showBonds, setShowBonds] = useState(true)\n  const [colorScheme, setColorScheme] = useState('chain')\n  const [showHBonds, setShowHBonds] = useState(false)\n  const [ligandStyle, setLigandStyle] = useState('stick')"}, {"id": "src/components/StructureStudio.tsx_2", "file": "src/components/StructureStudio.tsx", "content": "const [ligandStyle, setLigandStyle] = useState('stick')\n  const [proteinModel, setProteinModel] = useState<any>(null)\n  const [compoundModel, setCompoundModel] = useState<any>(null)\n  const [firstAtomType, setFirstAtomType] = useState<'protein' | 'compound' | null>(null)\n\n  useEffect(() => {\n    // Load 3Dmol.js script\n    const script = document.createElement('script')\n    script.src = 'https://3dmol.csb.pitt.edu/build/3Dmol-min.js'\n    script.onload = initializeViewer\n    document.head.appendChild(script)\n\n    return () => {\n      if (document.head.contains(script)) {\n        document.head.removeChild(script)\n      }\n    }\n  }, [])\n\n  // Effect to setup measurement mode when it changes\n  useEffect(() => {\n    if (viewer && measurementMode !== 'off') {\n      setupMeasurementMode()"}, {"id": "src/components/StructureStudio.tsx_3", "file": "src/components/StructureStudio.tsx", "content": "useEffect(() => {\n    if (viewer && measurementMode !== 'off') {\n      setupMeasurementMode()\n    }\n  }, [measurementMode, viewer, proteinModel, compoundModel])\n\n  // Effect to update styling when measurement mode or first atom type changes\n  useEffect(() => {\n    if (viewer) {\n      if (proteinModel) {\n        applyProteinStyling(proteinModel)\n      }\n      if (compoundModel) {\n        applyLigandStyling(compoundModel)\n      }\n    }\n  }, [measurementMode, firstAtomType, viewer, proteinModel, compoundModel, colorScheme, showBonds, ligandStyle])\n\n  // Effect to handle hydrogen bonds display\n  useEffect(() => {\n    if (viewer) {\n      if (showHBonds && proteinModel && compoundModel) {\n        detectHydrogenBonds()\n      } else {\n        clearHydrogenBonds()\n      }\n    }"}, {"id": "src/components/StructureStudio.tsx_4", "file": "src/components/StructureStudio.tsx", "content": "detectHydrogenBonds()\n      } else {\n        clearHydrogenBonds()\n      }\n    }\n  }, [showHBonds, proteinModel, compoundModel, viewer])\n\n  const initializeViewer = () => {\n    if (viewerRef.current && window.$3Dmol) {\n      const config = { backgroundColor: '#1a1a1a' }\n      const newViewer = window.$3Dmol.createViewer(viewerRef.current, config)\n      setViewer(newViewer)\n    }\n  }\n\n  const fetchProteinStructure = async (pdbIdInput: string) => {\n    if (!viewer || !pdbIdInput.trim()) return\n\n    setLoading(true)\n    setError('')\n\n    try {\n      const response = await fetch(`https://files.rcsb.org/download/${pdbIdInput.toUpperCase()}.pdb`)\n      \n      if (!response.ok) {\n        throw new Error(`PDB ID ${pdbIdInput} not found`)\n      }\n\n      const pdbData = await response.text()"}, {"id": "src/components/StructureStudio.tsx_5", "file": "src/components/StructureStudio.tsx", "content": "}\n\n      const pdbData = await response.text()\n      \n      // Clear existing protein model\n      if (proteinModel) {\n        viewer.removeModel(proteinModel)\n      }\n      \n      // Add protein model\n      const model = viewer.addModel(pdbData, 'pdb')\n      setProteinModel(model)\n      \n      // Style the protein\n      applyProteinStyling(model)\n      \n      // Auto-zoom to fit both structures\n      autoZoomToFit()\n      \n      setProteinLoaded(true)\n      \n    } catch (err: any) {\n      setError(`Failed to load protein: ${err.message}`)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchCompoundStructure = async (smiles: string) => {\n    if (!viewer || !smiles.trim()) return\n\n    setLoading(true)\n    setError('')\n\n    try {"}, {"id": "src/components/StructureStudio.tsx_6", "file": "src/components/StructureStudio.tsx", "content": "if (!viewer || !smiles.trim()) return\n\n    setLoading(true)\n    setError('')\n\n    try {\n      // Try NIH Cactus first for SMILES to SDF conversion\n      let sdfData = ''\n      \n      try {\n        const cactusResponse = await fetch(\n          `https://cactus.nci.nih.gov/chemical/structure/${encodeURIComponent(smiles)}/sdf`\n        )\n        \n        if (cactusResponse.ok) {\n          sdfData = await cactusResponse.text()\n        }\n      } catch (cactusError) {\n        console.warn('Cactus API failed, trying PubChem...')\n      }\n\n      // Fallback to PubChem if Cactus fails\n      if (!sdfData) {\n        try {\n          // First get CID from SMILES\n          const cidResponse = await fetch("}, {"id": "src/components/StructureStudio.tsx_7", "file": "src/components/StructureStudio.tsx", "content": "try {\n          // First get CID from SMILES\n          const cidResponse = await fetch(\n            `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/${encodeURIComponent(smiles)}/cids/JSON`\n          )\n          \n          if (cidResponse.ok) {\n            const cidData = await cidResponse.json()\n            const cid = cidData.IdentifierList.CID[0]\n            \n            // Then get SDF from CID\n            const sdfResponse = await fetch(\n              `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/${cid}/SDF`\n            )\n            \n            if (sdfResponse.ok) {\n              sdfData = await sdfResponse.text()\n            }\n          }\n        } catch (pubchemError) {\n          throw new Error('Unable to convert SMILES to 3D structure')\n        }"}, {"id": "src/components/StructureStudio.tsx_8", "file": "src/components/StructureStudio.tsx", "content": "throw new Error('Unable to convert SMILES to 3D structure')\n        }\n      }\n\n      if (!sdfData) {\n        throw new Error('No structure data received')\n      }\n\n      // Remove existing compound model\n      if (compoundModel) {\n        viewer.removeModel(compoundModel)\n      }\n\n      // Add compound model\n      const model = viewer.addModel(sdfData, 'sdf')\n      setCompoundModel(model)\n      \n      // Style the compound\n      applyLigandStyling(model)\n\n      // Position compound away from protein if protein is loaded\n      if (proteinLoaded) {\n        const atoms = model.selectedAtoms({})\n        atoms.forEach((atom: any) => {\n          atom.x += 20 // Offset compound position\n        })\n      }\n\n      // Auto-zoom to fit both structures\n      autoZoomToFit()"}, {"id": "src/components/StructureStudio.tsx_9", "file": "src/components/StructureStudio.tsx", "content": "})\n      }\n\n      // Auto-zoom to fit both structures\n      autoZoomToFit()\n      \n      setCompoundLoaded(true)\n      \n    } catch (err: any) {\n      setError(`Failed to load compound: ${err.message}`)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const getOpacityForMeasurementMode = (isProtein: boolean) => {\n    if (measurementMode === 'off') return 1.0\n    \n    if (measurementMode === 'protein') {\n      return isProtein ? 1.0 : 0.1\n    } else if (measurementMode === 'compound') {\n      return isProtein ? 0.1 : 1.0\n    } else if (measurementMode === 'both') {\n      // In 'both' mode, check if we have a first atom selected\n      if (firstAtomType === null) {\n        return 1.0 // Both visible until first selection\n      } else if (firstAtomType === 'protein') {"}, {"id": "src/components/StructureStudio.tsx_10", "file": "src/components/StructureStudio.tsx", "content": "} else if (firstAtomType === 'protein') {\n        return isProtein ? 0.1 : 1.0 // Dim protein, keep compound visible\n      } else {\n        return isProtein ? 1.0 : 0.1 // Dim compound, keep protein visible\n      }\n    }\n    \n    return 1.0\n  }\n\n  const applyProteinStyling = (model: any) => {\n    if (!model || !viewer) return\n    \n    // Clear existing styles\n    model.setStyle({}, {})\n    \n    const opacity = getOpacityForMeasurementMode(true)\n    \n    // Apply base styling based on color scheme\n    const cartoonStyle: any = { \n      colorscheme: colorScheme,\n      opacity: opacity\n    }\n\n    // Always apply cartoon representation\n    model.setStyle({}, { cartoon: cartoonStyle })\n\n    // Add bonds for heteroatoms if enabled\n    if (showBonds) {"}, {"id": "src/components/StructureStudio.tsx_11", "file": "src/components/StructureStudio.tsx", "content": "// Add bonds for heteroatoms if enabled\n    if (showBonds) {\n      model.setStyle({ hetflag: true }, { \n        cartoon: cartoonStyle,\n        stick: { colorscheme: 'Jmol', radius: 0.3, opacity: opacity } \n      })\n    }\n\n    // Show atoms as small spheres if in measurement mode for protein atoms\n    if (measurementMode !== 'off' && (measurementMode === 'protein' || measurementMode === 'both')) {\n      model.setStyle({}, { \n        cartoon: cartoonStyle,\n        sphere: { \n          colorscheme: colorScheme, \n          scale: 0.2,\n          opacity: opacity\n        }\n      })\n      \n      // Also apply to heteroatoms if bonds are shown\n      if (showBonds) {\n        model.setStyle({ hetflag: true }, { \n          cartoon: cartoonStyle,"}, {"id": "src/components/StructureStudio.tsx_12", "file": "src/components/StructureStudio.tsx", "content": "model.setStyle({ hetflag: true }, { \n          cartoon: cartoonStyle,\n          stick: { colorscheme: 'Jmol', radius: 0.3, opacity: opacity },\n          sphere: { \n            colorscheme: 'Jmol', \n            scale: 0.2,\n            opacity: opacity\n          }\n        })\n      }\n    }\n\n    viewer.render()\n  }\n\n  const applyLigandStyling = (model: any) => {\n    if (!model || !viewer) return\n    \n    // Clear existing styles\n    model.setStyle({}, {})\n    \n    const opacity = getOpacityForMeasurementMode(false)\n    \n    // Apply base ligand style\n    if (ligandStyle === 'stick') {\n      model.setStyle({}, {\n        stick: { colorscheme: 'Jmol', radius: 0.2, opacity: opacity }\n      })\n    } else if (ligandStyle === 'sphere') {\n      model.setStyle({}, {"}, {"id": "src/components/StructureStudio.tsx_13", "file": "src/components/StructureStudio.tsx", "content": "})\n    } else if (ligandStyle === 'sphere') {\n      model.setStyle({}, {\n        sphere: { colorscheme: 'Jmol', scale: 0.3, opacity: opacity }\n      })\n    } else if (ligandStyle === 'ball-stick') {\n      model.setStyle({}, {\n        stick: { colorscheme: 'Jmol', radius: 0.2, opacity: opacity },\n        sphere: { colorscheme: 'Jmol', scale: 0.25, opacity: opacity }\n      })\n    }\n\n    // Show atoms as additional spheres if in measurement mode for compound atoms\n    if (measurementMode !== 'off' && (measurementMode === 'compound' || measurementMode === 'both')) {\n      if (ligandStyle === 'stick') {\n        model.setStyle({}, {\n          stick: { colorscheme: 'Jmol', radius: 0.2, opacity: opacity },\n          sphere: { \n            colorscheme: 'Jmol', \n            scale: 0.2,"}, {"id": "src/components/StructureStudio.tsx_14", "file": "src/components/StructureStudio.tsx", "content": "sphere: { \n            colorscheme: 'Jmol', \n            scale: 0.2,\n            opacity: opacity\n          }\n        })\n      } else if (ligandStyle === 'sphere') {\n        // For sphere style, just make them more visible\n        model.setStyle({}, {\n          sphere: { \n            colorscheme: 'Jmol', \n            scale: 0.35,\n            opacity: opacity\n          }\n        })\n      } else if (ligandStyle === 'ball-stick') {\n        // Ball-stick already shows atoms, just enhance them\n        model.setStyle({}, {\n          stick: { colorscheme: 'Jmol', radius: 0.2, opacity: opacity },\n          sphere: { \n            colorscheme: 'Jmol', \n            scale: 0.3,\n            opacity: opacity\n          }\n        })\n      }\n    }\n\n    viewer.render()\n  }"}, {"id": "src/components/StructureStudio.tsx_15", "file": "src/components/StructureStudio.tsx", "content": "opacity: opacity\n          }\n        })\n      }\n    }\n\n    viewer.render()\n  }\n\n  const autoZoomToFit = () => {\n    if (viewer) {\n      setTimeout(() => {\n        viewer.zoomTo()\n        viewer.render()\n      }, 100)\n    }\n  }\n\n  const zoomIn = () => {\n    if (viewer) {\n      viewer.zoom(1.2)\n      viewer.render()\n    }\n  }\n\n  const zoomOut = () => {\n    if (viewer) {\n      viewer.zoom(0.8)\n      viewer.render()\n    }\n  }\n\n  const isAtomFromProtein = (atom: any) => {\n    // Check if atom belongs to protein model\n    if (!proteinModel) return false\n    const proteinAtoms = proteinModel.selectedAtoms({})\n    return proteinAtoms.some((pAtom: any) => \n      Math.abs(pAtom.x - atom.x) < 0.01 && \n      Math.abs(pAtom.y - atom.y) < 0.01 && \n      Math.abs(pAtom.z - atom.z) < 0.01"}, {"id": "src/components/StructureStudio.tsx_16", "file": "src/components/StructureStudio.tsx", "content": "Math.abs(pAtom.y - atom.y) < 0.01 && \n      Math.abs(pAtom.z - atom.z) < 0.01\n    )\n  }\n\n  const isAtomClickable = (atom: any) => {\n    const isProteinAtom = isAtomFromProtein(atom)\n    \n    if (measurementMode === 'protein') {\n      return isProteinAtom\n    } else if (measurementMode === 'compound') {\n      return !isProteinAtom\n    } else if (measurementMode === 'both') {\n      if (firstAtomType === null) {\n        return true // Any atom can be first\n      } else if (firstAtomType === 'protein') {\n        return !isProteinAtom // Only compound atoms clickable\n      } else {\n        return isProteinAtom // Only protein atoms clickable\n      }\n    }\n    \n    return false\n  }\n\n  // Use useCallback to create a stable reference for the atom click handler"}, {"id": "src/components/StructureStudio.tsx_17", "file": "src/components/StructureStudio.tsx", "content": "return false\n  }\n\n  // Use useCallback to create a stable reference for the atom click handler\n  const handleAtomClick = useCallback((atom: any) => {\n    console.log('Atom clicked:', atom, 'Clickable:', isAtomClickable(atom))\n    \n    if (!isAtomClickable(atom)) {\n      return // Ignore clicks on non-clickable atoms\n    }\n\n    setSelectedAtoms(currentSelected => {\n      if (currentSelected.length < 2) {\n        const newSelected = [...currentSelected, atom]\n        \n        // Determine atom type for first selection in 'both' mode\n        if (measurementMode === 'both' && currentSelected.length === 0) {\n          const isProteinAtom = isAtomFromProtein(atom)\n          setFirstAtomType(isProteinAtom ? 'protein' : 'compound')\n        }"}, {"id": "src/components/StructureStudio.tsx_18", "file": "src/components/StructureStudio.tsx", "content": "setFirstAtomType(isProteinAtom ? 'protein' : 'compound')\n        }\n        \n        // Highlight selected atom with a larger, more visible sphere\n        viewer.addSphere({\n          center: { x: atom.x, y: atom.y, z: atom.z },\n          radius: 2.0,\n          color: 'yellow',\n          alpha: 0.9\n        })\n        \n        if (newSelected.length === 2) {\n          // Calculate distance\n          const dist = calculateDistance(newSelected[0], newSelected[1])\n          const distanceText = `${dist.toFixed(2)} \u00c3\u2026`\n          setDistances(prev => [...prev, distanceText])\n          \n          // Add distance label with better visibility\n          const midpoint = {\n            x: (newSelected[0].x + newSelected[1].x) / 2,\n            y: (newSelected[0].y + newSelected[1].y) / 2,"}, {"id": "src/components/StructureStudio.tsx_19", "file": "src/components/StructureStudio.tsx", "content": "y: (newSelected[0].y + newSelected[1].y) / 2,\n            z: (newSelected[0].z + newSelected[1].z) / 2\n          }\n          \n          viewer.addLabel(distanceText, {\n            position: midpoint,\n            backgroundColor: 'rgba(255, 255, 0, 0.9)',\n            fontColor: 'black',\n            fontSize: 16,\n            borderThickness: 2,\n            borderColor: 'black'\n          })\n          \n          // Draw line between atoms\n          viewer.addCylinder({\n            start: { x: newSelected[0].x, y: newSelected[0].y, z: newSelected[0].z },\n            end: { x: newSelected[1].x, y: newSelected[1].y, z: newSelected[1].z },\n            radius: 0.2,\n            color: 'yellow',\n            alpha: 0.9\n          })\n          \n          viewer.render()"}, {"id": "src/components/StructureStudio.tsx_20", "file": "src/components/StructureStudio.tsx", "content": "alpha: 0.9\n          })\n          \n          viewer.render()\n          \n          // Reset selection for next measurement\n          setFirstAtomType(null)\n          return []\n        }\n        \n        viewer.render()\n        return newSelected\n      }\n      return currentSelected\n    })\n  }, [viewer, measurementMode, firstAtomType, isAtomClickable])\n\n  const setupMeasurementMode = useCallback(() => {\n    if (!viewer) return\n    \n    console.log('Setting up measurement mode:', measurementMode)\n    \n    // Clear any existing click handlers\n    viewer.setClickable({}, false)\n    \n    if (measurementMode !== 'off') {\n      // Enable clicking on all atoms first\n      viewer.setClickable({}, true, handleAtomClick)\n      \n      console.log('Measurement mode setup complete')\n    }"}, {"id": "src/components/StructureStudio.tsx_21", "file": "src/components/StructureStudio.tsx", "content": "console.log('Measurement mode setup complete')\n    }\n  }, [viewer, measurementMode, handleAtomClick])\n\n  const setMeasurementModeAndUpdate = (mode: 'off' | 'protein' | 'compound' | 'both') => {\n    console.log('Changing measurement mode to:', mode)\n    setMeasurementMode(mode)\n    setSelectedAtoms([])\n    setFirstAtomType(null)\n    \n    if (mode === 'off') {\n      // Disable click selection\n      if (viewer) {\n        viewer.setClickable({}, false)\n        // Clear all measurement visualizations when exiting measurement mode\n        viewer.removeAllShapes()\n        viewer.removeAllLabels()\n        \n        // Re-render the models with normal opacity and styling\n        if (proteinModel) {\n          applyProteinStyling(proteinModel)\n        }\n        if (compoundModel) {"}, {"id": "src/components/StructureStudio.tsx_22", "file": "src/components/StructureStudio.tsx", "content": "applyProteinStyling(proteinModel)\n        }\n        if (compoundModel) {\n          applyLigandStyling(compoundModel)\n        }\n        \n        viewer.render()\n      }\n      setDistances([])\n    }\n  }\n\n  const clearSelectedAtoms = () => {\n    setSelectedAtoms([])\n    setFirstAtomType(null)\n    \n    if (viewer) {\n      // Clear all measurement visualizations\n      viewer.removeAllShapes()\n      viewer.removeAllLabels()\n      \n      // Re-render the models with normal opacity\n      if (proteinModel) {\n        applyProteinStyling(proteinModel)\n      }\n      if (compoundModel) {\n        applyLigandStyling(compoundModel)\n      }\n      \n      viewer.render()\n    }\n    setDistances([])\n  }\n\n  const calculateDistance = (atom1: any, atom2: any) => {\n    const dx = atom1.x - atom2.x"}, {"id": "src/components/StructureStudio.tsx_23", "file": "src/components/StructureStudio.tsx", "content": "}\n\n  const calculateDistance = (atom1: any, atom2: any) => {\n    const dx = atom1.x - atom2.x\n    const dy = atom1.y - atom2.y\n    const dz = atom1.z - atom2.z\n    return Math.sqrt(dx * dx + dy * dy + dz * dz)\n  }\n\n  const toggleBonds = () => {\n    setShowBonds(!showBonds)\n  }\n\n  const changeColorScheme = (scheme: string) => {\n    setColorScheme(scheme)\n  }\n\n  const changeLigandStyle = (style: string) => {\n    setLigandStyle(style)\n  }\n\n  const detectHydrogenBonds = () => {\n    if (!viewer || !proteinModel || !compoundModel) return\n\n    // Enhanced hydrogen bond detection\n    const proteinAtoms = proteinModel.selectedAtoms({})\n    const compoundAtoms = compoundModel.selectedAtoms({})\n    \n    proteinAtoms.forEach((pAtom: any) => {\n      if (pAtom.elem === 'N' || pAtom.elem === 'O') {"}, {"id": "src/components/StructureStudio.tsx_24", "file": "src/components/StructureStudio.tsx", "content": "proteinAtoms.forEach((pAtom: any) => {\n      if (pAtom.elem === 'N' || pAtom.elem === 'O') {\n        compoundAtoms.forEach((cAtom: any) => {\n          if (cAtom.elem === 'N' || cAtom.elem === 'O') {\n            const dist = calculateDistance(pAtom, cAtom)\n            if (dist >= 2.5 && dist <= 3.5) { // Optimal H-bond distance range\n              viewer.addCylinder({\n                start: { x: pAtom.x, y: pAtom.y, z: pAtom.z },\n                end: { x: cAtom.x, y: cAtom.y, z: cAtom.z },\n                radius: 0.1,\n                color: 'cyan',\n                alpha: 0.8,\n                dashed: true\n              })\n              \n              // Add H-bond label\n              viewer.addLabel(`H-Bond ${dist.toFixed(1)}\u00c3\u2026`, {\n                position: {"}, {"id": "src/components/StructureStudio.tsx_25", "file": "src/components/StructureStudio.tsx", "content": "viewer.addLabel(`H-Bond ${dist.toFixed(1)}\u00c3\u2026`, {\n                position: {\n                  x: (pAtom.x + cAtom.x) / 2,\n                  y: (pAtom.y + cAtom.y) / 2,\n                  z: (pAtom.z + cAtom.z) / 2\n                },\n                backgroundColor: 'cyan',\n                fontColor: 'white',\n                fontSize: 10\n              })\n            }\n          }\n        })\n      }\n    })\n    viewer.render()\n  }\n\n  const clearHydrogenBonds = () => {\n    if (!viewer) return\n    \n    // Clear all shapes and labels (this removes H-bonds, measurements, etc.)\n    viewer.removeAllShapes()\n    viewer.removeAllLabels()\n    \n    // Re-render the models\n    if (proteinModel) {\n      applyProteinStyling(proteinModel)\n    }\n    if (compoundModel) {"}, {"id": "src/components/StructureStudio.tsx_26", "file": "src/components/StructureStudio.tsx", "content": "if (proteinModel) {\n      applyProteinStyling(proteinModel)\n    }\n    if (compoundModel) {\n      applyLigandStyling(compoundModel)\n    }\n    \n    viewer.render()\n  }\n\n  const resetView = () => {\n    if (viewer) {\n      autoZoomToFit()\n    }\n  }\n\n  const clearAll = () => {\n    if (viewer) {\n      viewer.clear()\n      viewer.render()\n    }\n    setProteinLoaded(false)\n    setCompoundLoaded(false)\n    setProteinModel(null)\n    setCompoundModel(null)\n    setSelectedAtoms([])\n    setDistances([])\n    setPdbId('')\n    setSmilesString('')\n    setError('')\n    setMeasurementMode('off')\n    setShowHBonds(false)\n    setFirstAtomType(null)\n  }\n\n  const exportImage = () => {\n    if (viewer) {\n      const imgData = viewer.pngURI()\n      const link = document.createElement('a')"}, {"id": "src/components/StructureStudio.tsx_27", "file": "src/components/StructureStudio.tsx", "content": "const imgData = viewer.pngURI()\n      const link = document.createElement('a')\n      link.download = `${labName}-structure.png`\n      link.href = imgData\n      link.click()\n    }\n  }\n\n  const getMeasurementModeDescription = () => {\n    switch (measurementMode) {\n      case 'protein':\n        return 'Measuring distances between protein atoms only'\n      case 'compound':\n        return 'Measuring distances between compound atoms only'\n      case 'both':\n        if (firstAtomType === null) {\n          return 'Click any atom to start measuring between protein and compound'\n        } else if (firstAtomType === 'protein') {\n          return 'Protein atom selected. Click a compound atom to measure distance.'\n        } else {"}, {"id": "src/components/StructureStudio.tsx_28", "file": "src/components/StructureStudio.tsx", "content": "} else {\n          return 'Compound atom selected. Click a protein atom to measure distance.'\n        }\n      default:\n        return ''\n    }\n  }\n\n  return (\n    <div className=\"h-screen bg-[#0F0F0F] text-white flex flex-col overflow-hidden\">\n      <div className=\"fixed top-[90px] right-8 z-50\">\n            <BoltBadge />\n      </div>\n\n      {/* Header */}\n      <header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md flex-shrink-0\">\n        <div className=\"px-6 py-4 flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={onBack}\n              className=\"flex items-center gap-2 text-gray-300 hover:text-white transition-colors duration-300 group\"\n            >"}, {"id": "src/components/StructureStudio.tsx_29", "file": "src/components/StructureStudio.tsx", "content": ">\n              <ArrowLeft className=\"w-5 h-5 group-hover:-translate-x-1 transition-transform duration-300\" />\n              Back to Lab\n            </button>\n            <div className=\"h-6 w-px bg-gray-700\" />\n            <div className=\"hidden md:block\">\n              <h1 className=\"text-xl font-bold text-white\">Structure Studio</h1>\n              <p className=\"text-sm text-gray-400\">\n                Interactive 3D molecular visualization & analysis\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <button\n              onClick={zoomOut}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Zoom Out\"\n            >"}, {"id": "src/components/StructureStudio.tsx_30", "file": "src/components/StructureStudio.tsx", "content": "title=\"Zoom Out\"\n            >\n              <ZoomOut className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={zoomIn}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Zoom In\"\n            >\n              <ZoomIn className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={resetView}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Reset View\"\n            >\n              <RotateCcw className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={exportImage}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\""}, {"id": "src/components/StructureStudio.tsx_31", "file": "src/components/StructureStudio.tsx", "content": "className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Export Image\"\n            >\n              <Download className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={clearAll}\n              className=\"hidden md:block px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors duration-300\"\n            >\n              Clear All\n            </button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Control Panel */}\n        <div className=\"w-80 bg-gray-900 border-r border-gray-800 flex-shrink-0 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Protein Input */}\n            <div>"}, {"id": "src/components/StructureStudio.tsx_32", "file": "src/components/StructureStudio.tsx", "content": "<div className=\"p-6 space-y-6\">\n            {/* Protein Input */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Search className=\"w-5 h-5 text-blue-400\" />\n                Load Protein\n              </h3>\n              <div className=\"space-y-3\">\n                <input\n                  type=\"text\"\n                  value={pdbId}\n                  onChange={(e) => setPdbId(e.target.value.toUpperCase())}\n                  placeholder=\"Enter PDB ID (e.g., 1HTM)\"\n                  className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n                <button"}, {"id": "src/components/StructureStudio.tsx_33", "file": "src/components/StructureStudio.tsx", "content": "/>\n                <button\n                  onClick={() => fetchProteinStructure(pdbId)}\n                  disabled={loading || !pdbId.trim()}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white py-3 rounded-lg font-medium transition-colors duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n                >\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      Loading...\n                    </>\n                  ) : (\n                    'Load Protein'\n                  )}\n                </button>\n                {proteinLoaded && ("}, {"id": "src/components/StructureStudio.tsx_34", "file": "src/components/StructureStudio.tsx", "content": ")}\n                </button>\n                {proteinLoaded && (\n                  <div className=\"flex items-center gap-2 text-green-400 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    Protein loaded\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Compound Input */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                Load Compound\n              </h3>\n              <div className=\"space-y-3\">\n                <textarea\n                  value={smilesString}\n                  onChange={(e) => setSmilesString(e.target.value)}"}, {"id": "src/components/StructureStudio.tsx_35", "file": "src/components/StructureStudio.tsx", "content": "onChange={(e) => setSmilesString(e.target.value)}\n                  placeholder=\"Enter SMILES string (e.g., CCO for ethanol)\"\n                  className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 resize-none\"\n                  rows={3}\n                />\n                <button\n                  onClick={() => fetchCompoundStructure(smilesString)}\n                  disabled={loading || !smilesString.trim()}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white py-3 rounded-lg font-medium transition-colors duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\""}, {"id": "src/components/StructureStudio.tsx_36", "file": "src/components/StructureStudio.tsx", "content": ">\n                  {loading ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      Loading...\n                    </>\n                  ) : (\n                    'Load Compound'\n                  )}\n                </button>\n                {compoundLoaded && (\n                  <div className=\"flex items-center gap-2 text-green-400 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    Compound loaded\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Visualization Controls */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">"}, {"id": "src/components/StructureStudio.tsx_37", "file": "src/components/StructureStudio.tsx", "content": "<div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Palette className=\"w-5 h-5 text-green-400\" />\n                Visualization\n              </h3>\n              <div className=\"space-y-4\">\n                {/* Protein Color Scheme */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Protein Color Scheme\n                  </label>\n                  <select\n                    value={colorScheme}\n                    onChange={(e) => changeColorScheme(e.target.value)}\n                    className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-green-500\"\n                  >"}, {"id": "src/components/StructureStudio.tsx_38", "file": "src/components/StructureStudio.tsx", "content": ">\n                    <option value=\"chain\">By Chain</option>\n                    <option value=\"spectrum\">Spectrum</option>\n                    <option value=\"residue\">By Residue</option>\n                    <option value=\"secondary\">Secondary Structure</option>\n                  </select>\n                </div>\n\n                {/* Ligand Style */}\n                {compoundLoaded && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Ligand Style\n                    </label>\n                    <select\n                      value={ligandStyle}\n                      onChange={(e) => changeLigandStyle(e.target.value)}"}, {"id": "src/components/StructureStudio.tsx_39", "file": "src/components/StructureStudio.tsx", "content": "onChange={(e) => changeLigandStyle(e.target.value)}\n                      className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                    >\n                      <option value=\"stick\">Stick</option>\n                      <option value=\"sphere\">Sphere</option>\n                      <option value=\"ball-stick\">Ball & Stick</option>\n                    </select>\n                  </div>\n                )}\n\n                {/* Toggle Controls */}\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={toggleBonds}\n                    disabled={!proteinLoaded}"}, {"id": "src/components/StructureStudio.tsx_40", "file": "src/components/StructureStudio.tsx", "content": "onClick={toggleBonds}\n                    disabled={!proteinLoaded}\n                    className={`w-full flex items-center justify-between px-4 py-3 rounded-lg transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      showBonds \n                        ? 'bg-green-600 text-white' \n                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                    }`}\n                  >\n                    <span>Show Bonds</span>\n                    {showBonds ? <Eye className=\"w-4 h-4\" /> : <EyeOff className=\"w-4 h-4\" />}\n                  </button>\n\n                  <button\n                    onClick={() => setShowHBonds(!showHBonds)}\n                    disabled={!proteinLoaded || !compoundLoaded}"}, {"id": "src/components/StructureStudio.tsx_41", "file": "src/components/StructureStudio.tsx", "content": "disabled={!proteinLoaded || !compoundLoaded}\n                    className={`w-full flex items-center justify-between px-4 py-3 rounded-lg transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      showHBonds \n                        ? 'bg-cyan-600 text-white' \n                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                    }`}\n                  >\n                    <span>H-Bonds</span>\n                    <Zap className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* Measurement Tools */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">"}, {"id": "src/components/StructureStudio.tsx_42", "file": "src/components/StructureStudio.tsx", "content": "<div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Ruler className=\"w-5 h-5 text-orange-400\" />\n                Distance Measurement\n              </h3>\n              <div className=\"space-y-3\">\n                {/* Measurement Mode Buttons */}\n                <div className=\"grid grid-cols-1 gap-2\">\n                  <button\n                    onClick={() => setMeasurementModeAndUpdate('protein')}\n                    disabled={!proteinLoaded}\n                    className={`w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      measurementMode === 'protein'\n                        ? 'bg-blue-600 text-white'"}, {"id": "src/components/StructureStudio.tsx_43", "file": "src/components/StructureStudio.tsx", "content": "? 'bg-blue-600 text-white' \n                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                    }`}\n                  >\n                    <Ruler className=\"w-4 h-4\" />\n                    Protein Atoms\n                  </button>\n\n                  <button\n                    onClick={() => setMeasurementModeAndUpdate('compound')}\n                    disabled={!compoundLoaded}\n                    className={`w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      measurementMode === 'compound'\n                        ? 'bg-purple-600 text-white' \n                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'"}, {"id": "src/components/StructureStudio.tsx_44", "file": "src/components/StructureStudio.tsx", "content": ": 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                    }`}\n                  >\n                    <Ruler className=\"w-4 h-4\" />\n                    Compound Atoms\n                  </button>\n\n                  <button\n                    onClick={() => setMeasurementModeAndUpdate('both')}\n                    disabled={!proteinLoaded || !compoundLoaded}\n                    className={`w-full flex items-center justify-center gap-2 px-4 py-3 rounded-lg transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      measurementMode === 'both'\n                        ? 'bg-orange-600 text-white' \n                        : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                    }`}\n                  >"}, {"id": "src/components/StructureStudio.tsx_45", "file": "src/components/StructureStudio.tsx", "content": "}`}\n                  >\n                    <Ruler className=\"w-4 h-4\" />\n                    Protein \u00e2\u2020\u201d Compound\n                  </button>\n\n                  {measurementMode !== 'off' && (\n                    <button\n                      onClick={() => setMeasurementModeAndUpdate('off')}\n                      className=\"w-full flex items-center justify-center gap-2 px-4 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors duration-300\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                      Exit Measurement\n                    </button>\n                  )}\n                </div>\n\n                {measurementMode !== 'off' && (\n                  <div className=\"space-y-3\">"}, {"id": "src/components/StructureStudio.tsx_46", "file": "src/components/StructureStudio.tsx", "content": "{measurementMode !== 'off' && (\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-orange-500/20 border border-orange-500/30 rounded-lg\">\n                      <p className=\"text-orange-300 text-sm\">\n                        {getMeasurementModeDescription()}\n                      </p>\n                    </div>\n                    \n                    <div className=\"p-3 bg-yellow-500/20 border border-yellow-500/30 rounded-lg\">\n                      <p className=\"text-yellow-300 text-sm\">\n                        {selectedAtoms.length} atom{selectedAtoms.length !== 1 ? 's' : ''} selected. \n                        {selectedAtoms.length === 1 && ' Click another atom to measure distance.'}"}, {"id": "src/components/StructureStudio.tsx_47", "file": "src/components/StructureStudio.tsx", "content": "{selectedAtoms.length === 1 && ' Click another atom to measure distance.'}\n                        {selectedAtoms.length === 0 && ' Click on an atom to start measuring.'}\n                      </p>\n                    </div>\n\n                    <button\n                      onClick={clearSelectedAtoms}\n                      className=\"w-full flex items-center justify-center gap-2 px-4 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-300\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                      Clear Measurements\n                    </button>\n                  </div>\n                )}\n\n                {distances.length > 0 && (\n                  <div>"}, {"id": "src/components/StructureStudio.tsx_48", "file": "src/components/StructureStudio.tsx", "content": ")}\n\n                {distances.length > 0 && (\n                  <div>\n                    <h4 className=\"text-sm font-medium text-gray-300 mb-2\">Measurements:</h4>\n                    <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                      {distances.map((distance, index) => (\n                        <div key={index} className=\"text-sm text-gray-400 bg-gray-800 px-3 py-2 rounded\">\n                          Distance {index + 1}: {distance}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Error Display */}\n            {error && (\n              <div className=\"p-4 bg-red-500/20 border border-red-500/30 rounded-lg\">"}, {"id": "src/components/StructureStudio.tsx_49", "file": "src/components/StructureStudio.tsx", "content": "<div className=\"p-4 bg-red-500/20 border border-red-500/30 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-red-300\">\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">{error}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Info */}\n            <div className=\"p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n              <div className=\"flex items-start gap-2 text-blue-300\">\n                <Info className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm\">\n                  <p className=\"font-medium mb-1\">Tips:</p>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>\u00e2\u20ac\u00a2 Mouse: rotate, zoom, pan</li>"}, {"id": "src/components/StructureStudio.tsx_50", "file": "src/components/StructureStudio.tsx", "content": "<li>\u00e2\u20ac\u00a2 Mouse: rotate, zoom, pan</li>\n                    <li>\u00e2\u20ac\u00a2 Use zoom buttons for precise control</li>\n                    <li>\u00e2\u20ac\u00a2 Try PDB: 1HTM (HIV protease)</li>\n                    <li>\u00e2\u20ac\u00a2 SMILES: CCO (ethanol), CC(=O)O (acetic acid)</li>\n                    <li>\u00e2\u20ac\u00a2 Choose measurement mode to focus on specific atoms</li>\n                    <li>\u00e2\u20ac\u00a2 Protein \u00e2\u2020\u201d Compound mode measures between structures</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 3D Viewer */}\n        <div className=\"flex-1 relative\">\n          <div\n            ref={viewerRef}\n            className=\"w-full h-full\"\n            style={{ minHeight: '400px' }}\n          />"}, {"id": "src/components/StructureStudio.tsx_51", "file": "src/components/StructureStudio.tsx", "content": "style={{ minHeight: '400px' }}\n          />\n          \n          {!proteinLoaded && !compoundLoaded && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center text-gray-400\">\n                <Zap className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Structure Studio</h3>\n                <p>Load a protein or compound to begin visualization</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/TaskManagement.tsx_0", "file": "src/components/TaskManagement.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react'\nimport { ArrowLeft, Plus, CheckSquare, Square, Play, Pause, Users, Calendar, AlertCircle, Trash2, Edit3, X, User, Clock, Target } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\nimport { supabase } from '../lib/supabase'\nimport { BoltBadge } from './BoltBadge'\n\ninterface TaskManagementProps {\n  labId: string\n  labName: string\n  onBack: () => void\n}\n\ninterface TaskList {\n  id: string\n  name: string\n  description: string\n  color: string\n  created_by: string\n  created_at: string\n  creator_name: string\n}\n\ninterface Task {\n  id: string\n  task_list_id: string\n  title: string\n  description: string\n  completed: boolean\n  completed_by: string | null\n  completed_at: string | null"}, {"id": "src/components/TaskManagement.tsx_1", "file": "src/components/TaskManagement.tsx", "content": "completed: boolean\n  completed_by: string | null\n  completed_at: string | null\n  on_it_by: string | null\n  on_it_at: string | null\n  assigned_to: string | null\n  created_by: string\n  created_at: string\n  priority: 'low' | 'medium' | 'high'\n  due_date: string | null\n  completed_by_name?: string\n  on_it_by_name?: string\n  assigned_to_name?: string\n  created_by_name?: string\n}\n\ninterface LabMember {\n  id: string\n  user_id: string\n  member_name: string\n}\n\nexport function TaskManagement({ labId, labName, onBack }: TaskManagementProps) {\n  const { user } = useAuth()\n  const [taskLists, setTaskLists] = useState<TaskList[]>([])\n  const [tasks, setTasks] = useState<Task[]>([])\n  const [labMembers, setLabMembers] = useState<LabMember[]>([])\n  const [loading, setLoading] = useState(true)"}, {"id": "src/components/TaskManagement.tsx_2", "file": "src/components/TaskManagement.tsx", "content": "const [loading, setLoading] = useState(true)\n  const [showCreateList, setShowCreateList] = useState(false)\n  const [showCreateTask, setShowCreateTask] = useState<string | null>(null)\n  const [editingTask, setEditingTask] = useState<string | null>(null)\n\n  // Form states\n  const [newListName, setNewListName] = useState('')\n  const [newListDescription, setNewListDescription] = useState('')\n  const [newListColor, setNewListColor] = useState('#3B82F6')\n  const [newTaskTitle, setNewTaskTitle] = useState('')\n  const [newTaskDescription, setNewTaskDescription] = useState('')\n  const [newTaskAssignee, setNewTaskAssignee] = useState('')\n  const [newTaskPriority, setNewTaskPriority] = useState<'low' | 'medium' | 'high'>('medium')\n  const [newTaskDueDate, setNewTaskDueDate] = useState('')"}, {"id": "src/components/TaskManagement.tsx_3", "file": "src/components/TaskManagement.tsx", "content": "const [newTaskDueDate, setNewTaskDueDate] = useState('')\n\n  const colors = [\n    '#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', \n    '#EC4899', '#06B6D4', '#84CC16', '#F97316', '#6366F1'\n  ]\n\n  useEffect(() => {\n    fetchData()\n    const cleanup = setupRealtimeSubscriptions()\n    return cleanup\n  }, [labId])\n\n  const fetchData = async () => {\n    try {\n      setLoading(true)\n      await Promise.all([\n        fetchTaskLists(),\n        fetchTasks(),\n        fetchLabMembers()\n      ])\n    } catch (error) {\n      console.error('Error fetching data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchTaskLists = async () => {\n    const { data, error } = await supabase\n      .from('task_lists')\n      .select(`\n        *,"}, {"id": "src/components/TaskManagement.tsx_4", "file": "src/components/TaskManagement.tsx", "content": "const { data, error } = await supabase\n      .from('task_lists')\n      .select(`\n        *,\n        users!task_lists_created_by_fkey (name)\n      `)\n      .eq('lab_id', labId)\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n\n    const listsWithCreatorNames = data?.map(list => ({\n      ...list,\n      creator_name: list.users?.name || 'Unknown User'\n    })) || []\n\n    setTaskLists(listsWithCreatorNames)\n  }\n\n  const fetchTasks = async () => {\n    const { data, error } = await supabase\n      .from('tasks')\n      .select(`\n        *,\n        completed_by_user:users!tasks_completed_by_fkey (name),\n        on_it_by_user:users!tasks_on_it_by_fkey (name),\n        assigned_to_user:users!tasks_assigned_to_fkey (name),"}, {"id": "src/components/TaskManagement.tsx_5", "file": "src/components/TaskManagement.tsx", "content": "assigned_to_user:users!tasks_assigned_to_fkey (name),\n        created_by_user:users!tasks_created_by_fkey (name),\n        task_lists!inner (lab_id)\n      `)\n      .eq('task_lists.lab_id', labId)\n      .order('created_at', { ascending: false })\n\n    if (error) throw error\n\n    const tasksWithUserNames = data?.map(task => ({\n      ...task,\n      completed_by_name: task.completed_by_user?.name,\n      on_it_by_name: task.on_it_by_user?.name,\n      assigned_to_name: task.assigned_to_user?.name,\n      created_by_name: task.created_by_user?.name\n    })) || []\n\n    setTasks(tasksWithUserNames)\n  }\n\n  const fetchLabMembers = async () => {\n    const { data, error } = await supabase\n      .from('lab_members')\n      .select('*')\n      .eq('lab_id', labId)\n\n    if (error) throw error"}, {"id": "src/components/TaskManagement.tsx_6", "file": "src/components/TaskManagement.tsx", "content": ".select('*')\n      .eq('lab_id', labId)\n\n    if (error) throw error\n    setLabMembers(data || [])\n  }\n\n  const setupRealtimeSubscriptions = () => {\n    const taskListsChannel = supabase\n      .channel(`task_lists:${labId}`)\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'task_lists',\n        filter: `lab_id=eq.${labId}`\n      }, () => {\n        try {\n          fetchTaskLists()\n        } catch (error) {\n          console.error('Error fetching task lists in real-time:', error)\n        }\n      })\n      .subscribe()\n\n    const tasksChannel = supabase\n      .channel(`tasks:${labId}`)\n      .on('postgres_changes', {\n        event: '*',\n        schema: 'public',\n        table: 'tasks'\n      }, async () => {\n        try {"}, {"id": "src/components/TaskManagement.tsx_7", "file": "src/components/TaskManagement.tsx", "content": "schema: 'public',\n        table: 'tasks'\n      }, async () => {\n        try {\n          await fetchTasks()\n        } catch (error) {\n          console.error('Error fetching tasks in real-time:', error)\n        }\n      })\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(taskListsChannel)\n      supabase.removeChannel(tasksChannel)\n    }\n  }\n\n  const createTaskList = async () => {\n    if (!newListName.trim()) return\n\n    try {\n      const { error } = await supabase\n        .from('task_lists')\n        .insert({\n          lab_id: labId,\n          name: newListName.trim(),\n          description: newListDescription.trim(),\n          color: newListColor,\n          created_by: user?.id\n        })\n\n      if (error) throw error\n\n      setNewListName('')"}, {"id": "src/components/TaskManagement.tsx_8", "file": "src/components/TaskManagement.tsx", "content": "created_by: user?.id\n        })\n\n      if (error) throw error\n\n      setNewListName('')\n      setNewListDescription('')\n      setNewListColor('#3B82F6')\n      setShowCreateList(false)\n      fetchTaskLists()\n    } catch (error) {\n      console.error('Error creating task list:', error)\n    }\n  }\n\n  const createTask = async (taskListId: string) => {\n    if (!newTaskTitle.trim()) return\n\n    try {\n      const taskData: any = {\n        task_list_id: taskListId,\n        title: newTaskTitle.trim(),\n        description: newTaskDescription.trim(),\n        priority: newTaskPriority,\n        created_by: user?.id\n      }\n\n      if (newTaskAssignee) {\n        taskData.assigned_to = newTaskAssignee\n      }\n\n      if (newTaskDueDate) {"}, {"id": "src/components/TaskManagement.tsx_9", "file": "src/components/TaskManagement.tsx", "content": "taskData.assigned_to = newTaskAssignee\n      }\n\n      if (newTaskDueDate) {\n        taskData.due_date = new Date(newTaskDueDate).toISOString()\n      }\n\n      const { error } = await supabase\n        .from('tasks')\n        .insert(taskData)\n\n      if (error) throw error\n\n      setNewTaskTitle('')\n      setNewTaskDescription('')\n      setNewTaskAssignee('')\n      setNewTaskPriority('medium')\n      setNewTaskDueDate('')\n      setShowCreateTask(null)\n      fetchTasks()\n    } catch (error) {\n      console.error('Error creating task:', error)\n    }\n  }\n\n  const toggleTaskCompletion = async (task: Task) => {\n    try {\n      const updates: any = {\n        completed: !task.completed\n      }\n\n      if (!task.completed) {\n        updates.completed_by = user?.id"}, {"id": "src/components/TaskManagement.tsx_10", "file": "src/components/TaskManagement.tsx", "content": "}\n\n      if (!task.completed) {\n        updates.completed_by = user?.id\n        updates.completed_at = new Date().toISOString()\n        updates.on_it_by = null\n        updates.on_it_at = null\n      } else {\n        updates.completed_by = null\n        updates.completed_at = null\n      }\n\n      const { error } = await supabase\n        .from('tasks')\n        .update(updates)\n        .eq('id', task.id)\n\n      if (error) throw error\n      fetchTasks()\n    } catch (error) {\n      console.error('Error updating task:', error)\n    }\n  }\n\n  const toggleOnIt = async (task: Task) => {\n    try {\n      const isCurrentlyOnIt = task.on_it_by === user?.id\n      \n      const updates: any = {\n        on_it_by: isCurrentlyOnIt ? null : user?.id,"}, {"id": "src/components/TaskManagement.tsx_11", "file": "src/components/TaskManagement.tsx", "content": "const updates: any = {\n        on_it_by: isCurrentlyOnIt ? null : user?.id,\n        on_it_at: isCurrentlyOnIt ? null : new Date().toISOString()\n      }\n\n      const { error } = await supabase\n        .from('tasks')\n        .update(updates)\n        .eq('id', task.id)\n\n      if (error) throw error\n      fetchTasks()\n    } catch (error) {\n      console.error('Error updating task:', error)\n    }\n  }\n\n  const deleteTask = async (taskId: string) => {\n    try {\n      const { error } = await supabase\n        .from('tasks')\n        .delete()\n        .eq('id', taskId)\n\n      if (error) throw error\n      fetchTasks()\n    } catch (error) {\n      console.error('Error deleting task:', error)\n    }\n  }\n\n  const deleteTaskList = async (taskListId: string) => {\n    try {"}, {"id": "src/components/TaskManagement.tsx_12", "file": "src/components/TaskManagement.tsx", "content": "}\n  }\n\n  const deleteTaskList = async (taskListId: string) => {\n    try {\n      const { error } = await supabase\n        .from('task_lists')\n        .delete()\n        .eq('id', taskListId)\n\n      if (error) throw error\n      fetchTaskLists()\n      fetchTasks()\n    } catch (error) {\n      console.error('Error deleting task list:', error)\n    }\n  }\n\n  const getTasksForList = (listId: string) => {\n    return tasks.filter(task => task.task_list_id === listId)\n  }\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-400'\n      case 'medium': return 'text-yellow-400'\n      case 'low': return 'text-green-400'\n      default: return 'text-gray-400'\n    }\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {"}, {"id": "src/components/TaskManagement.tsx_13", "file": "src/components/TaskManagement.tsx", "content": "}\n  }\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'high': return AlertCircle\n      case 'medium': return Target\n      case 'low': return Clock\n      default: return Clock\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"h-screen bg-[#0F0F0F] text-white flex items-center justify-center\">\n        <div className=\"text-xl\">Loading tasks...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"h-screen bg-[#0F0F0F] text-white flex flex-col overflow-hidden\">\n      {/* Header */}\n      <div className=\"fixed top-[90px] right-8 z-50\">\n            <BoltBadge />\n      </div>\n      <header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md flex-shrink-0\">"}, {"id": "src/components/TaskManagement.tsx_14", "file": "src/components/TaskManagement.tsx", "content": "<header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md flex-shrink-0\">\n        <div className=\"px-6 py-4 flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={onBack}\n              className=\"flex items-center gap-2 text-gray-300 hover:text-white transition-colors duration-300 group\"\n            >\n              <ArrowLeft className=\"w-5 h-5 group-hover:-translate-x-1 transition-transform duration-300\" />\n              Back to Lab\n            </button>\n            <div className=\"h-6 w-px bg-gray-700\" />\n            <div className=\"hidden md:block\">\n              <h1 className=\"text-xl font-bold text-white\">Task Management</h1>\n              <p className=\"text-sm text-gray-400\">"}, {"id": "src/components/TaskManagement.tsx_15", "file": "src/components/TaskManagement.tsx", "content": "<p className=\"text-sm text-gray-400\">\n                {labName} \u00e2\u20ac\u00a2 {taskLists.length} lists \u00e2\u20ac\u00a2 {tasks.length} tasks\n              </p>\n            </div>\n          </div>\n          \n          <button\n            onClick={() => setShowCreateList(true)}\n            className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-300\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            New List\n          </button>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        {taskLists.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <CheckSquare className=\"w-16 h-16 mx-auto mb-4 text-gray-500\" />"}, {"id": "src/components/TaskManagement.tsx_16", "file": "src/components/TaskManagement.tsx", "content": "<CheckSquare className=\"w-16 h-16 mx-auto mb-4 text-gray-500\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Task Lists Yet</h3>\n            <p className=\"text-gray-400 mb-6\">Create your first task list to start organizing your lab work</p>\n            <button\n              onClick={() => setShowCreateList(true)}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300\"\n            >\n              Create First List\n            </button>\n          </div>\n        ) : (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {taskLists.map(list => {\n              const listTasks = getTasksForList(list.id)"}, {"id": "src/components/TaskManagement.tsx_17", "file": "src/components/TaskManagement.tsx", "content": "{taskLists.map(list => {\n              const listTasks = getTasksForList(list.id)\n              const completedTasks = listTasks.filter(task => task.completed).length\n              \n              return (\n                <div\n                  key={list.id}\n                  className=\"bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 rounded-2xl overflow-hidden\"\n                  style={{ borderTopColor: list.color, borderTopWidth: '4px' }}\n                >\n                  {/* List Header */}\n                  <div className=\"p-6 border-b border-gray-700\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">"}, {"id": "src/components/TaskManagement.tsx_18", "file": "src/components/TaskManagement.tsx", "content": "<div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold text-white mb-1\">{list.name}</h3>\n                        {list.description && (\n                          <p className=\"text-sm text-gray-400 mb-2\">{list.description}</p>\n                        )}\n                        <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                          <User className=\"w-3 h-3\" />\n                          <span>Created by {list.creator_name}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <button\n                          onClick={() => setShowCreateTask(list.id)}"}, {"id": "src/components/TaskManagement.tsx_19", "file": "src/components/TaskManagement.tsx", "content": "onClick={() => setShowCreateTask(list.id)}\n                          className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors duration-300\"\n                          title=\"Add Task\"\n                        >\n                          <Plus className=\"w-4 h-4\" />\n                        </button>\n                        {list.created_by === user?.id && (\n                          <button\n                            onClick={() => deleteTaskList(list.id)}\n                            className=\"p-2 text-gray-400 hover:text-red-400 hover:bg-gray-700 rounded-lg transition-colors duration-300\"\n                            title=\"Delete List\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />"}, {"id": "src/components/TaskManagement.tsx_20", "file": "src/components/TaskManagement.tsx", "content": ">\n                            <Trash2 className=\"w-4 h-4\" />\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                        <div\n                          className=\"h-2 rounded-full transition-all duration-300\"\n                          style={{\n                            backgroundColor: list.color,\n                            width: listTasks.length > 0 ? `${(completedTasks / listTasks.length) * 100}%` : '0%'\n                          }}\n                        />"}, {"id": "src/components/TaskManagement.tsx_21", "file": "src/components/TaskManagement.tsx", "content": "}}\n                        />\n                      </div>\n                      <span className=\"text-xs text-gray-400\">\n                        {completedTasks}/{listTasks.length}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Tasks */}\n                  <div className=\"p-4 space-y-3 max-h-96 overflow-y-auto\">\n                    {listTasks.length === 0 ? (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <CheckSquare className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-sm\">No tasks yet</p>\n                        <button\n                          onClick={() => setShowCreateTask(list.id)}"}, {"id": "src/components/TaskManagement.tsx_22", "file": "src/components/TaskManagement.tsx", "content": "onClick={() => setShowCreateTask(list.id)}\n                          className=\"text-blue-400 hover:text-blue-300 text-sm mt-1 transition-colors duration-300\"\n                        >\n                          Add your first task\n                        </button>\n                      </div>\n                    ) : (\n                      listTasks.map(task => {\n                        const PriorityIcon = getPriorityIcon(task.priority)\n                        const isOnIt = task.on_it_by === user?.id\n                        const canEdit = task.created_by === user?.id || task.assigned_to === user?.id\n                        \n                        return (\n                          <div\n                            key={task.id}"}, {"id": "src/components/TaskManagement.tsx_23", "file": "src/components/TaskManagement.tsx", "content": "<div\n                            key={task.id}\n                            className={`p-3 rounded-lg border transition-all duration-300 ${\n                              task.completed\n                                ? 'bg-gray-800/50 border-gray-600 opacity-75'\n                                : 'bg-gray-800 border-gray-600 hover:border-gray-500'\n                            }`}\n                          >\n                            <div className=\"flex items-start gap-3\">\n                              {/* Checkbox */}\n                              <button\n                                onClick={() => toggleTaskCompletion(task)}\n                                disabled={!canEdit}"}, {"id": "src/components/TaskManagement.tsx_24", "file": "src/components/TaskManagement.tsx", "content": "disabled={!canEdit}\n                                className={`mt-0.5 transition-colors duration-300 ${\n                                  canEdit ? 'hover:text-blue-400' : 'opacity-50 cursor-not-allowed'\n                                }`}\n                              >\n                                {task.completed ? (\n                                  <CheckSquare className=\"w-5 h-5 text-green-400\" />\n                                ) : (\n                                  <Square className=\"w-5 h-5 text-gray-400\" />\n                                )}\n                              </button>\n\n                              {/* Task Content */}\n                              <div className=\"flex-1 min-w-0\">"}, {"id": "src/components/TaskManagement.tsx_25", "file": "src/components/TaskManagement.tsx", "content": "<div className=\"flex-1 min-w-0\">\n                                <div className=\"flex items-start justify-between gap-2\">\n                                  <h4 className={`font-medium ${\n                                    task.completed ? 'line-through text-gray-500' : 'text-white'\n                                  }`}>\n                                    {task.title}\n                                  </h4>\n                                  <div className=\"flex items-center gap-1\">\n                                    <PriorityIcon className={`w-3 h-3 ${getPriorityColor(task.priority)}`} />\n                                    {canEdit && (\n                                      <button\n                                        onClick={() => deleteTask(task.id)}"}, {"id": "src/components/TaskManagement.tsx_26", "file": "src/components/TaskManagement.tsx", "content": "onClick={() => deleteTask(task.id)}\n                                        className=\"p-1 text-gray-500 hover:text-red-400 transition-colors duration-300\"\n                                      >\n                                        <Trash2 className=\"w-3 h-3\" />\n                                      </button>\n                                    )}\n                                  </div>\n                                </div>\n\n                                {task.description && (\n                                  <p className=\"text-sm text-gray-400 mt-1\">{task.description}</p>\n                                )}\n\n                                {/* Task Meta */}"}, {"id": "src/components/TaskManagement.tsx_27", "file": "src/components/TaskManagement.tsx", "content": ")}\n\n                                {/* Task Meta */}\n                                <div className=\"flex items-center justify-between mt-2\">\n                                  <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                                    {task.assigned_to_name && (\n                                      <span className=\"bg-blue-500/20 text-blue-300 px-2 py-1 rounded\">\n                                        {task.assigned_to_name}\n                                      </span>\n                                    )}\n                                    {task.completed_by_name && (\n                                      <span className=\"text-green-400\">\n                                        \u00e2\u0153\u201c {task.completed_by_name}"}, {"id": "src/components/TaskManagement.tsx_28", "file": "src/components/TaskManagement.tsx", "content": "\u00e2\u0153\u201c {task.completed_by_name}\n                                      </span>\n                                    )}\n                                    {task.on_it_by_name && !task.completed && (\n                                      <span className=\"text-orange-400\">\n                                        \u00f0\u0178\u201d\u00a5 {task.on_it_by_name}\n                                      </span>\n                                    )}\n                                  </div>\n\n                                  {/* On It Button */}\n                                  {!task.completed && canEdit && (\n                                    <button\n                                      onClick={() => toggleOnIt(task)}"}, {"id": "src/components/TaskManagement.tsx_29", "file": "src/components/TaskManagement.tsx", "content": "onClick={() => toggleOnIt(task)}\n                                      className={`flex items-center gap-1 px-2 py-1 rounded text-xs font-medium transition-colors duration-300 ${\n                                        isOnIt\n                                          ? 'bg-orange-500/20 text-orange-300 hover:bg-orange-500/30'\n                                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n                                      }`}\n                                    >\n                                      {isOnIt ? (\n                                        <>\n                                          <Pause className=\"w-3 h-3\" />\n                                          On It\n                                        </>"}, {"id": "src/components/TaskManagement.tsx_30", "file": "src/components/TaskManagement.tsx", "content": "On It\n                                        </>\n                                      ) : (\n                                        <>\n                                          <Play className=\"w-3 h-3\" />\n                                          Start\n                                        </>\n                                      )}\n                                    </button>\n                                  )}\n                                </div>\n\n                                {task.due_date && (\n                                  <div className=\"flex items-center gap-1 mt-2 text-xs text-gray-500\">\n                                    <Calendar className=\"w-3 h-3\" />"}, {"id": "src/components/TaskManagement.tsx_31", "file": "src/components/TaskManagement.tsx", "content": "<Calendar className=\"w-3 h-3\" />\n                                    <span>Due {new Date(task.due_date).toLocaleDateString()}</span>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        )\n                      })\n                    )}\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Create List Modal */}\n      {showCreateList && (\n        <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n          <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={() => setShowCreateList(false)} />"}, {"id": "src/components/TaskManagement.tsx_32", "file": "src/components/TaskManagement.tsx", "content": "<div className=\"flex min-h-full items-center justify-center p-4\">\n            <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n              <button\n                onClick={() => setShowCreateList(false)}\n                className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300\"\n              >\n                <X className=\"w-6 h-6\" />\n              </button>\n\n              <h2 className=\"text-2xl font-bold text-white mb-6\">Create Task List</h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">"}, {"id": "src/components/TaskManagement.tsx_33", "file": "src/components/TaskManagement.tsx", "content": "<label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    List Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newListName}\n                    onChange={(e) => setNewListName(e.target.value)}\n                    className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Enter list name\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Description\n                  </label>\n                  <textarea\n                    value={newListDescription}"}, {"id": "src/components/TaskManagement.tsx_34", "file": "src/components/TaskManagement.tsx", "content": "<textarea\n                    value={newListDescription}\n                    onChange={(e) => setNewListDescription(e.target.value)}\n                    className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                    rows={3}\n                    placeholder=\"Describe this task list...\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Color\n                  </label>\n                  <div className=\"flex gap-2 flex-wrap\">\n                    {colors.map(color => (\n                      <button\n                        key={color}"}, {"id": "src/components/TaskManagement.tsx_35", "file": "src/components/TaskManagement.tsx", "content": "<button\n                        key={color}\n                        onClick={() => setNewListColor(color)}\n                        className={`w-8 h-8 rounded-full border-2 transition-all duration-200 ${\n                          newListColor === color ? 'border-white scale-110' : 'border-gray-600'\n                        }`}\n                        style={{ backgroundColor: color }}\n                      />\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"flex gap-4 pt-4\">\n                  <button\n                    onClick={() => setShowCreateList(false)}"}, {"id": "src/components/TaskManagement.tsx_36", "file": "src/components/TaskManagement.tsx", "content": "<button\n                    onClick={() => setShowCreateList(false)}\n                    className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    onClick={createTaskList}\n                    disabled={!newListName.trim()}\n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300 disabled:cursor-not-allowed\"\n                  >\n                    Create List\n                  </button>\n                </div>\n              </div>\n            </div>"}, {"id": "src/components/TaskManagement.tsx_37", "file": "src/components/TaskManagement.tsx", "content": "</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Create Task Modal */}\n      {showCreateTask && (\n        <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n          <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={() => setShowCreateTask(null)} />\n          <div className=\"flex min-h-full items-center justify-center p-4\">\n            <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n              <button\n                onClick={() => setShowCreateTask(null)}"}, {"id": "src/components/TaskManagement.tsx_38", "file": "src/components/TaskManagement.tsx", "content": "<button\n                onClick={() => setShowCreateTask(null)}\n                className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300\"\n              >\n                <X className=\"w-6 h-6\" />\n              </button>\n\n              <h2 className=\"text-2xl font-bold text-white mb-6\">Create Task</h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Task Title *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={newTaskTitle}\n                    onChange={(e) => setNewTaskTitle(e.target.value)}"}, {"id": "src/components/TaskManagement.tsx_39", "file": "src/components/TaskManagement.tsx", "content": "onChange={(e) => setNewTaskTitle(e.target.value)}\n                    className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"Enter task title\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Description\n                  </label>\n                  <textarea\n                    value={newTaskDescription}\n                    onChange={(e) => setNewTaskDescription(e.target.value)}"}, {"id": "src/components/TaskManagement.tsx_40", "file": "src/components/TaskManagement.tsx", "content": "onChange={(e) => setNewTaskDescription(e.target.value)}\n                    className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                    rows={3}\n                    placeholder=\"Describe the task...\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Assign To\n                  </label>\n                  <select\n                    value={newTaskAssignee}\n                    onChange={(e) => setNewTaskAssignee(e.target.value)}"}, {"id": "src/components/TaskManagement.tsx_41", "file": "src/components/TaskManagement.tsx", "content": "onChange={(e) => setNewTaskAssignee(e.target.value)}\n                    className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"\">Assign to someone (optional)</option>\n                    {labMembers.map(member => (\n                      <option key={member.user_id} value={member.user_id}>\n                        {member.member_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Priority"}, {"id": "src/components/TaskManagement.tsx_42", "file": "src/components/TaskManagement.tsx", "content": "Priority\n                    </label>\n                    <select\n                      value={newTaskPriority}\n                      onChange={(e) => setNewTaskPriority(e.target.value as 'low' | 'medium' | 'high')}\n                      className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    >\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                      Due Date"}, {"id": "src/components/TaskManagement.tsx_43", "file": "src/components/TaskManagement.tsx", "content": "Due Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={newTaskDueDate}\n                      onChange={(e) => setNewTaskDueDate(e.target.value)}\n                      className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-4 pt-4\">\n                  <button\n                    onClick={() => setShowCreateTask(null)}\n                    className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300\""}, {"id": "src/components/TaskManagement.tsx_44", "file": "src/components/TaskManagement.tsx", "content": ">\n                    Cancel\n                  </button>\n                  <button\n                    onClick={() => createTask(showCreateTask)}\n                    disabled={!newTaskTitle.trim()}\n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300 disabled:cursor-not-allowed\"\n                  >\n                    Create Task\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"}, {"id": "src/components/ToolPanel.tsx_0", "file": "src/components/ToolPanel.tsx", "content": "================================================\nimport React from 'react'\nimport { Pen, Square, Circle, Minus, Type, Eraser, Hand, Palette, ArrowRight, Diamond } from 'lucide-react'\nimport { Tool } from '../types/whiteboard'\n\ninterface ToolPanelProps {\n  tool: Tool\n  onToolChange: (tool: Tool) => void\n  onColorPickerToggle: () => void\n  selectedCount: number\n}\n\nexport function ToolPanel({ tool, onToolChange, onColorPickerToggle, selectedCount }: ToolPanelProps) {\n  const tools = [\n    { type: 'select' as const, icon: Hand, label: 'Select (V)' },\n    { type: 'pen' as const, icon: Pen, label: 'Pen (P)' },\n    { type: 'rectangle' as const, icon: Square, label: 'Rectangle (R)' },\n    { type: 'circle' as const, icon: Circle, label: 'Circle (C)' },"}, {"id": "src/components/ToolPanel.tsx_1", "file": "src/components/ToolPanel.tsx", "content": "{ type: 'circle' as const, icon: Circle, label: 'Circle (C)' },\n    { type: 'diamond' as const, icon: Diamond, label: 'Diamond (D)' },\n    { type: 'line' as const, icon: Minus, label: 'Line (L)' },\n    { type: 'arrow' as const, icon: ArrowRight, label: 'Arrow (A)' },\n    { type: 'text' as const, icon: Type, label: 'Text (T)' },\n    { type: 'eraser' as const, icon: Eraser, label: 'Eraser (E)' }\n  ]\n\n  const strokeWidths = [1, 2, 4, 8, 16]\n  const opacities = [0.25, 0.5, 0.75, 1]\n\n  return (\n    <div className=\"h-full flex flex-col items-center py-4 space-y-2 overflow-y-auto\">\n      {/* Tools */}\n      {tools.map(({ type, icon: Icon, label }) => (\n        <button\n          key={type}\n          onClick={() => onToolChange({ ...tool, type })}"}, {"id": "src/components/ToolPanel.tsx_2", "file": "src/components/ToolPanel.tsx", "content": "<button\n          key={type}\n          onClick={() => onToolChange({ ...tool, type })}\n          className={`w-10 h-10 rounded-lg flex items-center justify-center transition-all duration-200 ${\n            tool.type === type\n              ? 'text-white shadow-lg'\n              : 'text-gray-400 hover:text-white'\n          }`}\n          title={label}\n        >\n          <Icon className=\"w-5 h-5\" />\n        </button>\n      ))}\n\n      <div className=\"w-8 h-px bg-gray-700 my-2\" />\n\n      {/* Color Picker Button */}\n      <button\n        onClick={onColorPickerToggle}\n        className=\"w-10 h-10 rounded-lg flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-800 transition-all duration-200 relative\"\n        title=\"Color\"\n      >"}, {"id": "src/components/ToolPanel.tsx_3", "file": "src/components/ToolPanel.tsx", "content": "title=\"Color\"\n      >\n        <Palette className=\"w-5 h-5\" />\n        <div \n          className=\"absolute bottom-1 right-1 w-3 h-3 rounded-full border border-gray-600\"\n          style={{ backgroundColor: tool.color }}\n        />\n      </button>\n\n      <div className=\"w-8 h-px bg-gray-700 my-2\" />\n\n      {/* Stroke Width */}\n      <div className=\"flex flex-col items-center space-y-1\">\n        <div className=\"text-xs text-gray-500 mb-1\">Size</div>\n        {strokeWidths.map(width => (\n          <button\n            key={width}\n            onClick={() => onToolChange({ ...tool, strokeWidth: width })}\n            className={`w-10 h-8 rounded flex items-center justify-center transition-all duration-200 ${\n              tool.strokeWidth === width\n                ? 'bg-blue-600'"}, {"id": "src/components/ToolPanel.tsx_4", "file": "src/components/ToolPanel.tsx", "content": "tool.strokeWidth === width\n                ? 'bg-blue-600'\n                : 'hover:bg-gray-800'\n            }`}\n            title={`${width}px`}\n          >\n            <div\n              className=\"rounded-full bg-current\"\n              style={{\n                width: Math.min(width * 2, 16),\n                height: Math.min(width * 2, 16)\n              }}\n            />\n          </button>\n        ))}\n      </div>\n\n      <div className=\"w-8 h-px bg-gray-700 my-2\" />\n\n      {/* Opacity */}\n      <div className=\"flex flex-col items-center space-y-1\">\n        <div className=\"text-xs text-gray-500 mb-1\">Opacity</div>\n        {opacities.map(opacity => (\n          <button\n            key={opacity}\n            onClick={() => onToolChange({ ...tool, opacity })}"}, {"id": "src/components/ToolPanel.tsx_5", "file": "src/components/ToolPanel.tsx", "content": "key={opacity}\n            onClick={() => onToolChange({ ...tool, opacity })}\n            className={`w-10 h-6 rounded flex items-center justify-center transition-all duration-200 text-xs ${\n              tool.opacity === opacity\n                ? 'bg-blue-600 text-white'\n                : 'text-gray-400 hover:bg-gray-800'\n            }`}\n            title={`${Math.round(opacity * 100)}%`}\n          >\n            {Math.round(opacity * 100)}%\n          </button>\n        ))}\n      </div>\n\n      {/* Fill toggle for shapes */}\n      {(tool.type === 'rectangle' || tool.type === 'circle' || tool.type === 'diamond') && (\n        <>\n          <div className=\"w-8 h-px bg-gray-700 my-2\" />\n          <div className=\"flex flex-col items-center space-y-1\">"}, {"id": "src/components/ToolPanel.tsx_6", "file": "src/components/ToolPanel.tsx", "content": "<div className=\"flex flex-col items-center space-y-1\">\n            <div className=\"text-xs text-gray-500 mb-1\">Fill</div>\n            <button\n              onClick={() => onToolChange({ \n                ...tool, \n                fill: tool.fill === 'transparent' ? tool.color : 'transparent' \n              })}\n              className={`w-10 h-8 rounded border-2 transition-all duration-200 ${\n                tool.fill !== 'transparent'\n                  ? 'border-blue-500'\n                  : 'border-gray-600 hover:border-gray-500'\n              }`}\n              style={{ \n                backgroundColor: tool.fill !== 'transparent' ? tool.fill : 'transparent' \n              }}\n              title={tool.fill !== 'transparent' ? 'Remove fill' : 'Add fill'}\n            />"}, {"id": "src/components/ToolPanel.tsx_7", "file": "src/components/ToolPanel.tsx", "content": "title={tool.fill !== 'transparent' ? 'Remove fill' : 'Add fill'}\n            />\n          </div>\n        </>\n      )}\n\n      {/* Selection info */}\n      {selectedCount > 0 && (\n        <>\n          <div className=\"w-8 h-px bg-gray-700 my-2\" />\n          <div className=\"text-xs text-gray-400 text-center px-2\">\n            {selectedCount} selected\n          </div>\n        </>\n      )}\n    </div>\n  )\n}"}, {"id": "src/components/UserCursors.tsx_0", "file": "src/components/UserCursors.tsx", "content": "================================================\nimport React from 'react'\nimport { Cursor, ViewState } from '../types/whiteboard'\n\ninterface UserCursorsProps {\n  cursors: Map<string, Cursor>\n  getUserColor: (userId: string) => string\n  viewState: ViewState\n}\n\nexport function UserCursors({ cursors, getUserColor, viewState }: UserCursorsProps) {\n  return (\n    <>\n      {Array.from(cursors.values()).map(cursor => {\n        // Transform cursor position based on view state\n        const screenX = cursor.x * viewState.zoom + viewState.offsetX\n        const screenY = cursor.y * viewState.zoom + viewState.offsetY\n        \n        return (\n          <div\n            key={cursor.userId}\n            className=\"absolute pointer-events-none z-10 transition-all duration-100\"\n            style={{"}, {"id": "src/components/UserCursors.tsx_1", "file": "src/components/UserCursors.tsx", "content": "style={{\n              left: screenX,\n              top: screenY,\n              transform: 'translate(-2px, -2px)'\n            }}\n          >\n            {/* Cursor dot */}\n            <div\n              className=\"w-3 h-3 rounded-full border-2 border-white shadow-lg\"\n              style={{ backgroundColor: getUserColor(cursor.userId) }}\n            />\n            \n            {/* User name label */}\n            <div\n              className=\"absolute top-4 left-0 px-2 py-1 text-xs text-white rounded shadow-lg whitespace-nowrap max-w-[120px] truncate\"\n              style={{ backgroundColor: getUserColor(cursor.userId) }}\n            >\n              {cursor.userName}\n            </div>\n          </div>\n        )\n      })}\n    </>\n  )\n}"}, {"id": "src/components/Whiteboard.tsx_0", "file": "src/components/Whiteboard.tsx", "content": "================================================\nimport React, { useState, useRef, useEffect, useCallback } from 'react'\nimport { ArrowLeft, Pen, Square, Circle, Minus, Type, Eraser, Hand, Undo, Redo, Download, Users, Palette, Settings, ZoomIn, ZoomOut, RotateCcw, Trash2, Move3D } from 'lucide-react'\nimport { useAuth } from '../hooks/useAuth'\nimport { supabase } from '../lib/supabase'\nimport { DrawingElement, Point, Tool, Cursor, WhiteboardData, ViewState } from '../types/whiteboard'\nimport { WhiteboardCanvas } from './WhiteboardCanvas'\nimport { ToolPanel } from './ToolPanel'\nimport { ColorPicker } from './ColorPicker'\nimport { UserCursors } from './UserCursors'\nimport { BoltBadge } from './BoltBadge'\n\ninterface WhiteboardProps {\n  labId: string\n  labName: string\n  onBack: () => void\n}"}, {"id": "src/components/Whiteboard.tsx_1", "file": "src/components/Whiteboard.tsx", "content": "interface WhiteboardProps {\n  labId: string\n  labName: string\n  onBack: () => void\n}\n\nexport function Whiteboard({ labId, labName, onBack }: WhiteboardProps) {\n  const { user } = useAuth()\n  const [tool, setTool] = useState<Tool>({\n    type: 'pen',\n    color: '#ffffff',\n    strokeWidth: 2,\n    roughness: 1,\n    fill: 'transparent',\n    opacity: 1,\n    strokeStyle: 'solid',\n    fillStyle: 'hachure'\n  })\n  \n  const [elements, setElements] = useState<DrawingElement[]>([])\n  const [selectedElements, setSelectedElements] = useState<Set<string>>(new Set())\n  const [cursors, setCursors] = useState<Map<string, Cursor>>(new Map())\n  const [showColorPicker, setShowColorPicker] = useState(false)\n  const [undoStack, setUndoStack] = useState<DrawingElement[][]>([])"}, {"id": "src/components/Whiteboard.tsx_2", "file": "src/components/Whiteboard.tsx", "content": "const [undoStack, setUndoStack] = useState<DrawingElement[][]>([])\n  const [redoStack, setRedoStack] = useState<DrawingElement[][]>([])\n  const [whiteboardId, setWhiteboardId] = useState<string | null>(null)\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [connectedUsers, setConnectedUsers] = useState<Set<string>>(new Set())\n  const [viewState, setViewState] = useState<ViewState>({ zoom: 1, offsetX: 0, offsetY: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n  const [dragStart, setDragStart] = useState<Point | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  \n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const lastCursorUpdate = useRef<number>(0)"}, {"id": "src/components/Whiteboard.tsx_3", "file": "src/components/Whiteboard.tsx", "content": "const containerRef = useRef<HTMLDivElement>(null)\n  const lastCursorUpdate = useRef<number>(0)\n  const saveTimeoutRef = useRef<NodeJS.Timeout>()\n  const channelRef = useRef<any>(null)\n\n  // Initialize whiteboard and check permissions\n  useEffect(() => {\n    initializeWhiteboard()\n    checkUserPermissions()\n  }, [labId, user])\n\n  // Set up real-time subscriptions\n  useEffect(() => {\n    if (!whiteboardId || !user) return\n\n    const channel = supabase.channel(`whiteboard:${whiteboardId}`)\n      .on('postgres_changes', {\n        event: 'UPDATE',\n        schema: 'public',\n        table: 'whiteboards',\n        filter: `id=eq.${whiteboardId}`\n      }, handleWhiteboardUpdate)\n      .on('broadcast', {\n        event: 'cursor_move'\n      }, handleCursorMove)\n      .on('broadcast', {"}, {"id": "src/components/Whiteboard.tsx_4", "file": "src/components/Whiteboard.tsx", "content": "event: 'cursor_move'\n      }, handleCursorMove)\n      .on('broadcast', {\n        event: 'user_joined'\n      }, handleUserJoined)\n      .on('broadcast', {\n        event: 'user_left'\n      }, handleUserLeft)\n      .on('broadcast', {\n        event: 'element_added'\n      }, handleElementAdded)\n      .on('broadcast', {\n        event: 'element_updated'\n      }, handleElementUpdated)\n      .on('broadcast', {\n        event: 'element_deleted'\n      }, handleElementDeleted)\n      .subscribe()\n\n    channelRef.current = channel\n\n    // Announce presence\n    channel.send({\n      type: 'broadcast',\n      event: 'user_joined',\n      payload: {\n        userId: user.id,\n        userName: user.user_metadata?.name || user.email || 'Anonymous'\n      }\n    })\n\n    return () => {\n      channel.send({"}, {"id": "src/components/Whiteboard.tsx_5", "file": "src/components/Whiteboard.tsx", "content": "}\n    })\n\n    return () => {\n      channel.send({\n        type: 'broadcast',\n        event: 'user_left',\n        payload: { userId: user.id }\n      })\n      supabase.removeChannel(channel)\n      channelRef.current = null\n    }\n  }, [whiteboardId, user])\n\n  const initializeWhiteboard = async () => {\n    if (!user) return\n\n    try {\n      setIsLoading(true)\n      // Check if whiteboard exists for this lab\n      const { data: existingWhiteboards, error: fetchError } = await supabase\n        .from('whiteboards')\n        .select('*')\n        .eq('lab_id', labId)\n\n      if (fetchError) {\n        throw fetchError\n      }\n\n      if (existingWhiteboards && existingWhiteboards.length > 0) {\n        // Use the first whiteboard if multiple exist"}, {"id": "src/components/Whiteboard.tsx_6", "file": "src/components/Whiteboard.tsx", "content": "// Use the first whiteboard if multiple exist\n        const existingWhiteboard = existingWhiteboards[0]\n        setWhiteboardId(existingWhiteboard.id)\n        const data = existingWhiteboard.data as WhiteboardData\n        if (data?.elements) {\n          setElements(data.elements.filter(el => !el.isDeleted))\n        }\n        if (data?.appState) {\n          setViewState({\n            zoom: data.appState.zoom || 1,\n            offsetX: data.appState.scrollX || 0,\n            offsetY: data.appState.scrollY || 0\n          })\n        }\n      } else {\n        // Create new whiteboard\n        const { data: newWhiteboard, error: createError } = await supabase\n          .from('whiteboards')\n          .insert({\n            lab_id: labId,\n            title: `${labName} Whiteboard`,"}, {"id": "src/components/Whiteboard.tsx_7", "file": "src/components/Whiteboard.tsx", "content": ".insert({\n            lab_id: labId,\n            title: `${labName} Whiteboard`,\n            data: { \n              elements: [], \n              version: 1,\n              appState: {\n                viewBackgroundColor: '#1a1a1a',\n                gridSize: 20,\n                zoom: 1,\n                scrollX: 0,\n                scrollY: 0\n              }\n            }\n          })\n          .select()\n          .single()\n\n        if (createError) throw createError\n        setWhiteboardId(newWhiteboard.id)\n      }\n    } catch (error) {\n      console.error('Error initializing whiteboard:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const checkUserPermissions = async () => {\n    if (!user) return\n\n    try {\n      const { data: member } = await supabase"}, {"id": "src/components/Whiteboard.tsx_8", "file": "src/components/Whiteboard.tsx", "content": "if (!user) return\n\n    try {\n      const { data: member } = await supabase\n        .from('lab_members')\n        .select('role')\n        .eq('lab_id', labId)\n        .eq('user_id', user.id)\n        .single()\n\n      setIsAdmin(member?.role === 'admin')\n    } catch (error) {\n      console.error('Error checking permissions:', error)\n    }\n  }\n\n  const handleWhiteboardUpdate = (payload: any) => {\n    const data = payload.new.data as WhiteboardData\n    if (data?.elements) {\n      setElements(data.elements.filter(el => !el.isDeleted))\n    }\n    if (data?.appState) {\n      setViewState({\n        zoom: data.appState.zoom || 1,\n        offsetX: data.appState.scrollX || 0,\n        offsetY: data.appState.scrollY || 0\n      })\n    }\n  }\n\n  const handleCursorMove = (payload: any) => {"}, {"id": "src/components/Whiteboard.tsx_9", "file": "src/components/Whiteboard.tsx", "content": "})\n    }\n  }\n\n  const handleCursorMove = (payload: any) => {\n    const cursor = payload.payload as Cursor\n    if (cursor.userId !== user?.id) {\n      setCursors(prev => new Map(prev.set(cursor.userId, cursor)))\n    }\n  }\n\n  const handleUserJoined = (payload: any) => {\n    setConnectedUsers(prev => new Set(prev.add(payload.payload.userId)))\n  }\n\n  const handleUserLeft = (payload: any) => {\n    const userId = payload.payload.userId\n    setConnectedUsers(prev => {\n      const newSet = new Set(prev)\n      newSet.delete(userId)\n      return newSet\n    })\n    setCursors(prev => {\n      const newMap = new Map(prev)\n      newMap.delete(userId)\n      return newMap\n    })\n  }\n\n  const handleElementAdded = (payload: any) => {\n    const element = payload.payload as DrawingElement"}, {"id": "src/components/Whiteboard.tsx_10", "file": "src/components/Whiteboard.tsx", "content": "const element = payload.payload as DrawingElement\n    if (element.userId !== user?.id) {\n      setElements(prev => {\n        // Check if element already exists to avoid duplicates\n        const exists = prev.some(el => el.id === element.id)\n        if (exists) return prev\n        return [...prev, element]\n      })\n    }\n  }\n\n  const handleElementUpdated = (payload: any) => {\n    const { elementId, updates } = payload.payload\n    if (updates.userId !== user?.id) {\n      setElements(prev => prev.map(el => \n        el.id === elementId ? { ...el, ...updates } : el\n      ))\n    }\n  }\n\n  const handleElementDeleted = (payload: any) => {\n    const { elementId, userId: deletedByUserId } = payload.payload\n    if (deletedByUserId !== user?.id) {"}, {"id": "src/components/Whiteboard.tsx_11", "file": "src/components/Whiteboard.tsx", "content": "if (deletedByUserId !== user?.id) {\n      setElements(prev => prev.filter(el => el.id !== elementId))\n    }\n  }\n\n  const broadcastElementAdded = (element: DrawingElement) => {\n    if (channelRef.current) {\n      channelRef.current.send({\n        type: 'broadcast',\n        event: 'element_added',\n        payload: element\n      })\n    }\n  }\n\n  const broadcastElementUpdated = (elementId: string, updates: Partial<DrawingElement>) => {\n    if (channelRef.current) {\n      channelRef.current.send({\n        type: 'broadcast',\n        event: 'element_updated',\n        payload: { elementId, updates: { ...updates, userId: user?.id } }\n      })\n    }\n  }\n\n  const broadcastElementDeleted = (elementId: string) => {\n    if (channelRef.current) {\n      channelRef.current.send({"}, {"id": "src/components/Whiteboard.tsx_12", "file": "src/components/Whiteboard.tsx", "content": "if (channelRef.current) {\n      channelRef.current.send({\n        type: 'broadcast',\n        event: 'element_deleted',\n        payload: { elementId, userId: user?.id }\n      })\n    }\n  }\n\n  const saveToDatabase = useCallback(async (newElements: DrawingElement[], newViewState?: ViewState) => {\n    if (!whiteboardId) return\n\n    // Clear existing timeout\n    if (saveTimeoutRef.current) {\n      clearTimeout(saveTimeoutRef.current)\n    }\n\n    // Debounce saves to avoid too many database calls\n    saveTimeoutRef.current = setTimeout(async () => {\n      try {\n        const data: WhiteboardData = {\n          elements: newElements,\n          version: Date.now(),\n          appState: {\n            viewBackgroundColor: '#1a1a1a',\n            gridSize: 20,"}, {"id": "src/components/Whiteboard.tsx_13", "file": "src/components/Whiteboard.tsx", "content": "appState: {\n            viewBackgroundColor: '#1a1a1a',\n            gridSize: 20,\n            zoom: newViewState?.zoom || viewState.zoom,\n            scrollX: newViewState?.offsetX || viewState.offsetX,\n            scrollY: newViewState?.offsetY || viewState.offsetY\n          }\n        }\n\n        await supabase\n          .from('whiteboards')\n          .update({ data })\n          .eq('id', whiteboardId)\n      } catch (error) {\n        console.error('Error saving whiteboard:', error)\n      }\n    }, 500) // 500ms debounce\n  }, [whiteboardId, viewState])\n\n  const addElement = (element: DrawingElement) => {\n    const newElements = [...elements, element]\n    setElements(newElements)\n    setUndoStack(prev => [...prev, elements])\n    setRedoStack([])"}, {"id": "src/components/Whiteboard.tsx_14", "file": "src/components/Whiteboard.tsx", "content": "setUndoStack(prev => [...prev, elements])\n    setRedoStack([])\n    \n    // Broadcast the new element immediately\n    broadcastElementAdded(element)\n    \n    // Save to database\n    saveToDatabase(newElements)\n  }\n\n  const updateElement = (elementId: string, updates: Partial<DrawingElement>) => {\n    const newElements = elements.map(el => \n      el.id === elementId ? { ...el, ...updates } : el\n    )\n    setElements(newElements)\n    \n    // Broadcast the update immediately\n    broadcastElementUpdated(elementId, updates)\n    \n    // Save to database\n    saveToDatabase(newElements)\n  }\n\n  const deleteElement = (elementId: string) => {\n    const element = elements.find(el => el.id === elementId)\n    if (!element) return\n\n    // Check permissions"}, {"id": "src/components/Whiteboard.tsx_15", "file": "src/components/Whiteboard.tsx", "content": "if (!element) return\n\n    // Check permissions\n    if (!isAdmin && element.userId !== user?.id) {\n      return // Can't delete other users' elements unless admin\n    }\n\n    const newElements = elements.filter(el => el.id !== elementId)\n    setElements(newElements)\n    setUndoStack(prev => [...prev, elements])\n    setRedoStack([])\n    \n    // Broadcast the deletion immediately\n    broadcastElementDeleted(elementId)\n    \n    // Save to database\n    saveToDatabase(newElements)\n  }\n\n  const deleteSelectedElements = () => {\n    if (selectedElements.size === 0) return\n\n    const elementsToDelete = Array.from(selectedElements)\n    const canDeleteAll = elementsToDelete.every(id => {\n      const element = elements.find(el => el.id === id)"}, {"id": "src/components/Whiteboard.tsx_16", "file": "src/components/Whiteboard.tsx", "content": "const element = elements.find(el => el.id === id)\n      return element && (isAdmin || element.userId === user?.id)\n    })\n\n    if (!canDeleteAll) return\n\n    const newElements = elements.filter(el => !selectedElements.has(el.id))\n    setElements(newElements)\n    setSelectedElements(new Set())\n    setUndoStack(prev => [...prev, elements])\n    setRedoStack([])\n    \n    // Broadcast each deletion\n    elementsToDelete.forEach(elementId => {\n      broadcastElementDeleted(elementId)\n    })\n    \n    saveToDatabase(newElements)\n  }\n\n  const clearAll = () => {\n    if (!isAdmin) return // Only admins can clear all\n\n    setUndoStack(prev => [...prev, elements])\n    setRedoStack([])\n    \n    // Broadcast deletion of all elements\n    elements.forEach(element => {"}, {"id": "src/components/Whiteboard.tsx_17", "file": "src/components/Whiteboard.tsx", "content": "// Broadcast deletion of all elements\n    elements.forEach(element => {\n      broadcastElementDeleted(element.id)\n    })\n    \n    setElements([])\n    setSelectedElements(new Set())\n    saveToDatabase([])\n  }\n\n  const undo = () => {\n    if (undoStack.length === 0) return\n    \n    const previousState = undoStack[undoStack.length - 1]\n    setRedoStack(prev => [...prev, elements])\n    setUndoStack(prev => prev.slice(0, -1))\n    setElements(previousState)\n    setSelectedElements(new Set())\n    saveToDatabase(previousState)\n  }\n\n  const redo = () => {\n    if (redoStack.length === 0) return\n    \n    const nextState = redoStack[redoStack.length - 1]\n    setUndoStack(prev => [...prev, elements])\n    setRedoStack(prev => prev.slice(0, -1))\n    setElements(nextState)"}, {"id": "src/components/Whiteboard.tsx_18", "file": "src/components/Whiteboard.tsx", "content": "setRedoStack(prev => prev.slice(0, -1))\n    setElements(nextState)\n    setSelectedElements(new Set())\n    saveToDatabase(nextState)\n  }\n\n  const zoomIn = () => {\n    const newZoom = Math.min(viewState.zoom * 1.2, 5)\n    const newViewState = { ...viewState, zoom: newZoom }\n    setViewState(newViewState)\n    saveToDatabase(elements, newViewState)\n  }\n\n  const zoomOut = () => {\n    const newZoom = Math.max(viewState.zoom / 1.2, 0.1)\n    const newViewState = { ...viewState, zoom: newZoom }\n    setViewState(newViewState)\n    saveToDatabase(elements, newViewState)\n  }\n\n  const resetZoom = () => {\n    const newViewState = { zoom: 1, offsetX: 0, offsetY: 0 }\n    setViewState(newViewState)\n    saveToDatabase(elements, newViewState)\n  }"}, {"id": "src/components/Whiteboard.tsx_19", "file": "src/components/Whiteboard.tsx", "content": "setViewState(newViewState)\n    saveToDatabase(elements, newViewState)\n  }\n\n  const broadcastCursor = useCallback((x: number, y: number) => {\n    const now = Date.now()\n    if (now - lastCursorUpdate.current < 50) return // Throttle to 20fps\n    \n    lastCursorUpdate.current = now\n    \n    if (!user || !channelRef.current) return\n\n    const cursor: Cursor = {\n      userId: user.id,\n      userName: user.user_metadata?.name || user.email || 'Anonymous',\n      x,\n      y,\n      color: tool.color,\n      timestamp: now\n    }\n\n    channelRef.current.send({\n      type: 'broadcast',\n      event: 'cursor_move',\n      payload: cursor\n    })\n  }, [user, tool.color])\n\n  const exportWhiteboard = () => {\n    if (!canvasRef.current) return\n\n    const link = document.createElement('a')"}, {"id": "src/components/Whiteboard.tsx_20", "file": "src/components/Whiteboard.tsx", "content": "if (!canvasRef.current) return\n\n    const link = document.createElement('a')\n    link.download = `${labName}-whiteboard.png`\n    link.href = canvasRef.current.toDataURL()\n    link.click()\n  }\n\n  const getUserColor = (userId: string) => {\n    const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff']\n    let hash = 0\n    for (let i = 0; i < userId.length; i++) {\n      hash = userId.charCodeAt(i) + ((hash << 5) - hash)\n    }\n    return colors[Math.abs(hash) % colors.length]\n  }\n\n  const handleWheel = (e: React.WheelEvent) => {\n    e.preventDefault()\n    \n    if (e.ctrlKey || e.metaKey) {\n      // Zoom\n      const delta = e.deltaY > 0 ? 0.9 : 1.1\n      const newZoom = Math.max(0.1, Math.min(5, viewState.zoom * delta))"}, {"id": "src/components/Whiteboard.tsx_21", "file": "src/components/Whiteboard.tsx", "content": "const newZoom = Math.max(0.1, Math.min(5, viewState.zoom * delta))\n      \n      const rect = canvasRef.current?.getBoundingClientRect()\n      if (!rect) return\n      \n      const mouseX = e.clientX - rect.left\n      const mouseY = e.clientY - rect.top\n      \n      const newViewState = {\n        zoom: newZoom,\n        offsetX: viewState.offsetX - (mouseX * (newZoom - viewState.zoom)),\n        offsetY: viewState.offsetY - (mouseY * (newZoom - viewState.zoom))\n      }\n      \n      setViewState(newViewState)\n      saveToDatabase(elements, newViewState)\n    } else {\n      // Pan\n      const newViewState = {\n        ...viewState,\n        offsetX: viewState.offsetX - e.deltaX,\n        offsetY: viewState.offsetY - e.deltaY\n      }\n      setViewState(newViewState)"}, {"id": "src/components/Whiteboard.tsx_22", "file": "src/components/Whiteboard.tsx", "content": "offsetY: viewState.offsetY - e.deltaY\n      }\n      setViewState(newViewState)\n      saveToDatabase(elements, newViewState)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen bg-[#0F0F0F] text-white flex items-center justify-center\">\n      <div className=\"fixed top-[90px] right-8 z-50\">\n            <BoltBadge />\n      </div>\n        <div className=\"text-xl\">Loading whiteboard...</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"h-screen bg-[#0F0F0F] text-white flex flex-col overflow-hidden\">\n     <div className=\"fixed top-[90px] right-8 z-50\">\n            <BoltBadge />\n      </div>\n      \n      {/* Header */}\n      <header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md flex-shrink-0\">"}, {"id": "src/components/Whiteboard.tsx_23", "file": "src/components/Whiteboard.tsx", "content": "<header className=\"border-b border-gray-800 bg-[#0F0F0F]/95 backdrop-blur-md flex-shrink-0\">\n        <div className=\"px-6 py-4 flex justify-between items-center\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={onBack}\n              className=\"flex items-center gap-2 text-gray-300 hover:text-white transition-colors duration-300 group\"\n            >\n              <ArrowLeft className=\"w-5 h-5 group-hover:-translate-x-1 transition-transform duration-300\" />\n              Back to Lab\n            </button>\n            <div className=\"h-6 w-px bg-gray-700\" />\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">{labName} Whiteboard</h1>\n              <p className=\"text-sm text-gray-400\">"}, {"id": "src/components/Whiteboard.tsx_24", "file": "src/components/Whiteboard.tsx", "content": "<p className=\"text-sm text-gray-400\">\n                Collaborative drawing board \u00e2\u20ac\u00a2 {connectedUsers.size + 1} online \u00e2\u20ac\u00a2 Zoom: {Math.round(viewState.zoom * 100)}%\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <button\n              onClick={undo}\n              disabled={undoStack.length === 0}\n              className=\"p-2 text-gray-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-300\"\n              title=\"Undo (Ctrl+Z)\"\n            >\n              <Undo className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={redo}\n              disabled={redoStack.length === 0}"}, {"id": "src/components/Whiteboard.tsx_25", "file": "src/components/Whiteboard.tsx", "content": "<button\n              onClick={redo}\n              disabled={redoStack.length === 0}\n              className=\"p-2 text-gray-400 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-300\"\n              title=\"Redo (Ctrl+Y)\"\n            >\n              <Redo className=\"w-5 h-5\" />\n            </button>\n            <div className=\"h-6 w-px bg-gray-700\" />\n            <button\n              onClick={zoomOut}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Zoom Out\"\n            >\n              <ZoomOut className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={resetZoom}"}, {"id": "src/components/Whiteboard.tsx_26", "file": "src/components/Whiteboard.tsx", "content": "</button>\n            <button\n              onClick={resetZoom}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Reset Zoom\"\n            >\n              <RotateCcw className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={zoomIn}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Zoom In\"\n            >\n              <ZoomIn className=\"w-5 h-5\" />\n            </button>\n            <div className=\"h-6 w-px bg-gray-700\" />\n            {selectedElements.size > 0 && (\n              <button\n                onClick={deleteSelectedElements}"}, {"id": "src/components/Whiteboard.tsx_27", "file": "src/components/Whiteboard.tsx", "content": "<button\n                onClick={deleteSelectedElements}\n                className=\"p-2 text-red-400 hover:text-red-300 transition-colors duration-300\"\n                title=\"Delete Selected\"\n              >\n                <Trash2 className=\"w-5 h-5\" />\n              </button>\n            )}\n            <button\n              onClick={exportWhiteboard}\n              className=\"p-2 text-gray-400 hover:text-white transition-colors duration-300\"\n              title=\"Export as PNG\"\n            >\n              <Download className=\"w-5 h-5\" />\n            </button>\n            {isAdmin && (\n              <button\n                onClick={clearAll}"}, {"id": "src/components/Whiteboard.tsx_28", "file": "src/components/Whiteboard.tsx", "content": "{isAdmin && (\n              <button\n                onClick={clearAll}\n                className=\"px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors duration-300\"\n                title=\"Clear all (Admin only)\"\n              >\n                Clear All\n              </button>\n            )}\n            <div className=\"flex items-center gap-2 text-sm text-gray-400\">\n              <Users className=\"w-4 h-4\" />\n              {connectedUsers.size + 1}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Tool Panel */}\n        <div className=\"w-16 bg-gray-900 border-r border-gray-800 flex-shrink-0\">\n          <ToolPanel\n            tool={tool}"}, {"id": "src/components/Whiteboard.tsx_29", "file": "src/components/Whiteboard.tsx", "content": "<ToolPanel\n            tool={tool}\n            onToolChange={setTool}\n            onColorPickerToggle={() => setShowColorPicker(!showColorPicker)}\n            selectedCount={selectedElements.size}\n          />\n        </div>\n\n        {/* Canvas Container */}\n        <div \n          ref={containerRef} \n          className=\"flex-1 relative overflow-hidden bg-[#1a1a1a]\"\n          onWheel={handleWheel}\n        >\n          <WhiteboardCanvas\n            ref={canvasRef}\n            elements={elements}\n            tool={tool}\n            viewState={viewState}\n            selectedElements={selectedElements}\n            onAddElement={addElement}\n            onUpdateElement={updateElement}\n            onDeleteElement={deleteElement}\n            onSelectElements={setSelectedElements}"}, {"id": "src/components/Whiteboard.tsx_30", "file": "src/components/Whiteboard.tsx", "content": "onDeleteElement={deleteElement}\n            onSelectElements={setSelectedElements}\n            onCursorMove={broadcastCursor}\n            onViewStateChange={setViewState}\n            userId={user?.id || ''}\n            userName={user?.user_metadata?.name || user?.email || 'Anonymous'}\n            getUserColor={getUserColor}\n            isAdmin={isAdmin}\n          />\n          \n          {/* User Cursors */}\n          <UserCursors \n            cursors={cursors} \n            getUserColor={getUserColor} \n            viewState={viewState}\n          />\n          \n          {/* Color Picker */}\n          {showColorPicker && (\n            <div className=\"absolute top-4 left-20 z-10\">\n              <ColorPicker\n                color={tool.color}"}, {"id": "src/components/Whiteboard.tsx_31", "file": "src/components/Whiteboard.tsx", "content": "<ColorPicker\n                color={tool.color}\n                onChange={(color) => setTool(prev => ({ ...prev, color }))}\n                onClose={() => setShowColorPicker(false)}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/WhiteboardCanvas.tsx_0", "file": "src/components/WhiteboardCanvas.tsx", "content": "================================================\nimport React, { forwardRef, useEffect, useRef, useImperativeHandle, useCallback, useState } from 'react'\nimport rough from 'roughjs'\nimport { DrawingElement, Point, Tool, ViewState, BoundingBox } from '../types/whiteboard'\n\ninterface WhiteboardCanvasProps {\n  elements: DrawingElement[]\n  tool: Tool\n  viewState: ViewState\n  selectedElements: Set<string>\n  onAddElement: (element: DrawingElement) => void\n  onUpdateElement: (id: string, updates: Partial<DrawingElement>) => void\n  onDeleteElement: (id: string) => void\n  onSelectElements: (elements: Set<string>) => void\n  onCursorMove: (x: number, y: number) => void\n  onViewStateChange: (viewState: ViewState) => void\n  userId: string\n  userName: string\n  getUserColor: (userId: string) => string"}, {"id": "src/components/WhiteboardCanvas.tsx_1", "file": "src/components/WhiteboardCanvas.tsx", "content": "userId: string\n  userName: string\n  getUserColor: (userId: string) => string\n  isAdmin: boolean\n}\n\nexport const WhiteboardCanvas = forwardRef<HTMLCanvasElement, WhiteboardCanvasProps>(\n  ({\n    elements,\n    tool,\n    viewState,\n    selectedElements,\n    onAddElement,\n    onUpdateElement,\n    onDeleteElement,\n    onSelectElements,\n    onCursorMove,\n    onViewStateChange,\n    userId,\n    userName,\n    getUserColor,\n    isAdmin\n  }, ref) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const contextRef = useRef<CanvasRenderingContext2D | null>(null)\n    const roughCanvasRef = useRef<any>(null)\n    const [isDrawing, setIsDrawing] = useState(false)\n    const [currentElement, setCurrentElement] = useState<DrawingElement | null>(null)"}, {"id": "src/components/WhiteboardCanvas.tsx_2", "file": "src/components/WhiteboardCanvas.tsx", "content": "const [currentElement, setCurrentElement] = useState<DrawingElement | null>(null)\n    const [isDragging, setIsDragging] = useState(false)\n    const [dragStart, setDragStart] = useState<Point | null>(null)\n    const [lastPoint, setLastPoint] = useState<Point | null>(null)\n    const [isErasing, setIsErasing] = useState(false)\n    const [showTextInput, setShowTextInput] = useState(false)\n    const [textInputPosition, setTextInputPosition] = useState<Point>({ x: 0, y: 0 })\n    const [textInputValue, setTextInputValue] = useState('')\n\n    useImperativeHandle(ref, () => canvasRef.current!)\n\n    useEffect(() => {\n      const canvas = canvasRef.current\n      if (!canvas) return\n\n      const context = canvas.getContext('2d')\n      if (!context) return\n\n      // Set up canvas"}, {"id": "src/components/WhiteboardCanvas.tsx_3", "file": "src/components/WhiteboardCanvas.tsx", "content": "const context = canvas.getContext('2d')\n      if (!context) return\n\n      // Set up canvas\n      const rect = canvas.getBoundingClientRect()\n      canvas.width = rect.width * window.devicePixelRatio\n      canvas.height = rect.height * window.devicePixelRatio\n      canvas.style.width = `${rect.width}px`\n      canvas.style.height = `${rect.height}px`\n\n      context.scale(window.devicePixelRatio, window.devicePixelRatio)\n      context.lineCap = 'round'\n      context.lineJoin = 'round'\n      context.imageSmoothingEnabled = true\n\n      contextRef.current = context\n      roughCanvasRef.current = rough.canvas(canvas)\n\n      // Handle resize\n      const handleResize = () => {\n        const rect = canvas.getBoundingClientRect()\n        canvas.width = rect.width * window.devicePixelRatio"}, {"id": "src/components/WhiteboardCanvas.tsx_4", "file": "src/components/WhiteboardCanvas.tsx", "content": "canvas.width = rect.width * window.devicePixelRatio\n        canvas.height = rect.height * window.devicePixelRatio\n        canvas.style.width = `${rect.width}px`\n        canvas.style.height = `${rect.height}px`\n        context.scale(window.devicePixelRatio, window.devicePixelRatio)\n        redraw()\n      }\n\n      window.addEventListener('resize', handleResize)\n      return () => window.removeEventListener('resize', handleResize)\n    }, [])\n\n    const redraw = useCallback(() => {\n      const context = contextRef.current\n      const roughCanvas = roughCanvasRef.current\n      if (!context || !roughCanvas) return\n\n      const canvas = context.canvas\n      \n      // Clear canvas\n      context.save()\n      context.setTransform(1, 0, 0, 1, 0, 0)\n      context.fillStyle = '#1a1a1a'"}, {"id": "src/components/WhiteboardCanvas.tsx_5", "file": "src/components/WhiteboardCanvas.tsx", "content": "context.setTransform(1, 0, 0, 1, 0, 0)\n      context.fillStyle = '#1a1a1a'\n      context.fillRect(0, 0, canvas.width, canvas.height)\n      context.restore()\n\n      // Apply transformations\n      context.save()\n      context.translate(viewState.offsetX, viewState.offsetY)\n      context.scale(viewState.zoom, viewState.zoom)\n\n      // Draw grid\n      drawGrid(context)\n\n      // Draw all elements\n      elements.forEach(element => {\n        const isSelected = selectedElements.has(element.id)\n        drawElement(context, roughCanvas, element, isSelected)\n      })\n\n      // Draw current element being drawn\n      if (currentElement) {\n        drawElement(context, roughCanvas, currentElement, false)\n      }\n\n      context.restore()"}, {"id": "src/components/WhiteboardCanvas.tsx_6", "file": "src/components/WhiteboardCanvas.tsx", "content": "drawElement(context, roughCanvas, currentElement, false)\n      }\n\n      context.restore()\n    }, [elements, currentElement, selectedElements, viewState])\n\n    useEffect(() => {\n      redraw()\n    }, [redraw])\n\n    const drawGrid = (context: CanvasRenderingContext2D) => {\n      const gridSize = 20\n      const canvas = context.canvas\n      \n      context.strokeStyle = '#2a2a2a'\n      context.lineWidth = 0.5\n      context.globalAlpha = 0.3\n\n      const startX = Math.floor(-viewState.offsetX / viewState.zoom / gridSize) * gridSize\n      const startY = Math.floor(-viewState.offsetY / viewState.zoom / gridSize) * gridSize\n      const endX = startX + (canvas.width / viewState.zoom) + gridSize\n      const endY = startY + (canvas.height / viewState.zoom) + gridSize"}, {"id": "src/components/WhiteboardCanvas.tsx_7", "file": "src/components/WhiteboardCanvas.tsx", "content": "const endY = startY + (canvas.height / viewState.zoom) + gridSize\n\n      context.beginPath()\n      for (let x = startX; x < endX; x += gridSize) {\n        context.moveTo(x, startY)\n        context.lineTo(x, endY)\n      }\n      for (let y = startY; y < endY; y += gridSize) {\n        context.moveTo(startX, y)\n        context.lineTo(endX, y)\n      }\n      context.stroke()\n      context.globalAlpha = 1\n    }\n\n    const drawElement = (context: CanvasRenderingContext2D, roughCanvas: any, element: DrawingElement, isSelected: boolean) => {\n      context.save()\n      context.globalAlpha = element.opacity || 1\n      context.strokeStyle = element.color\n      context.fillStyle = element.fill || 'transparent'\n      context.lineWidth = element.strokeWidth\n\n      // Set line dash for stroke style"}, {"id": "src/components/WhiteboardCanvas.tsx_8", "file": "src/components/WhiteboardCanvas.tsx", "content": "context.lineWidth = element.strokeWidth\n\n      // Set line dash for stroke style\n      if (element.strokeStyle === 'dashed') {\n        context.setLineDash([10, 5])\n      } else if (element.strokeStyle === 'dotted') {\n        context.setLineDash([2, 3])\n      } else {\n        context.setLineDash([])\n      }\n\n      switch (element.type) {\n        case 'pen':\n          drawPenStroke(context, element)\n          break\n        case 'rectangle':\n          drawRectangle(roughCanvas, element)\n          break\n        case 'circle':\n          drawCircle(roughCanvas, element)\n          break\n        case 'line':\n          drawLine(roughCanvas, element)\n          break\n        case 'arrow':\n          drawArrow(context, element)\n          break\n        case 'diamond':"}, {"id": "src/components/WhiteboardCanvas.tsx_9", "file": "src/components/WhiteboardCanvas.tsx", "content": "case 'arrow':\n          drawArrow(context, element)\n          break\n        case 'diamond':\n          drawDiamond(roughCanvas, element)\n          break\n        case 'text':\n          drawText(context, element)\n          break\n      }\n\n      // Draw selection outline (no resize handles)\n      if (isSelected) {\n        drawSelectionOutline(context, element)\n      }\n\n      context.restore()\n    }\n\n    const drawPenStroke = (context: CanvasRenderingContext2D, element: DrawingElement) => {\n      if (element.points.length < 2) return\n\n      context.beginPath()\n      context.moveTo(element.points[0].x, element.points[0].y)\n\n      // Use quadratic curves for smoother lines\n      for (let i = 1; i < element.points.length - 1; i++) {\n        const current = element.points[i]"}, {"id": "src/components/WhiteboardCanvas.tsx_10", "file": "src/components/WhiteboardCanvas.tsx", "content": "const current = element.points[i]\n        const next = element.points[i + 1]\n        const cpx = (current.x + next.x) / 2\n        const cpy = (current.y + next.y) / 2\n        context.quadraticCurveTo(current.x, current.y, cpx, cpy)\n      }\n\n      // Draw the last point\n      if (element.points.length > 1) {\n        const lastPoint = element.points[element.points.length - 1]\n        context.lineTo(lastPoint.x, lastPoint.y)\n      }\n\n      context.stroke()\n    }\n\n    const drawRectangle = (roughCanvas: any, element: DrawingElement) => {\n      if (element.points.length < 2) return\n\n      const [start, end] = element.points\n      const width = end.x - start.x\n      const height = end.y - start.y\n\n      const options = {\n        stroke: element.color,"}, {"id": "src/components/WhiteboardCanvas.tsx_11", "file": "src/components/WhiteboardCanvas.tsx", "content": "const height = end.y - start.y\n\n      const options = {\n        stroke: element.color,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness || 1,\n        seed: element.seed || 1,\n        fillStyle: element.fillStyle || 'hachure',\n        fill: element.fill === 'transparent' ? undefined : element.fill\n      }\n\n      roughCanvas.rectangle(start.x, start.y, width, height, options)\n    }\n\n    const drawCircle = (roughCanvas: any, element: DrawingElement) => {\n      if (element.points.length < 2) return\n\n      const [start, end] = element.points\n      const radius = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2))\n\n      const options = {\n        stroke: element.color,\n        strokeWidth: element.strokeWidth,"}, {"id": "src/components/WhiteboardCanvas.tsx_12", "file": "src/components/WhiteboardCanvas.tsx", "content": "const options = {\n        stroke: element.color,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness || 1,\n        seed: element.seed || 1,\n        fillStyle: element.fillStyle || 'hachure',\n        fill: element.fill === 'transparent' ? undefined : element.fill\n      }\n\n      roughCanvas.circle(start.x, start.y, radius * 2, options)\n    }\n\n    const drawLine = (roughCanvas: any, element: DrawingElement) => {\n      if (element.points.length < 2) return\n\n      const [start, end] = element.points\n\n      const options = {\n        stroke: element.color,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness || 1,\n        seed: element.seed || 1\n      }\n\n      roughCanvas.line(start.x, start.y, end.x, end.y, options)\n    }"}, {"id": "src/components/WhiteboardCanvas.tsx_13", "file": "src/components/WhiteboardCanvas.tsx", "content": "}\n\n      roughCanvas.line(start.x, start.y, end.x, end.y, options)\n    }\n\n    const drawArrow = (context: CanvasRenderingContext2D, element: DrawingElement) => {\n      if (element.points.length < 2) return\n\n      const [start, end] = element.points\n      const angle = Math.atan2(end.y - start.y, end.x - start.x)\n      const arrowLength = 15\n      const arrowAngle = Math.PI / 6\n\n      // Draw line\n      context.beginPath()\n      context.moveTo(start.x, start.y)\n      context.lineTo(end.x, end.y)\n      context.stroke()\n\n      // Draw arrowhead\n      context.beginPath()\n      context.moveTo(end.x, end.y)\n      context.lineTo(\n        end.x - arrowLength * Math.cos(angle - arrowAngle),\n        end.y - arrowLength * Math.sin(angle - arrowAngle)\n      )\n      context.moveTo(end.x, end.y)"}, {"id": "src/components/WhiteboardCanvas.tsx_14", "file": "src/components/WhiteboardCanvas.tsx", "content": ")\n      context.moveTo(end.x, end.y)\n      context.lineTo(\n        end.x - arrowLength * Math.cos(angle + arrowAngle),\n        end.y - arrowLength * Math.sin(angle + arrowAngle)\n      )\n      context.stroke()\n    }\n\n    const drawDiamond = (roughCanvas: any, element: DrawingElement) => {\n      if (element.points.length < 2) return\n\n      const [start, end] = element.points\n      const centerX = (start.x + end.x) / 2\n      const centerY = (start.y + end.y) / 2\n      const width = Math.abs(end.x - start.x)\n      const height = Math.abs(end.y - start.y)\n\n      const points = [\n        [centerX, start.y],\n        [end.x, centerY],\n        [centerX, end.y],\n        [start.x, centerY]\n      ]\n\n      const options = {\n        stroke: element.color,\n        strokeWidth: element.strokeWidth,"}, {"id": "src/components/WhiteboardCanvas.tsx_15", "file": "src/components/WhiteboardCanvas.tsx", "content": "const options = {\n        stroke: element.color,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness || 1,\n        seed: element.seed || 1,\n        fillStyle: element.fillStyle || 'hachure',\n        fill: element.fill === 'transparent' ? undefined : element.fill\n      }\n\n      roughCanvas.polygon(points, options)\n    }\n\n    const drawText = (context: CanvasRenderingContext2D, element: DrawingElement) => {\n      if (!element.text || element.points.length === 0) return\n\n      // Use handwritten font\n      const fontSize = element.fontSize || 20\n      context.font = `${fontSize}px \"Kalam\", \"Comic Sans MS\", cursive`\n      context.fillStyle = element.color\n      context.textBaseline = 'top'\n      \n      const lines = element.text.split('\\n')"}, {"id": "src/components/WhiteboardCanvas.tsx_16", "file": "src/components/WhiteboardCanvas.tsx", "content": "context.textBaseline = 'top'\n      \n      const lines = element.text.split('\\n')\n      const lineHeight = fontSize * 1.3\n      \n      lines.forEach((line, index) => {\n        context.fillText(line, element.points[0].x, element.points[0].y + index * lineHeight)\n      })\n    }\n\n    const drawSelectionOutline = (context: CanvasRenderingContext2D, element: DrawingElement) => {\n      const bounds = getElementBounds(element)\n      if (!bounds) return\n\n      context.save()\n      context.strokeStyle = '#4285f4'\n      context.lineWidth = 2 / viewState.zoom\n      context.setLineDash([5 / viewState.zoom, 5 / viewState.zoom])\n      context.strokeRect(bounds.x - 5, bounds.y - 5, bounds.width + 10, bounds.height + 10)\n      context.restore()\n    }"}, {"id": "src/components/WhiteboardCanvas.tsx_17", "file": "src/components/WhiteboardCanvas.tsx", "content": "context.restore()\n    }\n\n    const getElementBounds = (element: DrawingElement): BoundingBox | null => {\n      if (element.points.length === 0) return null\n\n      if (element.type === 'text' && element.text) {\n        const fontSize = element.fontSize || 20\n        const lines = element.text.split('\\n')\n        const maxLineLength = Math.max(...lines.map(line => line.length))\n        const approximateCharWidth = fontSize * 0.6 // Approximate character width\n        const lineHeight = fontSize * 1.3\n\n        return {\n          x: element.points[0].x,\n          y: element.points[0].y,\n          width: Math.max(maxLineLength * approximateCharWidth, 100), // Minimum width\n          height: lines.length * lineHeight\n        }\n      }\n\n      const xs = element.points.map(p => p.x)"}, {"id": "src/components/WhiteboardCanvas.tsx_18", "file": "src/components/WhiteboardCanvas.tsx", "content": "}\n      }\n\n      const xs = element.points.map(p => p.x)\n      const ys = element.points.map(p => p.y)\n      const minX = Math.min(...xs)\n      const maxX = Math.max(...xs)\n      const minY = Math.min(...ys)\n      const maxY = Math.max(...ys)\n\n      return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n      }\n    }\n\n    const getPointFromEvent = (e: React.MouseEvent | React.TouchEvent): Point => {\n      const canvas = canvasRef.current\n      if (!canvas) return { x: 0, y: 0 }\n\n      const rect = canvas.getBoundingClientRect()\n      const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX\n      const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY\n\n      // Convert screen coordinates to canvas coordinates"}, {"id": "src/components/WhiteboardCanvas.tsx_19", "file": "src/components/WhiteboardCanvas.tsx", "content": "// Convert screen coordinates to canvas coordinates\n      const canvasX = (clientX - rect.left - viewState.offsetX) / viewState.zoom\n      const canvasY = (clientY - rect.top - viewState.offsetY) / viewState.zoom\n\n      return { x: canvasX, y: canvasY }\n    }\n\n    const getElementAtPoint = (point: Point): DrawingElement | null => {\n      // Check elements in reverse order (top to bottom)\n      for (let i = elements.length - 1; i >= 0; i--) {\n        const element = elements[i]\n        if (isPointInElement(point, element)) {\n          return element\n        }\n      }\n      return null\n    }\n\n    const isPointInElement = (point: Point, element: DrawingElement): boolean => {\n      const bounds = getElementBounds(element)\n      if (!bounds) return false"}, {"id": "src/components/WhiteboardCanvas.tsx_20", "file": "src/components/WhiteboardCanvas.tsx", "content": "const bounds = getElementBounds(element)\n      if (!bounds) return false\n\n      const padding = Math.max(element.strokeWidth / 2, 5)\n      return (\n        point.x >= bounds.x - padding &&\n        point.x <= bounds.x + bounds.width + padding &&\n        point.y >= bounds.y - padding &&\n        point.y <= bounds.y + bounds.height + padding\n      )\n    }\n\n    const showTextInputDialog = (position: Point) => {\n      setTextInputPosition(position)\n      setTextInputValue('')\n      setShowTextInput(true)\n    }\n\n    const handleTextInputSubmit = () => {\n      if (textInputValue.trim()) {\n        const newElement: DrawingElement = {\n          id: `${Date.now()}-${Math.random()}`,\n          type: 'text',\n          points: [textInputPosition],\n          color: tool.color,"}, {"id": "src/components/WhiteboardCanvas.tsx_21", "file": "src/components/WhiteboardCanvas.tsx", "content": "type: 'text',\n          points: [textInputPosition],\n          color: tool.color,\n          strokeWidth: tool.strokeWidth,\n          userId,\n          userName,\n          timestamp: Date.now(),\n          text: textInputValue.trim(),\n          fontSize: 20,\n          opacity: tool.opacity\n        }\n\n        onAddElement(newElement)\n      }\n      \n      setShowTextInput(false)\n      setTextInputValue('')\n    }\n\n    const handleTextInputCancel = () => {\n      setShowTextInput(false)\n      setTextInputValue('')\n    }\n\n    const handleMouseDown = (e: React.MouseEvent) => {\n      const point = getPointFromEvent(e)\n      onCursorMove(point.x, point.y)\n\n      if (tool.type === 'select') {\n        const elementAtPoint = getElementAtPoint(point)\n        \n        if (elementAtPoint) {"}, {"id": "src/components/WhiteboardCanvas.tsx_22", "file": "src/components/WhiteboardCanvas.tsx", "content": "const elementAtPoint = getElementAtPoint(point)\n        \n        if (elementAtPoint) {\n          // Handle selection\n          if (!e.shiftKey) {\n            onSelectElements(new Set([elementAtPoint.id]))\n          } else {\n            const newSelection = new Set(selectedElements)\n            if (newSelection.has(elementAtPoint.id)) {\n              newSelection.delete(elementAtPoint.id)\n            } else {\n              newSelection.add(elementAtPoint.id)\n            }\n            onSelectElements(newSelection)\n          }\n\n          // Start dragging for selected elements\n          setIsDragging(true)\n          setDragStart(point)\n        } else if (!e.shiftKey) {\n          onSelectElements(new Set())\n        }\n        return\n      }\n\n      if (tool.type === 'eraser') {"}, {"id": "src/components/WhiteboardCanvas.tsx_23", "file": "src/components/WhiteboardCanvas.tsx", "content": "}\n        return\n      }\n\n      if (tool.type === 'eraser') {\n        setIsErasing(true)\n        const elementAtPoint = getElementAtPoint(point)\n        if (elementAtPoint) {\n          // Check permissions\n          if (isAdmin || elementAtPoint.userId === userId) {\n            onDeleteElement(elementAtPoint.id)\n          }\n        }\n        return\n      }\n\n      if (tool.type === 'text') {\n        const elementAtPoint = getElementAtPoint(point)\n        \n        // If clicking on existing text element, edit it\n        if (elementAtPoint && elementAtPoint.type === 'text') {\n          if (isAdmin || elementAtPoint.userId === userId) {\n            setTextInputPosition(point)\n            setTextInputValue(elementAtPoint.text || '')\n            setShowTextInput(true)"}, {"id": "src/components/WhiteboardCanvas.tsx_24", "file": "src/components/WhiteboardCanvas.tsx", "content": "setTextInputValue(elementAtPoint.text || '')\n            setShowTextInput(true)\n            // Store the element ID for updating\n            setTimeout(() => {\n              const input = document.getElementById('text-input') as HTMLInputElement\n              if (input) {\n                input.focus()\n                input.select()\n                // Store element ID in a data attribute for later use\n                input.setAttribute('data-element-id', elementAtPoint.id)\n              }\n            }, 10)\n            return\n          }\n        }\n\n        // Create new text element\n        showTextInputDialog(point)\n        return\n      }\n\n      setIsDrawing(true)\n      setLastPoint(point)\n\n      const newElement: DrawingElement = {"}, {"id": "src/components/WhiteboardCanvas.tsx_25", "file": "src/components/WhiteboardCanvas.tsx", "content": "setIsDrawing(true)\n      setLastPoint(point)\n\n      const newElement: DrawingElement = {\n        id: `${Date.now()}-${Math.random()}`,\n        type: tool.type,\n        points: [point],\n        color: tool.color,\n        strokeWidth: tool.strokeWidth,\n        userId,\n        userName,\n        timestamp: Date.now(),\n        roughness: tool.roughness,\n        fill: tool.fill,\n        opacity: tool.opacity,\n        strokeStyle: tool.strokeStyle,\n        fillStyle: tool.fillStyle,\n        seed: Math.floor(Math.random() * 1000)\n      }\n\n      setCurrentElement(newElement)\n    }\n\n    const handleMouseMove = (e: React.MouseEvent) => {\n      const point = getPointFromEvent(e)\n      onCursorMove(point.x, point.y)\n\n      if (isDragging && dragStart && selectedElements.size > 0) {"}, {"id": "src/components/WhiteboardCanvas.tsx_26", "file": "src/components/WhiteboardCanvas.tsx", "content": "if (isDragging && dragStart && selectedElements.size > 0) {\n        const deltaX = point.x - dragStart.x\n        const deltaY = point.y - dragStart.y\n\n        selectedElements.forEach(elementId => {\n          const element = elements.find(el => el.id === elementId)\n          if (element && (isAdmin || element.userId === userId)) {\n            const newPoints = element.points.map(p => ({\n              x: p.x + deltaX,\n              y: p.y + deltaY\n            }))\n            onUpdateElement(elementId, { points: newPoints })\n          }\n        })\n\n        setDragStart(point)\n        return\n      }\n\n      if (isErasing) {\n        const elementAtPoint = getElementAtPoint(point)\n        if (elementAtPoint) {\n          // Check permissions"}, {"id": "src/components/WhiteboardCanvas.tsx_27", "file": "src/components/WhiteboardCanvas.tsx", "content": "if (elementAtPoint) {\n          // Check permissions\n          if (isAdmin || elementAtPoint.userId === userId) {\n            onDeleteElement(elementAtPoint.id)\n          }\n        }\n        return\n      }\n\n      if (!isDrawing || !currentElement) return\n\n      if (tool.type === 'pen') {\n        // Smooth line drawing with distance threshold\n        if (lastPoint) {\n          const distance = Math.sqrt(\n            Math.pow(point.x - lastPoint.x, 2) + \n            Math.pow(point.y - lastPoint.y, 2)\n          )\n\n          if (distance > 2) { // Minimum distance for smoother lines\n            const updatedElement = {\n              ...currentElement,\n              points: [...currentElement.points, point]\n            }\n            setCurrentElement(updatedElement)"}, {"id": "src/components/WhiteboardCanvas.tsx_28", "file": "src/components/WhiteboardCanvas.tsx", "content": "}\n            setCurrentElement(updatedElement)\n            setLastPoint(point)\n          }\n        }\n      } else {\n        // For shapes, update the end point\n        const updatedElement = {\n          ...currentElement,\n          points: [currentElement.points[0], point]\n        }\n        setCurrentElement(updatedElement)\n      }\n    }\n\n    const handleMouseUp = () => {\n      if (isDragging) {\n        setIsDragging(false)\n        setDragStart(null)\n        return\n      }\n\n      if (isErasing) {\n        setIsErasing(false)\n        return\n      }\n\n      if (!isDrawing || !currentElement) return\n\n      setIsDrawing(false)\n      onAddElement(currentElement)\n      setCurrentElement(null)\n      setLastPoint(null)\n    }\n\n    const handleDoubleClick = (e: React.MouseEvent) => {"}, {"id": "src/components/WhiteboardCanvas.tsx_29", "file": "src/components/WhiteboardCanvas.tsx", "content": "setLastPoint(null)\n    }\n\n    const handleDoubleClick = (e: React.MouseEvent) => {\n      if (tool.type === 'select') {\n        const point = getPointFromEvent(e)\n        const elementAtPoint = getElementAtPoint(point)\n        \n        if (elementAtPoint && elementAtPoint.type === 'text') {\n          if (isAdmin || elementAtPoint.userId === userId) {\n            setTextInputPosition(point)\n            setTextInputValue(elementAtPoint.text || '')\n            setShowTextInput(true)\n            // Store the element ID for updating\n            setTimeout(() => {\n              const input = document.getElementById('text-input') as HTMLInputElement\n              if (input) {\n                input.focus()\n                input.select()"}, {"id": "src/components/WhiteboardCanvas.tsx_30", "file": "src/components/WhiteboardCanvas.tsx", "content": "if (input) {\n                input.focus()\n                input.select()\n                input.setAttribute('data-element-id', elementAtPoint.id)\n              }\n            }, 10)\n          }\n        }\n      }\n    }\n\n    // Keyboard shortcuts\n    useEffect(() => {\n      const handleKeyDown = (e: KeyboardEvent) => {\n        if (showTextInput) return // Don't handle shortcuts while text input is open\n\n        if (e.key === 'Delete' || e.key === 'Backspace') {\n          if (selectedElements.size > 0) {\n            selectedElements.forEach(id => {\n              const element = elements.find(el => el.id === id)\n              if (element && (isAdmin || element.userId === userId)) {\n                onDeleteElement(id)\n              }\n            })"}, {"id": "src/components/WhiteboardCanvas.tsx_31", "file": "src/components/WhiteboardCanvas.tsx", "content": "onDeleteElement(id)\n              }\n            })\n            onSelectElements(new Set())\n          }\n        }\n      }\n\n      window.addEventListener('keydown', handleKeyDown)\n      return () => window.removeEventListener('keydown', handleKeyDown)\n    }, [selectedElements, elements, isAdmin, userId, onDeleteElement, onSelectElements, showTextInput])\n\n    const getCursor = () => {\n      if (isDragging) return 'grabbing'\n      \n      switch (tool.type) {\n        case 'eraser':\n          return 'grab'\n        case 'select':\n          return 'default'\n        case 'text':\n          return 'text'\n        default:\n          return 'crosshair'\n      }\n    }\n\n    return (\n      <div className=\"relative w-full h-full\">\n        <canvas\n          ref={canvasRef}"}, {"id": "src/components/WhiteboardCanvas.tsx_32", "file": "src/components/WhiteboardCanvas.tsx", "content": "<div className=\"relative w-full h-full\">\n        <canvas\n          ref={canvasRef}\n          className=\"w-full h-full\"\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n          onDoubleClick={handleDoubleClick}\n          style={{ cursor: getCursor() }}\n        />\n        \n        {/* Text Input Popup */}\n        {showTextInput && (\n          <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50\">\n            <div className=\"bg-gray-900 border border-gray-700 rounded-lg p-6 shadow-2xl max-w-md w-full mx-4\">\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Add Text</h3>\n              <textarea"}, {"id": "src/components/WhiteboardCanvas.tsx_33", "file": "src/components/WhiteboardCanvas.tsx", "content": "<textarea\n                id=\"text-input\"\n                value={textInputValue}\n                onChange={(e) => setTextInputValue(e.target.value)}\n                className=\"w-full h-32 bg-gray-800 border border-gray-600 rounded-lg text-white p-3 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 handwritten\"\n                placeholder=\"Enter your text here...\"\n                style={{ fontSize: '16px' }}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' && e.ctrlKey) {\n                    e.preventDefault()\n                    const input = e.target as HTMLTextAreaElement\n                    const elementId = input.getAttribute('data-element-id')\n                    \n                    if (elementId) {"}, {"id": "src/components/WhiteboardCanvas.tsx_34", "file": "src/components/WhiteboardCanvas.tsx", "content": "if (elementId) {\n                      // Update existing element\n                      onUpdateElement(elementId, { text: textInputValue.trim() })\n                    } else {\n                      // Create new element\n                      handleTextInputSubmit()\n                    }\n                  } else if (e.key === 'Escape') {\n                    e.preventDefault()\n                    handleTextInputCancel()\n                  }\n                }}\n                autoFocus\n              />\n              <div className=\"flex justify-between items-center mt-4\">\n                <div className=\"text-sm text-gray-400\">\n                  Press Ctrl+Enter to add text, Esc to cancel\n                </div>"}, {"id": "src/components/WhiteboardCanvas.tsx_35", "file": "src/components/WhiteboardCanvas.tsx", "content": "Press Ctrl+Enter to add text, Esc to cancel\n                </div>\n                <div className=\"flex gap-3\">\n                  <button\n                    onClick={handleTextInputCancel}\n                    className=\"px-4 py-2 text-gray-400 hover:text-white transition-colors duration-300\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    onClick={() => {\n                      const input = document.getElementById('text-input') as HTMLTextAreaElement\n                      const elementId = input?.getAttribute('data-element-id')\n                      \n                      if (elementId) {\n                        // Update existing element"}, {"id": "src/components/WhiteboardCanvas.tsx_36", "file": "src/components/WhiteboardCanvas.tsx", "content": "if (elementId) {\n                        // Update existing element\n                        onUpdateElement(elementId, { text: textInputValue.trim() })\n                        setShowTextInput(false)\n                        setTextInputValue('')\n                      } else {\n                        // Create new element\n                        handleTextInputSubmit()\n                      }\n                    }}\n                    className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-300\"\n                  >\n                    Add Text\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n)"}, {"id": "src/components/WhiteboardCanvas.tsx_37", "file": "src/components/WhiteboardCanvas.tsx", "content": "</div>\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n)\n\nWhiteboardCanvas.displayName = 'WhiteboardCanvas'"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_0", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "================================================\nimport React from 'react'\n\ninterface AminoAcidVisualizerProps {\n  sequences: Record<string, string>\n  pdbId: string\n}\n\nexport function AminoAcidVisualizer({ sequences, pdbId }: AminoAcidVisualizerProps) {\n  // Amino acid color mapping\n  const getAminoAcidColor = (aa: string): string => {\n    const upperAA = aa.toUpperCase()\n    \n    // Hydrophobic (A, V, L, I, P, W, F, M): \u00f0\u0178\u0178\u00a4\n    if (['A', 'V', 'L', 'I', 'P', 'W', 'F', 'M'].includes(upperAA)) {\n      return 'bg-amber-700 text-amber-100'\n    }\n    \n    // Polar (S, T, Y, N, Q, C): \u00f0\u0178\u0178\u00a2\n    if (['S', 'T', 'Y', 'N', 'Q', 'C'].includes(upperAA)) {\n      return 'bg-green-600 text-green-100'\n    }\n    \n    // Positive (K, R, H): \u00f0\u0178\u201d\u00b5\n    if (['K', 'R', 'H'].includes(upperAA)) {"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_1", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "}\n    \n    // Positive (K, R, H): \u00f0\u0178\u201d\u00b5\n    if (['K', 'R', 'H'].includes(upperAA)) {\n      return 'bg-blue-600 text-blue-100'\n    }\n    \n    // Negative (D, E): \u00f0\u0178\u201d\u00b4\n    if (['D', 'E'].includes(upperAA)) {\n      return 'bg-red-600 text-red-100'\n    }\n    \n    // Special (G): \u00f0\u0178\u0178\u00a3\n    if (upperAA === 'G') {\n      return 'bg-purple-600 text-purple-100'\n    }\n    \n    // Default for unknown amino acids\n    return 'bg-gray-600 text-gray-100'\n  }\n\n  // Convert three-letter amino acid codes to single letters\n  const convertToSingleLetter = (sequence: string): string => {\n    const threeToOne: Record<string, string> = {\n      'ALA': 'A', 'ARG': 'R', 'ASN': 'N', 'ASP': 'D', 'CYS': 'C',\n      'GLU': 'E', 'GLN': 'Q', 'GLY': 'G', 'HIS': 'H', 'ILE': 'I',"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_2", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "'GLU': 'E', 'GLN': 'Q', 'GLY': 'G', 'HIS': 'H', 'ILE': 'I',\n      'LEU': 'L', 'LYS': 'K', 'MET': 'M', 'PHE': 'F', 'PRO': 'P',\n      'SER': 'S', 'THR': 'T', 'TRP': 'W', 'TYR': 'Y', 'VAL': 'V'\n    }\n\n    // If sequence contains three-letter codes, convert them\n    if (sequence.includes('ALA') || sequence.includes('ARG') || sequence.includes('ASN')) {\n      return sequence.replace(/([A-Z]{3})/g, (match) => threeToOne[match] || match)\n    }\n    \n    // Otherwise, assume it's already single-letter codes\n    return sequence\n  }\n\n  // Break sequence into blocks of 50 characters\n  const formatSequence = (sequence: string): string[][] => {\n    const singleLetterSeq = convertToSingleLetter(sequence)\n    const blocks: string[][] = []"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_3", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "const singleLetterSeq = convertToSingleLetter(sequence)\n    const blocks: string[][] = []\n    \n    for (let i = 0; i < singleLetterSeq.length; i += 50) {\n      const block = singleLetterSeq.slice(i, i + 50).split('')\n      blocks.push(block)\n    }\n    \n    return blocks\n  }\n\n  // Get amino acid type emoji\n  const getAminoAcidEmoji = (aa: string): string => {\n    const upperAA = aa.toUpperCase()\n    \n    if (['A', 'V', 'L', 'I', 'P', 'W', 'F', 'M'].includes(upperAA)) return '\u00f0\u0178\u0178\u00a4'\n    if (['S', 'T', 'Y', 'N', 'Q', 'C'].includes(upperAA)) return '\u00f0\u0178\u0178\u00a2'\n    if (['K', 'R', 'H'].includes(upperAA)) return '\u00f0\u0178\u201d\u00b5'\n    if (['D', 'E'].includes(upperAA)) return '\u00f0\u0178\u201d\u00b4'\n    if (upperAA === 'G') return '\u00f0\u0178\u0178\u00a3'\n    \n    return '\u00e2\u0161\u00aa'\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_4", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "return '\u00e2\u0161\u00aa'\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-gray-800 rounded-lg p-4\">\n        <h4 className=\"text-lg font-semibold text-white mb-2\">PDB: {pdbId}</h4>\n        <div className=\"text-sm text-gray-400\">\n          {Object.keys(sequences).length} chain{Object.keys(sequences).length !== 1 ? 's' : ''} found\n        </div>\n      </div>\n\n      {/* Color Legend */}\n      <div className=\"bg-gray-800 rounded-lg p-4\">\n        <h5 className=\"text-sm font-semibold text-white mb-3\">Amino Acid Types</h5>\n        <div className=\"grid grid-cols-1 gap-2 text-xs\">\n          <div className=\"flex items-center gap-2\">\n            <span>\u00f0\u0178\u0178\u00a4</span>\n            <span className=\"text-gray-300\">Hydrophobic (A,V,L,I,P,W,F,M)</span>\n          </div>"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_5", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "<span className=\"text-gray-300\">Hydrophobic (A,V,L,I,P,W,F,M)</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span>\u00f0\u0178\u0178\u00a2</span>\n            <span className=\"text-gray-300\">Polar (S,T,Y,N,Q,C)</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span>\u00f0\u0178\u201d\u00b5</span>\n            <span className=\"text-gray-300\">Positive (K,R,H)</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span>\u00f0\u0178\u201d\u00b4</span>\n            <span className=\"text-gray-300\">Negative (D,E)</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span>\u00f0\u0178\u0178\u00a3</span>\n            <span className=\"text-gray-300\">Special (G)</span>\n          </div>\n        </div>\n      </div>"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_6", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "</div>\n        </div>\n      </div>\n\n      {/* Sequences */}\n      <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n        {Object.entries(sequences).map(([chainId, sequence]) => {\n          const formattedBlocks = formatSequence(sequence)\n          const totalLength = convertToSingleLetter(sequence).length\n          \n          return (\n            <div key={chainId} className=\"bg-gray-800 rounded-lg p-4\">\n              {/* Chain Header */}\n              <div className=\"flex items-center justify-between mb-3\">\n                <h5 className=\"text-lg font-bold text-white\">\n                  Chain {chainId}\n                </h5>\n                <div className=\"text-sm text-gray-400\">\n                  {totalLength} residues\n                </div>\n              </div>"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_7", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "{totalLength} residues\n                </div>\n              </div>\n\n              {/* Sequence Blocks */}\n              <div className=\"space-y-3\">\n                {formattedBlocks.map((block, blockIndex) => (\n                  <div key={blockIndex} className=\"space-y-2\">\n                    {/* Position indicator */}\n                    <div className=\"text-xs text-gray-500 font-mono\">\n                      {(blockIndex * 50 + 1).toString().padStart(4, ' ')}\n                    </div>\n                    \n                    {/* Amino acid sequence */}\n                    <div className=\"flex flex-wrap gap-1\">\n                      {block.map((aa, aaIndex) => (\n                        <div\n                          key={aaIndex}\n                          className={`"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_8", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "key={aaIndex}\n                          className={`\n                            w-6 h-6 flex items-center justify-center text-xs font-mono font-bold rounded\n                            ${getAminoAcidColor(aa)}\n                            hover:scale-110 transition-transform duration-200 cursor-help\n                          `}\n                          title={`${aa} - ${getAminoAcidEmoji(aa)} Position: ${blockIndex * 50 + aaIndex + 1}`}\n                        >\n                          {aa}\n                        </div>\n                      ))}\n                    </div>\n                    \n                    {/* Position indicator for end of block */}\n                    <div className=\"text-xs text-gray-500 font-mono text-right\">"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_9", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "<div className=\"text-xs text-gray-500 font-mono text-right\">\n                      {Math.min((blockIndex + 1) * 50, totalLength).toString().padStart(4, ' ')}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Chain Statistics */}\n              <div className=\"mt-4 pt-3 border-t border-gray-700\">\n                <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                  <div>\n                    <span className=\"text-gray-400\">Hydrophobic:</span>\n                    <span className=\"text-amber-300 ml-1\">\n                      {convertToSingleLetter(sequence).split('').filter(aa => \n                        ['A', 'V', 'L', 'I', 'P', 'W', 'F', 'M'].includes(aa.toUpperCase())"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_10", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "['A', 'V', 'L', 'I', 'P', 'W', 'F', 'M'].includes(aa.toUpperCase())\n                      ).length}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Polar:</span>\n                    <span className=\"text-green-300 ml-1\">\n                      {convertToSingleLetter(sequence).split('').filter(aa => \n                        ['S', 'T', 'Y', 'N', 'Q', 'C'].includes(aa.toUpperCase())\n                      ).length}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Positive:</span>\n                    <span className=\"text-blue-300 ml-1\">"}, {"id": "src/components/research/AminoAcidVisualizer.tsx_11", "file": "src/components/research/AminoAcidVisualizer.tsx", "content": "<span className=\"text-blue-300 ml-1\">\n                      {convertToSingleLetter(sequence).split('').filter(aa => \n                        ['K', 'R', 'H'].includes(aa.toUpperCase())\n                      ).length}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Negative:</span>\n                    <span className=\"text-red-300 ml-1\">\n                      {convertToSingleLetter(sequence).split('').filter(aa => \n                        ['D', 'E'].includes(aa.toUpperCase())\n                      ).length}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_0", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "================================================\nimport React from 'react'\nimport { ExternalLink, Dna, Atom } from 'lucide-react'\n\ninterface BindingAffinityVisualizerProps {\n  data: {\n    predicted_binding_affinity?: number\n    binding_affinity?: number\n    affinity?: number\n    confidence?: number\n    smiles?: string\n    target_sequence?: string\n    units?: string\n    error?: string\n    message?: string\n    mockData?: any\n  }\n  citations?: string[]\n}\n\nexport function BindingAffinityVisualizer({ data, citations }: BindingAffinityVisualizerProps) {\n  const handleCitationClick = (citation: string) => {\n    // Clean the citation string by removing angle brackets and trimming\n    let url = citation.trim().replace(/^<+|>+$/g, '')\n    \n    // If it doesn't start with http/https, add https://"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_1", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "// If it doesn't start with http/https, add https://\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://' + url\n    }\n    \n    // Open in new tab\n    window.open(url, '_blank', 'noopener,noreferrer')\n  }\n\n  const renderCitations = (citations: string[] = []) => {\n    if (!citations || citations.length === 0) {\n      return null\n    }\n\n    return (\n      <div className=\"space-y-2\">\n        {citations.map((citation, index) => {\n          // Clean up the citation URL\n          const cleanUrl = citation.trim().replace(/^<+|>+$/g, '')\n          const displayUrl = cleanUrl.length > 60 ? cleanUrl.substring(0, 60) + '...' : cleanUrl\n          \n          return (\n            <button\n              key={index}"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_2", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "return (\n            <button\n              key={index}\n              onClick={() => handleCitationClick(citation)}\n              className=\"w-full flex items-center gap-2 p-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors duration-200 group text-left\"\n            >\n              <ExternalLink className=\"w-4 h-4 text-blue-400 flex-shrink-0\" />\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm text-gray-300 group-hover:text-white truncate\">\n                  [{index + 1}] {displayUrl}\n                </div>\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Click to open in new tab\n                </div>\n              </div>\n            </button>\n          )\n        })}\n      </div>\n    )\n  }"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_3", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "</div>\n            </button>\n          )\n        })}\n      </div>\n    )\n  }\n\n  // Extract the actual data (handle both direct data and mockData)\n  const actualData = data.mockData || data\n  \n  // Get the binding affinity value\n  const bindingAffinity = actualData.predicted_binding_affinity || \n                         actualData.binding_affinity || \n                         actualData.affinity\n\n  // Format the binding affinity value\n  const formatBindingAffinity = (value: number): string => {\n    if (value === undefined || value === null) return 'N/A'\n    return value.toFixed(3)\n  }\n\n  // Get confidence percentage\n  const confidencePercent = actualData.confidence ? Math.round(actualData.confidence * 100) : null\n\n  // Truncate long sequences for display"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_4", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "// Truncate long sequences for display\n  const truncateSequence = (sequence: string, maxLength: number = 100): string => {\n    if (!sequence) return ''\n    if (sequence.length <= maxLength) return sequence\n    return sequence.substring(0, maxLength) + '...'\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Main Binding Affinity Score */}\n      <div className=\"bg-gray-800 rounded-lg p-6 text-center\">\n        <div className=\"text-3xl font-bold text-purple-400 mb-2\">\n          {formatBindingAffinity(bindingAffinity)}\n        </div>\n        <div className=\"text-sm text-gray-400\">\n          Predicted Binding Affinity\n          {actualData.units && ` (${actualData.units})`}\n        </div>\n      </div>\n\n      {/* Confidence Score */}\n      {confidencePercent !== null && ("}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_5", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "</div>\n      </div>\n\n      {/* Confidence Score */}\n      {confidencePercent !== null && (\n        <div className=\"bg-gray-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-300\">Confidence</span>\n            <span className=\"text-sm text-purple-300\">{confidencePercent}%</span>\n          </div>\n          <div className=\"w-full bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"bg-purple-400 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${confidencePercent}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Input Data Summary */}\n      <div className=\"space-y-3\">\n        {/* SMILES */}\n        {actualData.smiles && ("}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_6", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "<div className=\"space-y-3\">\n        {/* SMILES */}\n        {actualData.smiles && (\n          <div className=\"bg-gray-800 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Atom className=\"w-4 h-4 text-green-400\" />\n              <span className=\"text-sm font-semibold text-white\">Compound (SMILES)</span>\n            </div>\n            <div className=\"text-xs text-gray-300 font-mono break-all bg-gray-900 p-2 rounded\">\n              {actualData.smiles}\n            </div>\n          </div>\n        )}\n\n        {/* Target Sequence */}\n        {actualData.target_sequence && (\n          <div className=\"bg-gray-800 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Dna className=\"w-4 h-4 text-blue-400\" />"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_7", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "<Dna className=\"w-4 h-4 text-blue-400\" />\n              <span className=\"text-sm font-semibold text-white\">Target Sequence</span>\n            </div>\n            <div className=\"text-xs text-gray-300 font-mono break-all bg-gray-900 p-2 rounded\">\n              {truncateSequence(actualData.target_sequence)}\n            </div>\n            {actualData.target_sequence.length > 100 && (\n              <div className=\"text-xs text-gray-500 mt-2\">\n                Length: {actualData.target_sequence.length} amino acids (truncated for display)\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Interpretation Guide */}\n      <div className=\"bg-purple-500/10 border border-purple-500/20 rounded-lg p-4\">"}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_8", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "<div className=\"bg-purple-500/10 border border-purple-500/20 rounded-lg p-4\">\n        <h5 className=\"text-sm font-semibold text-purple-300 mb-2\">Interpretation</h5>\n        <div className=\"text-xs text-purple-200 space-y-1\">\n          <p>\u00e2\u20ac\u00a2 Higher values indicate stronger binding affinity</p>\n          <p>\u00e2\u20ac\u00a2 Values typically range from 0-15 for drug-like compounds</p>\n          <p>\u00e2\u20ac\u00a2 Consider confidence score when interpreting results</p>\n        </div>\n      </div>\n\n      {/* Error Message */}\n      {data.error && (\n        <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4\">\n          <div className=\"text-red-300 text-sm\">\n            <strong>Service Unavailable:</strong> {data.message || data.error}\n          </div>\n          {data.mockData && ("}, {"id": "src/components/research/BindingAffinityVisualizer.tsx_9", "file": "src/components/research/BindingAffinityVisualizer.tsx", "content": "</div>\n          {data.mockData && (\n            <div className=\"text-red-200 text-xs mt-2\">\n              Showing demo data for illustration purposes.\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Citations */}\n      {citations && citations.length > 0 && (\n        <div className=\"space-y-3\">\n          <h4 className=\"text-sm font-semibold text-white\">Citations & References</h4>\n          {renderCitations(citations)}\n        </div>\n      )}\n    </div>\n  )\n}"}, {"id": "src/components/research/ChatWindow.tsx_0", "file": "src/components/research/ChatWindow.tsx", "content": "================================================\nimport React, { useState, useRef, useEffect } from 'react'\nimport { Send, Loader2 } from 'lucide-react'\nimport { ChatMessage } from '../Research'\nimport { PerplexityMessageParser } from './PerplexityMessageParser'\n\ninterface ChatWindowProps {\n  messages: ChatMessage[]\n  isLoading: boolean\n  onSendMessage: (content: string) => void\n}\n\nexport function ChatWindow({ messages, isLoading, onSendMessage }: ChatWindowProps) {\n  const [inputValue, setInputValue] = useState('')\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])"}, {"id": "src/components/research/ChatWindow.tsx_1", "file": "src/components/research/ChatWindow.tsx", "content": "}\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (inputValue.trim() && !isLoading) {\n      onSendMessage(inputValue.trim())\n      setInputValue('')\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto'\n      }\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSubmit(e)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(e.target.value)\n    \n    // Auto-resize textarea\n    const textarea = e.target\n    textarea.style.height = 'auto'\n    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px'\n  }\n\n  return ("}, {"id": "src/components/research/ChatWindow.tsx_2", "file": "src/components/research/ChatWindow.tsx", "content": "textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px'\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col min-h-0\">\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <div className=\"text-6xl mb-4\">\u00f0\u0178\u00a7\u00ac</div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Welcome to Research Assistant</h2>\n            <p className=\"text-gray-400 max-w-md mx-auto\">\n              Ask questions about molecular research, generate compounds, analyze binding affinities, \n              or explore protein sequences with AI-powered insights.\n            </p>\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div"}, {"id": "src/components/research/ChatWindow.tsx_3", "file": "src/components/research/ChatWindow.tsx", "content": "</div>\n        ) : (\n          messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-[80%] rounded-2xl px-4 py-3 ${\n                  message.type === 'user'\n                    ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'\n                    : 'bg-gray-800 text-gray-100 border border-gray-700'\n                }`}\n              >\n                {message.type === 'user' ? (\n                  <div className=\"whitespace-pre-wrap\">{message.content}</div>\n                ) : (\n                  <PerplexityMessageParser content={message.content} citations={message.citations} />"}, {"id": "src/components/research/ChatWindow.tsx_4", "file": "src/components/research/ChatWindow.tsx", "content": ")}\n                \n                {message.toolUsed && (\n                  <div className=\"mt-2 text-xs opacity-75\">\n                    \u00f0\u0178\u201d\u00a7 {message.toolUsed.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n        \n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-gray-800 text-gray-100 border border-gray-700 rounded-2xl px-4 py-3 flex items-center gap-2\">\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n              <span>Neo is thinking...</span>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input Area */}"}, {"id": "src/components/research/ChatWindow.tsx_5", "file": "src/components/research/ChatWindow.tsx", "content": ")}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input Area */}\n      <div className=\"border-t border-gray-800 p-4\">\n        <form onSubmit={handleSubmit} className=\"flex gap-3\">\n          <div className=\"flex-1 relative\">\n            <textarea\n              ref={textareaRef}\n              value={inputValue}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"Ask about molecular research, compounds, proteins...\"\n              disabled={isLoading}"}, {"id": "src/components/research/ChatWindow.tsx_6", "file": "src/components/research/ChatWindow.tsx", "content": "disabled={isLoading}\n              className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              style={{ minHeight: '48px', maxHeight: '120px' }}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            disabled={!inputValue.trim() || isLoading}"}, {"id": "src/components/research/ChatWindow.tsx_7", "file": "src/components/research/ChatWindow.tsx", "content": "<button\n            type=\"submit\"\n            disabled={!inputValue.trim() || isLoading}\n            className=\"px-4 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-700 text-white rounded-xl font-medium transition-all duration-300 disabled:cursor-not-allowed flex items-center justify-center min-w-[48px]\"\n          >\n            {isLoading ? (\n              <Loader2 className=\"w-5 h-5 animate-spin\" />\n            ) : (\n              <Send className=\"w-5 h-5\" />\n            )}\n          </button>\n        </form>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/research/CompoundVisualizer.tsx_0", "file": "src/components/research/CompoundVisualizer.tsx", "content": "================================================\nimport React, { useRef, useEffect, useState } from 'react'\nimport { ChevronLeft, ChevronRight, Loader2, AlertCircle } from 'lucide-react'\n\ninterface CompoundVisualizerProps {\n  data: {\n    generated_smiles?: string[]\n    pdb_id?: string\n    reference_smile?: string\n  }\n}\n\ndeclare global {\n  interface Window {\n    $3Dmol: any\n  }\n}\n\nexport function CompoundVisualizer({ data }: CompoundVisualizerProps) {\n  const proteinViewerRef = useRef<HTMLDivElement>(null)\n  const referenceViewerRef = useRef<HTMLDivElement>(null)\n  const currentCompoundViewerRef = useRef<HTMLDivElement>(null)\n  \n  const [currentCompoundIndex, setCurrentCompoundIndex] = useState(0)\n  const [loadingStates, setLoadingStates] = useState<Record<string, boolean>>({})"}, {"id": "src/components/research/CompoundVisualizer.tsx_1", "file": "src/components/research/CompoundVisualizer.tsx", "content": "const [loadingStates, setLoadingStates] = useState<Record<string, boolean>>({})\n  const [errorStates, setErrorStates] = useState<Record<string, string>>({})\n  const [is3DmolLoaded, setIs3DmolLoaded] = useState(false)\n\n  const { generated_smiles = [], pdb_id = '', reference_smile = '' } = data\n\n  // Load 3Dmol.js script\n  useEffect(() => {\n    if (window.$3Dmol) {\n      setIs3DmolLoaded(true)\n      return\n    }\n\n    const script = document.createElement('script')\n    script.src = 'https://3dmol.csb.pitt.edu/build/3Dmol-min.js'\n    script.onload = () => setIs3DmolLoaded(true)\n    script.onerror = () => console.error('Failed to load 3Dmol.js')\n    document.head.appendChild(script)\n\n    return () => {\n      if (document.head.contains(script)) {\n        document.head.removeChild(script)"}, {"id": "src/components/research/CompoundVisualizer.tsx_2", "file": "src/components/research/CompoundVisualizer.tsx", "content": "if (document.head.contains(script)) {\n        document.head.removeChild(script)\n      }\n    }\n  }, [])\n\n  // Initialize protein viewer\n  useEffect(() => {\n    if (is3DmolLoaded && pdb_id && proteinViewerRef.current) {\n      initializeProteinViewer()\n    }\n  }, [is3DmolLoaded, pdb_id])\n\n  // Initialize reference compound viewer\n  useEffect(() => {\n    if (is3DmolLoaded && reference_smile && referenceViewerRef.current) {\n      initializeReferenceViewer()\n    }\n  }, [is3DmolLoaded, reference_smile])\n\n  // Initialize current compound viewer\n  useEffect(() => {\n    if (is3DmolLoaded && generated_smiles.length > 0 && currentCompoundViewerRef.current) {\n      initializeCurrentCompoundViewer()\n    }\n  }, [is3DmolLoaded, generated_smiles, currentCompoundIndex])"}, {"id": "src/components/research/CompoundVisualizer.tsx_3", "file": "src/components/research/CompoundVisualizer.tsx", "content": "}\n  }, [is3DmolLoaded, generated_smiles, currentCompoundIndex])\n\n  const setLoading = (key: string, loading: boolean) => {\n    setLoadingStates(prev => ({ ...prev, [key]: loading }))\n  }\n\n  const setError = (key: string, error: string) => {\n    setErrorStates(prev => ({ ...prev, [key]: error }))\n  }\n\n  const initializeProteinViewer = async () => {\n    if (!window.$3Dmol || !proteinViewerRef.current || !pdb_id) return\n\n    setLoading('protein', true)\n    setError('protein', '')\n\n    try {\n      const config = { backgroundColor: '#1a1a1a' }\n      const viewer = window.$3Dmol.createViewer(proteinViewerRef.current, config)\n      \n      const response = await fetch(`https://files.rcsb.org/view/${pdb_id.toUpperCase()}.pdb`)\n      \n      if (!response.ok) {"}, {"id": "src/components/research/CompoundVisualizer.tsx_4", "file": "src/components/research/CompoundVisualizer.tsx", "content": "if (!response.ok) {\n        throw new Error(`PDB ID ${pdb_id} not found`)\n      }\n\n      const pdbData = await response.text()\n      \n      viewer.addModel(pdbData, 'pdb')\n      viewer.setStyle({}, { cartoon: { colorscheme: 'spectrum' } })\n      viewer.setStyle({ hetflag: true }, { stick: { colorscheme: 'Jmol', radius: 0.3 } })\n      viewer.zoomTo()\n      viewer.render()\n      \n    } catch (error) {\n      console.error('Error loading protein:', error)\n      setError('protein', error.message)\n    } finally {\n      setLoading('protein', false)\n    }\n  }\n\n  const initializeReferenceViewer = async () => {\n    if (!window.$3Dmol || !referenceViewerRef.current || !reference_smile) return\n\n    setLoading('reference', true)\n    setError('reference', '')\n\n    try {"}, {"id": "src/components/research/CompoundVisualizer.tsx_5", "file": "src/components/research/CompoundVisualizer.tsx", "content": "setLoading('reference', true)\n    setError('reference', '')\n\n    try {\n      const config = { backgroundColor: '#1a1a1a' }\n      const viewer = window.$3Dmol.createViewer(referenceViewerRef.current, config)\n      \n      const response = await fetch(`https://cactus.nci.nih.gov/chemical/structure/${encodeURIComponent(reference_smile)}/file?format=sdf`)\n      \n      if (!response.ok) {\n        throw new Error('Failed to convert SMILES to 3D structure')\n      }\n\n      const sdfData = await response.text()\n      \n      viewer.addModel(sdfData, 'sdf')\n      viewer.setStyle({}, { stick: { colorscheme: 'Jmol', radius: 0.2 } })\n      viewer.zoomTo()\n      viewer.render()\n      \n    } catch (error) {\n      console.error('Error loading reference compound:', error)"}, {"id": "src/components/research/CompoundVisualizer.tsx_6", "file": "src/components/research/CompoundVisualizer.tsx", "content": "} catch (error) {\n      console.error('Error loading reference compound:', error)\n      setError('reference', error.message)\n    } finally {\n      setLoading('reference', false)\n    }\n  }\n\n  const initializeCurrentCompoundViewer = async () => {\n    if (!window.$3Dmol || !currentCompoundViewerRef.current || generated_smiles.length === 0) return\n\n    const smiles = generated_smiles[currentCompoundIndex]\n    if (!smiles) return\n\n    const compoundKey = `compound-${currentCompoundIndex}`\n    setLoading(compoundKey, true)\n    setError(compoundKey, '')\n\n    try {\n      // Clear the viewer first\n      currentCompoundViewerRef.current.innerHTML = ''\n      \n      const config = { backgroundColor: '#1a1a1a' }"}, {"id": "src/components/research/CompoundVisualizer.tsx_7", "file": "src/components/research/CompoundVisualizer.tsx", "content": "const config = { backgroundColor: '#1a1a1a' }\n      const viewer = window.$3Dmol.createViewer(currentCompoundViewerRef.current, config)\n      \n      const response = await fetch(`https://cactus.nci.nih.gov/chemical/structure/${encodeURIComponent(smiles)}/file?format=sdf`)\n      \n      if (!response.ok) {\n        throw new Error('Failed to convert SMILES to 3D structure')\n      }\n\n      const sdfData = await response.text()\n      \n      viewer.addModel(sdfData, 'sdf')\n      viewer.setStyle({}, { stick: { colorscheme: 'Jmol', radius: 0.2 } })\n      viewer.zoomTo()\n      viewer.render()\n      \n    } catch (error) {\n      console.error(`Error loading compound ${currentCompoundIndex + 1}:`, error)\n      setError(compoundKey, error.message)\n    } finally {"}, {"id": "src/components/research/CompoundVisualizer.tsx_8", "file": "src/components/research/CompoundVisualizer.tsx", "content": "setError(compoundKey, error.message)\n    } finally {\n      setLoading(compoundKey, false)\n    }\n  }\n\n  const nextCompound = () => {\n    if (currentCompoundIndex < generated_smiles.length - 1) {\n      setCurrentCompoundIndex(prev => prev + 1)\n    }\n  }\n\n  const prevCompound = () => {\n    if (currentCompoundIndex > 0) {\n      setCurrentCompoundIndex(prev => prev - 1)\n    }\n  }\n\n  const renderViewer = (\n    ref: React.RefObject<HTMLDivElement>,\n    loadingKey: string,\n    errorKey: string,\n    height: string = 'h-64'\n  ) => (\n    <div className={`relative ${height} bg-[#1a1a1a] rounded border border-gray-600 overflow-hidden`}>\n      <div ref={ref} className=\"w-full h-full\" />\n      \n      {loadingStates[loadingKey] && ("}, {"id": "src/components/research/CompoundVisualizer.tsx_9", "file": "src/components/research/CompoundVisualizer.tsx", "content": "<div ref={ref} className=\"w-full h-full\" />\n      \n      {loadingStates[loadingKey] && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">\n          <div className=\"flex items-center gap-2 text-white\">\n            <Loader2 className=\"w-4 h-4 animate-spin\" />\n            <span className=\"text-sm\">Loading 3D structure...</span>\n          </div>\n        </div>\n      )}\n      \n      {errorStates[errorKey] && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/50\">\n          <div className=\"flex items-center gap-2 text-red-400 text-center p-4\">\n            <AlertCircle className=\"w-4 h-4 flex-shrink-0\" />\n            <span className=\"text-sm\">{errorStates[errorKey]}</span>\n          </div>\n        </div>\n      )}"}, {"id": "src/components/research/CompoundVisualizer.tsx_10", "file": "src/components/research/CompoundVisualizer.tsx", "content": "</div>\n        </div>\n      )}\n    </div>\n  )\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Protein Structure Viewer */}\n      {pdb_id && (\n        <div className=\"bg-gray-800 rounded-lg p-4\">\n          <h4 className=\"text-lg font-semibold text-white mb-4\">\n            Protein Structure: {pdb_id.toUpperCase()}\n          </h4>\n          {renderViewer(proteinViewerRef, 'protein', 'protein')}\n        </div>\n      )}\n\n      {/* Generated Compounds Carousel - Single Compound View */}\n      {generated_smiles.length > 0 ? (\n        <div className=\"bg-gray-800 rounded-lg p-4\">\n          <h6 className=\"text-s font-semibold text-white mb-4\">\n            Generated Compounds ({generated_smiles.length})\n          </h6>\n\n          {/* Current Compound */}"}, {"id": "src/components/research/CompoundVisualizer.tsx_11", "file": "src/components/research/CompoundVisualizer.tsx", "content": "</h6>\n\n          {/* Current Compound */}\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-white mb-2\">\n                Compound #{currentCompoundIndex + 1}\n              </div>\n              \n              {renderViewer(\n                currentCompoundViewerRef,\n                `compound-${currentCompoundIndex}`,\n                `compound-${currentCompoundIndex}`,\n                'h-64'\n              )}\n              \n              <div className=\"mt-3 text-xs text-gray-400 font-mono break-all bg-gray-900 p-2 rounded\">\n                {generated_smiles[currentCompoundIndex]}\n              </div>\n            </div>\n\n            {/* Navigation Controls - Below the 3D representation */}"}, {"id": "src/components/research/CompoundVisualizer.tsx_12", "file": "src/components/research/CompoundVisualizer.tsx", "content": "</div>\n\n            {/* Navigation Controls - Below the 3D representation */}\n            {generated_smiles.length > 1 && (\n              <div className=\"flex items-center justify-center gap-4 pt-4\">\n                <button\n                  onClick={prevCompound}\n                  disabled={currentCompoundIndex === 0}\n                  className=\"flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg transition-colors duration-200\"\n                >\n                  <ChevronLeft className=\"w-4 h-4\" />\n                  Previous\n                </button>\n                \n                <div className=\" hidden flex items-center gap-2\">"}, {"id": "src/components/research/CompoundVisualizer.tsx_13", "file": "src/components/research/CompoundVisualizer.tsx", "content": "<div className=\" hidden flex items-center gap-2\">\n                  <span className=\"text-sm text-gray-400\">\n                    {currentCompoundIndex + 1} of {generated_smiles.length}\n                  </span>\n                  \n                  {/* Page indicators */}\n                  <div className=\" hidden flex gap-1\">\n                    {generated_smiles.map((_, index) => (\n                      <button\n                        key={index}\n                        onClick={() => setCurrentCompoundIndex(index)}\n                        className={`w-2 h-2 rounded-full transition-colors duration-200 ${\n                          index === currentCompoundIndex \n                            ? 'bg-blue-500'"}, {"id": "src/components/research/CompoundVisualizer.tsx_14", "file": "src/components/research/CompoundVisualizer.tsx", "content": "? 'bg-blue-500' \n                            : 'bg-gray-600 hover:bg-gray-500'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                </div>\n                \n                <button\n                  onClick={nextCompound}\n                  disabled={currentCompoundIndex === generated_smiles.length - 1}\n                  className=\"flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 disabled:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-lg transition-colors duration-200\"\n                >\n                  Next\n                  <ChevronRight className=\"w-4 h-4\" />\n                </button>\n              </div>\n            )}\n          </div>"}, {"id": "src/components/research/CompoundVisualizer.tsx_15", "file": "src/components/research/CompoundVisualizer.tsx", "content": "</button>\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"bg-gray-800 rounded-lg p-6 text-center\">\n          <div className=\"text-gray-400\">No compounds generated.</div>\n        </div>\n      )}\n\n      {/* Reference Compound Viewer */}\n      {reference_smile && (\n        <div className=\"bg-gray-800 rounded-lg p-4\">\n          <h4 className=\"text-lg font-semibold text-white mb-4\">\n            Reference Compound\n          </h4>\n          \n          {renderViewer(referenceViewerRef, 'reference', 'reference')}\n          \n          <div className=\"mt-3 text-xs text-gray-400 font-mono break-all bg-gray-900 p-2 rounded\">\n            {reference_smile}\n          </div>\n        </div>\n      )}\n\n      {/* Loading 3Dmol.js */}"}, {"id": "src/components/research/CompoundVisualizer.tsx_16", "file": "src/components/research/CompoundVisualizer.tsx", "content": "</div>\n        </div>\n      )}\n\n      {/* Loading 3Dmol.js */}\n      {!is3DmolLoaded && (\n        <div className=\"bg-gray-800 rounded-lg p-6 text-center\">\n          <div className=\"flex items-center justify-center gap-2 text-gray-400\">\n            <Loader2 className=\"w-4 h-4 animate-spin\" />\n            <span>Loading 3D visualization library...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"}, {"id": "src/components/research/GeminiMessageParser.tsx_0", "file": "src/components/research/GeminiMessageParser.tsx", "content": "================================================\nimport React from 'react'\n\ninterface GeminiMessageParserProps {\n  content: string\n}\n\nexport function GeminiMessageParser({ content }: GeminiMessageParserProps) {\n  // Parse markdown-like formatting from Gemini responses\n  const parseContent = (text: string) => {\n    // Split by code blocks first\n    const parts = text.split(/(```[\\s\\S]*?```)/g)\n    \n    return parts.map((part, index) => {\n      if (part.startsWith('```') && part.endsWith('```')) {\n        // Code block\n        const code = part.slice(3, -3).trim()\n        const lines = code.split('\\n')\n        const language = lines[0] || ''\n        const codeContent = lines.slice(1).join('\\n') || code\n        \n        return (\n          <div key={index} className=\"my-4\">"}, {"id": "src/components/research/GeminiMessageParser.tsx_1", "file": "src/components/research/GeminiMessageParser.tsx", "content": "return (\n          <div key={index} className=\"my-4\">\n            <div className=\"bg-gray-900 border border-gray-600 rounded-lg overflow-hidden\">\n              {language && (\n                <div className=\"bg-gray-800 px-3 py-1 text-xs text-gray-400 border-b border-gray-600\">\n                  {language}\n                </div>\n              )}\n              <pre className=\"p-4 text-sm text-gray-300 overflow-x-auto\">\n                <code>{codeContent}</code>\n              </pre>\n            </div>\n          </div>\n        )\n      } else {\n        // Regular text with inline formatting\n        return (\n          <div key={index} className=\"whitespace-pre-wrap\">\n            {formatInlineText(part)}\n          </div>\n        )\n      }\n    })\n  }"}, {"id": "src/components/research/GeminiMessageParser.tsx_2", "file": "src/components/research/GeminiMessageParser.tsx", "content": "{formatInlineText(part)}\n          </div>\n        )\n      }\n    })\n  }\n\n  const formatInlineText = (text: string) => {\n    // Handle bold text\n    let formatted = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    \n    // Handle italic text\n    formatted = formatted.replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n    \n    // Handle inline code\n    formatted = formatted.replace(/`(.*?)`/g, '<code class=\"bg-gray-700 px-1 py-0.5 rounded text-sm\">$1</code>')\n    \n    return <span dangerouslySetInnerHTML={{ __html: formatted }} />\n  }\n\n  return (\n    <div className=\"prose prose-invert max-w-none\">\n      {parseContent(content)}\n    </div>\n  )\n}"}, {"id": "src/components/research/InputModal.tsx_0", "file": "src/components/research/InputModal.tsx", "content": "================================================\nimport React, { useState } from 'react'\nimport { X, Loader2 } from 'lucide-react'\n\ninterface Field {\n  name: string\n  label: string\n  type: 'text' | 'textarea'\n  placeholder?: string\n  required?: boolean\n  className?: string\n}\n\ninterface InputModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onSubmit: (data: Record<string, string>) => void\n  title: string\n  fields: Field[]\n}\n\nexport function InputModal({ isOpen, onClose, onSubmit, title, fields }: InputModalProps) {\n  const [formData, setFormData] = useState<Record<string, string>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    // Validate required fields"}, {"id": "src/components/research/InputModal.tsx_1", "file": "src/components/research/InputModal.tsx", "content": "e.preventDefault()\n    \n    // Validate required fields\n    const missingFields = fields.filter(field => field.required && !formData[field.name]?.trim())\n    if (missingFields.length > 0) {\n      return\n    }\n\n    setIsSubmitting(true)\n    try {\n      await onSubmit(formData)\n      setFormData({})\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleClose = () => {\n    if (!isSubmitting) {\n      setFormData({})\n      onClose()\n    }\n  }\n\n  const handleInputChange = (name: string, value: string) => {\n    setFormData(prev => ({ ...prev, [name]: value }))\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />"}, {"id": "src/components/research/InputModal.tsx_2", "file": "src/components/research/InputModal.tsx", "content": "<div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n          {/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={isSubmitting}\n            className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300 disabled:opacity-50\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          {/* Header */}\n          <div className=\"mb-6\">"}, {"id": "src/components/research/InputModal.tsx_3", "file": "src/components/research/InputModal.tsx", "content": "</button>\n\n          {/* Header */}\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-bold text-white mb-2\">{title}</h2>\n            <p className=\"text-gray-400 text-sm\">Enter the required information to proceed</p>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {fields.map((field) => (\n              <div key={field.name}>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  {field.label}\n                  {field.required && <span className=\"text-red-400 ml-1\">*</span>}\n                </label>\n                \n                {field.type === 'textarea' ? (\n                  <textarea\n                    value={formData[field.name] || ''}"}, {"id": "src/components/research/InputModal.tsx_4", "file": "src/components/research/InputModal.tsx", "content": "<textarea\n                    value={formData[field.name] || ''}\n                    onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    placeholder={field.placeholder}\n                    required={field.required}\n                    disabled={isSubmitting}\n                    className={`w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed resize-none ${field.className || ''}`}\n                    rows={4}\n                  />\n                ) : (\n                  <input\n                    type={field.type}"}, {"id": "src/components/research/InputModal.tsx_5", "file": "src/components/research/InputModal.tsx", "content": ") : (\n                  <input\n                    type={field.type}\n                    value={formData[field.name] || ''}\n                    onChange={(e) => handleInputChange(field.name, e.target.value)}\n                    placeholder={field.placeholder}\n                    required={field.required}\n                    disabled={isSubmitting}\n                    className={`w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${field.className || ''}`}\n                  />\n                )}\n              </div>\n            ))}\n\n            {/* Action buttons */}"}, {"id": "src/components/research/InputModal.tsx_6", "file": "src/components/research/InputModal.tsx", "content": ")}\n              </div>\n            ))}\n\n            {/* Action buttons */}\n            <div className=\"flex gap-4 pt-4\">\n              <button\n                type=\"button\"\n                onClick={handleClose}\n                disabled={isSubmitting}\n                className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}"}, {"id": "src/components/research/InputModal.tsx_7", "file": "src/components/research/InputModal.tsx", "content": "<button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Processing...\n                  </>\n                ) : (\n                  'Submit'\n                )}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/research/PerplexityMessageParser.tsx_0", "file": "src/components/research/PerplexityMessageParser.tsx", "content": "================================================\nimport React from 'react'\n\ninterface PerplexityMessageParserProps {\n  content: string\n  citations?: string[]\n}\n\nexport function PerplexityMessageParser({ content, citations }: PerplexityMessageParserProps) {\n  // Parse markdown-like formatting from Perplexity responses\n  const parseContent = (text: string) => {\n    // Split by code blocks first\n    const parts = text.split(/(```[\\s\\S]*?```)/g)\n    \n    return parts.map((part, index) => {\n      if (part.startsWith('```') && part.endsWith('```')) {\n        // Code block\n        const code = part.slice(3, -3).trim()\n        const lines = code.split('\\n')\n        const language = lines[0] || ''\n        const codeContent = lines.slice(1).join('\\n') || code\n        \n        return ("}, {"id": "src/components/research/PerplexityMessageParser.tsx_1", "file": "src/components/research/PerplexityMessageParser.tsx", "content": "const codeContent = lines.slice(1).join('\\n') || code\n        \n        return (\n          <div key={index} className=\"my-4\">\n            <div className=\"bg-gray-900 border border-gray-600 rounded-lg overflow-hidden\">\n              {language && (\n                <div className=\"bg-gray-800 px-3 py-1 text-xs text-gray-400 border-b border-gray-600\">\n                  {language}\n                </div>\n              )}\n              <pre className=\"p-4 text-sm text-gray-300 overflow-x-auto\">\n                <code>{codeContent}</code>\n              </pre>\n            </div>\n          </div>\n        )\n      } else {\n        // Regular text with inline formatting\n        return (\n          <div key={index} className=\"whitespace-pre-wrap\">\n            {formatInlineText(part)}"}, {"id": "src/components/research/PerplexityMessageParser.tsx_2", "file": "src/components/research/PerplexityMessageParser.tsx", "content": "<div key={index} className=\"whitespace-pre-wrap\">\n            {formatInlineText(part)}\n          </div>\n        )\n      }\n    })\n  }\n\n  const formatInlineText = (text: string) => {\n    // Handle bold text\n    let formatted = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    \n    // Handle italic text\n    formatted = formatted.replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n    \n    // Handle inline code\n    formatted = formatted.replace(/`(.*?)`/g, '<code class=\"bg-gray-700 px-1 py-0.5 rounded text-sm\">$1</code>')\n    \n    return <span dangerouslySetInnerHTML={{ __html: formatted }} />\n  }\n\n  const handleCitationClick = (citation: string) => {\n    // Clean the citation string by removing angle brackets and trimming\n    let url = citation.trim().replace(/^<+|>+$/g, '')"}, {"id": "src/components/research/PerplexityMessageParser.tsx_3", "file": "src/components/research/PerplexityMessageParser.tsx", "content": "let url = citation.trim().replace(/^<+|>+$/g, '')\n    \n    // If it doesn't start with http/https, add https://\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://' + url\n    }\n    \n    // Open in new tab\n    window.open(url, '_blank', 'noopener,noreferrer')\n  }\n\n  return (\n    <div className=\"prose prose-invert max-w-none\">\n      {parseContent(content)}\n      \n      {/* Show citations inline if available */}\n      {citations && citations.length > 0 && (\n        <div className=\"mt-4 pt-3 border-t border-gray-600\">\n          <div className=\"text-xs text-gray-400 mb-2\">Sources:</div>\n          <div className=\"space-y-1\">\n            {citations.slice(0, 3).map((citation, index) => {"}, {"id": "src/components/research/PerplexityMessageParser.tsx_4", "file": "src/components/research/PerplexityMessageParser.tsx", "content": "<div className=\"space-y-1\">\n            {citations.slice(0, 3).map((citation, index) => {\n              const cleanUrl = citation.trim().replace(/^<+|>+$/g, '')\n              const displayUrl = cleanUrl.length > 50 ? cleanUrl.substring(0, 50) + '...' : cleanUrl\n              \n              return (\n                <div key={index} className=\"text-xs\">\n                  <button \n                    onClick={() => handleCitationClick(citation)}\n                    className=\"text-blue-400 hover:text-blue-300 underline cursor-pointer\"\n                  >\n                    [{index + 1}] {displayUrl}\n                  </button>\n                </div>\n              )\n            })}\n            {citations.length > 3 && (\n              <div className=\"text-xs text-gray-500\">"}, {"id": "src/components/research/PerplexityMessageParser.tsx_5", "file": "src/components/research/PerplexityMessageParser.tsx", "content": "{citations.length > 3 && (\n              <div className=\"text-xs text-gray-500\">\n                +{citations.length - 3} more sources\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"}, {"id": "src/components/research/ReportModal.tsx_0", "file": "src/components/research/ReportModal.tsx", "content": "================================================\nimport React, { useState } from 'react'\nimport { X, FileText, Loader2, Download, CheckCircle, AlertCircle } from 'lucide-react'\n\ninterface ReportModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onGenerate: (title: string) => Promise<void>\n  isGenerating: boolean\n  progress: string\n}\n\nexport function ReportModal({ isOpen, onClose, onGenerate, isGenerating, progress }: ReportModalProps) {\n  const [title, setTitle] = useState('')\n  const [error, setError] = useState('')\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setError('')\n\n    try {\n      const reportTitle = title.trim() || `Research Report - ${new Date().toLocaleString()}`\n      await onGenerate(reportTitle)\n      setTitle('')"}, {"id": "src/components/research/ReportModal.tsx_1", "file": "src/components/research/ReportModal.tsx", "content": "await onGenerate(reportTitle)\n      setTitle('')\n    } catch (err: any) {\n      setError(err.message || 'Failed to generate report')\n    }\n  }\n\n  const handleClose = () => {\n    if (!isGenerating) {\n      setTitle('')\n      setError('')\n      onClose()\n    }\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm\" onClick={handleClose} />\n      \n      {/* Modal */}\n      <div className=\"flex min-h-full items-center justify-center p-4\">\n        <div className=\"relative w-full max-w-md transform overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 border border-gray-700 p-8 shadow-2xl transition-all\">\n          {/* Close button */}"}, {"id": "src/components/research/ReportModal.tsx_2", "file": "src/components/research/ReportModal.tsx", "content": "{/* Close button */}\n          <button\n            onClick={handleClose}\n            disabled={isGenerating}\n            className=\"absolute right-4 top-4 text-gray-400 hover:text-white transition-colors duration-300 disabled:opacity-50\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n\n          {/* Header */}\n          <div className=\"mb-6\">\n            <div className=\"bg-gradient-to-r from-green-500 to-teal-600 w-14 h-14 rounded-xl flex items-center justify-center mb-4\">\n              <FileText className=\"w-7 h-7 text-white\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Generate Research Report</h2>\n            <p className=\"text-gray-400 text-sm\">"}, {"id": "src/components/research/ReportModal.tsx_3", "file": "src/components/research/ReportModal.tsx", "content": "<p className=\"text-gray-400 text-sm\">\n              Create a comprehensive .docx report with all your research data, insights, and analysis.\n            </p>\n          </div>\n\n          {/* Progress indicator */}\n          {isGenerating && (\n            <div className=\"mb-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Loader2 className=\"w-5 h-5 animate-spin text-blue-400\" />\n                <span className=\"text-blue-300 font-medium\">Generating Report...</span>\n              </div>\n              <div className=\"text-sm text-blue-200\">\n                {progress || 'Processing...'}\n              </div>\n              <div className=\"mt-3 w-full bg-blue-900/30 rounded-full h-2\">"}, {"id": "src/components/research/ReportModal.tsx_4", "file": "src/components/research/ReportModal.tsx", "content": "</div>\n              <div className=\"mt-3 w-full bg-blue-900/30 rounded-full h-2\">\n                <div className=\"bg-blue-400 h-2 rounded-full animate-pulse\" style={{ width: '60%' }} />\n              </div>\n            </div>\n          )}\n\n          {/* Success indicator */}\n          {progress.includes('successfully') && (\n            <div className=\"mb-6 p-4 bg-green-500/10 border border-green-500/20 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-300 font-medium\">Report Downloaded Successfully!</span>\n              </div>\n              <div className=\"text-sm text-green-200 mt-1\">"}, {"id": "src/components/research/ReportModal.tsx_5", "file": "src/components/research/ReportModal.tsx", "content": "</div>\n              <div className=\"text-sm text-green-200 mt-1\">\n                Your report has been downloaded to your device as a .docx file.\n              </div>\n            </div>\n          )}\n\n          {/* Error message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-red-400\" />\n                <span className=\"text-red-300 text-sm\">{error}</span>\n              </div>\n            </div>\n          )}\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>"}, {"id": "src/components/research/ReportModal.tsx_6", "file": "src/components/research/ReportModal.tsx", "content": "<form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"report-title\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                Report Title (Optional)\n              </label>\n              <input\n                type=\"text\"\n                id=\"report-title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                disabled={isGenerating}\n                className=\"w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\""}, {"id": "src/components/research/ReportModal.tsx_7", "file": "src/components/research/ReportModal.tsx", "content": "placeholder=\"e.g., Protein-Drug Interaction Analysis\"\n                maxLength={100}\n              />\n              <div className=\"mt-1 text-xs text-gray-500\">\n                Leave empty to use default title with timestamp\n              </div>\n            </div>\n\n            {/* Report contents preview */}\n            <div className=\"bg-gray-800 rounded-lg p-4\">\n              <h4 className=\"text-sm font-semibold text-white mb-3\">Report Will Include:</h4>\n              <div className=\"space-y-2 text-sm text-gray-300\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                  <span>Generated compounds with SMILES strings</span>\n                </div>"}, {"id": "src/components/research/ReportModal.tsx_8", "file": "src/components/research/ReportModal.tsx", "content": "<span>Generated compounds with SMILES strings</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-purple-400 rounded-full\"></div>\n                  <span>Binding affinity predictions</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                  <span>Comprehensive AI analysis with all research context</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-cyan-400 rounded-full\"></div>\n                  <span>Conversation summary and insights</span>\n                </div>\n              </div>"}, {"id": "src/components/research/ReportModal.tsx_9", "file": "src/components/research/ReportModal.tsx", "content": "</div>\n              </div>\n            </div>\n\n            {/* Action buttons */}\n            <div className=\"flex gap-4 pt-4\">\n              <button\n                type=\"button\"\n                onClick={handleClose}\n                disabled={isGenerating}\n                className=\"flex-1 px-6 py-3 border border-gray-600 text-gray-300 rounded-lg font-medium hover:border-gray-500 hover:text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isGenerating}"}, {"id": "src/components/research/ReportModal.tsx_10", "file": "src/components/research/ReportModal.tsx", "content": "<button\n                type=\"submit\"\n                disabled={isGenerating}\n                className=\"flex-1 bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 disabled:from-gray-600 disabled:to-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-all duration-300 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n              >\n                {isGenerating ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"w-4 h-4\" />\n                    Generate & Download\n                  </>\n                )}\n              </button>"}, {"id": "src/components/research/ReportModal.tsx_11", "file": "src/components/research/ReportModal.tsx", "content": "</>\n                )}\n              </button>\n            </div>\n          </form>\n\n          {/* Info */}\n          <div className=\"mt-6 p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n            <div className=\"text-blue-300 text-sm\">\n              <strong>Note:</strong> The report will be automatically downloaded as a .docx file to your device. A record of the report will be saved to your lab for reference.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"}, {"id": "src/components/research/SidebarLeft.tsx_0", "file": "src/components/research/SidebarLeft.tsx", "content": "================================================\nimport React from 'react'\nimport { MessageSquare, FileText, ChevronLeft } from 'lucide-react'\n\ninterface SidebarLeftProps {\n  isOpen: boolean\n  onToggle: () => void\n  onTalkToNew: () => void\n  onGenerateReport: () => void\n}\n\nexport function SidebarLeft({ isOpen, onToggle, onTalkToNew, onGenerateReport }: SidebarLeftProps) {\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden\"\n          onClick={onToggle}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed md:relative z-50 md:z-auto\n        h-full w-80 bg-gradient-to-b from-gray-900 to-gray-800 \n        border-r border-gray-700 flex-shrink-0"}, {"id": "src/components/research/SidebarLeft.tsx_1", "file": "src/components/research/SidebarLeft.tsx", "content": "border-r border-gray-700 flex-shrink-0\n        transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'}\n      `}>\n        {/* Mobile Toggle Button */}\n        <button\n          onClick={onToggle}\n          className=\"absolute top-4 right-4 p-2 text-gray-400 hover:text-white transition-colors duration-300 md:hidden\"\n        >\n          <ChevronLeft className=\"w-5 h-5\" />\n        </button>\n\n        <div className=\"p-6 space-y-4\">\n          <h2 className=\"text-xl font-bold text-white mb-6\">Research Tools</h2>\n          \n          {/* Talk to New Button */}\n          <button\n            onClick={onTalkToNew}"}, {"id": "src/components/research/SidebarLeft.tsx_2", "file": "src/components/research/SidebarLeft.tsx", "content": "{/* Talk to New Button */}\n          <button\n            onClick={onTalkToNew}\n            className=\"w-full flex items-center gap-3 p-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl font-medium transition-all duration-300 transform hover:scale-105 shadow-lg\"\n          >\n            <MessageSquare className=\"w-5 h-5\" />\n            New Conversation\n          </button>\n\n          {/* Generate Report Button */}\n          <button\n            onClick={onGenerateReport}\n            className=\"w-full flex items-center gap-3 p-4 bg-gradient-to-r from-green-600 to-teal-600 hover:from-green-700 hover:to-teal-700 text-white rounded-xl font-medium transition-all duration-300 transform hover:scale-105 shadow-lg\""}, {"id": "src/components/research/SidebarLeft.tsx_3", "file": "src/components/research/SidebarLeft.tsx", "content": ">\n            <FileText className=\"w-5 h-5\" />\n            Generate Report\n          </button>\n\n          {/* Info Section */}\n          <div className=\"mt-8 p-4 bg-blue-500/10 border border-blue-500/20 rounded-xl\">\n            <h3 className=\"text-blue-300 font-medium mb-2\">AI Research Assistant</h3>\n            <p className=\"text-blue-200 text-sm\">\n              Use the tools below to analyze compounds, predict binding affinities, and explore molecular data with AI-powered insights.\n            </p>\n          </div>\n\n          {/* Neon Accent Lines */}\n          <div className=\"space-y-2 mt-8\">\n            <div className=\"h-px bg-gradient-to-r from-transparent via-cyan-400 to-transparent opacity-50\"></div>"}, {"id": "src/components/research/SidebarLeft.tsx_4", "file": "src/components/research/SidebarLeft.tsx", "content": "<div className=\"h-px bg-gradient-to-r from-transparent via-purple-400 to-transparent opacity-30\"></div>\n            <div className=\"h-px bg-gradient-to-r from-transparent via-blue-400 to-transparent opacity-40\"></div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}"}, {"id": "src/components/research/SidebarRight.tsx_0", "file": "src/components/research/SidebarRight.tsx", "content": "================================================\nimport React, { useRef, useEffect } from 'react'\nimport { ChevronRight, Eye, Code, Activity, Dna, ExternalLink } from 'lucide-react'\nimport { ToolResult } from '../Research'\nimport { AminoAcidVisualizer } from './AminoAcidVisualizer'\nimport { CompoundVisualizer } from './CompoundVisualizer'\nimport { BindingAffinityVisualizer } from './BindingAffinityVisualizer'\n\ninterface SidebarRightProps {\n  isOpen: boolean\n  onToggle: () => void\n  toolResult: ToolResult | null\n}\n\nexport function SidebarRight({ isOpen, onToggle, toolResult }: SidebarRightProps) {\n  const handleCitationClick = (citation: string) => {\n    // Clean the citation string by removing angle brackets and trimming\n    let url = citation.trim().replace(/^<+|>+$/g, '')"}, {"id": "src/components/research/SidebarRight.tsx_1", "file": "src/components/research/SidebarRight.tsx", "content": "let url = citation.trim().replace(/^<+|>+$/g, '')\n    \n    // If it doesn't start with http/https, add https://\n    if (!url.startsWith('http://') && !url.startsWith('https://')) {\n      url = 'https://' + url\n    }\n    \n    // Open in new tab\n    window.open(url, '_blank', 'noopener,noreferrer')\n  }\n\n  const renderCitations = (citations: string[] = []) => {\n    if (!citations || citations.length === 0) {\n      return (\n        <div className=\"text-sm text-gray-400\">\n          No citations available\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"space-y-2\">\n        {citations.map((citation, index) => {\n          // Clean up the citation URL\n          const cleanUrl = citation.trim().replace(/^<+|>+$/g, '')"}, {"id": "src/components/research/SidebarRight.tsx_2", "file": "src/components/research/SidebarRight.tsx", "content": "const cleanUrl = citation.trim().replace(/^<+|>+$/g, '')\n          const displayUrl = cleanUrl.length > 60 ? cleanUrl.substring(0, 60) + '...' : cleanUrl\n          \n          return (\n            <button\n              key={index}\n              onClick={() => handleCitationClick(citation)}\n              className=\"w-full flex items-center gap-2 p-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors duration-200 group text-left\"\n            >\n              <ExternalLink className=\"w-4 h-4 text-blue-400 flex-shrink-0\" />\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"text-sm text-gray-300 group-hover:text-white truncate\">\n                  [{index + 1}] {displayUrl}\n                </div>"}, {"id": "src/components/research/SidebarRight.tsx_3", "file": "src/components/research/SidebarRight.tsx", "content": "[{index + 1}] {displayUrl}\n                </div>\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  Click to open in new tab\n                </div>\n              </div>\n            </button>\n          )\n        })}\n      </div>\n    )\n  }\n\n  const renderContent = () => {\n    if (!toolResult) {\n      return (\n        <div className=\"text-center py-16 text-gray-400\">\n          <Eye className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n          <p>Results will appear here</p>\n          <p className=\"text-sm mt-2\">Use the tools below to start analyzing</p>\n        </div>\n      )\n    }\n\n    switch (toolResult.type) {\n      case 'drug-generation':\n        return (\n          <div className=\"space-y-4\">"}, {"id": "src/components/research/SidebarRight.tsx_4", "file": "src/components/research/SidebarRight.tsx", "content": "case 'drug-generation':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n              <Activity className=\"w-5 h-5 text-green-400\" />\n              Drug Generation Results\n            </h3>\n            \n            {/* Check if we have the new format with generated_smiles */}\n            {toolResult.data?.generated_smiles || toolResult.data?.pdb_id || toolResult.data?.reference_smile ? (\n              <CompoundVisualizer data={toolResult.data} />\n            ) : (\n              /* Fallback for old format */\n              <div className=\"space-y-4\">\n                {toolResult.data?.compounds && (\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">"}, {"id": "src/components/research/SidebarRight.tsx_5", "file": "src/components/research/SidebarRight.tsx", "content": "<div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {toolResult.data.compounds.map((compound: any, index: number) => (\n                      <div key={index} className=\"bg-gray-800 rounded-lg p-3\">\n                        <div className=\"text-sm text-gray-300\">\n                          <strong>Compound {index + 1}</strong>\n                        </div>\n                        {compound.smiles && (\n                          <div className=\"text-xs text-gray-400 mt-1 font-mono break-all\">\n                            SMILES: {compound.smiles}\n                          </div>\n                        )}\n                        {compound.score && (\n                          <div className=\"text-xs text-green-400 mt-1\">"}, {"id": "src/components/research/SidebarRight.tsx_6", "file": "src/components/research/SidebarRight.tsx", "content": "<div className=\"text-xs text-green-400 mt-1\">\n                            Score: {compound.score}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )\n\n      case 'amino-sequence':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n              <Dna className=\"w-5 h-5 text-blue-400\" />\n              Amino Acid Sequence\n            </h3>\n            \n            {/* Check if we have the new format with sequences object */}\n            {toolResult.data?.sequences ? (\n              <AminoAcidVisualizer"}, {"id": "src/components/research/SidebarRight.tsx_7", "file": "src/components/research/SidebarRight.tsx", "content": "{toolResult.data?.sequences ? (\n              <AminoAcidVisualizer \n                sequences={toolResult.data.sequences}\n                pdbId={toolResult.data.pdb_id || 'Unknown'}\n              />\n            ) : (\n              /* Fallback for old format */\n              <div className=\"bg-gray-800 rounded-lg p-4\">\n                <div className=\"text-sm font-mono text-gray-300 break-all leading-relaxed\">\n                  {toolResult.data?.sequence || 'No sequence data available'}\n                </div>\n                {toolResult.data?.length && (\n                  <div className=\"text-sm text-gray-400 mt-3\">\n                    Length: {toolResult.data.length} amino acids\n                  </div>\n                )}\n              </div>\n            )}\n          </div>"}, {"id": "src/components/research/SidebarRight.tsx_8", "file": "src/components/research/SidebarRight.tsx", "content": "</div>\n                )}\n              </div>\n            )}\n          </div>\n        )\n\n      case 'binding-affinity':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n              <Activity className=\"w-5 h-5 text-purple-400\" />\n              Binding Affinity\n            </h3>\n            \n            <BindingAffinityVisualizer \n              data={toolResult.data} \n              citations={toolResult.citations}\n            />\n          </div>\n        )\n\n      case 'graph-knowledge':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">"}, {"id": "src/components/research/SidebarRight.tsx_9", "file": "src/components/research/SidebarRight.tsx", "content": "<h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n              <Code className=\"w-5 h-5 text-orange-400\" />\n              Citations & References\n            </h3>\n            \n            {toolResult.citations && toolResult.citations.length > 0 ? (\n              <div className=\"space-y-3\">\n                <div className=\"bg-orange-500/10 border border-orange-500/20 rounded-lg p-4\">\n                  <p className=\"text-orange-300 text-sm\">\n                    AQL query results with credible scientific sources.\n                  </p>\n                </div>\n                {renderCitations(toolResult.citations)}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">"}, {"id": "src/components/research/SidebarRight.tsx_10", "file": "src/components/research/SidebarRight.tsx", "content": "</div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"bg-orange-500/10 border border-orange-500/20 rounded-lg p-4\">\n                  <p className=\"text-orange-300 text-sm\">\n                    AQL query executed successfully.\n                  </p>\n                </div>\n                \n                <div className=\"text-sm text-gray-400\">\n                  Citations and references will appear here when available from the AI response.\n                </div>\n              </div>\n            )}\n          </div>\n        )\n\n      case 'chat':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">"}, {"id": "src/components/research/SidebarRight.tsx_11", "file": "src/components/research/SidebarRight.tsx", "content": "<h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n              <Eye className=\"w-5 h-5 text-cyan-400\" />\n              Citations & References\n            </h3>\n            \n            {toolResult.citations && toolResult.citations.length > 0 ? (\n              <div className=\"space-y-3\">\n                <div className=\"bg-cyan-500/10 border border-cyan-500/20 rounded-lg p-4\">\n                  <p className=\"text-cyan-300 text-sm\">\n                    AI-generated insights with credible scientific sources.\n                  </p>\n                </div>\n                {renderCitations(toolResult.citations)}\n              </div>\n            ) : (\n              <div className=\"space-y-3\">"}, {"id": "src/components/research/SidebarRight.tsx_12", "file": "src/components/research/SidebarRight.tsx", "content": "</div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"bg-cyan-500/10 border border-cyan-500/20 rounded-lg p-4\">\n                  <p className=\"text-cyan-300 text-sm\">\n                    AI-generated insights based on current research and molecular databases.\n                  </p>\n                </div>\n                \n                <div className=\"text-sm text-gray-400\">\n                  Citations and references will appear here when available from the AI response.\n                </div>\n              </div>\n            )}\n          </div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div"}, {"id": "src/components/research/SidebarRight.tsx_13", "file": "src/components/research/SidebarRight.tsx", "content": "}\n  }\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 md:hidden\"\n          onClick={onToggle}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`\n        fixed md:relative z-50 md:z-auto right-0\n        h-full w-80 bg-gradient-to-b from-gray-900 to-gray-800 \n        border-l border-gray-700 flex-shrink-0\n        transform transition-transform duration-300 ease-in-out\n        ${isOpen ? 'translate-x-0' : 'translate-x-full md:translate-x-0'}\n      `}>\n        {/* Mobile Toggle Button */}\n        <button\n          onClick={onToggle}\n          className=\"absolute top-4 left-4 p-2 text-gray-400 hover:text-white transition-colors duration-300 md:hidden\"\n        >"}, {"id": "src/components/research/SidebarRight.tsx_14", "file": "src/components/research/SidebarRight.tsx", "content": ">\n          <ChevronRight className=\"w-5 h-5\" />\n        </button>\n\n        <div className=\"p-6 h-full overflow-y-auto\">\n          {renderContent()}\n        </div>\n      </div>\n    </>\n  )\n}"}, {"id": "src/components/research/ToolButtonRow.tsx_0", "file": "src/components/research/ToolButtonRow.tsx", "content": "================================================\nimport React from 'react'\nimport { Pill, Dna, Activity, Network, MessageSquare } from 'lucide-react'\n\ninterface ToolButtonRowProps {\n  onToolAction: (toolType: string) => void\n  disabled: boolean\n}\n\nexport function ToolButtonRow({ onToolAction, disabled }: ToolButtonRowProps) {\n  const tools = [\n    {\n      id: 'drug-generation',\n      label: 'Drug Generation',\n      icon: Pill,\n      color: 'from-green-500 to-emerald-600',\n      hoverColor: 'from-green-600 to-emerald-700'\n    },\n    {\n      id: 'amino-sequence',\n      label: 'Amino Acid Sequence',\n      icon: Dna,\n      color: 'from-blue-500 to-cyan-600',\n      hoverColor: 'from-blue-600 to-cyan-700'\n    },\n    {\n      id: 'binding-affinity',\n      label: 'Binding Affinity',"}, {"id": "src/components/research/ToolButtonRow.tsx_1", "file": "src/components/research/ToolButtonRow.tsx", "content": "},\n    {\n      id: 'binding-affinity',\n      label: 'Binding Affinity',\n      icon: Activity,\n      color: 'from-purple-500 to-pink-600',\n      hoverColor: 'from-purple-600 to-pink-700'\n    },\n    {\n      id: 'graph-knowledge',\n      label: 'Graph Knowledge (AQL)',\n      icon: Network,\n      color: 'from-orange-500 to-red-600',\n      hoverColor: 'from-orange-600 to-red-700'\n    }\n  ]\n\n  return (\n    <div className=\"border-t border-gray-800 p-4\">\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n        {tools.map((tool) => {\n          const Icon = tool.icon\n          return (\n            <button\n              key={tool.id}\n              onClick={() => onToolAction(tool.id)}\n              disabled={disabled}\n              className={`"}, {"id": "src/components/research/ToolButtonRow.tsx_2", "file": "src/components/research/ToolButtonRow.tsx", "content": "disabled={disabled}\n              className={`\n                flex flex-col items-center gap-2 p-4 rounded-xl font-medium transition-all duration-300 \n                transform hover:scale-105 disabled:scale-100 disabled:cursor-not-allowed\n                bg-gradient-to-r ${tool.color} hover:${tool.hoverColor}\n                disabled:from-gray-600 disabled:to-gray-700 disabled:opacity-50\n                text-white shadow-lg hover:shadow-xl\n              `}\n            >\n              <Icon className=\"w-5 h-5\" />\n              <span className=\"text-xs text-center leading-tight\">{tool.label}</span>\n            </button>\n          )\n        })}\n      </div>\n    </div>\n  )\n}"}, {"id": "src/hooks/useAuth.ts_0", "file": "src/hooks/useAuth.ts", "content": "================================================\nimport { useState, useEffect } from 'react'\nimport { User } from '@supabase/supabase-js'\nimport { supabase } from '../lib/supabase'\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    // Listen for auth changes - using recommended pattern to avoid deadlocks\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((event, session) => {\n      // Use setTimeout to avoid deadlocks as recommended by Supabase\n      setTimeout(async () => {"}, {"id": "src/hooks/useAuth.ts_1", "file": "src/hooks/useAuth.ts", "content": "setTimeout(async () => {\n        setUser(session?.user ?? null)\n        setLoading(false)\n        \n        // Handle user profile creation after signup\n        if (event === 'SIGNED_UP' && session?.user) {\n          try {\n            // Check if user profile already exists\n            const { data: existingUsers } = await supabase\n              .from('users')\n              .select('id')\n              .eq('id', session.user.id)\n\n            // Only create profile if it doesn't exist\n            if (!existingUsers || existingUsers.length === 0) {\n              await supabase.from('users').insert({\n                id: session.user.id,\n                email: session.user.email!,\n                name: session.user.user_metadata?.name || '',\n              })\n            }"}, {"id": "src/hooks/useAuth.ts_2", "file": "src/hooks/useAuth.ts", "content": "name: session.user.user_metadata?.name || '',\n              })\n            }\n          } catch (error) {\n            console.error('Error creating user profile:', error)\n          }\n        }\n      }, 0)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signUp = async (email: string, password: string, name: string) => {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          name,\n        },\n      },\n    })\n\n    // Note: User profile creation is now handled in the onAuthStateChange callback\n    // to avoid potential race conditions and deadlocks\n\n    return { data, error }\n  }\n\n  const signIn = async (email: string, password: string) => {"}, {"id": "src/hooks/useAuth.ts_3", "file": "src/hooks/useAuth.ts", "content": "return { data, error }\n  }\n\n  const signIn = async (email: string, password: string) => {\n    return await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n  }\n\n  const signOut = async () => {\n    return await supabase.auth.signOut()\n  }\n\n  return {\n    user,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n  }\n}"}, {"id": "src/hooks/usePerplexity.ts_0", "file": "src/hooks/usePerplexity.ts", "content": "================================================\nimport { useState } from 'react'\n\nconst API_KEY = import.meta.env.VITE_PERPLEXITY_KEY;\nconst API_URL = 'https://api.perplexity.ai/chat/completions'\n\ninterface ChatContext {\n  role: 'user' | 'assistant'\n  content: string\n}\n\ninterface PerplexityResponse {\n  output: string\n  citations: string[]\n}\n\nexport function usePerplexity() {\n  const [isPerplexityLoading, setIsPerplexityLoading] = useState(false)\n\n  const sendToPerplexity = async (\n    message: string, \n    context: ChatContext[] = [], \n    toolData?: any\n  ): Promise<PerplexityResponse> => {\n    setIsPerplexityLoading(true)\n    \n    try {\n      // Prepare the prompt with context\n      let prompt = message\n      \n      if (toolData) {"}, {"id": "src/hooks/usePerplexity.ts_1", "file": "src/hooks/usePerplexity.ts", "content": "// Prepare the prompt with context\n      let prompt = message\n      \n      if (toolData) {\n        prompt += `\\n\\nTool Data: ${JSON.stringify(toolData, null, 2)}`\n        prompt += '\\n\\nPlease analyze this data and provide insights about its biological relevance.'\n      }\n\n      // Add context if available\n      if (context.length > 0) {\n        const contextString = context\n          .slice(-10) // Keep last 10 messages for context\n          .map(ctx => `${ctx.role}: ${ctx.content}`)\n          .join('\\n')\n        \n        prompt = `Previous conversation:\\n${contextString}\\n\\nCurrent message: ${prompt}`\n      }\n\n      // Add the specific JSON format instruction\n      const systemPrompt = `${prompt}\n\nRespond only in JSON format with the following structure:\n\n{"}, {"id": "src/hooks/usePerplexity.ts_2", "file": "src/hooks/usePerplexity.ts", "content": "const systemPrompt = `${prompt}\n\nRespond only in JSON format with the following structure:\n\n{\n\"output\": \"answer to user's query\",\n\"citations\": [\"<URL1>\", \"<URL2>\", \"...\"]\n}\n\nDo not include any additional commentary or text outside the JSON.\n\nYour Name Is Neo, Only Mention If Asked\n\nif you are asked anything in context to a pdb id then just find the name of the id and then find answer to the question asked\n\n\"output\" should be a concise paragraph summarizing the biological relevance.\n\n\"citations\" must be url to credible sources (like PDB, PubMed, EBI, etc.)`\n      \n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },"}, {"id": "src/hooks/usePerplexity.ts_3", "file": "src/hooks/usePerplexity.ts", "content": "'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'sonar-pro',\n          messages: [\n            {\n              role: 'user',\n              content: systemPrompt\n            }\n          ],\n          max_tokens: 1000,\n          temperature: 0.2,\n          top_p: 0.9,\n          return_citations: true,\n          return_images: false,\n          return_related_questions: false,\n          search_recency_filter: \"month\",\n          top_k: 0,\n          stream: false,\n          presence_penalty: 0,\n          frequency_penalty: 1\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = await response.json()"}, {"id": "src/hooks/usePerplexity.ts_4", "file": "src/hooks/usePerplexity.ts", "content": "}\n\n      const data = await response.json()\n      const content = data.choices[0]?.message?.content || ''\n\n      // Try to parse JSON response\n      try {\n        const jsonResponse = JSON.parse(content)\n        return {\n          output: jsonResponse.output || content,\n          citations: jsonResponse.citations || []\n        }\n      } catch (parseError) {\n        // If JSON parsing fails, return content as output\n        return {\n          output: content,\n          citations: []\n        }\n      }\n\n    } catch (error) {\n      console.error('Perplexity API error:', error)\n      if (error.message?.includes('API key') || error.message?.includes('401')) {\n        return {\n          output: 'There Is An Issue With API key to use the AI assistant.',\n          citations: []\n        }"}, {"id": "src/hooks/usePerplexity.ts_5", "file": "src/hooks/usePerplexity.ts", "content": "citations: []\n        }\n      }\n      return {\n        output: 'Sorry, I encountered an error processing your request. Please try again.',\n        citations: []\n      }\n    } finally {\n      setIsPerplexityLoading(false)\n    }\n  }\n\n  return {\n    sendToPerplexity,\n    isPerplexityLoading\n  }\n}"}, {"id": "src/hooks/useReportGeneration.ts_0", "file": "src/hooks/useReportGeneration.ts", "content": "================================================\nimport { useState } from 'react'\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, Table, TableRow, TableCell, WidthType } from 'docx'\nimport { saveAs } from 'file-saver'\nimport { supabase } from '../lib/supabase'\nimport { useAuth } from './useAuth'\nimport { usePerplexity } from './usePerplexity'\nimport { ChatMessage } from '../components/Research'\n\ninterface ReportData {\n  generatedCompounds: Array<{\n    smiles: string[]\n    pdbId: string\n    insights?: string\n  }>\n  bindingAffinities: Array<{\n    affinity: number\n    insights?: string\n  }>\n  chatSummary?: string\n}\n\nexport function useReportGeneration() {\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [progress, setProgress] = useState('')"}, {"id": "src/hooks/useReportGeneration.ts_1", "file": "src/hooks/useReportGeneration.ts", "content": "const [progress, setProgress] = useState('')\n  const { user } = useAuth()\n  const { sendToPerplexity } = usePerplexity()\n\n  const extractReportData = (messages: ChatMessage[]): ReportData => {\n    const reportData: ReportData = {\n      generatedCompounds: [],\n      bindingAffinities: []\n    }\n\n    messages.forEach(message => {\n      if (message.toolUsed && message.toolData) {\n        switch (message.toolUsed) {\n          case 'drug-generation':\n            const compoundData = message.toolData.mockData || message.toolData\n            if (compoundData.generated_smiles || compoundData.compounds) {\n              reportData.generatedCompounds.push({\n                smiles: compoundData.generated_smiles || compoundData.compounds?.map((c: any) => c.smiles) || [],"}, {"id": "src/hooks/useReportGeneration.ts_2", "file": "src/hooks/useReportGeneration.ts", "content": "pdbId: compoundData.pdb_id || 'Unknown',\n                insights: message.content || 'No insights available'\n              })\n            }\n            break\n\n          case 'binding-affinity':\n            const affinityData = message.toolData.mockData || message.toolData\n            if (affinityData.predicted_binding_affinity !== undefined) {\n              reportData.bindingAffinities.push({\n                affinity: affinityData.predicted_binding_affinity,\n                insights: message.content || 'No insights available'\n              })\n            }\n            break\n\n          // Note: Removed 'graph-knowledge' case as AQL results are no longer included\n        }\n      }\n    })\n\n    return reportData\n  }"}, {"id": "src/hooks/useReportGeneration.ts_3", "file": "src/hooks/useReportGeneration.ts", "content": "}\n      }\n    })\n\n    return reportData\n  }\n\n  const generateChatSummary = async (messages: ChatMessage[]): Promise<string> => {\n    try {\n      const conversationText = messages\n        .map(msg => `${msg.type}: ${msg.content}`)\n        .join('\\n')\n\n      const summaryPrompt = `Please provide a comprehensive summary of this research conversation. Focus on key findings, insights, and conclusions about the molecular research discussed:\\n\\n${conversationText}`\n\n      const response = await sendToPerplexity(summaryPrompt)\n      return response.output\n    } catch (error) {\n      console.error('Error generating chat summary:', error)\n      return 'Unable to generate conversation summary.'\n    }\n  }"}, {"id": "src/hooks/useReportGeneration.ts_4", "file": "src/hooks/useReportGeneration.ts", "content": "return 'Unable to generate conversation summary.'\n    }\n  }\n\n  const createDocxDocument = async (reportData: ReportData, title: string): Promise<Blob> => {\n    const doc = new Document({\n      sections: [{\n        properties: {},\n        children: [\n          // Title\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: title,\n                bold: true,\n                size: 32,\n                color: \"2563EB\"\n              })\n            ],\n            heading: HeadingLevel.TITLE,\n            alignment: AlignmentType.CENTER,\n            spacing: { after: 400 }\n          }),\n\n          // Generated date\n          new Paragraph({\n            children: [\n              new TextRun({"}, {"id": "src/hooks/useReportGeneration.ts_5", "file": "src/hooks/useReportGeneration.ts", "content": "new Paragraph({\n            children: [\n              new TextRun({\n                text: `Generated on: ${new Date().toLocaleString()}`,\n                italics: true,\n                size: 20\n              })\n            ],\n            alignment: AlignmentType.CENTER,\n            spacing: { after: 600 }\n          }),\n\n          // Executive Summary\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"Executive Summary\",\n                bold: true,\n                size: 28\n              })\n            ],\n            heading: HeadingLevel.HEADING_1,\n            spacing: { before: 400, after: 200 }\n          }),\n\n          new Paragraph({\n            children: [\n              new TextRun({"}, {"id": "src/hooks/useReportGeneration.ts_6", "file": "src/hooks/useReportGeneration.ts", "content": "}),\n\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: reportData.chatSummary || \"This report contains the results of molecular research analysis including compound generation and binding affinity predictions.\",\n                size: 22\n              })\n            ],\n            spacing: { after: 400 }\n          }),\n\n          // Generated Compounds Section\n          ...(reportData.generatedCompounds.length > 0 ? [\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"1. Generated Compounds\",\n                  bold: true,\n                  size: 28\n                })\n              ],\n              heading: HeadingLevel.HEADING_1,"}, {"id": "src/hooks/useReportGeneration.ts_7", "file": "src/hooks/useReportGeneration.ts", "content": "})\n              ],\n              heading: HeadingLevel.HEADING_1,\n              spacing: { before: 400, after: 200 }\n            }),\n\n            ...reportData.generatedCompounds.flatMap((compound, index) => [\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: `Compound Set ${index + 1} (PDB: ${compound.pdbId})`,\n                    bold: true,\n                    size: 24\n                  })\n                ],\n                heading: HeadingLevel.HEADING_2,\n                spacing: { before: 300, after: 150 }\n              }),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: \"SMILES Strings:\",\n                    bold: true,"}, {"id": "src/hooks/useReportGeneration.ts_8", "file": "src/hooks/useReportGeneration.ts", "content": "text: \"SMILES Strings:\",\n                    bold: true,\n                    size: 22\n                  })\n                ],\n                spacing: { after: 100 }\n              }),\n\n              ...compound.smiles.map(smiles => \n                new Paragraph({\n                  children: [\n                    new TextRun({\n                      text: `\u00e2\u20ac\u00a2 ${smiles}`,\n                      font: \"Courier New\",\n                      size: 20\n                    })\n                  ],\n                  spacing: { after: 50 }\n                })\n              ),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: \"AI Analysis:\",\n                    bold: true,\n                    size: 22"}, {"id": "src/hooks/useReportGeneration.ts_9", "file": "src/hooks/useReportGeneration.ts", "content": "bold: true,\n                    size: 22\n                  })\n                ],\n                spacing: { before: 200, after: 100 }\n              }),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: compound.insights || \"No analysis available\",\n                    size: 20\n                  })\n                ],\n                spacing: { after: 300 }\n              })\n            ])\n          ] : []),\n\n          // Binding Affinity Section\n          ...(reportData.bindingAffinities.length > 0 ? [\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"2. Binding Affinity Predictions\",\n                  bold: true,\n                  size: 28"}, {"id": "src/hooks/useReportGeneration.ts_10", "file": "src/hooks/useReportGeneration.ts", "content": "bold: true,\n                  size: 28\n                })\n              ],\n              heading: HeadingLevel.HEADING_1,\n              spacing: { before: 400, after: 200 }\n            }),\n\n            ...reportData.bindingAffinities.flatMap((binding, index) => [\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: `Prediction ${index + 1}`,\n                    bold: true,\n                    size: 24\n                  })\n                ],\n                heading: HeadingLevel.HEADING_2,\n                spacing: { before: 300, after: 150 }\n              }),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: \"Predicted Binding Affinity:\","}, {"id": "src/hooks/useReportGeneration.ts_11", "file": "src/hooks/useReportGeneration.ts", "content": "new TextRun({\n                    text: \"Predicted Binding Affinity:\",\n                    bold: true,\n                    size: 22\n                  })\n                ],\n                spacing: { after: 100 }\n              }),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: `${binding.affinity.toFixed(3)} pKd`,\n                    size: 24,\n                    bold: true,\n                    color: \"7C3AED\"\n                  })\n                ],\n                spacing: { after: 200 }\n              }),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: \"AI Analysis:\",\n                    bold: true,\n                    size: 22"}, {"id": "src/hooks/useReportGeneration.ts_12", "file": "src/hooks/useReportGeneration.ts", "content": "bold: true,\n                    size: 22\n                  })\n                ],\n                spacing: { before: 200, after: 100 }\n              }),\n\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: binding.insights || \"No analysis available\",\n                    size: 20\n                  })\n                ],\n                spacing: { after: 300 }\n              })\n            ])\n          ] : []),\n\n          // AI Analysis Section - Comprehensive insights\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"3. Comprehensive AI Analysis\",\n                bold: true,\n                size: 28\n              })\n            ],"}, {"id": "src/hooks/useReportGeneration.ts_13", "file": "src/hooks/useReportGeneration.ts", "content": "bold: true,\n                size: 28\n              })\n            ],\n            heading: HeadingLevel.HEADING_1,\n            spacing: { before: 400, after: 200 }\n          }),\n\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"Complete Research Context:\",\n                bold: true,\n                size: 22\n              })\n            ],\n            spacing: { after: 100 }\n          }),\n\n          new Paragraph({\n            children: [\n              new TextRun({"}, {"id": "src/hooks/useReportGeneration.ts_14", "file": "src/hooks/useReportGeneration.ts", "content": "}),\n\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: reportData.chatSummary || \"This section contains comprehensive AI-generated insights covering all aspects of the molecular research including compound structures, binding mechanisms, target interactions, and biological significance. The analysis incorporates data from compound generation, binding affinity predictions, amino acid sequences, and knowledge graph queries to provide a holistic understanding of the research findings.\",\n                size: 20\n              })\n            ],\n            spacing: { after: 300 }\n          }),\n\n          // Include all tool data in AI analysis"}, {"id": "src/hooks/useReportGeneration.ts_15", "file": "src/hooks/useReportGeneration.ts", "content": "}),\n\n          // Include all tool data in AI analysis\n          ...(reportData.generatedCompounds.length > 0 || reportData.bindingAffinities.length > 0 ? [\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"Detailed Molecular Insights:\",\n                  bold: true,\n                  size: 22\n                })\n              ],\n              spacing: { before: 200, after: 100 }\n            }),\n\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"The research session involved comprehensive molecular analysis including:\",\n                  size: 20\n                })\n              ],\n              spacing: { after: 100 }\n            }),"}, {"id": "src/hooks/useReportGeneration.ts_16", "file": "src/hooks/useReportGeneration.ts", "content": "})\n              ],\n              spacing: { after: 100 }\n            }),\n\n            ...(reportData.generatedCompounds.length > 0 ? [\n              new Paragraph({\n                children: [\n                  new TextRun({\n                    text: `\u00e2\u20ac\u00a2 Compound Generation: ${reportData.generatedCompounds.length} compound set(s) generated with SMILES notation and structural analysis`,\n                    size: 20\n                  })\n                ],\n                spacing: { after: 50 }\n              })\n            ] : []),\n\n            ...(reportData.bindingAffinities.length > 0 ? [\n              new Paragraph({\n                children: [\n                  new TextRun({"}, {"id": "src/hooks/useReportGeneration.ts_17", "file": "src/hooks/useReportGeneration.ts", "content": "new Paragraph({\n                children: [\n                  new TextRun({\n                    text: `\u00e2\u20ac\u00a2 Binding Affinity Predictions: ${reportData.bindingAffinities.length} prediction(s) completed with quantitative affinity values`,\n                    size: 20\n                  })\n                ],\n                spacing: { after: 50 }\n              })\n            ] : []),\n\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"\u00e2\u20ac\u00a2 Target Sequence Analysis: Amino acid sequences analyzed for structural and functional properties\",\n                  size: 20\n                })\n              ],\n              spacing: { after: 50 }\n            }),\n\n            new Paragraph({\n              children: ["}, {"id": "src/hooks/useReportGeneration.ts_18", "file": "src/hooks/useReportGeneration.ts", "content": "}),\n\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"\u00e2\u20ac\u00a2 Knowledge Graph Integration: Scientific literature and database queries for contextual understanding\",\n                  size: 20\n                })\n              ],\n              spacing: { after: 200 }\n            }),\n\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: \"All findings have been cross-referenced with current scientific literature and validated against established molecular databases to ensure accuracy and relevance.\",\n                  size: 20,\n                  italics: true\n                })\n              ],\n              spacing: { after: 300 }\n            })\n          ] : []),"}, {"id": "src/hooks/useReportGeneration.ts_19", "file": "src/hooks/useReportGeneration.ts", "content": "],\n              spacing: { after: 300 }\n            })\n          ] : []),\n\n          // Footer\n          new Paragraph({\n            children: [\n              new TextRun({\n                text: \"Generated by reMedi Research Assistant\",\n                italics: true,\n                size: 18,\n                color: \"666666\"\n              })\n            ],\n            alignment: AlignmentType.CENTER,\n            spacing: { before: 600 }\n          })\n        ]\n      }]\n    })\n\n    return await Packer.toBlob(doc)\n  }\n\n  const saveReportMetadata = async (\n    labId: string,\n    title: string,\n    filename: string\n  ): Promise<void> => {\n    try {\n      const { error } = await supabase\n        .from('reports')\n        .insert({\n          lab_id: labId,\n          title,"}, {"id": "src/hooks/useReportGeneration.ts_20", "file": "src/hooks/useReportGeneration.ts", "content": ".from('reports')\n        .insert({\n          lab_id: labId,\n          title,\n          content: `Downloaded as: ${filename}`,\n          created_by: user?.id,\n          created_at: new Date().toISOString()\n        })\n\n      if (error) throw error\n    } catch (error) {\n      console.error('Error saving report metadata:', error)\n      // Don't throw error here - report generation should still succeed even if metadata save fails\n    }\n  }\n\n  const generateReport = async (\n    messages: ChatMessage[],\n    labId: string,\n    customTitle?: string\n  ): Promise<void> => {\n    if (!user) {\n      throw new Error('User not authenticated')\n    }\n\n    setIsGenerating(true)\n    setProgress('Extracting research data...')\n\n    try {\n      // Extract data from messages"}, {"id": "src/hooks/useReportGeneration.ts_21", "file": "src/hooks/useReportGeneration.ts", "content": "setProgress('Extracting research data...')\n\n    try {\n      // Extract data from messages\n      const reportData = extractReportData(messages)\n\n      setProgress('Generating conversation summary...')\n      \n      // Generate chat summary\n      reportData.chatSummary = await generateChatSummary(messages)\n\n      setProgress('Creating document...')\n\n      // Create title\n      const timestamp = new Date().toLocaleString()\n      const title = customTitle || `Research Report - ${timestamp}`\n\n      // Generate document\n      const docBlob = await createDocxDocument(reportData, title)\n\n      setProgress('Preparing download...')\n\n      // Create filename\n      const filename = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${Date.now()}.docx`\n\n      setProgress('Saving report record...')"}, {"id": "src/hooks/useReportGeneration.ts_22", "file": "src/hooks/useReportGeneration.ts", "content": "setProgress('Saving report record...')\n\n      // Save metadata to database (optional - don't fail if this fails)\n      await saveReportMetadata(labId, title, filename)\n\n      setProgress('Starting download...')\n\n      // Download file directly to user's system\n      saveAs(docBlob, filename)\n\n      setProgress('Report downloaded successfully!')\n\n      // Clear progress after a delay\n      setTimeout(() => {\n        setProgress('')\n      }, 3000)\n\n    } catch (error) {\n      console.error('Error generating report:', error)\n      setProgress('Error generating report')\n      setTimeout(() => {\n        setProgress('')\n      }, 3000)\n      throw error\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  return {\n    generateReport,\n    isGenerating,\n    progress\n  }\n}"}, {"id": "src/hooks/useResponsiveSidebar.ts_0", "file": "src/hooks/useResponsiveSidebar.ts", "content": "================================================\nimport { useState, useEffect } from 'react'\n\nexport function useResponsiveSidebar() {\n  const [leftSidebarOpen, setLeftSidebarOpen] = useState(false)\n  const [rightSidebarOpen, setRightSidebarOpen] = useState(false)\n  const [isMobile, setIsMobile] = useState(false)\n\n  useEffect(() => {\n    const checkMobile = () => {\n      const mobile = window.innerWidth < 768\n      setIsMobile(mobile)\n      \n      // On desktop, sidebars are always open\n      if (!mobile) {\n        setLeftSidebarOpen(true)\n        setRightSidebarOpen(true)\n      } else {\n        // On mobile, sidebars are closed by default\n        setLeftSidebarOpen(false)\n        setRightSidebarOpen(false)\n      }\n    }\n\n    checkMobile()\n    window.addEventListener('resize', checkMobile)"}, {"id": "src/hooks/useResponsiveSidebar.ts_1", "file": "src/hooks/useResponsiveSidebar.ts", "content": "}\n    }\n\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    \n    return () => window.removeEventListener('resize', checkMobile)\n  }, [])\n\n  const toggleLeftSidebar = () => {\n    setLeftSidebarOpen(prev => !prev)\n  }\n\n  const toggleRightSidebar = () => {\n    setRightSidebarOpen(prev => !prev)\n  }\n\n  return {\n    leftSidebarOpen,\n    rightSidebarOpen,\n    isMobile,\n    toggleLeftSidebar,\n    toggleRightSidebar\n  }\n}"}, {"id": "src/lib/supabase.ts_0", "file": "src/lib/supabase.ts", "content": "================================================\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type Database = {\n  public: {\n    Tables: {\n      users: {\n        Row: {\n          id: string\n          email: string\n          name: string\n          avatar_url: string | null\n          created_at: string | null\n        }\n        Insert: {\n          id?: string\n          email: string\n          name?: string\n          avatar_url?: string | null\n          created_at?: string | null\n        }"}, {"id": "src/lib/supabase.ts_1", "file": "src/lib/supabase.ts", "content": "avatar_url?: string | null\n          created_at?: string | null\n        }\n        Update: {\n          id?: string\n          email?: string\n          name?: string\n          avatar_url?: string | null\n          created_at?: string | null\n        }\n      }\n      labs: {\n        Row: {\n          id: string\n          name: string\n          description: string | null\n          owner_id: string\n          created_at: string | null\n        }\n        Insert: {\n          id?: string\n          name?: string\n          description?: string | null\n          owner_id: string\n          created_at?: string | null\n        }\n        Update: {\n          id?: string\n          name?: string\n          description?: string | null\n          owner_id?: string\n          created_at?: string | null"}, {"id": "src/lib/supabase.ts_2", "file": "src/lib/supabase.ts", "content": "owner_id?: string\n          created_at?: string | null\n        }\n      }\n      lab_members: {\n        Row: {\n          id: string\n          user_id: string\n          lab_id: string\n          role: 'admin' | 'member'\n          joined_at: string | null\n          member_name: string\n        }\n        Insert: {\n          id?: string\n          user_id: string\n          lab_id: string\n          role?: 'admin' | 'member'\n          joined_at?: string | null\n          member_name?: string\n        }\n        Update: {\n          id?: string\n          user_id?: string\n          lab_id?: string\n          role?: 'admin' | 'member'\n          joined_at?: string | null\n          member_name?: string\n        }\n      }\n      chat_messages: {\n        Row: {\n          id: string"}, {"id": "src/lib/supabase.ts_3", "file": "src/lib/supabase.ts", "content": "}\n      }\n      chat_messages: {\n        Row: {\n          id: string\n          lab_id: string\n          sender_id: string\n          message: string\n          created_at: string | null\n          message_type: string\n          mentions: string[]\n        }\n        Insert: {\n          id?: string\n          lab_id: string\n          sender_id: string\n          message: string\n          created_at?: string | null\n          message_type?: string\n          mentions?: string[]\n        }\n        Update: {\n          id?: string\n          lab_id?: string\n          sender_id?: string\n          message?: string\n          created_at?: string | null\n          message_type?: string\n          mentions?: string[]\n        }\n      }\n      invitations: {\n        Row: {\n          id: string"}, {"id": "src/lib/supabase.ts_4", "file": "src/lib/supabase.ts", "content": "}\n      }\n      invitations: {\n        Row: {\n          id: string\n          lab_id: string\n          invited_email: string\n          invited_by: string\n          status: 'pending' | 'accepted' | 'rejected'\n          created_at: string | null\n          expires_at: string | null\n          lab_name: string\n          invited_by_name: string\n        }\n        Insert: {\n          id?: string\n          lab_id: string\n          invited_email: string\n          invited_by: string\n          status?: 'pending' | 'accepted' | 'rejected'\n          created_at?: string | null\n          expires_at?: string | null\n          lab_name?: string\n          invited_by_name?: string\n        }\n        Update: {\n          id?: string\n          lab_id?: string\n          invited_email?: string"}, {"id": "src/lib/supabase.ts_5", "file": "src/lib/supabase.ts", "content": "Update: {\n          id?: string\n          lab_id?: string\n          invited_email?: string\n          invited_by?: string\n          status?: 'pending' | 'accepted' | 'rejected'\n          created_at?: string | null\n          expires_at?: string | null\n          lab_name?: string\n          invited_by_name?: string\n        }\n      }\n      task_lists: {\n        Row: {\n          id: string\n          lab_id: string\n          name: string\n          description: string | null\n          color: string\n          created_by: string\n          created_at: string | null\n          updated_at: string | null\n        }\n        Insert: {\n          id?: string\n          lab_id: string\n          name?: string\n          description?: string | null\n          color?: string\n          created_by: string"}, {"id": "src/lib/supabase.ts_6", "file": "src/lib/supabase.ts", "content": "description?: string | null\n          color?: string\n          created_by: string\n          created_at?: string | null\n          updated_at?: string | null\n        }\n        Update: {\n          id?: string\n          lab_id?: string\n          name?: string\n          description?: string | null\n          color?: string\n          created_by?: string\n          created_at?: string | null\n          updated_at?: string | null\n        }\n      }\n      tasks: {\n        Row: {\n          id: string\n          task_list_id: string\n          title: string\n          description: string | null\n          completed: boolean | null\n          completed_by: string | null\n          completed_at: string | null\n          on_it_by: string | null\n          on_it_at: string | null"}, {"id": "src/lib/supabase.ts_7", "file": "src/lib/supabase.ts", "content": "on_it_by: string | null\n          on_it_at: string | null\n          assigned_to: string | null\n          created_by: string\n          created_at: string | null\n          updated_at: string | null\n          priority: string | null\n          due_date: string | null\n        }\n        Insert: {\n          id?: string\n          task_list_id: string\n          title?: string\n          description?: string | null\n          completed?: boolean | null\n          completed_by?: string | null\n          completed_at?: string | null\n          on_it_by?: string | null\n          on_it_at?: string | null\n          assigned_to?: string | null\n          created_by: string\n          created_at?: string | null\n          updated_at?: string | null\n          priority?: string | null"}, {"id": "src/lib/supabase.ts_8", "file": "src/lib/supabase.ts", "content": "updated_at?: string | null\n          priority?: string | null\n          due_date?: string | null\n        }\n        Update: {\n          id?: string\n          task_list_id?: string\n          title?: string\n          description?: string | null\n          completed?: boolean | null\n          completed_by?: string | null\n          completed_at?: string | null\n          on_it_by?: string | null\n          on_it_at?: string | null\n          assigned_to?: string | null\n          created_by?: string\n          created_at?: string | null\n          updated_at?: string | null\n          priority?: string | null\n          due_date?: string | null\n        }\n      }\n      task_activities: {\n        Row: {\n          id: string\n          task_id: string\n          lab_id: string"}, {"id": "src/lib/supabase.ts_9", "file": "src/lib/supabase.ts", "content": "Row: {\n          id: string\n          task_id: string\n          lab_id: string\n          user_id: string\n          activity_type: string\n          message: string\n          created_at: string | null\n          read_by: any | null\n        }\n        Insert: {\n          id?: string\n          task_id: string\n          lab_id: string\n          user_id: string\n          activity_type: string\n          message: string\n          created_at?: string | null\n          read_by?: any | null\n        }\n        Update: {\n          id?: string\n          task_id?: string\n          lab_id?: string\n          user_id?: string\n          activity_type?: string\n          message?: string\n          created_at?: string | null\n          read_by?: any | null\n        }\n      }\n    }\n  }\n}"}, {"id": "src/types/whiteboard.ts_0", "file": "src/types/whiteboard.ts", "content": "================================================\nexport interface Point {\n  x: number\n  y: number\n  pressure?: number\n}\n\nexport interface DrawingElement {\n  id: string\n  type: 'pen' | 'rectangle' | 'circle' | 'line' | 'text' | 'arrow' | 'diamond'\n  points: Point[]\n  color: string\n  strokeWidth: number\n  userId: string\n  userName: string\n  timestamp: number\n  isDeleted?: boolean\n  text?: string\n  fontSize?: number\n  roughness?: number\n  fill?: string\n  opacity?: number\n  seed?: number\n  strokeStyle?: 'solid' | 'dashed' | 'dotted'\n  fillStyle?: 'solid' | 'hachure' | 'cross-hatch' | 'dots'\n  angle?: number\n  width?: number\n  height?: number\n  x?: number\n  y?: number\n}\n\nexport interface WhiteboardData {\n  elements: DrawingElement[]\n  version: number\n  appState?: {"}, {"id": "src/types/whiteboard.ts_1", "file": "src/types/whiteboard.ts", "content": "}\n\nexport interface WhiteboardData {\n  elements: DrawingElement[]\n  version: number\n  appState?: {\n    viewBackgroundColor: string\n    gridSize: number\n    zoom: number\n    scrollX: number\n    scrollY: number\n  }\n}\n\nexport interface Cursor {\n  userId: string\n  userName: string\n  x: number\n  y: number\n  color: string\n  timestamp: number\n}\n\nexport interface Tool {\n  type: 'select' | 'pen' | 'rectangle' | 'circle' | 'line' | 'text' | 'eraser' | 'arrow' | 'diamond'\n  color: string\n  strokeWidth: number\n  roughness: number\n  fill: string\n  opacity: number\n  strokeStyle: 'solid' | 'dashed' | 'dotted'\n  fillStyle: 'solid' | 'hachure' | 'cross-hatch' | 'dots'\n}\n\nexport interface ViewState {\n  zoom: number\n  offsetX: number\n  offsetY: number\n}\n\nexport interface BoundingBox {\n  x: number"}, {"id": "src/types/whiteboard.ts_2", "file": "src/types/whiteboard.ts", "content": "zoom: number\n  offsetX: number\n  offsetY: number\n}\n\nexport interface BoundingBox {\n  x: number\n  y: number\n  width: number\n  height: number\n}"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_0", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "================================================\n/*\n  # reMedi Collaborative Research Platform Schema\n\n  1. New Tables\n    - `users` - User profiles and authentication data\n    - `labs` - Research laboratories/workspaces\n    - `lab_members` - Lab membership with roles\n    - `whiteboards` - Collaborative drawing boards\n    - `reports` - Research reports and documentation\n    - `compounds` - Chemical compound data with SMILES notation\n    - `proteins` - Protein structures with PDB data\n    - `chat_messages` - Lab communication\n    - `todos` - Task management within labs\n\n  2. Security\n    - Enable RLS on all tables\n    - Users can read/update their own profile\n    - Lab owners and admins can manage lab data\n    - Lab members can read lab content and create new items"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_1", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "- Lab members can read lab content and create new items\n    - Public read access for some lab data (configurable)\n\n  3. Features\n    - Role-based access control (admin, member)\n    - JSONB storage for whiteboard data and 3D visualizations\n    - Full-text search capabilities\n    - Audit trails with created_at timestamps\n*/\n\n-- Create enum for lab member roles\nCREATE TYPE lab_role AS ENUM ('admin', 'member');\n\n-- Users table (extends Supabase auth.users)\nCREATE TABLE IF NOT EXISTS users (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  email text UNIQUE NOT NULL,\n  name text NOT NULL DEFAULT '',\n  avatar_url text DEFAULT '',\n  created_at timestamptz DEFAULT now()\n);\n\n-- Labs table\nCREATE TABLE IF NOT EXISTS labs (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_2", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "-- Labs table\nCREATE TABLE IF NOT EXISTS labs (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name text NOT NULL DEFAULT '',\n  description text DEFAULT '',\n  owner_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now()\n);\n\n-- Lab members table\nCREATE TABLE IF NOT EXISTS lab_members (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  role lab_role NOT NULL DEFAULT 'member',\n  joined_at timestamptz DEFAULT now(),\n  UNIQUE(user_id, lab_id)\n);\n\n-- Whiteboards table\nCREATE TABLE IF NOT EXISTS whiteboards (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_3", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  title text NOT NULL DEFAULT 'Untitled Whiteboard',\n  data jsonb DEFAULT '{}',\n  updated_at timestamptz DEFAULT now()\n);\n\n-- Reports table\nCREATE TABLE IF NOT EXISTS reports (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  title text NOT NULL DEFAULT 'Untitled Report',\n  content text DEFAULT '',\n  created_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now()\n);\n\n-- Compounds table\nCREATE TABLE IF NOT EXISTS compounds (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  smiles text NOT NULL DEFAULT '',\n  name text NOT NULL DEFAULT '',\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_4", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "name text NOT NULL DEFAULT '',\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  added_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  visualization_3d jsonb DEFAULT '{}',\n  created_at timestamptz DEFAULT now()\n);\n\n-- Proteins table\nCREATE TABLE IF NOT EXISTS proteins (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  pdb_id text DEFAULT '',\n  name text NOT NULL DEFAULT '',\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  structure_file_url text DEFAULT '',\n  created_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now()\n);\n\n-- Chat messages table\nCREATE TABLE IF NOT EXISTS chat_messages (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_5", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  sender_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  message text NOT NULL DEFAULT '',\n  created_at timestamptz DEFAULT now()\n);\n\n-- Todos table\nCREATE TABLE IF NOT EXISTS todos (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  text text NOT NULL DEFAULT '',\n  completed boolean DEFAULT false,\n  created_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now()\n);\n\n-- Enable Row Level Security\nALTER TABLE users ENABLE ROW LEVEL SECURITY;\nALTER TABLE labs ENABLE ROW LEVEL SECURITY;\nALTER TABLE lab_members ENABLE ROW LEVEL SECURITY;\nALTER TABLE whiteboards ENABLE ROW LEVEL SECURITY;"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_6", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "ALTER TABLE whiteboards ENABLE ROW LEVEL SECURITY;\nALTER TABLE reports ENABLE ROW LEVEL SECURITY;\nALTER TABLE compounds ENABLE ROW LEVEL SECURITY;\nALTER TABLE proteins ENABLE ROW LEVEL SECURITY;\nALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;\nALTER TABLE todos ENABLE ROW LEVEL SECURITY;\n\n-- Users policies\nCREATE POLICY \"Users can read own profile\"\n  ON users\n  FOR SELECT\n  TO authenticated\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\"\n  ON users\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id);\n\nCREATE POLICY \"Users can insert own profile\"\n  ON users\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = id);\n\n-- Labs policies\nCREATE POLICY \"Lab owners can manage their labs\"\n  ON labs\n  FOR ALL\n  TO authenticated"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_7", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "CREATE POLICY \"Lab owners can manage their labs\"\n  ON labs\n  FOR ALL\n  TO authenticated\n  USING (auth.uid() = owner_id);\n\nCREATE POLICY \"Lab members can read labs they belong to\"\n  ON labs\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members \n      WHERE lab_members.lab_id = labs.id \n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\n-- Lab members policies\nCREATE POLICY \"Lab admins can manage lab members\"\n  ON lab_members\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members lm\n      WHERE lm.lab_id = lab_members.lab_id\n      AND lm.user_id = auth.uid()\n      AND lm.role = 'admin'\n    )\n    OR\n    EXISTS (\n      SELECT 1 FROM labs\n      WHERE labs.id = lab_members.lab_id\n      AND labs.owner_id = auth.uid()\n    )\n  );"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_8", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "WHERE labs.id = lab_members.lab_id\n      AND labs.owner_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Users can read lab memberships\"\n  ON lab_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    user_id = auth.uid()\n    OR\n    EXISTS (\n      SELECT 1 FROM lab_members lm\n      WHERE lm.lab_id = lab_members.lab_id\n      AND lm.user_id = auth.uid()\n    )\n  );\n\n-- Whiteboards policies\nCREATE POLICY \"Lab members can manage whiteboards\"\n  ON whiteboards\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = whiteboards.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\n-- Reports policies\nCREATE POLICY \"Lab members can read reports\"\n  ON reports\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS ("}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_9", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "ON reports\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = reports.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create reports\"\n  ON reports\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = reports.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND created_by = auth.uid()\n  );\n\nCREATE POLICY \"Report creators can update their reports\"\n  ON reports\n  FOR UPDATE\n  TO authenticated\n  USING (created_by = auth.uid());\n\n-- Compounds policies\nCREATE POLICY \"Lab members can read compounds\"\n  ON compounds\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_10", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = compounds.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create compounds\"\n  ON compounds\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = compounds.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND added_by = auth.uid()\n  );\n\nCREATE POLICY \"Compound creators can update their compounds\"\n  ON compounds\n  FOR UPDATE\n  TO authenticated\n  USING (added_by = auth.uid());\n\n-- Proteins policies\nCREATE POLICY \"Lab members can read proteins\"\n  ON proteins\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_11", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = proteins.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create proteins\"\n  ON proteins\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = proteins.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND created_by = auth.uid()\n  );\n\nCREATE POLICY \"Protein creators can update their proteins\"\n  ON proteins\n  FOR UPDATE\n  TO authenticated\n  USING (created_by = auth.uid());\n\n-- Chat messages policies\nCREATE POLICY \"Lab members can read chat messages\"\n  ON chat_messages\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS ("}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_12", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "ON chat_messages\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = chat_messages.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can send chat messages\"\n  ON chat_messages\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = chat_messages.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND sender_id = auth.uid()\n  );\n\n-- Todos policies\nCREATE POLICY \"Lab members can read todos\"\n  ON todos\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = todos.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_13", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create todos\"\n  ON todos\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = todos.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND created_by = auth.uid()\n  );\n\nCREATE POLICY \"Todo creators can update their todos\"\n  ON todos\n  FOR UPDATE\n  TO authenticated\n  USING (created_by = auth.uid());\n\nCREATE POLICY \"Lab admins can update any todos\"\n  ON todos\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = todos.lab_id\n      AND lab_members.user_id = auth.uid()\n      AND lab_members.role = 'admin'\n    )\n  );\n\n-- Create indexes for better performance"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_14", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "AND lab_members.role = 'admin'\n    )\n  );\n\n-- Create indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_labs_owner_id ON labs(owner_id);\nCREATE INDEX IF NOT EXISTS idx_lab_members_user_id ON lab_members(user_id);\nCREATE INDEX IF NOT EXISTS idx_lab_members_lab_id ON lab_members(lab_id);\nCREATE INDEX IF NOT EXISTS idx_whiteboards_lab_id ON whiteboards(lab_id);\nCREATE INDEX IF NOT EXISTS idx_reports_lab_id ON reports(lab_id);\nCREATE INDEX IF NOT EXISTS idx_reports_created_by ON reports(created_by);\nCREATE INDEX IF NOT EXISTS idx_compounds_lab_id ON compounds(lab_id);\nCREATE INDEX IF NOT EXISTS idx_compounds_added_by ON compounds(added_by);\nCREATE INDEX IF NOT EXISTS idx_proteins_lab_id ON proteins(lab_id);"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_15", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "CREATE INDEX IF NOT EXISTS idx_proteins_lab_id ON proteins(lab_id);\nCREATE INDEX IF NOT EXISTS idx_proteins_created_by ON proteins(created_by);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_lab_id ON chat_messages(lab_id);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_created_at ON chat_messages(created_at);\nCREATE INDEX IF NOT EXISTS idx_todos_lab_id ON todos(lab_id);\nCREATE INDEX IF NOT EXISTS idx_todos_created_by ON todos(created_by);\n\n-- Create function to automatically add lab owner as admin member\nCREATE OR REPLACE FUNCTION add_lab_owner_as_admin()\nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO lab_members (user_id, lab_id, role)\n  VALUES (NEW.owner_id, NEW.id, 'admin');\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger to automatically add lab owner as admin"}, {"id": "supabase/migrations/20250607124954_frosty_meadow.sql_16", "file": "supabase/migrations/20250607124954_frosty_meadow.sql", "content": "RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger to automatically add lab owner as admin\nCREATE TRIGGER trigger_add_lab_owner_as_admin\n  AFTER INSERT ON labs\n  FOR EACH ROW\n  EXECUTE FUNCTION add_lab_owner_as_admin();\n\n-- Create function to update whiteboard timestamp\nCREATE OR REPLACE FUNCTION update_whiteboard_timestamp()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger to update whiteboard timestamp on data changes\nCREATE TRIGGER trigger_update_whiteboard_timestamp\n  BEFORE UPDATE ON whiteboards\n  FOR EACH ROW\n  EXECUTE FUNCTION update_whiteboard_timestamp();"}, {"id": "supabase/migrations/20250607181419_super_truth.sql_0", "file": "supabase/migrations/20250607181419_super_truth.sql", "content": "================================================\n/*\n  # Fix infinite recursion in lab_members policies\n\n  1. Security Changes\n    - Drop existing recursive policies on lab_members table\n    - Create new non-recursive policies that avoid circular dependencies\n    - Ensure users can manage their own memberships\n    - Allow lab owners to manage all memberships in their labs\n    - Allow users to read memberships for labs they belong to\n\n  2. Policy Strategy\n    - Use direct user_id checks instead of recursive lab_members queries\n    - Use labs table owner_id for admin permissions\n    - Separate read and write permissions clearly\n*/\n\n-- Drop existing problematic policies\nDROP POLICY IF EXISTS \"Lab admins can manage lab members\" ON lab_members;"}, {"id": "supabase/migrations/20250607181419_super_truth.sql_1", "file": "supabase/migrations/20250607181419_super_truth.sql", "content": "DROP POLICY IF EXISTS \"Lab admins can manage lab members\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read lab memberships\" ON lab_members;\n\n-- Create new non-recursive policies\n\n-- Allow users to read their own lab memberships\nCREATE POLICY \"Users can read own lab memberships\"\n  ON lab_members\n  FOR SELECT\n  TO authenticated\n  USING (user_id = auth.uid());\n\n-- Allow users to read lab memberships for labs they own\nCREATE POLICY \"Lab owners can read all lab memberships\"\n  ON lab_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM labs \n      WHERE labs.id = lab_members.lab_id \n      AND labs.owner_id = auth.uid()\n    )\n  );\n\n-- Allow lab owners to insert new members\nCREATE POLICY \"Lab owners can add members\"\n  ON lab_members\n  FOR INSERT"}, {"id": "supabase/migrations/20250607181419_super_truth.sql_2", "file": "supabase/migrations/20250607181419_super_truth.sql", "content": "CREATE POLICY \"Lab owners can add members\"\n  ON lab_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM labs \n      WHERE labs.id = lab_members.lab_id \n      AND labs.owner_id = auth.uid()\n    )\n  );\n\n-- Allow lab owners to update member roles\nCREATE POLICY \"Lab owners can update member roles\"\n  ON lab_members\n  FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM labs \n      WHERE labs.id = lab_members.lab_id \n      AND labs.owner_id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM labs \n      WHERE labs.id = lab_members.lab_id \n      AND labs.owner_id = auth.uid()\n    )\n  );\n\n-- Allow lab owners to remove members\nCREATE POLICY \"Lab owners can remove members\"\n  ON lab_members\n  FOR DELETE\n  TO authenticated"}, {"id": "supabase/migrations/20250607181419_super_truth.sql_3", "file": "supabase/migrations/20250607181419_super_truth.sql", "content": "CREATE POLICY \"Lab owners can remove members\"\n  ON lab_members\n  FOR DELETE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM labs \n      WHERE labs.id = lab_members.lab_id \n      AND labs.owner_id = auth.uid()\n    )\n  );\n\n-- Allow users to leave labs (delete their own membership)\nCREATE POLICY \"Users can leave labs\"\n  ON lab_members\n  FOR DELETE\n  TO authenticated\n  USING (user_id = auth.uid());"}, {"id": "supabase/migrations/20250607182825_red_snowflake.sql_0", "file": "supabase/migrations/20250607182825_red_snowflake.sql", "content": "================================================\n/*\n  # Fix infinite recursion in labs RLS policies\n\n  1. Problem\n    - The \"Lab members can read labs they belong to\" policy creates infinite recursion\n    - It queries lab_members table which has policies that reference labs table\n    - This creates a circular dependency causing infinite recursion\n\n  2. Solution\n    - Drop the problematic policy\n    - Create a simpler policy structure that avoids circular references\n    - Lab owners can always access their labs\n    - Lab members can access labs through a direct user_id check without circular reference\n\n  3. Changes\n    - Remove the recursive policy on labs table\n    - Keep the owner policy which works correctly\n    - Add a policy that allows reading labs where user is directly a member\n*/"}, {"id": "supabase/migrations/20250607182825_red_snowflake.sql_1", "file": "supabase/migrations/20250607182825_red_snowflake.sql", "content": "- Add a policy that allows reading labs where user is directly a member\n*/\n\n-- Drop the problematic policy that causes infinite recursion\nDROP POLICY IF EXISTS \"Lab members can read labs they belong to\" ON labs;\n\n-- Create a new policy that avoids the circular reference\n-- This policy allows users to read labs where they are members by checking lab_members directly\n-- without creating a circular dependency\nCREATE POLICY \"Users can read labs where they are members\"\n  ON labs\n  FOR SELECT\n  TO authenticated\n  USING (\n    id IN (\n      SELECT lab_id \n      FROM lab_members \n      WHERE user_id = auth.uid()\n    )\n  );"}, {"id": "supabase/migrations/20250607183612_purple_sun.sql_0", "file": "supabase/migrations/20250607183612_purple_sun.sql", "content": "================================================\n/*\n  # Fix RLS Policy Circular Dependency\n\n  1. Problem\n    - Circular dependency between labs and lab_members policies\n    - lab_members policies reference labs table\n    - labs policies reference lab_members table\n    - This creates infinite recursion when joining tables\n\n  2. Solution\n    - Drop all existing lab_members policies\n    - Create simplified policies that don't reference other tables\n    - Keep labs policies as they are (they work fine independently)\n*/\n\n-- Drop ALL existing policies on lab_members to start fresh\nDROP POLICY IF EXISTS \"Lab admins can manage lab members\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can add members\" ON lab_members;"}, {"id": "supabase/migrations/20250607183612_purple_sun.sql_1", "file": "supabase/migrations/20250607183612_purple_sun.sql", "content": "DROP POLICY IF EXISTS \"Lab owners can add members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can read all lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can remove members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can update member roles\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can leave labs\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read own lab memberships\" ON lab_members;\n\n-- Create new simplified policies for lab_members that don't cause recursion\nCREATE POLICY \"Users can read own lab memberships\"\n  ON lab_members\n  FOR SELECT\n  TO authenticated\n  USING (user_id = auth.uid());\n\nCREATE POLICY \"Users can leave labs\"\n  ON lab_members\n  FOR DELETE\n  TO authenticated\n  USING (user_id = auth.uid());"}, {"id": "supabase/migrations/20250607183612_purple_sun.sql_2", "file": "supabase/migrations/20250607183612_purple_sun.sql", "content": "ON lab_members\n  FOR DELETE\n  TO authenticated\n  USING (user_id = auth.uid());\n\n-- Allow lab owners to manage members (simplified check without recursion)\n-- We'll use a function to check ownership without causing policy recursion\nCREATE OR REPLACE FUNCTION is_lab_owner(lab_uuid uuid, user_uuid uuid)\nRETURNS boolean AS $$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM labs \n    WHERE id = lab_uuid AND owner_id = user_uuid\n  );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\nCREATE POLICY \"Lab owners can manage members\"\n  ON lab_members\n  FOR ALL\n  TO authenticated\n  USING (is_lab_owner(lab_id, auth.uid()))\n  WITH CHECK (is_lab_owner(lab_id, auth.uid()));\n\n-- Also allow lab admins to manage members\nCREATE POLICY \"Lab admins can manage members\"\n  ON lab_members\n  FOR ALL\n  TO authenticated"}, {"id": "supabase/migrations/20250607183612_purple_sun.sql_3", "file": "supabase/migrations/20250607183612_purple_sun.sql", "content": "CREATE POLICY \"Lab admins can manage members\"\n  ON lab_members\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members existing_member\n      WHERE existing_member.lab_id = lab_members.lab_id\n      AND existing_member.user_id = auth.uid()\n      AND existing_member.role = 'admin'\n    )\n  );"}, {"id": "supabase/migrations/20250607183911_curly_valley.sql_0", "file": "supabase/migrations/20250607183911_curly_valley.sql", "content": "================================================\n/*\n  # Remove RLS Policies for Labs and Lab Members\n\n  1. Changes\n    - Remove all RLS policies from `labs` table\n    - Remove all RLS policies from `lab_members` table\n    - Keep RLS policies on `users` table for security\n    - Keep RLS enabled on all tables but remove problematic policies\n\n  2. Security\n    - Users table policies remain intact to prevent abuse\n    - Application-level permission checks will handle labs and lab_members access\n    - Other tables keep their existing policies\n*/\n\n-- Drop ALL policies on labs table\nDROP POLICY IF EXISTS \"Lab owners can manage their labs\" ON labs;\nDROP POLICY IF EXISTS \"Users can read labs where they are members\" ON labs;\nDROP POLICY IF EXISTS \"Lab members can read labs they belong to\" ON labs;"}, {"id": "supabase/migrations/20250607183911_curly_valley.sql_1", "file": "supabase/migrations/20250607183911_curly_valley.sql", "content": "DROP POLICY IF EXISTS \"Lab members can read labs they belong to\" ON labs;\n\n-- Drop ALL policies on lab_members table\nDROP POLICY IF EXISTS \"Lab admins can manage lab members\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can add members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can read all lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can remove members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can update member roles\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can leave labs\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read own lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can manage members\" ON lab_members;"}, {"id": "supabase/migrations/20250607183911_curly_valley.sql_2", "file": "supabase/migrations/20250607183911_curly_valley.sql", "content": "DROP POLICY IF EXISTS \"Lab owners can manage members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab admins can manage members\" ON lab_members;\n\n-- Drop the helper function since we're removing policies\nDROP FUNCTION IF EXISTS is_lab_owner(uuid, uuid);\n\n-- Note: RLS remains ENABLED on these tables, but with no policies\n-- This means only service role can access these tables directly\n-- All access must go through application logic with proper permission checks"}, {"id": "supabase/migrations/20250607184124_dark_mud.sql_0", "file": "supabase/migrations/20250607184124_dark_mud.sql", "content": "================================================\n/*\n  # Add RLS policies for labs table\n\n  1. Security\n    - Add INSERT policy for authenticated users to create labs (owner_id must match auth.uid())\n    - Add SELECT policy for lab owners and members to read labs\n    - Add UPDATE policy for lab owners to update their labs\n    - Add DELETE policy for lab owners to delete their labs\n\n  2. Changes\n    - Enable comprehensive CRUD operations for labs table with proper security\n    - Lab owners can manage their labs\n    - Lab members can view labs they belong to\n*/\n\n-- Allow authenticated users to create labs (they must be the owner)\nCREATE POLICY \"Users can create labs as owner\"\n  ON labs\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = owner_id);"}, {"id": "supabase/migrations/20250607184124_dark_mud.sql_1", "file": "supabase/migrations/20250607184124_dark_mud.sql", "content": "ON labs\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = owner_id);\n\n-- Allow lab owners and members to read labs\nCREATE POLICY \"Lab owners and members can read labs\"\n  ON labs\n  FOR SELECT\n  TO authenticated\n  USING (\n    auth.uid() = owner_id OR\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = labs.id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\n-- Allow lab owners to update their labs\nCREATE POLICY \"Lab owners can update their labs\"\n  ON labs\n  FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = owner_id)\n  WITH CHECK (auth.uid() = owner_id);\n\n-- Allow lab owners to delete their labs\nCREATE POLICY \"Lab owners can delete their labs\"\n  ON labs\n  FOR DELETE\n  TO authenticated\n  USING (auth.uid() = owner_id);"}, {"id": "supabase/migrations/20250607184325_holy_unit.sql_0", "file": "supabase/migrations/20250607184325_holy_unit.sql", "content": "================================================\n/*\n  # Add RLS policies for lab_members table\n\n  1. Security Policies\n    - Allow lab owners to add themselves as admin when creating a lab\n    - Allow lab admins to manage lab memberships\n    - Allow users to read lab memberships for labs they belong to\n    - Allow users to remove themselves from labs\n\n  This fixes the RLS violation error that occurs when the trigger tries to add\n  the lab owner as an admin member after lab creation.\n*/\n\n-- Allow lab owners to add themselves as admin when creating a lab\nCREATE POLICY \"Lab owners can add themselves as admin\"\n  ON lab_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    user_id = auth.uid() AND\n    role = 'admin' AND\n    EXISTS (\n      SELECT 1 FROM labs"}, {"id": "supabase/migrations/20250607184325_holy_unit.sql_1", "file": "supabase/migrations/20250607184325_holy_unit.sql", "content": "user_id = auth.uid() AND\n    role = 'admin' AND\n    EXISTS (\n      SELECT 1 FROM labs \n      WHERE labs.id = lab_members.lab_id \n      AND labs.owner_id = auth.uid()\n    )\n  );\n\n-- Allow lab admins to manage lab memberships\nCREATE POLICY \"Lab admins can manage memberships\"\n  ON lab_members\n  FOR ALL\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members existing_member\n      WHERE existing_member.lab_id = lab_members.lab_id\n      AND existing_member.user_id = auth.uid()\n      AND existing_member.role = 'admin'\n    )\n  )\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members existing_member\n      WHERE existing_member.lab_id = lab_members.lab_id\n      AND existing_member.user_id = auth.uid()\n      AND existing_member.role = 'admin'\n    )\n  );"}, {"id": "supabase/migrations/20250607184325_holy_unit.sql_2", "file": "supabase/migrations/20250607184325_holy_unit.sql", "content": "AND existing_member.user_id = auth.uid()\n      AND existing_member.role = 'admin'\n    )\n  );\n\n-- Allow users to read lab memberships for labs they belong to\nCREATE POLICY \"Users can read lab memberships\"\n  ON lab_members\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members user_membership\n      WHERE user_membership.lab_id = lab_members.lab_id\n      AND user_membership.user_id = auth.uid()\n    )\n  );\n\n-- Allow users to remove themselves from labs\nCREATE POLICY \"Users can remove themselves from labs\"\n  ON lab_members\n  FOR DELETE\n  TO authenticated\n  USING (user_id = auth.uid());"}, {"id": "supabase/migrations/20250607185245_proud_desert.sql_0", "file": "supabase/migrations/20250607185245_proud_desert.sql", "content": "================================================\n/*\n  # Create invitations table for lab invitations\n\n  1. New Tables\n    - `invitations`\n      - `id` (uuid, primary key)\n      - `lab_id` (uuid, foreign key to labs)\n      - `invited_email` (text, email of invited user)\n      - `invited_by` (uuid, foreign key to users who sent invitation)\n      - `status` (enum: pending, accepted, rejected)\n      - `created_at` (timestamp)\n      - `expires_at` (timestamp)\n\n  2. Security\n    - Enable RLS on invitations table\n    - Lab admins can create invitations\n    - Invited users can read their own invitations\n    - Lab admins can read invitations for their labs\n\n  3. Features\n    - Invitations expire after 7 days\n    - Email-based invitations\n    - Status tracking\n*/"}, {"id": "supabase/migrations/20250607185245_proud_desert.sql_1", "file": "supabase/migrations/20250607185245_proud_desert.sql", "content": "- Invitations expire after 7 days\n    - Email-based invitations\n    - Status tracking\n*/\n\n-- Create enum for invitation status\nCREATE TYPE invitation_status AS ENUM ('pending', 'accepted', 'rejected');\n\n-- Create invitations table\nCREATE TABLE IF NOT EXISTS invitations (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  invited_email text NOT NULL,\n  invited_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  status invitation_status NOT NULL DEFAULT 'pending',\n  created_at timestamptz DEFAULT now(),\n  expires_at timestamptz DEFAULT (now() + interval '7 days'),\n  UNIQUE(lab_id, invited_email, status) -- Prevent duplicate pending invitations\n);\n\n-- Enable RLS\nALTER TABLE invitations ENABLE ROW LEVEL SECURITY;"}, {"id": "supabase/migrations/20250607185245_proud_desert.sql_2", "file": "supabase/migrations/20250607185245_proud_desert.sql", "content": ");\n\n-- Enable RLS\nALTER TABLE invitations ENABLE ROW LEVEL SECURITY;\n\n-- Create policies\n-- Lab admins can create invitations\nCREATE POLICY \"Lab admins can create invitations\"\n  ON invitations\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    invited_by = auth.uid() AND\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = invitations.lab_id\n      AND lab_members.user_id = auth.uid()\n      AND lab_members.role = 'admin'\n    )\n  );\n\n-- Users can read invitations sent to their email\nCREATE POLICY \"Users can read their invitations\"\n  ON invitations\n  FOR SELECT\n  TO authenticated\n  USING (\n    invited_email = (\n      SELECT email FROM users WHERE id = auth.uid()\n    )\n  );\n\n-- Lab admins can read invitations for their labs"}, {"id": "supabase/migrations/20250607185245_proud_desert.sql_3", "file": "supabase/migrations/20250607185245_proud_desert.sql", "content": ")\n  );\n\n-- Lab admins can read invitations for their labs\nCREATE POLICY \"Lab admins can read lab invitations\"\n  ON invitations\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = invitations.lab_id\n      AND lab_members.user_id = auth.uid()\n      AND lab_members.role = 'admin'\n    )\n  );\n\n-- Users can update invitations sent to their email (to accept/reject)\nCREATE POLICY \"Users can update their invitations\"\n  ON invitations\n  FOR UPDATE\n  TO authenticated\n  USING (\n    invited_email = (\n      SELECT email FROM users WHERE id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    invited_email = (\n      SELECT email FROM users WHERE id = auth.uid()\n    )\n  );\n\n-- Create index for better performance"}, {"id": "supabase/migrations/20250607185245_proud_desert.sql_4", "file": "supabase/migrations/20250607185245_proud_desert.sql", "content": ")\n  );\n\n-- Create index for better performance\nCREATE INDEX IF NOT EXISTS idx_invitations_lab_id ON invitations(lab_id);\nCREATE INDEX IF NOT EXISTS idx_invitations_invited_email ON invitations(invited_email);\nCREATE INDEX IF NOT EXISTS idx_invitations_status ON invitations(status);\nCREATE INDEX IF NOT EXISTS idx_invitations_expires_at ON invitations(expires_at);"}, {"id": "supabase/migrations/20250607190141_golden_castle.sql_0", "file": "supabase/migrations/20250607190141_golden_castle.sql", "content": "================================================\n/*\n  # Fix infinite recursion in lab_members policies\n\n  1. Security Changes\n    - Disable RLS on lab_members table to prevent infinite recursion\n    - The lab_members table will be protected by application-level security\n    - Other tables that reference lab_members will continue to work properly\n\n  2. Notes\n    - This resolves the \"infinite recursion detected in policy for relation lab_members\" error\n    - Lab membership checks in other tables (whiteboards, reports, compounds, etc.) will continue to work\n    - Access to lab_members will be controlled through application logic and foreign key constraints\n*/\n\n-- Disable RLS on lab_members table to prevent infinite recursion\nALTER TABLE lab_members DISABLE ROW LEVEL SECURITY;"}, {"id": "supabase/migrations/20250607190141_golden_castle.sql_1", "file": "supabase/migrations/20250607190141_golden_castle.sql", "content": "ALTER TABLE lab_members DISABLE ROW LEVEL SECURITY;\n\n-- Drop all existing policies on lab_members table\nDROP POLICY IF EXISTS \"Lab admins can manage memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can add themselves as admin\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can remove themselves from labs\" ON lab_members;"}, {"id": "supabase/migrations/20250607191305_long_shape.sql_0", "file": "supabase/migrations/20250607191305_long_shape.sql", "content": "================================================\n/*\n  # Add display columns to invitations table\n\n  1. Changes\n    - Add `lab_name` column to store the lab name directly\n    - Add `invited_by_name` column to store the inviter's name directly\n    - Update existing invitations with current lab and user names\n    - Add indexes for better performance\n\n  2. Security\n    - No RLS changes needed as we're just adding display columns\n*/\n\n-- Add new columns to invitations table\nALTER TABLE invitations \nADD COLUMN IF NOT EXISTS lab_name text DEFAULT '',\nADD COLUMN IF NOT EXISTS invited_by_name text DEFAULT '';\n\n-- Update existing invitations with lab names\nUPDATE invitations \nSET lab_name = labs.name\nFROM labs \nWHERE invitations.lab_id = labs.id;\n\n-- Update existing invitations with inviter names"}, {"id": "supabase/migrations/20250607191305_long_shape.sql_1", "file": "supabase/migrations/20250607191305_long_shape.sql", "content": "FROM labs \nWHERE invitations.lab_id = labs.id;\n\n-- Update existing invitations with inviter names\nUPDATE invitations \nSET invited_by_name = users.name\nFROM users \nWHERE invitations.invited_by = users.id;\n\n-- Add indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_invitations_lab_name ON invitations(lab_name);\nCREATE INDEX IF NOT EXISTS idx_invitations_invited_by_name ON invitations(invited_by_name);\n\n-- Set NOT NULL constraints after updating existing data\nALTER TABLE invitations \nALTER COLUMN lab_name SET NOT NULL,\nALTER COLUMN invited_by_name SET NOT NULL;"}, {"id": "supabase/migrations/20250607192048_dry_pond.sql_0", "file": "supabase/migrations/20250607192048_dry_pond.sql", "content": "================================================\n/*\n  # Add member name to lab_members table\n\n  1. Changes\n    - Add `member_name` column to `lab_members` table\n    - Update existing records with user names\n    - Update frontend to use member_name instead of joining with users table\n\n  2. Security\n    - No RLS changes needed since lab_members already has RLS disabled\n*/\n\n-- Add member_name column to lab_members table\nALTER TABLE lab_members \nADD COLUMN IF NOT EXISTS member_name text DEFAULT '';\n\n-- Update existing lab_members with user names\nUPDATE lab_members \nSET member_name = users.name\nFROM users \nWHERE lab_members.user_id = users.id;\n\n-- Add index for better performance\nCREATE INDEX IF NOT EXISTS idx_lab_members_member_name ON lab_members(member_name);"}, {"id": "supabase/migrations/20250607192048_dry_pond.sql_1", "file": "supabase/migrations/20250607192048_dry_pond.sql", "content": "CREATE INDEX IF NOT EXISTS idx_lab_members_member_name ON lab_members(member_name);\n\n-- Set NOT NULL constraint after updating existing data\nALTER TABLE lab_members \nALTER COLUMN member_name SET NOT NULL;"}, {"id": "supabase/migrations/20250607192604_polished_fog.sql_0", "file": "supabase/migrations/20250607192604_polished_fog.sql", "content": "================================================\n/*\n  # Fix lab creation trigger to include member name\n\n  1. Updates\n    - Update the trigger function to include member_name when adding lab owner as admin\n    - Ensures the lab owner's name is properly set in lab_members table\n\n  2. Security\n    - Maintains the existing trigger functionality\n    - Ensures proper data consistency\n*/\n\n-- Update the trigger function to include member_name\nCREATE OR REPLACE FUNCTION add_lab_owner_as_admin()\nRETURNS TRIGGER AS $$\nDECLARE\n  owner_name text;\nBEGIN\n  -- Get the owner's name from the users table\n  SELECT name INTO owner_name\n  FROM users\n  WHERE id = NEW.owner_id;\n  \n  -- If no name found, use email as fallback\n  IF owner_name IS NULL OR owner_name = '' THEN\n    SELECT email INTO owner_name"}, {"id": "supabase/migrations/20250607192604_polished_fog.sql_1", "file": "supabase/migrations/20250607192604_polished_fog.sql", "content": "IF owner_name IS NULL OR owner_name = '' THEN\n    SELECT email INTO owner_name\n    FROM users\n    WHERE id = NEW.owner_id;\n  END IF;\n  \n  -- Insert the lab owner as an admin member with their name\n  INSERT INTO lab_members (user_id, lab_id, role, member_name)\n  VALUES (NEW.owner_id, NEW.id, 'admin', COALESCE(owner_name, 'Lab Owner'));\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;"}, {"id": "supabase/migrations/20250607194730_crimson_trail.sql_0", "file": "supabase/migrations/20250607194730_crimson_trail.sql", "content": "================================================\n/*\n  # Fix RLS policies for invitation acceptance\n\n  1. Problem\n    - Users cannot insert themselves into lab_members when accepting invitations\n    - Current policies don't allow regular users to add themselves as members\n\n  2. Solution\n    - Add policy to allow users to insert themselves as members when they have a valid accepted invitation\n    - Ensure the invitation exists and is being accepted by the right user\n\n  3. Security\n    - Only allows insertion if there's a valid invitation for that user's email\n    - Prevents unauthorized additions to labs\n*/\n\n-- Add policy to allow users to add themselves as members when accepting invitations\nCREATE POLICY \"Users can add themselves when accepting invitations\"\n  ON lab_members\n  FOR INSERT"}, {"id": "supabase/migrations/20250607194730_crimson_trail.sql_1", "file": "supabase/migrations/20250607194730_crimson_trail.sql", "content": "CREATE POLICY \"Users can add themselves when accepting invitations\"\n  ON lab_members\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    user_id = auth.uid() AND\n    role = 'member' AND\n    EXISTS (\n      SELECT 1 FROM invitations\n      WHERE invitations.lab_id = lab_members.lab_id\n      AND invitations.invited_email = (\n        SELECT email FROM users WHERE id = auth.uid()\n      )\n      AND invitations.status = 'pending'\n      AND invitations.expires_at > now()\n    )\n  );"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_0", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "================================================\n/*\n  # Task Management System for Labs\n\n  1. New Tables\n    - `task_lists` - Todo lists within labs\n    - `tasks` - Individual tasks within lists\n    - `task_assignments` - User assignments to tasks\n    - `task_activities` - Activity log for notifications\n\n  2. Security\n    - Enable RLS on all new tables\n    - Lab members can create and manage task lists\n    - Task creators and assignees can update tasks\n    - Lab members can view all tasks in their lab\n\n  3. Features\n    - Task lists with colors and descriptions\n    - Individual tasks with completion status\n    - \"On It\" status for active work\n    - User assignments and activity tracking\n    - Real-time notifications\n*/\n\n-- Create task_lists table\nCREATE TABLE IF NOT EXISTS task_lists ("}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_1", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "*/\n\n-- Create task_lists table\nCREATE TABLE IF NOT EXISTS task_lists (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  name text NOT NULL DEFAULT 'Untitled List',\n  description text DEFAULT '',\n  color text NOT NULL DEFAULT '#3B82F6',\n  created_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now()\n);\n\n-- Create tasks table\nCREATE TABLE IF NOT EXISTS tasks (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  task_list_id uuid NOT NULL REFERENCES task_lists(id) ON DELETE CASCADE,\n  title text NOT NULL DEFAULT '',\n  description text DEFAULT '',\n  completed boolean DEFAULT false,\n  completed_by uuid REFERENCES users(id) ON DELETE SET NULL,"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_2", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "completed boolean DEFAULT false,\n  completed_by uuid REFERENCES users(id) ON DELETE SET NULL,\n  completed_at timestamptz,\n  on_it_by uuid REFERENCES users(id) ON DELETE SET NULL,\n  on_it_at timestamptz,\n  assigned_to uuid REFERENCES users(id) ON DELETE SET NULL,\n  created_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  created_at timestamptz DEFAULT now(),\n  updated_at timestamptz DEFAULT now(),\n  priority text DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),\n  due_date timestamptz\n);\n\n-- Create task_activities table for notifications\nCREATE TABLE IF NOT EXISTS task_activities (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  task_id uuid NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,\n  lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_3", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "lab_id uuid NOT NULL REFERENCES labs(id) ON DELETE CASCADE,\n  user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n  activity_type text NOT NULL CHECK (activity_type IN ('created', 'assigned', 'completed', 'on_it', 'updated')),\n  message text NOT NULL,\n  created_at timestamptz DEFAULT now(),\n  read_by jsonb DEFAULT '[]'\n);\n\n-- Enable RLS\nALTER TABLE task_lists ENABLE ROW LEVEL SECURITY;\nALTER TABLE tasks ENABLE ROW LEVEL SECURITY;\nALTER TABLE task_activities ENABLE ROW LEVEL SECURITY;\n\n-- Task Lists Policies\nCREATE POLICY \"Lab members can read task lists\"\n  ON task_lists\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = task_lists.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_4", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create task lists\"\n  ON task_lists\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = task_lists.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND created_by = auth.uid()\n  );\n\nCREATE POLICY \"Task list creators can update their lists\"\n  ON task_lists\n  FOR UPDATE\n  TO authenticated\n  USING (created_by = auth.uid());\n\nCREATE POLICY \"Task list creators can delete their lists\"\n  ON task_lists\n  FOR DELETE\n  TO authenticated\n  USING (created_by = auth.uid());\n\n-- Tasks Policies\nCREATE POLICY \"Lab members can read tasks\"\n  ON tasks\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM task_lists"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_5", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "ON tasks\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM task_lists\n      JOIN lab_members ON lab_members.lab_id = task_lists.lab_id\n      WHERE task_lists.id = tasks.task_list_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create tasks\"\n  ON tasks\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM task_lists\n      JOIN lab_members ON lab_members.lab_id = task_lists.lab_id\n      WHERE task_lists.id = tasks.task_list_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND created_by = auth.uid()\n  );\n\nCREATE POLICY \"Task creators and assignees can update tasks\"\n  ON tasks\n  FOR UPDATE\n  TO authenticated\n  USING (\n    created_by = auth.uid() OR \n    assigned_to = auth.uid() OR"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_6", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "TO authenticated\n  USING (\n    created_by = auth.uid() OR \n    assigned_to = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM task_lists\n      JOIN lab_members ON lab_members.lab_id = task_lists.lab_id\n      WHERE task_lists.id = tasks.task_list_id\n      AND lab_members.user_id = auth.uid()\n      AND lab_members.role = 'admin'\n    )\n  );\n\nCREATE POLICY \"Task creators can delete tasks\"\n  ON tasks\n  FOR DELETE\n  TO authenticated\n  USING (created_by = auth.uid());\n\n-- Task Activities Policies\nCREATE POLICY \"Lab members can read task activities\"\n  ON task_activities\n  FOR SELECT\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = task_activities.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n  );"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_7", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "AND lab_members.user_id = auth.uid()\n    )\n  );\n\nCREATE POLICY \"Lab members can create task activities\"\n  ON task_activities\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = task_activities.lab_id\n      AND lab_members.user_id = auth.uid()\n    )\n    AND user_id = auth.uid()\n  );\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_task_lists_lab_id ON task_lists(lab_id);\nCREATE INDEX IF NOT EXISTS idx_task_lists_created_by ON task_lists(created_by);\nCREATE INDEX IF NOT EXISTS idx_tasks_task_list_id ON tasks(task_list_id);\nCREATE INDEX IF NOT EXISTS idx_tasks_assigned_to ON tasks(assigned_to);\nCREATE INDEX IF NOT EXISTS idx_tasks_created_by ON tasks(created_by);"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_8", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "CREATE INDEX IF NOT EXISTS idx_tasks_created_by ON tasks(created_by);\nCREATE INDEX IF NOT EXISTS idx_tasks_completed ON tasks(completed);\nCREATE INDEX IF NOT EXISTS idx_task_activities_lab_id ON task_activities(lab_id);\nCREATE INDEX IF NOT EXISTS idx_task_activities_task_id ON task_activities(task_id);\nCREATE INDEX IF NOT EXISTS idx_task_activities_created_at ON task_activities(created_at);\n\n-- Create function to update task timestamp\nCREATE OR REPLACE FUNCTION update_task_timestamp()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create triggers\nCREATE TRIGGER trigger_update_task_lists_timestamp\n  BEFORE UPDATE ON task_lists\n  FOR EACH ROW\n  EXECUTE FUNCTION update_task_timestamp();\n\nCREATE TRIGGER trigger_update_tasks_timestamp"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_9", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "EXECUTE FUNCTION update_task_timestamp();\n\nCREATE TRIGGER trigger_update_tasks_timestamp\n  BEFORE UPDATE ON tasks\n  FOR EACH ROW\n  EXECUTE FUNCTION update_task_timestamp();\n\n-- Create function to log task activities\nCREATE OR REPLACE FUNCTION log_task_activity()\nRETURNS TRIGGER AS $$\nDECLARE\n  lab_uuid uuid;\n  activity_msg text;\n  user_name text;\nBEGIN\n  -- Get lab_id from task_lists\n  SELECT task_lists.lab_id INTO lab_uuid\n  FROM task_lists\n  WHERE task_lists.id = NEW.task_list_id;\n\n  -- Get user name\n  SELECT name INTO user_name\n  FROM users\n  WHERE id = auth.uid();\n\n  IF TG_OP = 'INSERT' THEN\n    activity_msg := user_name || ' created task \"' || NEW.title || '\"';\n    \n    INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_10", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)\n    VALUES (NEW.id, lab_uuid, auth.uid(), 'created', activity_msg);\n    \n    -- If task is assigned to someone else, create assignment activity\n    IF NEW.assigned_to IS NOT NULL AND NEW.assigned_to != auth.uid() THEN\n      SELECT name INTO user_name FROM users WHERE id = NEW.assigned_to;\n      activity_msg := 'Task \"' || NEW.title || '\" was assigned to ' || user_name;\n      \n      INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)\n      VALUES (NEW.id, lab_uuid, auth.uid(), 'assigned', activity_msg);\n    END IF;\n    \n  ELSIF TG_OP = 'UPDATE' THEN\n    -- Check for completion\n    IF OLD.completed = false AND NEW.completed = true THEN"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_11", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "-- Check for completion\n    IF OLD.completed = false AND NEW.completed = true THEN\n      SELECT name INTO user_name FROM users WHERE id = NEW.completed_by;\n      activity_msg := user_name || ' completed task \"' || NEW.title || '\"';\n      \n      INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)\n      VALUES (NEW.id, lab_uuid, NEW.completed_by, 'completed', activity_msg);\n    END IF;\n    \n    -- Check for \"on it\" status\n    IF OLD.on_it_by IS NULL AND NEW.on_it_by IS NOT NULL THEN\n      SELECT name INTO user_name FROM users WHERE id = NEW.on_it_by;\n      activity_msg := user_name || ' is working on task \"' || NEW.title || '\"';\n      \n      INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_12", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)\n      VALUES (NEW.id, lab_uuid, NEW.on_it_by, 'on_it', activity_msg);\n    END IF;\n    \n    -- Check for assignment changes\n    IF OLD.assigned_to IS DISTINCT FROM NEW.assigned_to AND NEW.assigned_to IS NOT NULL THEN\n      SELECT name INTO user_name FROM users WHERE id = NEW.assigned_to;\n      activity_msg := 'Task \"' || NEW.title || '\" was assigned to ' || user_name;\n      \n      INSERT INTO task_activities (task_id, lab_id, user_id, activity_type, message)\n      VALUES (NEW.id, lab_uuid, auth.uid(), 'assigned', activity_msg);\n    END IF;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Create trigger for task activities\nCREATE TRIGGER trigger_log_task_activity"}, {"id": "supabase/migrations/20250609210157_tight_unit.sql_13", "file": "supabase/migrations/20250609210157_tight_unit.sql", "content": "-- Create trigger for task activities\nCREATE TRIGGER trigger_log_task_activity\n  AFTER INSERT OR UPDATE ON tasks\n  FOR EACH ROW\n  EXECUTE FUNCTION log_task_activity();"}, {"id": "supabase/migrations/20250609212538_fancy_flame.sql_0", "file": "supabase/migrations/20250609212538_fancy_flame.sql", "content": "================================================\n/*\n  # Update task deletion policies for admin permissions\n\n  1. Changes\n    - Drop existing task deletion policy\n    - Create new policy that allows:\n      - Task creators to delete their own tasks\n      - Lab admins to delete any task in their lab\n    \n  2. Security\n    - Maintains creator ownership for regular users\n    - Gives admins full task management capabilities\n    - Prevents unauthorized deletions\n*/\n\n-- Drop existing task deletion policy\nDROP POLICY IF EXISTS \"Task creators can delete tasks\" ON tasks;\n\n-- Create new policy that allows both creators and admins to delete tasks\nCREATE POLICY \"Task creators and lab admins can delete tasks\"\n  ON tasks\n  FOR DELETE\n  TO authenticated\n  USING (\n    created_by = auth.uid() OR"}, {"id": "supabase/migrations/20250609212538_fancy_flame.sql_1", "file": "supabase/migrations/20250609212538_fancy_flame.sql", "content": "ON tasks\n  FOR DELETE\n  TO authenticated\n  USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM task_lists\n      JOIN lab_members ON lab_members.lab_id = task_lists.lab_id\n      WHERE task_lists.id = tasks.task_list_id\n      AND lab_members.user_id = auth.uid()\n      AND lab_members.role = 'admin'\n    )\n  );"}, {"id": "supabase/migrations/20250609213207_delicate_shore.sql_0", "file": "supabase/migrations/20250609213207_delicate_shore.sql", "content": "================================================\n/*\n  # Update task list deletion policies for admin permissions\n\n  1. Changes\n    - Drop existing task list deletion policy\n    - Create new policy that allows both creators and lab admins to delete task lists\n    - Lab admins can delete any task list in their lab\n    - Regular users can only delete task lists they created\n\n  2. Security\n    - Maintains proper access control\n    - Prevents unauthorized deletions\n    - Gives lab administrators full management capabilities\n*/\n\n-- Drop existing task list deletion policy\nDROP POLICY IF EXISTS \"Task list creators can delete their lists\" ON task_lists;\n\n-- Create new policy that allows both creators and lab admins to delete task lists"}, {"id": "supabase/migrations/20250609213207_delicate_shore.sql_1", "file": "supabase/migrations/20250609213207_delicate_shore.sql", "content": "-- Create new policy that allows both creators and lab admins to delete task lists\nCREATE POLICY \"Task list creators and lab admins can delete lists\"\n  ON task_lists\n  FOR DELETE\n  TO authenticated\n  USING (\n    created_by = auth.uid() OR\n    EXISTS (\n      SELECT 1 FROM lab_members\n      WHERE lab_members.lab_id = task_lists.lab_id\n      AND lab_members.user_id = auth.uid()\n      AND lab_members.role = 'admin'\n    )\n  );"}, {"id": "supabase/migrations/20250614202216_tender_queen.sql_0", "file": "supabase/migrations/20250614202216_tender_queen.sql", "content": "================================================\n/*\n  # Add reports table policy and storage bucket\n\n  1. Security Changes\n    - Add INSERT policy for reports table to allow lab members to create reports\n    - Create reports storage bucket for file uploads\n\n  2. Notes\n    - Storage policies need to be configured through Supabase dashboard\n    - This migration only handles what can be done via SQL migrations\n*/\n\n-- Add INSERT policy for reports table\nCREATE POLICY \"Lab members can create reports in their labs\"\n  ON reports\n  FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM lab_members \n      WHERE lab_members.lab_id = reports.lab_id \n      AND lab_members.user_id = auth.uid()\n    ) \n    AND created_by = auth.uid()\n  );"}, {"id": "supabase/migrations/20250614202216_tender_queen.sql_1", "file": "supabase/migrations/20250614202216_tender_queen.sql", "content": "AND lab_members.user_id = auth.uid()\n    ) \n    AND created_by = auth.uid()\n  );\n\n-- Create the reports storage bucket if it doesn't exist\nINSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)\nVALUES (\n  'reports',\n  'reports', \n  false,\n  52428800, -- 50MB limit\n  ARRAY['application/vnd.openxmlformats-officedocument.wordprocessingml.document']::text[]\n) ON CONFLICT (id) DO NOTHING;"}, {"id": "supabase/migrations/20250616115919_bronze_feather.sql_0", "file": "supabase/migrations/20250616115919_bronze_feather.sql", "content": "================================================\n/*\n  # Add real-time chat system to labs\n\n  1. New Tables\n    - Update `chat_messages` table to support mentions and message types\n    - Add columns for message_type and mentions array\n\n  2. Security\n    - Update RLS policies for enhanced chat functionality\n    - Allow lab members to read and send messages\n\n  3. Features\n    - Support for @mentions in messages\n    - System messages for lab activities\n    - Real-time updates for chat\n*/\n\n-- Add new columns to chat_messages table\nALTER TABLE chat_messages \nADD COLUMN IF NOT EXISTS message_type text DEFAULT 'chat' CHECK (message_type IN ('chat', 'system')),\nADD COLUMN IF NOT EXISTS mentions jsonb DEFAULT '[]';\n\n-- Create index for better performance on mentions"}, {"id": "supabase/migrations/20250616115919_bronze_feather.sql_1", "file": "supabase/migrations/20250616115919_bronze_feather.sql", "content": "-- Create index for better performance on mentions\nCREATE INDEX IF NOT EXISTS idx_chat_messages_mentions ON chat_messages USING GIN (mentions);\nCREATE INDEX IF NOT EXISTS idx_chat_messages_message_type ON chat_messages(message_type);\n\n-- Update existing messages to have default values\nUPDATE chat_messages \nSET message_type = 'chat', mentions = '[]' \nWHERE message_type IS NULL OR mentions IS NULL;\n\n-- Set NOT NULL constraints after updating existing data\nALTER TABLE chat_messages \nALTER COLUMN message_type SET NOT NULL,\nALTER COLUMN mentions SET NOT NULL;"}, {"id": "supabase/migrations/20250616120102_cool_mountain.sql_0", "file": "supabase/migrations/20250616120102_cool_mountain.sql", "content": "================================================\n/*\n  # Add mentions column to chat_messages table\n\n  1. Changes\n    - Add `mentions` column to `chat_messages` table\n    - Column type: jsonb (to store array of user IDs)\n    - Default value: empty array []\n    - Add GIN index for efficient querying of mentions\n\n  2. Security\n    - No changes to existing RLS policies needed\n    - Mentions column will inherit existing table permissions\n*/\n\n-- Add mentions column to chat_messages table\nDO $$\nBEGIN\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns\n    WHERE table_name = 'chat_messages' AND column_name = 'mentions'\n  ) THEN\n    ALTER TABLE chat_messages ADD COLUMN mentions jsonb DEFAULT '[]'::jsonb NOT NULL;\n  END IF;\nEND $$;"}, {"id": "supabase/migrations/20250616120102_cool_mountain.sql_1", "file": "supabase/migrations/20250616120102_cool_mountain.sql", "content": "END IF;\nEND $$;\n\n-- Add GIN index for efficient querying of mentions array\nCREATE INDEX IF NOT EXISTS idx_chat_messages_mentions ON chat_messages USING gin (mentions);"}, {"id": ".bolt/config.json_0", "file": ".bolt/config.json", "content": "================================================\n{\n  \"template\": \"bolt-vite-react-ts\"\n}"}, {"id": ".bolt/prompt_0", "file": ".bolt/prompt", "content": "================================================\nFor all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\nBy default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\nUse icons from lucide-react for logos."}, {"id": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql_0", "file": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql", "content": "================================================\n/*\n  # Remove All RLS Policies\n\n  This migration removes all Row Level Security policies from all tables.\n  Security will be managed at the application level instead.\n\n  1. Disable RLS on all tables\n  2. Drop all existing policies\n  3. Remove helper functions\n\n  Note: This approach moves security responsibility to the application layer,\n  which can be more flexible and easier to debug than complex RLS policies.\n*/\n\n-- Disable Row Level Security on all tables\nALTER TABLE users DISABLE ROW LEVEL SECURITY;\nALTER TABLE labs DISABLE ROW LEVEL SECURITY;\nALTER TABLE lab_members DISABLE ROW LEVEL SECURITY;\nALTER TABLE whiteboards DISABLE ROW LEVEL SECURITY;\nALTER TABLE reports DISABLE ROW LEVEL SECURITY;"}, {"id": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql_1", "file": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql", "content": "ALTER TABLE whiteboards DISABLE ROW LEVEL SECURITY;\nALTER TABLE reports DISABLE ROW LEVEL SECURITY;\nALTER TABLE compounds DISABLE ROW LEVEL SECURITY;\nALTER TABLE proteins DISABLE ROW LEVEL SECURITY;\nALTER TABLE chat_messages DISABLE ROW LEVEL SECURITY;\nALTER TABLE todos DISABLE ROW LEVEL SECURITY;\n\n-- Drop all existing policies on users\nDROP POLICY IF EXISTS \"Users can read own profile\" ON users;\nDROP POLICY IF EXISTS \"Users can update own profile\" ON users;\nDROP POLICY IF EXISTS \"Users can insert own profile\" ON users;\n\n-- Drop all existing policies on labs\nDROP POLICY IF EXISTS \"Lab owners can manage their labs\" ON labs;\nDROP POLICY IF EXISTS \"Lab members can read labs where they are members\" ON labs;\nDROP POLICY IF EXISTS \"Users can read labs where they are members\" ON labs;"}, {"id": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql_2", "file": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql", "content": "DROP POLICY IF EXISTS \"Users can read labs where they are members\" ON labs;\n\n-- Drop all existing policies on lab_members\nDROP POLICY IF EXISTS \"Lab admins can manage lab members\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can add members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can read all lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can remove members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can update member roles\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can leave labs\" ON lab_members;\nDROP POLICY IF EXISTS \"Users can read own lab memberships\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab owners can manage members\" ON lab_members;"}, {"id": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql_3", "file": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql", "content": "DROP POLICY IF EXISTS \"Lab owners can manage members\" ON lab_members;\nDROP POLICY IF EXISTS \"Lab admins can manage members\" ON lab_members;\n\n-- Drop all existing policies on whiteboards\nDROP POLICY IF EXISTS \"Lab members can manage whiteboards\" ON whiteboards;\n\n-- Drop all existing policies on reports\nDROP POLICY IF EXISTS \"Lab members can read reports\" ON reports;\nDROP POLICY IF EXISTS \"Lab members can create reports\" ON reports;\nDROP POLICY IF EXISTS \"Report creators can update their reports\" ON reports;\n\n-- Drop all existing policies on compounds\nDROP POLICY IF EXISTS \"Lab members can read compounds\" ON compounds;\nDROP POLICY IF EXISTS \"Lab members can create compounds\" ON compounds;\nDROP POLICY IF EXISTS \"Compound creators can update their compounds\" ON compounds;"}, {"id": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql_4", "file": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql", "content": "DROP POLICY IF EXISTS \"Compound creators can update their compounds\" ON compounds;\n\n-- Drop all existing policies on proteins\nDROP POLICY IF EXISTS \"Lab members can read proteins\" ON proteins;\nDROP POLICY IF EXISTS \"Lab members can create proteins\" ON proteins;\nDROP POLICY IF EXISTS \"Protein creators can update their proteins\" ON proteins;\n\n-- Drop all existing policies on chat_messages\nDROP POLICY IF EXISTS \"Lab members can read chat messages\" ON chat_messages;\nDROP POLICY IF EXISTS \"Lab members can send chat messages\" ON chat_messages;\n\n-- Drop all existing policies on todos\nDROP POLICY IF EXISTS \"Lab members can read todos\" ON todos;\nDROP POLICY IF EXISTS \"Lab members can create todos\" ON todos;\nDROP POLICY IF EXISTS \"Todo creators can update their todos\" ON todos;"}, {"id": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql_5", "file": ".bolt/supabase_discarded_migrations/20250607183750_lingering_sky.sql", "content": "DROP POLICY IF EXISTS \"Todo creators can update their todos\" ON todos;\nDROP POLICY IF EXISTS \"Lab admins can update any todos\" ON todos;\n\n-- Drop helper functions that are no longer needed\nDROP FUNCTION IF EXISTS is_lab_owner(uuid, uuid);\n\n-- Note: The triggers and trigger functions for lab owner auto-add and whiteboard timestamps\n-- are kept as they provide useful functionality without security implications"}]