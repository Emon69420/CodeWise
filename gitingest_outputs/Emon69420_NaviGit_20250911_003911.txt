Directory structure:
└── emon69420-navigit/
    ├── README.md
    ├── AI_PROJECT_ANALYZER_SETUP.md
    ├── app.py
    ├── debug_github.py
    ├── ingest.py
    ├── package.json
    ├── rag_repo.py
    ├── requirements.txt
    ├── .env.example
    ├── gitingest_outputs/
    │   ├── Emon69420_CoWin-Vaccine-Scouting_20250910_203155.txt
    │   ├── Emon69420_HazMapApp_20250910_183201.txt
    │   ├── Emon69420_HazMapApp_20250910_183421.txt
    │   ├── Emon69420_HazMapApp_20250910_183451.txt
    │   ├── Emon69420_HazMapApp_20250910_184917.txt
    │   ├── Emon69420_HazMapApp_20250910_185734.txt
    │   └── Emon69420_HazMapApp_20250910_185820.txt
    ├── indexes/
    │   ├── CoWin-Vaccine-Scouting/
    │   │   ├── chunks.json
    │   │   ├── graph.pkl
    │   │   └── repo.index
    │   └── HazMapApp/
    │       ├── chunks.json
    │       ├── graph.pkl
    │       └── repo.index
    ├── services/
    │   ├── __init__.py
    │   ├── code_analyzer.py
    │   ├── config.py
    │   ├── gitingest_processor.py
    │   ├── rag_service.py
    │   └── rag_system.py
    ├── static/
    │   ├── index.css
    │   ├── loading-dark.css
    │   ├── Looping Flower (1).json
    │   ├── workspace-dark.css
    │   └── workspace.css
    ├── templates/
    │   ├── index.html
    │   ├── loading.html
    │   └── workspace.html
    ├── test_files/
    │   ├── quick_test.py
    │   ├── quick_token_test.py
    │   ├── streamlit_app.py
    │   ├── suppress_warnings.py
    │   ├── test_api.py
    │   ├── test_clone.py
    │   ├── test_consistent_indexing.py
    │   ├── test_deep_analysis.py
    │   ├── test_final.py
    │   ├── test_find_functions.py
    │   ├── test_find_functions_clean.py
    │   ├── test_github_auth.py
    │   ├── test_gitingest.py
    │   ├── test_gitingest_simple.py
    │   ├── test_gitingest_with_output.py
    │   ├── test_hazmap.py
    │   ├── test_hazmap_rag.py
    │   ├── test_rag_simple.py
    │   ├── test_rag_system.py
    │   ├── test_silent.py
    │   ├── test_timing_small.py
    │   ├── test_token.py
    │   └── test_with_token.py
    └── .kiro/
        └── specs/
            ├── ai-project-analyzer/
            │   ├── design.md
            │   ├── requirements.md
            │   └── tasks.md
            ├── gitingest-integration/
            │   ├── design.md
            │   ├── requirements.md
            │   └── tasks.md
            ├── self-configuring-ai-agents/
            │   └── requirements.md
            └── streamlit-frontend/
                ├── design.md
                ├── requirements.md
                └── tasks.md

================================================
FILE: README.md
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x81 in position 3880: character maps to <undefined>


================================================
FILE: AI_PROJECT_ANALYZER_SETUP.md
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x8f in position 3078: character maps to <undefined>


================================================
FILE: app.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x8f in position 2126: character maps to <undefined>


================================================
FILE: debug_github.py
================================================
#!/usr/bin/env python3
"""
Debug script to check GitHub API status and rate limits
"""

import requests
import json

def check_github_api():
    """Check GitHub API status and rate limits"""
    print("🔍 Debugging GitHub API access...")
    print("=" * 50)
    
    # Check API rate limit status
    print("1. Checking GitHub API rate limits...")
    try:
        response = requests.get("https://api.github.com/rate_limit")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            rate_data = response.json()
            core = rate_data['resources']['core']
            print(f"✅ Rate limit status:")
            print(f"   Limit: {core['limit']}")
            print(f"   Used: {core['used']}")
            print(f"   Remaining: {core['remaining']}")
            print(f"   Reset time: {core['reset']}")
            
            if core['remaining'] == 0:
                print("❌ RATE LIMIT EXCEEDED! This is the issue.")
                import datetime
                reset_time = datetime.datetime.fromtimestamp(core['reset'])
                print(f"   Rate limit resets at: {reset_time}")
            else:
                print("✅ Rate limit OK")
        else:
            print(f"❌ Failed to check rate limits: {response.status_code}")
    except Exception as e:
        print(f"❌ Error checking rate limits: {e}")
    
    print()
    
    # Test direct repository access
    print("2. Testing direct repository access...")
    try:
        repo_url = "https://api.github.com/repos/Emon69420/HazMapApp"
        response = requests.get(repo_url)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            repo_data = response.json()
            print(f"✅ Repository accessible:")
            print(f"   Name: {repo_data['full_name']}")
            print(f"   Private: {repo_data['private']}")
            print(f"   Size: {repo_data['size']} KB")
        elif response.status_code == 403:
            print("❌ 403 Forbidden - Likely rate limited")
            print("Response headers:")
            for header, value in response.headers.items():
                if 'rate' in header.lower() or 'limit' in header.lower():
                    print(f"   {header}: {value}")
        elif response.status_code == 404:
            print("❌ 404 Not Found - Repository doesn't exist or is private")
        else:
            print(f"❌ Unexpected status: {response.status_code}")
            print(f"Response: {response.text[:200]}")
    except Exception as e:
        print(f"❌ Error testing repository: {e}")
    
    print()
    
    # Test with a known public repository
    print("3. Testing with known public repository (octocat/Hello-World)...")
    try:
        repo_url = "https://api.github.com/repos/octocat/Hello-World"
        response = requests.get(repo_url)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            print("✅ Known public repo accessible - API is working")
        elif response.status_code == 403:
            print("❌ Even known public repo is forbidden - definitely rate limited")
        else:
            print(f"❌ Unexpected status for known repo: {response.status_code}")
    except Exception as e:
        print(f"❌ Error testing known repo: {e}")

def check_flask_server():
    """Check if Flask server is responding"""
    print("\n4. Testing Flask server...")
    try:
        response = requests.get("http://localhost:5000/auth/status")
        print(f"Flask server status: {response.status_code}")
        if response.status_code == 200:
            print("✅ Flask server is running")
        else:
            print("❌ Flask server issue")
    except requests.exceptions.ConnectionError:
        print("❌ Flask server not running - start with: python app.py")
    except Exception as e:
        print(f"❌ Flask server error: {e}")

if __name__ == "__main__":
    check_github_api()
    check_flask_server()
    
    print("\n💡 Solutions:")
    print("1. If rate limited: Wait for reset time or use GitHub token")
    print("2. If server not running: python app.py")
    print("3. If repo changed: Check repository URL and permissions")


================================================
FILE: ingest.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x9d in position 1179: character maps to <undefined>


================================================
FILE: package.json
================================================
{
  "name": "workflow-automation",
  "version": "1.0.0",
  "description": "Complete workflow automation platform with visual builder",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "build": "cd client && npm run build",
    "install:all": "npm install && cd client && npm install"
  },
  "dependencies": {
    "@huggingface/inference": "^4.7.1",
    "@octokit/rest": "^22.0.0",
    "cors": "^2.8.5",
    "d3": "^7.9.0",
    "dotenv": "^17.2.1",
    "express": "^4.18.2",
    "redis": "^5.8.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}



================================================
FILE: rag_repo.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x8f in position 4850: character maps to <undefined>


================================================
FILE: requirements.txt
================================================
# Streamlit Frontend Dependencies
streamlit>=1.28.0
requests>=2.31.0
pandas>=2.0.0
numpy>=1.24.0

# Gitingest Integration
gitingest>=0.1.0

# Additional utilities
python-dateutil>=2.8.2
urllib3>=2.0.0

# Development and testing (optional)
pytest>=7.4.0
pytest-mock>=3.11.0


================================================
FILE: .env.example
================================================
# Flask Configuration
SECRET_KEY=your-secret-key-here
FLASK_ENV=development

# GitHub OAuth Configuration (optional - for OAuth flow)
GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_REDIRECT_URI=http://localhost:5000/auth/github/callback

# Redis Configuration (for caching)
REDIS_URL=redis://localhost:6379/0

# Gitingest Configuration
GITINGEST_MAX_FILE_SIZE=10485760
GITINGEST_TIMEOUT=300
GITINGEST_TEMP_DIR=/tmp/gitingest
GITINGEST_INCLUDE_PATTERNS=*.py,*.js,*.ts,*.jsx,*.tsx,*.md,*.json,*.yaml,*.yml,README*,LICENSE*,*.txt,*.html,*.css,*.scss
GITINGEST_EXCLUDE_PATTERNS=node_modules,__pycache__,.git,*.pyc,*.log


================================================
FILE: gitingest_outputs/Emon69420_CoWin-Vaccine-Scouting_20250910_203155.txt
================================================
Directory structure:
â””â”€â”€ emon69420-cowin-vaccine-scouting/
    â”œâ”€â”€ CowinService.py
    â””â”€â”€ sendRegMails.gs

================================================
FILE: CowinService.py
================================================
# -*- coding: utf-8 -*-
"""
Created on Thu May 5 10:38:32 2021
@author: Ayush Kapoor
"""
#%% Importing Necessary Libraries
import requests
import time
from datetime import datetime
from pytz import timezone
import json
import smtplib,ssl
from json2html import *
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formataddr
from openpyxl import load_workbook
import urllib3

#%% Variable Declarations
file_path = "C:\\Users\\ayush.kapoor\\Desktop\\input.xlsx" 
wb = load_workbook(filename= file_path,data_only=True)
sheet = wb['Details']

#%% Function Declarations
# Function to get data from Google sheets and store it in a local database
def getfromGSheets():
    scope = ["https://spreadsheets.google.com/feeds",'https://www.googleapis.com/auth/spreadsheets',"https://www.googleapis.com/auth/drive.file","https://www.googleapis.com/auth/drive"]     
    creds = ServiceAccountCredentials.from_json_keyfile_name("drive_api.json", scope)
    wb = load_workbook(filename= file_path,data_only=True)
    sheetOffline = wb['Details']
    client = gspread.authorize(creds)
    Gsheet = client.open("Vaccine Scouting 18-44 Age (Responses)").sheet1
    #row = sheet.row_values(3)  # Get a specific row
    #col = sheet.col_values(3)  # Get a specific column
    i=2
    while (Gsheet.cell(i,4)!=None):
        sheetOffline.cell(i,1).value = Gsheet.cell(i,5).value
        sheetOffline.cell(i,2).value = Gsheet.cell(i,6).value
        sheetOffline.cell(i,3).value = Gsheet.cell(i,7).value
        sheetOffline.cell(i,4).value = Gsheet.cell(i,8).value
        i+=1
    wb.save(filename=file_path) 

# Function to get all the states and districts on the CoWin portal    
def fetchStateDistrict():
    wb = load_workbook(filename= file_path,data_only=True)
    sheet = wb['Database']
    k = 1
    cowinS = "https://api.cowin.gov.in/api/v2/admin/location/states/"
    stateResp = json.loads(requests.get(cowinS,verify=False).text)
    for j in range(0,len(stateResp['states'])):
        cowin_state_url = "https://api.cowin.gov.in/api/v2/admin/location/districts/"+ str(stateResp['states'][j]['state_id']) # 1 to 37 for district
        print(cowin_state_url)
        distReq = requests.get(cowin_state_url,verify=False)
        distResp = json.loads(distReq.text)                        
        for i in range(0,len(distResp['districts'])):
            k+=1
            sheet.cell(row=k,column=3).value = distResp['districts'][i]['district_name']
            sheet.cell(row=k,column=4).value = distResp['districts'][i]['district_id']
            sheet.cell(row=k,column=2).value = stateResp['states'][j]['state_id']
            sheet.cell(row=k,column=1).value = stateResp['states'][j]['state_name']
    wb.save(filename=file_path)
    print("Database Fetched")
    
# A helper function to make the email text html friendly    
def HTMLReady (str_,name):
    if(str_ == "opners"):
        return "<!DOCTYPE html><html><body font-family: Arial;>"
    if(str_ == "mail_header"):
        return "<p>Hi "+name+','+"<br><br>We noticed the availability of COVID-19 vaccines at vaccination centres as per your registered location. Please find below the requisite details."
    if(str_ == "mail_footer"):
        return "<p><br>Thanks,</p>"
    if(str_ == "closers"):
        return "</body></html>"
    if(str_ == "getCss"):
        return "<style>body {  font-family: Arial;}</style>"
    return ""

# Function to convert the JSON received from the API to HTML        
def JSON2HTML(listObj,name):
    htmlTable =""
    htmlTable = HTMLReady("openers","")
    htmlTable+= HTMLReady("mail_header",name)
    obj = Json2Html()
    for i in range(0,len(listObj)):
        temp = json.loads(json.dumps(listObj[i]))
        del temp['session_id']
        temp['slots'] = str(temp['slots']).replace(":00","").replace("'",'').replace("0",'').replace('[','').replace(']','')
        del temp['center']['center_id']
        temp['center']['center_name'] = temp['center']['center_name']+', '+temp['center']['block_name']+', '+str(temp['center']['pincode'])
        del temp['center']['block_name']
        del temp['center']['pincode']
        temp['center'] = temp['center']['center_name']+' ['+temp['center']['fee_type']+']'
        htmlTable+= obj.convert(json.dumps(temp))
        htmlTable+="<br>"
    htmlTable = htmlTable.replace("<ul>","").replace("</ul>","").replace("<li>"," ").replace("</li>","")
    htmlTable = htmlTable.replace("date","Date").replace("available_capacity", "Available Slots").replace("min_age_limit","Minimum Age").replace('Available Slots_dose1', 'Available Slots (Dose 1)').replace('Available Slots_dose2', 'Available Slots (Dose 2)')   
    htmlTable = htmlTable.replace("vaccine","Vaccine").replace("slots","Slot Timings")
    htmlTable = htmlTable.replace("center","Centre Description")
    htmlTable+= HTMLReady("getCss","")
    htmlTable+= HTMLReady("mail_footer","")
    htmlTable+= '<table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;"><tbody><tr><td><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;"><tbody><tr><td style="vertical-align: top;"><h3 color="#000000" class="sc-fBuWsC eeihxG" style="margin: 0px; font-size: 16px; color: rgb(0, 0, 0);"><span>Ayush</span><span>&nbsp;</span><span>Kapoor</span></h3><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial; width: 100%;"><tbody><tr><td height="4"></td></tr><tr><td color="#7389f6" direction="horizontal" height="1" class="sc-jhAzac hmXDXQ" style="width: 100%; border-bottom: 1px solid rgb(115, 137, 246); border-left: none; display: block;"></td></tr><tr><td height="10"></td></tr></tbody></table><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;"><tbody><tr height="20" style="vertical-align: middle;"><td width="30" style="vertical-align: middle;"><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;"><tbody><tr><td style="vertical-align: bottom;"><span color="#7389f6" width="11" class="sc-jlyJG bbyJzT" style="display: block; background-color: rgb(115, 137, 246);"><img src="https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/email-icon-2x.png" color="#7389f6" width="13" class="sc-iRbamj blSEcj" style="display: block; background-color: rgb(115, 137, 246);"></span></td></tr></tbody></table></td><td style="padding: 0px;"><a href="mailto:ak246@snu.edu.in" color="#000000" class="sc-gipzik iyhjGb" style="text-decoration: none; color: rgb(0, 0, 0); font-size: 12px;"><span>ak246@snu.edu.in</span></a></td></tr><tr height="25" style="vertical-align: middle;"><td width="30" style="vertical-align: middle;"><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;"><tbody><tr><td style="vertical-align: bottom;"><span color="#7389f6" width="11" class="sc-jlyJG bbyJzT" style="display: block; background-color: rgb(115, 137, 246);"><img src="https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/address-icon-2x.png" color="#7389f6" width="13" class="sc-iRbamj blSEcj" style="display: block; background-color: rgb(115, 137, 246);"></span></td></tr></tbody></table></td><td style="padding: 0px;"><span color="#000000" class="sc-csuQGl CQhxV" style="font-size: 12px; color: rgb(0, 0, 0);"><span>IN</span></span></td></tr></tbody></table></td><td width="40"><div></div></td><td style="vertical-align: top;"><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;"><tbody><tr><td style="text-align: center;"><table cellpadding="0" cellspacing="0" class="sc-gPEVay eQYmiW" style="vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial; display: inline-block;"><tbody><tr style="text-align: center;"><td><a href="https://www.linkedin.com/in/kapoor-ayush/" color="#4451dd" class="sc-hzDkRC kpsoyz" style="display: inline-block; padding: 0px; background-color: rgb(68, 81, 221);"><img src="https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/linkedin-icon-2x.png" alt="linkedin" color="#4451dd" height="24" class="sc-bRBYWo ccSRck" style="background-color: rgb(68, 81, 221); max-width: 135px; display: block;"></a></td><td width="5"><div></div></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td height="30"></td></tr></tbody></table>'
    htmlTable+= HTMLReady("closers","")
    return htmlTable 

# The most crucial function of the entire script that fetches data from the CoWin API
def fetchDetails(apiURL,districtId,numRows):
    # Conditions of fetching from the CoWin API
    min_age = 45
    capacity = 0
    local_timezone = timezone("Asia/Kolkata")
    local_date = local_timezone.localize(datetime.now())
    api_params = {"district_id": districtId, "date": local_date.strftime("%d-%m-%Y")}
    api_request = requests.get(apiURL,params=api_params,verify = False)
    api_response = json.loads(api_request.text)
    centers = []
    for center in api_response["centers"]:
        centers.append(center["name"])
    length = len(max(centers, key=len))
    sessionData = []
    for center in api_response["centers"]:
        for session in center["sessions"]:
            # or (session["min_age_limit"]<min_age and session["available_capacity_dose2"]>capacity)
            if((session["min_age_limit"]<min_age and session["available_capacity_dose1"]>capacity)):
                session["center"]={"center_id":center["center_id"],"center_name":center["name"],"block_name":center["block_name"],"pincode":center["pincode"],"fee_type":center["fee_type"]}
                print(length,center["name"],session["date"],"SUCCESS")
                sessionData.append(session)
    print('Total 18+ Centres : '+str(len(sessionData)))
    if(len(sessionData)>0):
        sendMail(districtId,sessionData,numRows)
        
# Function to send mail to the respective users
def sendMail(districtId,data,numRows):
    # Server Credentials
    HOSTNAME = 'smtp.gmail.com'  
    PORT = '465'
    CONTEXT= ssl.create_default_context()
    from_password= ""     
    i=2
    while(i<=numRows):
        if ((sheet.cell(i,7).value)==districtId and sheet.cell(i,1).value == "No"):
            print(str(sheet.cell(i,7).value))
            print(sheet.cell(i,3).value)
            msg = MIMEMultipart('alternative')
            email_message = ""
            msg['From'] = "Ayush Kapoor ayushmailer111@gmail.com"
            msg['Subject'] = "ATTENTION: CoWin Vaccination slots for 18+ available at "+ str(len(data))+" centres in "+sheet.cell(i,6).value+', '+sheet.cell(i,5).value
            msg['To'] = sheet.cell(i,4).value
            print(sheet.cell(i,4).value)
            email_message= JSON2HTML(data, sheet.cell(i,3).value)
            part1 = MIMEText(email_message, 'html')
            msg.attach(part1)
            with smtplib.SMTP_SSL(host=HOSTNAME,port=PORT,context=CONTEXT) as server:
                server.login(msg['From'].split(' ')[2],from_password)
                server.sendmail(msg['From'],msg['To'],msg.as_string())
        i+=1 
    
#%% 
#fetchStateDistrict()
#%% Main Driver setup 
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
cowin_api_url2 = "https://api.cowin.gov.in/api/v2/appointment/sessions/public/calendarByDistrict"
cowin_api_url = "https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict"
districtCodes = []
while True:
    i=2
    while(i<=sheet.cell(2,9).value):
        if (sheet.cell(i,1).value =="No" and sheet.cell(i,6).value!=""):
            print('* '+sheet.cell(i,3).value+' | '+ str(sheet.cell(i,7).value))
            districtCodes.append(sheet.cell(i,7).value)
        i+=1  
    numRows = i-1
    districtCodes = list(set(districtCodes))
    print('-----Last Row: '+str(numRows))
    for j in range(0,len(districtCodes)):
        print('------>'+str(districtCodes[j]))
        fetchDetails(cowin_api_url2,districtCodes[j],numRows)
    print('--------Last Fetched: '+datetime.now().strftime("%d/%m/%Y %H:%M:%S")+'------')
    time.sleep(600)



================================================
FILE: sendRegMails.gs
================================================
//Function to send inital registration email to the users
function sendRegMails()
{
  Utilities.sleep(20000);
  var sub= "ATTENTION: CoWin Vaccination Scouting Registration Successful"
  const htmlTemp = HtmlService.createTemplateFromFile("RegMailTemp");
  var ws = SpreadsheetApp.openById(ssID).getSheetByName("Response Database")
  var Avals = ws.getRange("D1:D").getValues();
  //Logger.log(Avals.filter(String).length)
  for (var i =2; i<= Avals.filter(String).length+1;i++)
  {
    if((ws.getRange(i,2,1,1).getValue()=="No") && (ws.getRange(i,6,1,1).getValue()!="") && (ws.getRange(i,9,1,1).getValue()==""))
    {
        // Changing name to first name with formatting
        var temp = ws.getRange(i,4,1,1).getValue().split(" ")[0].toLowerCase().replace(/\b[a-z]/ig, function(match) {return match.toUpperCase()})
        if (temp.length<=2)
        {
          htmlTemp.name = ws.getRange(i,4,1,1)
          ws.getRange(i,5,1,1).setValue(ws.getRange(i,4,1,1))
        }
        if(temp.length>2)
        {
          htmlTemp.name = temp
          ws.getRange(i,5,1,1).setValue(temp)
        }
        htmlTemp.email= ws.getRange(i,6,1,1).getValue();
        htmlTemp.district = ws.getRange(i,8,1,1).getValue();
        htmlTemp.state = ws.getRange(i,7,1,1).getValue();
        var message1 = htmlTemp.evaluate().getContent();
        //console.log(message1);
        GmailApp.sendEmail(ws.getRange(i,6,1,1).getValue(),sub,"Text",{name:"Ayush Kapoor",htmlBody: message1});\
        // Update the status of the registration mail
        ws.getRange(i,2,1,1).setValue('Yes')
    }  
  }
}





================================================
FILE: gitingest_outputs/Emon69420_HazMapApp_20250910_183201.txt
================================================
[Binary file]


================================================
FILE: gitingest_outputs/Emon69420_HazMapApp_20250910_183421.txt
================================================
[Binary file]


================================================
FILE: gitingest_outputs/Emon69420_HazMapApp_20250910_183451.txt
================================================
[Binary file]


================================================
FILE: gitingest_outputs/Emon69420_HazMapApp_20250910_184917.txt
================================================
[Binary file]


================================================
FILE: gitingest_outputs/Emon69420_HazMapApp_20250910_185734.txt
================================================
[Binary file]


================================================
FILE: gitingest_outputs/Emon69420_HazMapApp_20250910_185820.txt
================================================
[Binary file]


================================================
FILE: indexes/CoWin-Vaccine-Scouting/chunks.json
================================================
[{"id": "Directory structure:_0", "file": "Directory structure:", "content": "\u2514\u2500\u2500 emon69420-cowin-vaccine-scouting/\n    \u251c\u2500\u2500 CowinService.py\n    \u2514\u2500\u2500 sendRegMails.gs"}, {"id": "CowinService.py_0", "file": "CowinService.py", "content": "================================================\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu May 5 10:38:32 2021\n@author: Ayush Kapoor\n\"\"\"\n#%% Importing Necessary Libraries\nimport requests\nimport time\nfrom datetime import datetime\nfrom pytz import timezone\nimport json\nimport smtplib,ssl\nfrom json2html import *\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.utils import formataddr\nfrom openpyxl import load_workbook\nimport urllib3\n\n#%% Variable Declarations\nfile_path = \"C:\\\\Users\\\\ayush.kapoor\\\\Desktop\\\\input.xlsx\" \nwb = load_workbook(filename= file_path,data_only=True)\nsheet = wb['Details']\n\n#%% Function Declarations\n# Function to get data from Google sheets and store it in a local database"}, {"id": "CowinService.py_1", "file": "CowinService.py", "content": "def getfromGSheets():\n    scope = [\"https://spreadsheets.google.com/feeds\",'https://www.googleapis.com/auth/spreadsheets',\"https://www.googleapis.com/auth/drive.file\",\"https://www.googleapis.com/auth/drive\"]     \n    creds = ServiceAccountCredentials.from_json_keyfile_name(\"drive_api.json\", scope)\n    wb = load_workbook(filename= file_path,data_only=True)\n    sheetOffline = wb['Details']\n    client = gspread.authorize(creds)\n    Gsheet = client.open(\"Vaccine Scouting 18-44 Age (Responses)\").sheet1\n    #row = sheet.row_values(3)  # Get a specific row\n    #col = sheet.col_values(3)  # Get a specific column\n    i=2\n    while (Gsheet.cell(i,4)!=None):\n        sheetOffline.cell(i,1).value = Gsheet.cell(i,5).value\n        sheetOffline.cell(i,2).value = Gsheet.cell(i,6).value"}, {"id": "CowinService.py_2", "file": "CowinService.py", "content": "sheetOffline.cell(i,2).value = Gsheet.cell(i,6).value\n        sheetOffline.cell(i,3).value = Gsheet.cell(i,7).value\n        sheetOffline.cell(i,4).value = Gsheet.cell(i,8).value\n        i+=1\n    wb.save(filename=file_path) \n\n# Function to get all the states and districts on the CoWin portal"}, {"id": "CowinService.py_3", "file": "CowinService.py", "content": "def fetchStateDistrict():\n    wb = load_workbook(filename= file_path,data_only=True)\n    sheet = wb['Database']\n    k = 1\n    cowinS = \"https://api.cowin.gov.in/api/v2/admin/location/states/\"\n    stateResp = json.loads(requests.get(cowinS,verify=False).text)\n    for j in range(0,len(stateResp['states'])):\n        cowin_state_url = \"https://api.cowin.gov.in/api/v2/admin/location/districts/\"+ str(stateResp['states'][j]['state_id']) # 1 to 37 for district\n        print(cowin_state_url)\n        distReq = requests.get(cowin_state_url,verify=False)\n        distResp = json.loads(distReq.text)                        \n        for i in range(0,len(distResp['districts'])):\n            k+=1\n            sheet.cell(row=k,column=3).value = distResp['districts'][i]['district_name']"}, {"id": "CowinService.py_4", "file": "CowinService.py", "content": "sheet.cell(row=k,column=3).value = distResp['districts'][i]['district_name']\n            sheet.cell(row=k,column=4).value = distResp['districts'][i]['district_id']\n            sheet.cell(row=k,column=2).value = stateResp['states'][j]['state_id']\n            sheet.cell(row=k,column=1).value = stateResp['states'][j]['state_name']\n    wb.save(filename=file_path)\n    print(\"Database Fetched\")\n    \n# A helper function to make the email text html friendly"}, {"id": "CowinService.py_5", "file": "CowinService.py", "content": "def HTMLReady (str_,name):\n    if(str_ == \"opners\"):\n        return \"<!DOCTYPE html><html><body font-family: Arial;>\"\n    if(str_ == \"mail_header\"):\n        return \"<p>Hi \"+name+','+\"<br><br>We noticed the availability of COVID-19 vaccines at vaccination centres as per your registered location. Please find below the requisite details.\"\n    if(str_ == \"mail_footer\"):\n        return \"<p><br>Thanks,</p>\"\n    if(str_ == \"closers\"):\n        return \"</body></html>\"\n    if(str_ == \"getCss\"):\n        return \"<style>body {  font-family: Arial;}</style>\"\n    return \"\"\n\n# Function to convert the JSON received from the API to HTML"}, {"id": "CowinService.py_6", "file": "CowinService.py", "content": "def JSON2HTML(listObj,name):\n    htmlTable =\"\"\n    htmlTable = HTMLReady(\"openers\",\"\")\n    htmlTable+= HTMLReady(\"mail_header\",name)\n    obj = Json2Html()\n    for i in range(0,len(listObj)):\n        temp = json.loads(json.dumps(listObj[i]))\n        del temp['session_id']\n        temp['slots'] = str(temp['slots']).replace(\":00\",\"\").replace(\"'\",'').replace(\"0\",'').replace('[','').replace(']','')\n        del temp['center']['center_id']\n        temp['center']['center_name'] = temp['center']['center_name']+', '+temp['center']['block_name']+', '+str(temp['center']['pincode'])\n        del temp['center']['block_name']\n        del temp['center']['pincode']\n        temp['center'] = temp['center']['center_name']+' ['+temp['center']['fee_type']+']'\n        htmlTable+= obj.convert(json.dumps(temp))"}, {"id": "CowinService.py_7", "file": "CowinService.py", "content": "htmlTable+= obj.convert(json.dumps(temp))\n        htmlTable+=\"<br>\"\n    htmlTable = htmlTable.replace(\"<ul>\",\"\").replace(\"</ul>\",\"\").replace(\"<li>\",\" \").replace(\"</li>\",\"\")\n    htmlTable = htmlTable.replace(\"date\",\"Date\").replace(\"available_capacity\", \"Available Slots\").replace(\"min_age_limit\",\"Minimum Age\").replace('Available Slots_dose1', 'Available Slots (Dose 1)').replace('Available Slots_dose2', 'Available Slots (Dose 2)')   \n    htmlTable = htmlTable.replace(\"vaccine\",\"Vaccine\").replace(\"slots\",\"Slot Timings\")\n    htmlTable = htmlTable.replace(\"center\",\"Centre Description\")\n    htmlTable+= HTMLReady(\"getCss\",\"\")\n    htmlTable+= HTMLReady(\"mail_footer\",\"\")"}, {"id": "CowinService.py_8", "file": "CowinService.py", "content": "htmlTable+= '<table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;\"><tbody><tr><td><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;\"><tbody><tr><td style=\"vertical-align: top;\"><h3 color=\"#000000\" class=\"sc-fBuWsC eeihxG\" style=\"margin: 0px; font-size: 16px; color: rgb(0, 0, 0);\"><span>Ayush</span><span>&nbsp;</span><span>Kapoor</span></h3><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial; width: 100%;\"><tbody><tr><td height=\"4\"></td></tr><tr><td color=\"#7389f6\" direction=\"horizontal\""}, {"id": "CowinService.py_9", "file": "CowinService.py", "content": "width: 100%;\"><tbody><tr><td height=\"4\"></td></tr><tr><td color=\"#7389f6\" direction=\"horizontal\" height=\"1\" class=\"sc-jhAzac hmXDXQ\" style=\"width: 100%; border-bottom: 1px solid rgb(115, 137, 246); border-left: none; display: block;\"></td></tr><tr><td height=\"10\"></td></tr></tbody></table><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;\"><tbody><tr height=\"20\" style=\"vertical-align: middle;\"><td width=\"30\" style=\"vertical-align: middle;\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;\"><tbody><tr><td style=\"vertical-align: bottom;\"><span color=\"#7389f6\" width=\"11\" class=\"sc-jlyJG bbyJzT\""}, {"id": "CowinService.py_10", "file": "CowinService.py", "content": "style=\"vertical-align: bottom;\"><span color=\"#7389f6\" width=\"11\" class=\"sc-jlyJG bbyJzT\" style=\"display: block; background-color: rgb(115, 137, 246);\"><img src=\"https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/email-icon-2x.png\" color=\"#7389f6\" width=\"13\" class=\"sc-iRbamj blSEcj\" style=\"display: block; background-color: rgb(115, 137, 246);\"></span></td></tr></tbody></table></td><td style=\"padding: 0px;\"><a href=\"mailto:ak246@snu.edu.in\" color=\"#000000\" class=\"sc-gipzik iyhjGb\" style=\"text-decoration: none; color: rgb(0, 0, 0); font-size: 12px;\"><span>ak246@snu.edu.in</span></a></td></tr><tr height=\"25\" style=\"vertical-align: middle;\"><td width=\"30\" style=\"vertical-align: middle;\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align:"}, {"id": "CowinService.py_11", "file": "CowinService.py", "content": "middle;\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;\"><tbody><tr><td style=\"vertical-align: bottom;\"><span color=\"#7389f6\" width=\"11\" class=\"sc-jlyJG bbyJzT\" style=\"display: block; background-color: rgb(115, 137, 246);\"><img src=\"https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/address-icon-2x.png\" color=\"#7389f6\" width=\"13\" class=\"sc-iRbamj blSEcj\" style=\"display: block; background-color: rgb(115, 137, 246);\"></span></td></tr></tbody></table></td><td style=\"padding: 0px;\"><span color=\"#000000\" class=\"sc-csuQGl CQhxV\" style=\"font-size: 12px; color: rgb(0, 0, 0);\"><span>IN</span></span></td></tr></tbody></table></td><td width=\"40\"><div></div></td><td"}, {"id": "CowinService.py_12", "file": "CowinService.py", "content": "0, 0);\"><span>IN</span></span></td></tr></tbody></table></td><td width=\"40\"><div></div></td><td style=\"vertical-align: top;\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial;\"><tbody><tr><td style=\"text-align: center;\"><table cellpadding=\"0\" cellspacing=\"0\" class=\"sc-gPEVay eQYmiW\" style=\"vertical-align: -webkit-baseline-middle; font-size: small; font-family: Arial; display: inline-block;\"><tbody><tr style=\"text-align: center;\"><td><a href=\"https://www.linkedin.com/in/kapoor-ayush/\" color=\"#4451dd\" class=\"sc-hzDkRC kpsoyz\" style=\"display: inline-block; padding: 0px; background-color: rgb(68, 81, 221);\"><img"}, {"id": "CowinService.py_13", "file": "CowinService.py", "content": "kpsoyz\" style=\"display: inline-block; padding: 0px; background-color: rgb(68, 81, 221);\"><img src=\"https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/linkedin-icon-2x.png\" alt=\"linkedin\" color=\"#4451dd\" height=\"24\" class=\"sc-bRBYWo ccSRck\" style=\"background-color: rgb(68, 81, 221); max-width: 135px; display: block;\"></a></td><td width=\"5\"><div></div></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr><tr><td height=\"30\"></td></tr></tbody></table>'"}, {"id": "CowinService.py_14", "file": "CowinService.py", "content": "htmlTable+= HTMLReady(\"closers\",\"\")\n    return htmlTable \n\n# The most crucial function of the entire script that fetches data from the CoWin API"}, {"id": "CowinService.py_15", "file": "CowinService.py", "content": "def fetchDetails(apiURL,districtId,numRows):\n    # Conditions of fetching from the CoWin API\n    min_age = 45\n    capacity = 0\n    local_timezone = timezone(\"Asia/Kolkata\")\n    local_date = local_timezone.localize(datetime.now())\n    api_params = {\"district_id\": districtId, \"date\": local_date.strftime(\"%d-%m-%Y\")}\n    api_request = requests.get(apiURL,params=api_params,verify = False)\n    api_response = json.loads(api_request.text)\n    centers = []\n    for center in api_response[\"centers\"]:\n        centers.append(center[\"name\"])\n    length = len(max(centers, key=len))\n    sessionData = []\n    for center in api_response[\"centers\"]:\n        for session in center[\"sessions\"]:\n            # or (session[\"min_age_limit\"]<min_age and session[\"available_capacity_dose2\"]>capacity)"}, {"id": "CowinService.py_16", "file": "CowinService.py", "content": "if((session[\"min_age_limit\"]<min_age and session[\"available_capacity_dose1\"]>capacity)):\n                session[\"center\"]={\"center_id\":center[\"center_id\"],\"center_name\":center[\"name\"],\"block_name\":center[\"block_name\"],\"pincode\":center[\"pincode\"],\"fee_type\":center[\"fee_type\"]}\n                print(length,center[\"name\"],session[\"date\"],\"SUCCESS\")\n                sessionData.append(session)\n    print('Total 18+ Centres : '+str(len(sessionData)))\n    if(len(sessionData)>0):\n        sendMail(districtId,sessionData,numRows)\n        \n# Function to send mail to the respective users"}, {"id": "CowinService.py_17", "file": "CowinService.py", "content": "def sendMail(districtId,data,numRows):\n    # Server Credentials\n    HOSTNAME = 'smtp.gmail.com'  \n    PORT = '465'\n    CONTEXT= ssl.create_default_context()\n    from_password= \"\"     \n    i=2\n    while(i<=numRows):\n        if ((sheet.cell(i,7).value)==districtId and sheet.cell(i,1).value == \"No\"):\n            print(str(sheet.cell(i,7).value))\n            print(sheet.cell(i,3).value)\n            msg = MIMEMultipart('alternative')\n            email_message = \"\"\n            msg['From'] = \"Ayush Kapoor ayushmailer111@gmail.com\"\n            msg['Subject'] = \"ATTENTION: CoWin Vaccination slots for 18+ available at \"+ str(len(data))+\" centres in \"+sheet.cell(i,6).value+', '+sheet.cell(i,5).value\n            msg['To'] = sheet.cell(i,4).value\n            print(sheet.cell(i,4).value)"}, {"id": "CowinService.py_18", "file": "CowinService.py", "content": "msg['To'] = sheet.cell(i,4).value\n            print(sheet.cell(i,4).value)\n            email_message= JSON2HTML(data, sheet.cell(i,3).value)\n            part1 = MIMEText(email_message, 'html')\n            msg.attach(part1)\n            with smtplib.SMTP_SSL(host=HOSTNAME,port=PORT,context=CONTEXT) as server:\n                server.login(msg['From'].split(' ')[2],from_password)\n                server.sendmail(msg['From'],msg['To'],msg.as_string())\n        i+=1 \n    \n#%% \n#fetchStateDistrict()\n#%% Main Driver setup \nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\ncowin_api_url2 = \"https://api.cowin.gov.in/api/v2/appointment/sessions/public/calendarByDistrict\"\ncowin_api_url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict\""}, {"id": "CowinService.py_19", "file": "CowinService.py", "content": "cowin_api_url = \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict\"\ndistrictCodes = []\nwhile True:\n    i=2\n    while(i<=sheet.cell(2,9).value):\n        if (sheet.cell(i,1).value ==\"No\" and sheet.cell(i,6).value!=\"\"):\n            print('* '+sheet.cell(i,3).value+' | '+ str(sheet.cell(i,7).value))\n            districtCodes.append(sheet.cell(i,7).value)\n        i+=1  \n    numRows = i-1\n    districtCodes = list(set(districtCodes))\n    print('-----Last Row: '+str(numRows))\n    for j in range(0,len(districtCodes)):\n        print('------>'+str(districtCodes[j]))\n        fetchDetails(cowin_api_url2,districtCodes[j],numRows)\n    print('--------Last Fetched: '+datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\")+'------')\n    time.sleep(600)"}, {"id": "sendRegMails.gs_0", "file": "sendRegMails.gs", "content": "================================================\n//Function to send inital registration email to the users\nfunction sendRegMails()\n{\n  Utilities.sleep(20000);\n  var sub= \"ATTENTION: CoWin Vaccination Scouting Registration Successful\"\n  const htmlTemp = HtmlService.createTemplateFromFile(\"RegMailTemp\");\n  var ws = SpreadsheetApp.openById(ssID).getSheetByName(\"Response Database\")\n  var Avals = ws.getRange(\"D1:D\").getValues();\n  //Logger.log(Avals.filter(String).length)\n  for (var i =2; i<= Avals.filter(String).length+1;i++)\n  {\n    if((ws.getRange(i,2,1,1).getValue()==\"No\") && (ws.getRange(i,6,1,1).getValue()!=\"\") && (ws.getRange(i,9,1,1).getValue()==\"\"))\n    {\n        // Changing name to first name with formatting"}, {"id": "sendRegMails.gs_1", "file": "sendRegMails.gs", "content": "{\n        // Changing name to first name with formatting\n        var temp = ws.getRange(i,4,1,1).getValue().split(\" \")[0].toLowerCase().replace(/\\b[a-z]/ig, function(match) {return match.toUpperCase()})\n        if (temp.length<=2)\n        {\n          htmlTemp.name = ws.getRange(i,4,1,1)\n          ws.getRange(i,5,1,1).setValue(ws.getRange(i,4,1,1))\n        }\n        if(temp.length>2)\n        {\n          htmlTemp.name = temp\n          ws.getRange(i,5,1,1).setValue(temp)\n        }\n        htmlTemp.email= ws.getRange(i,6,1,1).getValue();\n        htmlTemp.district = ws.getRange(i,8,1,1).getValue();\n        htmlTemp.state = ws.getRange(i,7,1,1).getValue();\n        var message1 = htmlTemp.evaluate().getContent();\n        //console.log(message1);"}, {"id": "sendRegMails.gs_2", "file": "sendRegMails.gs", "content": "var message1 = htmlTemp.evaluate().getContent();\n        //console.log(message1);\n        GmailApp.sendEmail(ws.getRange(i,6,1,1).getValue(),sub,\"Text\",{name:\"Ayush Kapoor\",htmlBody: message1});\\\n        // Update the status of the registration mail\n        ws.getRange(i,2,1,1).setValue('Yes')\n    }  \n  }\n}"}]


================================================
FILE: indexes/CoWin-Vaccine-Scouting/graph.pkl
================================================
[Binary file]


================================================
FILE: indexes/CoWin-Vaccine-Scouting/repo.index
================================================
[Binary file]


================================================
FILE: indexes/HazMapApp/chunks.json
================================================
[{"id": "Directory structure:_0", "file": "Directory structure:", "content": "\u2514\u2500\u2500 emon69420-hazmapapp/\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 app.json\n    \u251c\u2500\u2500 BACKGROUND_TASKS_README.md\n    \u251c\u2500\u2500 eas.json\n    \u251c\u2500\u2500 LocationContext.tsx\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 supabaseClient.ts\n    \u251c\u2500\u2500 tsconfig.json\n    \u251c\u2500\u2500 .npmrc\n    \u251c\u2500\u2500 .prettierrc\n    \u251c\u2500\u2500 app/\n    \u2502   \u251c\u2500\u2500 +not-found.tsx\n    \u2502   \u251c\u2500\u2500 _layout.tsx\n    \u2502   \u251c\u2500\u2500 index.tsx\n    \u2502   \u251c\u2500\u2500 (auth)/\n    \u2502   \u2502   \u251c\u2500\u2500 _layout.tsx\n    \u2502   \u2502   \u251c\u2500\u2500 login.tsx\n    \u2502   \u2502   \u2514\u2500\u2500 signup.tsx\n    \u2502   \u2514\u2500\u2500 (tabs)/\n    \u2502       \u251c\u2500\u2500 _layout.tsx\n    \u2502       \u251c\u2500\u2500 air-quality.tsx\n    \u2502       \u251c\u2500\u2500 evacuation.tsx\n    \u2502       \u251c\u2500\u2500 index.tsx\n    \u2502       \u251c\u2500\u2500 profile.tsx\n    \u2502       \u2514\u2500\u2500 updates.tsx\n    \u251c\u2500\u2500 assets/\n    \u2502   \u2514\u2500\u2500 lottie/\n    \u2502       \u251c\u2500\u2500 birds.json\n    \u2502       \u2514\u2500\u2500 smoke.json\n    \u251c\u2500\u2500 components/\n    \u2502   \u2514\u2500\u2500 LoadingScreen.tsx\n    \u251c\u2500\u2500 contexts/"}, {"id": "Directory structure:_1", "file": "Directory structure:", "content": "\u2502       \u2514\u2500\u2500 smoke.json\n    \u251c\u2500\u2500 components/\n    \u2502   \u2514\u2500\u2500 LoadingScreen.tsx\n    \u251c\u2500\u2500 contexts/\n    \u2502   \u2514\u2500\u2500 AuthContext.tsx\n    \u251c\u2500\u2500 HazEnd - Flask Backend/\n    \u2502   \u2514\u2500\u2500 backend/\n    \u2502       \u251c\u2500\u2500 README.md\n    \u2502       \u251c\u2500\u2500 app.py\n    \u2502       \u251c\u2500\u2500 dev-requirements.txt\n    \u2502       \u251c\u2500\u2500 pyproject.toml\n    \u2502       \u251c\u2500\u2500 requirements.txt\n    \u2502       \u251c\u2500\u2500 static/\n    \u2502       \u2502   \u2514\u2500\u2500 site.css\n    \u2502       \u251c\u2500\u2500 templates/\n    \u2502       \u2502   \u251c\u2500\u2500 about.html\n    \u2502       \u2502   \u251c\u2500\u2500 base.html\n    \u2502       \u2502   \u2514\u2500\u2500 home.html\n    \u2502       \u2514\u2500\u2500 tests/\n    \u2502           \u2514\u2500\u2500 test_app.py\n    \u251c\u2500\u2500 hooks/\n    \u2502   \u251c\u2500\u2500 useAuth.ts\n    \u2502   \u2514\u2500\u2500 useFrameworkReady.ts\n    \u251c\u2500\u2500 services/\n    \u2502   \u2514\u2500\u2500 backgroundTasks.ts\n    \u251c\u2500\u2500 types/\n    \u2502   \u2514\u2500\u2500 env.d.ts\n    \u2514\u2500\u2500 .bolt/\n        \u2514\u2500\u2500 config.json"}, {"id": "README.md_0", "file": "README.md", "content": "================================================\n# \ud83c\udf3f HazMap\n\n> **Real-time environmental monitoring and hazard mapping for safer communities**\n\n[![React Native](https://img.shields.io/badge/React%20Native-0.79.5-blue.svg)](https://reactnative.dev/)\n[![Expo](https://img.shields.io/badge/Expo-53.0.20-lightgrey.svg)](https://expo.dev/)\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n\nHazMap is a comprehensive React Native application that provides real-time environmental monitoring, wildfire risk assessment, and emergency evacuation planning. Built with modern mobile technologies, it helps communities stay informed and prepared for environmental hazards."}, {"id": "README.md_1", "file": "README.md", "content": "## \u2728 Features\n\n### \ud83d\uddfa\ufe0f **Interactive Mapping**\n- Real-time Google Maps integration\n- Dynamic hazard overlay visualization\n- Location-based services and geocoding\n- Map styling for optimal user experience\n\n### \ud83c\udf2c\ufe0f **Air Quality Monitoring**\n- Real-time air quality data visualization\n- Pollutant concentration breakdown\n- Information regarding each pollutant to educate user\n- Location-specific air quality \n- Animation based on air quality\n\n### \ud83d\udd25 **Wildfire Risk Assessment**\n- Advanced wildfire prediction\n- Real-time risk level monitoring\n- Satellite data analysis\n- Background task monitoring for continuous updates\n\n### \ud83d\udea8 **Emergency Evacuation**\n- Dynamic evacuation route planning\n- Real-time evacuation zone updates\n- Emergency contact integration\n- Route optimization for safety"}, {"id": "README.md_2", "file": "README.md", "content": "### \ud83d\udcca **Environmental Data**\n- Comprehensive environmental monitoring\n- Satellite data for vegetation cover\n\n### \ud83d\udc64 **User Management**\n- Secure authentication with Supabase\n- User profile management\n- Personalized settings and preferences\n- Data synchronization across devices"}, {"id": "README.md_3", "file": "README.md", "content": "## \ud83d\udee0\ufe0f Tech Stack\n\n- **Frontend**: React Native 0.79.5, Expo 53.0.20\n- **Language**: TypeScript 5.8.3\n- **Maps**: Google Maps API, React Native Maps\n- **Database**: PostgreSQL\n- **UI Components**: React Native Paper, Lucide Icons\n- **Animations**: Lottie React Native\n- **Background Tasks**: Expo Background Fetch\n- **Location Services**: Expo Location\n- **State Management**: React Context API\n   - **APIs Used**: Google Maps Platform Weather API, Google Maps Platform Elevation API, Google Maps Platform AirQuality API, Google Earth Engine API"}, {"id": "README.md_4", "file": "README.md", "content": "## \ud83d\ude80 Quick Start\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n- Expo CLI (`npm install -g @expo/cli`)\n- Android Studio (for Android development)"}, {"id": "README.md_5", "file": "README.md", "content": "### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/yourusername/hazmap.git\n   cd hazmap\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Configure API Keys**\n   \n   Create a `.env` file in the root directory:\n   ```env\n   EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=your_google_maps_api_key_here\n   EXPO_PUBLIC_SUPABASE_URL=your_supabase_url_here\n   EXPO_PUBLIC_SUPABASE_KEY=your_supabase_anon_key_here\n   ```\n\n   **Required API Keys:**\n   - **Google Maps API Key**: For mapping and location services\n   - **Supabase URL & Key**: For database and authentication\n   - **Custom API Endpoint**: For environmental data services\n\n4. **Update Configuration Files**\n   \n   Replace the following placeholders in your codebase:"}, {"id": "README.md_6", "file": "README.md", "content": "4. **Update Configuration Files**\n   \n   Replace the following placeholders in your codebase:\n   - `API_KEY_HERE` \u2192 Your Google Maps API key\n   - `SUPABASE_URL_HERE` \u2192 Your Supabase project URL\n   - `SUPABASE_ANON_KEY_HERE` \u2192 Your Supabase anonymous key\n   - `CUSTOM_API_ENDPOINT_HERE` \u2192 Your custom API endpoint\n\n5. **Start the development server**\n   ```bash\n   npx expo start\n   ```\n\n6. **Run on your device**\n   - Scan the QR code with Expo Go app (Android)\n   - Press `a` for Android emulator"}, {"id": "README.md_7", "file": "README.md", "content": "## \ud83d\udd27 Configuration\n\n### Google Maps API Setup\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select existing one\n3. Enable the following APIs:\n   - Maps SDK for Android\n   - Maps SDK for iOS\n   - Places API\n   - Geocoding API\n   - Elevation API\n4. Create credentials (API Key)\n5. Restrict the API key to your app's bundle identifier\n\n### Supabase Setup\n\n1. Create a new project at [Supabase](https://supabase.com/)\n2. Get your project URL and anonymous key from Settings > API\n3. Configure authentication providers as needed\n4. Set up your database schema"}, {"id": "README.md_8", "file": "README.md", "content": "### Environment Variables\n\nThe following environment variables are required:\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `EXPO_PUBLIC_GOOGLE_MAPS_API_KEY` | Google Maps API key | \u2705 |\n| `EXPO_PUBLIC_SUPABASE_URL` | Supabase project URL | \u2705 |\n| `EXPO_PUBLIC_SUPABASE_KEY` | Supabase anonymous key | \u2705 |"}, {"id": "README.md_9", "file": "README.md", "content": "## \ud83d\udcc1 Project Structure\n\n```\nhazmap/\n\u251c\u2500\u2500 app/                    # Expo Router app directory\n\u2502   \u251c\u2500\u2500 (auth)/            # Authentication screens\n\u2502   \u251c\u2500\u2500 (tabs)/            # Main app tabs\n\u2502   \u2514\u2500\u2500 _layout.tsx        # Root layout\n\u251c\u2500\u2500 components/             # Reusable components\n\u251c\u2500\u2500 contexts/              # React contexts\n\u251c\u2500\u2500 hooks/                 # Custom React hooks\n\u251c\u2500\u2500 services/              # API services\n\u251c\u2500\u2500 types/                 # TypeScript type definitions\n\u2514\u2500\u2500 assets/                # Static assets\n```"}, {"id": "README.md_10", "file": "README.md", "content": "## \ud83e\uddea Development\n\n### Available Scripts\n\n```bash\nnpm run dev          # Start development server\nnpm run start        # Start Expo development server\nnpm run android      # Run on Android\nnpm run build:web    # Build for web\nnpm run lint         # Run ESLint\n```\n\n### Code Style\n\nThis project uses:\n- TypeScript for type safety\n- ESLint for code linting\n- Prettier for code formatting\n- React Native for cross platform development"}, {"id": "README.md_11", "file": "README.md", "content": "## \ud83e\udd1d Contributing\n\nWe welcome contributions! Please follow these steps:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Development Guidelines\n\n- Follow TypeScript best practices\n- Write meaningful commit messages\n- Add tests for new features\n- Update documentation as needed\n- Follow the existing code style"}, {"id": "README.md_12", "file": "README.md", "content": "## \ud83d\ude4f Acknowledgments\n\n- [Expo](https://expo.dev/) for the amazing development platform\n- [React Native](https://reactnative.dev/) for the mobile framework\n- [Supabase](https://supabase.com/) for the backend services\n- [Google Maps Platform](https://developers.google.com/maps) for mapping services\n\n\n**Made with \u2764\ufe0f for safer communities**"}, {"id": "app.json_0", "file": "app.json", "content": "================================================\n{\n  \"expo\": {\n    \"name\": \"HazMap\",\n    \"slug\": \"hazmap\",\n    \"version\": \"1.0.0\",\n    \"orientation\": \"portrait\",\n    \"icon\": \"./assets/images/icon.png\",\n    \"scheme\": \"myapp\",\n    \"userInterfaceStyle\": \"automatic\",\n    \"newArchEnabled\": true,\n    \"splash\": {\n      \"image\": \"./assets/images/icon.png\",\n      \"resizeMode\": \"contain\",\n      \"backgroundColor\": \"#0F0F0F\"\n    },\n    \"ios\": {\n      \"supportsTablet\": true,\n      \"infoPlist\": {\n        \"UIBackgroundModes\": [\n          \"background-fetch\",\n          \"remote-notification\"\n        ]\n      }\n    },\n    \"android\": {\n      \"config\": {\n        \"googleMaps\": {\n          \"apiKey\": \"API_KEY_HERE\"\n        }\n      },\n      \"package\": \"com.emonganguly2005.hazmap\",\n      \"permissions\": ["}, {"id": "app.json_1", "file": "app.json", "content": "}\n      },\n      \"package\": \"com.emonganguly2005.hazmap\",\n      \"permissions\": [\n        \"ACCESS_BACKGROUND_LOCATION\",\n        \"RECEIVE_BOOT_COMPLETED\",\n        \"WAKE_LOCK\"\n      ]\n    },\n    \"web\": {\n      \"bundler\": \"metro\",\n      \"output\": \"single\",\n      \"favicon\": \"./assets/images/favicon.png\"\n    },\n    \"plugins\": [\n      \"expo-router\",\n      \"expo-font\",\n      \"expo-web-browser\",\n      \"expo-background-fetch\",\n      \"expo-task-manager\",\n      \"expo-location\",\n      [\n        \"expo-notifications\",\n        {\n          \"icon\": \"./assets/images/icon.png\",\n          \"color\": \"#ffffff\"\n        }\n      ],\n      [\n        \"expo-build-properties\",\n        {\n          \"android\": {\n            \"usesCleartextTraffic\": true\n          },\n          \"ios\": {\n            \"flipper\": true"}, {"id": "app.json_2", "file": "app.json", "content": "},\n          \"ios\": {\n            \"flipper\": true\n          }\n        }\n      ]\n    ],\n    \"experiments\": {\n      \"typedRoutes\": true\n    },\n    \"extra\": {\n      \"router\": {},\n      \"eas\": {\n        \"projectId\": \"8836da7d-bc92-4d34-a99d-29b922c00aea\"\n      }\n    }\n  }\n}"}, {"id": "BACKGROUND_TASKS_README.md_0", "file": "BACKGROUND_TASKS_README.md", "content": "================================================\n# Background Wildfire Prediction Tasks\n\nThis app includes a background task system that automatically monitors wildfire risk every 10 minutes and sends notifications when high risk is detected.\n\n## Features\n\n- **Automatic Monitoring**: Checks wildfire risk every 10 minutes in the background\n- **Smart Notifications**: Only sends alerts when risk is \"High\" or \"Extreme\"\n- **Location Awareness**: Uses your current location for accurate predictions\n- **User Control**: Toggle background monitoring on/off from the Profile screen"}, {"id": "BACKGROUND_TASKS_README.md_1", "file": "BACKGROUND_TASKS_README.md", "content": "## Setup Instructions\n\n### 1. API Key Configuration\n\nReplace the placeholder API key in `services/backgroundTasks.ts`:\n\n```typescript\nconst GOOGLE_API_KEY = 'YOUR_GOOGLE_API_KEY_HERE';\n```\n\nReplace `YOUR_GOOGLE_API_KEY_HERE` with your actual Google API key.\n\n### 2. Permissions\n\nThe app requires the following permissions:\n- **Location**: To get your current coordinates\n- **Notifications**: To send wildfire alerts\n- **Background App Refresh**: To run tasks when app is in background\n\n### 3. Testing\n\nUse the \"Test Wildfire Prediction\" button in the Profile screen to manually test the prediction system."}, {"id": "BACKGROUND_TASKS_README.md_2", "file": "BACKGROUND_TASKS_README.md", "content": "## How It Works\n\n1. **Background Task Registration**: When the app starts, it registers a background task that runs every 10 minutes\n2. **Data Collection**: The task fetches:\n   - Current weather conditions (temperature, wind, humidity, precipitation)\n   - Air quality data (AQI, PM2.5, PM10, O3, NO2, SO2, CO)\n   - Elevation data\n3. **Risk Prediction**: Sends all data to the wildfire prediction API\n4. **Smart Alerts**: Only sends notifications if risk level is \"High\" or \"Extreme\"\n\n## API Endpoints Used\n\n- **Google Weather API**: Current weather conditions\n- **Google Air Quality API**: Air quality and pollutant data\n- **Google Elevation API**: Elevation data\n- **Google Geocoding API**: Location name for notifications\n- **Wildfire Prediction API**: `http://34.130.243.115:5000/gee-data`"}, {"id": "BACKGROUND_TASKS_README.md_3", "file": "BACKGROUND_TASKS_README.md", "content": "## Notification Content\n\nWhen high risk is detected, you'll receive a notification with:\n- Title: \"\u00f0\u0178\u201d\u00a5 Wildfire Risk Alert\"\n- Body: Location name, risk level, and safety reminder\n- Data: Prediction details and coordinates\n\n## Troubleshooting\n\n### Background Tasks Not Running\n- Ensure \"Background App Refresh\" is enabled in device settings\n- Check that location permissions are granted\n- Verify notification permissions are enabled\n\n### No Notifications\n- Check device notification settings for the app\n- Ensure \"Background Monitoring\" is enabled in Profile screen\n- Verify API key is correctly set\n\n### API Errors\n- Check internet connectivity\n- Verify Google API key is valid and has required permissions\n- Check wildfire prediction API endpoint availability"}, {"id": "BACKGROUND_TASKS_README.md_4", "file": "BACKGROUND_TASKS_README.md", "content": "## Technical Details\n\n- **Task Interval**: 10 minutes (600 seconds)\n- **Battery Optimization**: Uses efficient background fetch\n- **Error Handling**: Graceful fallbacks for API failures\n- **Data Validation**: Ensures all required data is available before prediction\n\n## Files Modified\n\n- `services/backgroundTasks.ts` - Main background task implementation\n- `app/_layout.tsx` - Background task initialization\n- `app/(tabs)/profile.tsx` - User controls and testing\n- `app.json` - Permissions and configuration\n\n## Dependencies Added\n\n- `expo-background-fetch` - Background task management\n- `expo-task-manager` - Task definition and execution\n- `expo-notifications` - Push notifications (already installed)"}, {"id": "eas.json_0", "file": "eas.json", "content": "================================================\n{\n  \"cli\": {\n    \"version\": \">= 5.9.1\"\n  },\n  \"build\": {\n    \"preview\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    }\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}"}, {"id": "LocationContext.tsx_0", "file": "LocationContext.tsx", "content": "================================================\nimport React, { createContext, useContext, useState } from 'react';\n\ntype Location = { latitude: number; longitude: number } | null;\n\nconst LocationContext = createContext<{\n  location: Location;\n  setLocation: (loc: Location) => void;\n}>({\n  location: null,\n  setLocation: () => {},\n});\n\nexport const useLocation = () => useContext(LocationContext);\n\nexport const LocationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [location, setLocation] = useState<Location>(null);\n  return (\n    <LocationContext.Provider value={{ location, setLocation }}>\n      {children}\n    </LocationContext.Provider>\n  );\n};"}, {"id": "package.json_0", "file": "package.json", "content": "================================================\n{\n  \"name\": \"bolt-expo-starter\",\n  \"main\": \"expo-router/entry\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"EXPO_NO_TELEMETRY=1 expo start\",\n    \"start\": \"expo start\",\n    \"build:web\": \"expo export --platform web\",\n    \"lint\": \"expo lint\",\n    \"android\": \"expo start --android\",\n    \"ios\": \"expo start --ios\"\n  },\n  \"dependencies\": {\n    \"@expo/vector-icons\": \"^14.1.0\",\n    \"@lucide/lab\": \"^0.1.2\",\n    \"@react-native-async-storage/async-storage\": \"2.1.2\",\n    \"@react-navigation/bottom-tabs\": \"^7.2.0\",\n    \"@react-navigation/native\": \"^7.0.14\",\n    \"@supabase/supabase-js\": \"^2.52.0\",\n    \"expo\": \"^53.0.20\",\n    \"expo-background-fetch\": \"~13.1.6\",\n    \"expo-blur\": \"~14.1.5\",\n    \"expo-build-properties\": \"~0.14.8\","}, {"id": "package.json_1", "file": "package.json", "content": "\"expo-blur\": \"~14.1.5\",\n    \"expo-build-properties\": \"~0.14.8\",\n    \"expo-camera\": \"~16.1.11\",\n    \"expo-constants\": \"~17.1.3\",\n    \"expo-font\": \"~13.3.2\",\n    \"expo-haptics\": \"~14.1.4\",\n    \"expo-linear-gradient\": \"~14.1.5\",\n    \"expo-linking\": \"~7.1.7\",\n    \"expo-location\": \"^18.1.6\",\n    \"expo-notifications\": \"^0.31.4\",\n    \"expo-router\": \"~5.1.4\",\n    \"expo-secure-store\": \"^14.2.3\",\n    \"expo-splash-screen\": \"~0.30.10\",\n    \"expo-status-bar\": \"~2.2.3\",\n    \"expo-symbols\": \"~0.4.5\",\n    \"expo-system-ui\": \"~5.0.10\",\n    \"expo-task-manager\": \"~13.1.6\",\n    \"expo-web-browser\": \"~14.2.0\",\n    \"lucide-react-native\": \"^0.475.0\",\n    \"mapbox-gl\": \"^3.13.0\",\n    \"react\": \"19.0.0\",\n    \"react-dom\": \"19.0.0\",\n    \"react-map-gl\": \"^8.0.4\",\n    \"react-native\": \"0.79.5\","}, {"id": "package.json_2", "file": "package.json", "content": "\"react-dom\": \"19.0.0\",\n    \"react-map-gl\": \"^8.0.4\",\n    \"react-native\": \"0.79.5\",\n    \"react-native-gesture-handler\": \"~2.24.0\",\n    \"react-native-google-places-autocomplete\": \"^2.5.7\",\n    \"react-native-maps\": \"1.20.1\",\n    \"react-native-paper\": \"^5.14.5\",\n    \"react-native-safe-area-context\": \"5.4.0\",\n    \"react-native-screens\": \"~4.11.1\",\n    \"react-native-svg\": \"15.11.2\",\n    \"react-native-url-polyfill\": \"^2.0.0\",\n    \"react-native-web\": \"^0.20.0\",\n    \"react-native-webview\": \"13.13.5\",\n    \"lottie-react-native\": \"7.2.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.25.2\",\n    \"@types/react\": \"~19.0.10\",\n    \"typescript\": \"~5.8.3\"\n  }\n}"}, {"id": "supabaseClient.ts_0", "file": "supabaseClient.ts", "content": "================================================\nimport { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst supabaseUrl = 'SUPABASE_URL_HERE';\nconst supabaseAnonKey = 'SUPABASE_ANON_KEY_HERE';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});"}, {"id": "tsconfig.json_0", "file": "tsconfig.json", "content": "================================================\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \".expo/types/**/*.ts\",\n    \"expo-env.d.ts\",\n    \"nativewind-env.d.ts\"\n  ]\n}"}, {"id": ".npmrc_0", "file": ".npmrc", "content": "================================================\nlegacy-peer-deps=true"}, {"id": ".prettierrc_0", "file": ".prettierrc", "content": "================================================\n{\n  \"useTabs\": false,\n  \"bracketSpacing\": true,\n  \"singleQuote\": true,\n  \"tabWidth\": 2\n}"}, {"id": "app/+not-found.tsx_0", "file": "app/+not-found.tsx", "content": "================================================\nimport { Link, Stack, router } from 'expo-router';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { supabase } from '../supabaseClient';\n\nexport default function NotFoundScreen() {\n  const handleGoHome = () => {\n    // Just go to the root, which will handle auth routing\n    router.replace('/');\n  };\n\n  return (\n    <>\n      <Stack.Screen options={{ title: 'Oops!' }} />\n      <View style={styles.container}>\n        <Text style={styles.text}>This screen doesn't exist.</Text>\n        <TouchableOpacity onPress={handleGoHome} style={styles.link}>\n          <Text>Go to home screen!</Text>\n        </TouchableOpacity>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,"}, {"id": "app/+not-found.tsx_1", "file": "app/+not-found.tsx", "content": "</View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: '600',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n});"}, {"id": "app/_layout.tsx_0", "file": "app/_layout.tsx", "content": "================================================\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect } from 'react';\nimport { useFrameworkReady } from '../hooks/useFrameworkReady';\nimport { LocationProvider } from '../LocationContext';\nimport { AuthProvider, useAuthContext } from '../contexts/AuthContext';\nimport LoadingScreen from '../components/LoadingScreen';\nimport { startBackgroundFetch } from '../services/backgroundTasks';\n\nfunction RootLayoutContent() {\n  const { loading, isAuthenticated } = useAuthContext();\n\n  useEffect(() => {\n    // Start background fetch when app is ready\n    const initBackgroundTasks = async () => {\n      try {\n        await startBackgroundFetch();\n        console.log('Background tasks initialized');"}, {"id": "app/_layout.tsx_1", "file": "app/_layout.tsx", "content": "await startBackgroundFetch();\n        console.log('Background tasks initialized');\n      } catch (error) {\n        console.error('Failed to initialize background tasks:', error);\n      }\n    };\n\n    if (!loading) {\n      initBackgroundTasks();\n    }\n  }, [loading]);\n\n  if (loading) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <LocationProvider>\n      <Stack screenOptions={{ headerShown: false }}>\n        {isAuthenticated ? (\n          <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n        ) : (\n          <Stack.Screen name=\"(auth)\" options={{ headerShown: false }} />\n        )}\n        <Stack.Screen name=\"+not-found\" />\n      </Stack>\n      <StatusBar style=\"auto\" />\n    </LocationProvider>\n  );\n}\n\nexport default function RootLayout() {"}, {"id": "app/_layout.tsx_2", "file": "app/_layout.tsx", "content": "</LocationProvider>\n  );\n}\n\nexport default function RootLayout() {\n  useFrameworkReady();\n\n  return (\n    <AuthProvider>\n      <RootLayoutContent />\n    </AuthProvider>\n  );\n}"}, {"id": "app/index.tsx_0", "file": "app/index.tsx", "content": "================================================\nimport { Redirect } from 'expo-router';\nimport { useAuthContext } from '../contexts/AuthContext';\nimport LoadingScreen from '../components/LoadingScreen';\n\nexport default function App() {\n  const { session, loading } = useAuthContext();\n\n  if (loading) {\n    return <LoadingScreen />;\n  }\n\n  // Redirect based on authentication state\n  if (session) {\n    return <Redirect href=\"/(tabs)\" />;\n  } else {\n    return <Redirect href=\"/(auth)/login\" />;\n  }\n}"}, {"id": "app/(auth)/_layout.tsx_0", "file": "app/(auth)/_layout.tsx", "content": "================================================\nimport { Stack } from 'expo-router';\n\nexport default function AuthLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"login\" />\n      <Stack.Screen name=\"signup\" />\n    </Stack>\n  );\n}"}, {"id": "app/(auth)/login.tsx_0", "file": "app/(auth)/login.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  SafeAreaView,\n  KeyboardAvoidingView,\n  Platform,\n  Alert,\n} from 'react-native';\nimport { Link, router } from 'expo-router';\nimport { Flame, Eye, EyeOff } from 'lucide-react-native';\nimport { useAuthContext } from '../../contexts/AuthContext';\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const { signIn } = useAuthContext();\n\n  const handleLogin = async () => {\n    if (!email || !password) {"}, {"id": "app/(auth)/login.tsx_1", "file": "app/(auth)/login.tsx", "content": "const handleLogin = async () => {\n    if (!email || !password) {\n      Alert.alert('Error', 'Please fill in all fields');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const { data, error } = await signIn(email, password);\n      if (error) throw error;\n      // User is signed in and session is persisted by supabase-js\n      router.replace('/(tabs)');\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : String(err);\n      Alert.alert('Sign In Error', errorMsg || 'An error occurred during sign in.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={styles.keyboardContainer}\n      >"}, {"id": "app/(auth)/login.tsx_2", "file": "app/(auth)/login.tsx", "content": "style={styles.keyboardContainer}\n      >\n        <View style={styles.content}>\n          <View style={styles.header}>\n            <View style={styles.iconContainer}>\n              <Flame size={48} color=\"#FF6B35\" />\n            </View>\n            <Text style={styles.title}>HazMap</Text>\n          </View>\n\n          <View style={styles.form}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              value={email}\n              onChangeText={setEmail}\n              placeholder=\"Enter your email\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n\n            <Text style={styles.label}>Password</Text>"}, {"id": "app/(auth)/login.tsx_3", "file": "app/(auth)/login.tsx", "content": "/>\n\n            <Text style={styles.label}>Password</Text>\n            <View style={styles.passwordContainer}>\n              <TextInput\n                style={styles.passwordInput}\n                value={password}\n                onChangeText={setPassword}\n                placeholder=\"Enter your password\"\n                placeholderTextColor=\"#666\"\n                secureTextEntry={!showPassword}\n              />\n              <TouchableOpacity\n                onPress={() => setShowPassword(p => !p)}\n                style={styles.passwordToggle}\n              >\n                {showPassword ? (\n                  <EyeOff size={20} color=\"#666\" />\n                ) : (\n                  <Eye size={20} color=\"#666\" />\n                )}\n              </TouchableOpacity>"}, {"id": "app/(auth)/login.tsx_4", "file": "app/(auth)/login.tsx", "content": ")}\n              </TouchableOpacity>\n            </View>\n\n            <TouchableOpacity\n              style={[styles.button, isLoading && styles.buttonDisabled]}\n              onPress={handleLogin}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? 'Signing In...' : 'Sign In'}\n              </Text>\n            </TouchableOpacity>\n\n            <View style={styles.linkContainer}>\n              <Text style={styles.linkText}>Don't have an account? </Text>\n              <Link href=\"/(auth)/signup\" style={styles.link}>\n                <Text style={styles.linkHighlight}>Sign Up</Text>\n              </Link>\n            </View>\n          </View>\n        </View>\n      </KeyboardAvoidingView>"}, {"id": "app/(auth)/login.tsx_5", "file": "app/(auth)/login.tsx", "content": "</View>\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0F0F0F',\n  },\n  keyboardContainer: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    padding: 24,\n    justifyContent: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 48,\n  },\n  iconContainer: {\n    position: 'relative',\n    marginBottom: 16,\n  },\n  alertIcon: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#888',\n    textAlign: 'center',\n  },\n  form: {\n    width: '100%',\n  },\n  label: {\n    fontSize: 16,"}, {"id": "app/(auth)/login.tsx_6", "file": "app/(auth)/login.tsx", "content": "textAlign: 'center',\n  },\n  form: {\n    width: '100%',\n  },\n  label: {\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 8,\n    fontWeight: '500',\n  },\n  input: {\n    backgroundColor: '#1A1A1A',\n    borderColor: '#333',\n    borderWidth: 1,\n    borderRadius: 12,\n    padding: 16,\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 24,\n  },\n  passwordContainer: {\n    position: 'relative',\n  },\n  passwordInput: {\n    backgroundColor: '#1A1A1A',\n    borderColor: '#333',\n    borderWidth: 1,\n    borderRadius: 12,\n    padding: 16,\n    paddingRight: 50,\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 24,\n  },\n  passwordToggle: {\n    position: 'absolute',\n    right: 16,\n    top: 16,\n    padding: 4,\n  },\n  button: {\n    backgroundColor: '#FF6B35',\n    borderRadius: 12,"}, {"id": "app/(auth)/login.tsx_7", "file": "app/(auth)/login.tsx", "content": "top: 16,\n    padding: 4,\n  },\n  button: {\n    backgroundColor: '#FF6B35',\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  buttonDisabled: {\n    opacity: 0.6,\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  linkContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  linkText: {\n    color: '#888',\n    fontSize: 16,\n  },\n  link: {\n    marginLeft: 4,\n  },\n  linkHighlight: {\n    color: '#FF6B35',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});"}, {"id": "app/(auth)/signup.tsx_0", "file": "app/(auth)/signup.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  SafeAreaView,\n  KeyboardAvoidingView,\n  Platform,\n  Alert,\n  ScrollView,\n} from 'react-native';\nimport { Link, router } from 'expo-router';\nimport { Flame, Eye, EyeOff } from 'lucide-react-native';\nimport { useAuthContext } from '../../contexts/AuthContext';\n\nexport default function SignUpScreen() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    role: 'citizen', // citizen, official, responder\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const { signUp } = useAuthContext();"}, {"id": "app/(auth)/signup.tsx_1", "file": "app/(auth)/signup.tsx", "content": "const [showPassword, setShowPassword] = useState(false);\n  const { signUp } = useAuthContext();\n\n  const handleSignUp = async () => {\n    if (!formData.name || !formData.email || !formData.password) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const { data, error } = await signUp(formData.email, formData.password, {\n        name: formData.name,\n        role: formData.role,\n      });\n      if (error) throw error;\n      // User is signed up and session is persisted by supabase-js\n      router.replace('/(tabs)');\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : String(err);\n      Alert.alert('Sign Up Error', errorMsg || 'An error occurred during sign up.');\n    } finally {"}, {"id": "app/(auth)/signup.tsx_2", "file": "app/(auth)/signup.tsx", "content": "} finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateFormData = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        style={styles.keyboardContainer}\n      >\n        <ScrollView contentContainerStyle={styles.content} keyboardShouldPersistTaps=\"handled\">\n          <View style={styles.header}>\n            <View style={styles.iconContainer}>\n              <Flame size={48} color=\"#FF6B35\" />\n            </View>\n            <Text style={styles.title}>HazMap</Text>\n          </View>\n\n          <View style={styles.form}>\n            <Text style={styles.label}>Name</Text>"}, {"id": "app/(auth)/signup.tsx_3", "file": "app/(auth)/signup.tsx", "content": "<View style={styles.form}>\n            <Text style={styles.label}>Name</Text>\n            <TextInput\n              style={styles.input}\n              value={formData.name}\n              onChangeText={text => updateFormData('name', text)}\n              placeholder=\"Enter your name\"\n              placeholderTextColor=\"#666\"\n              autoCapitalize=\"words\"\n            />\n\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              value={formData.email}\n              onChangeText={text => updateFormData('email', text)}\n              placeholder=\"Enter your email\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />"}, {"id": "app/(auth)/signup.tsx_4", "file": "app/(auth)/signup.tsx", "content": "keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n\n                        <Text style={styles.label}>Password</Text>\n            <View style={styles.passwordContainer}>\n              <TextInput\n                style={styles.passwordInput}\n                value={formData.password}\n                onChangeText={text => updateFormData('password', text)}\n                placeholder=\"Enter your password\"\n                placeholderTextColor=\"#666\"\n                secureTextEntry={!showPassword}\n              />\n              <TouchableOpacity\n                onPress={() => setShowPassword(p => !p)}\n                style={styles.passwordToggle}\n              >\n                {showPassword ? (\n                  <EyeOff size={20} color=\"#666\" />"}, {"id": "app/(auth)/signup.tsx_5", "file": "app/(auth)/signup.tsx", "content": "{showPassword ? (\n                  <EyeOff size={20} color=\"#666\" />\n                ) : (\n                  <Eye size={20} color=\"#666\" />\n                )}\n              </TouchableOpacity>\n            </View>\n            \n\n            <TouchableOpacity\n              style={[styles.button, isLoading && styles.buttonDisabled]}\n              onPress={handleSignUp}\n              disabled={isLoading}\n            >\n              <Text style={styles.buttonText}>\n                {isLoading ? 'Signing Up...' : 'Sign Up'}\n              </Text>\n            </TouchableOpacity>\n\n            <View style={styles.linkContainer}>\n              <Text style={styles.linkText}>Already have an account? </Text>\n              <Link href=\"/(auth)/login\" style={styles.link}>"}, {"id": "app/(auth)/signup.tsx_6", "file": "app/(auth)/signup.tsx", "content": "<Link href=\"/(auth)/login\" style={styles.link}>\n                <Text style={styles.linkHighlight}>Sign In</Text>\n              </Link>\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0F0F0F',\n  },\n  keyboardContainer: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    padding: 24,\n    justifyContent: 'center',\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 48,\n  },\n  iconContainer: {\n    position: 'relative',\n    marginBottom: 16,\n  },\n  alertIcon: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 8,"}, {"id": "app/(auth)/signup.tsx_7", "file": "app/(auth)/signup.tsx", "content": "title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#888',\n    textAlign: 'center',\n  },\n  form: {\n    width: '100%',\n  },\n  label: {\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 8,\n    fontWeight: '500',\n  },\n  input: {\n    backgroundColor: '#1A1A1A',\n    borderColor: '#333',\n    borderWidth: 1,\n    borderRadius: 12,\n    padding: 16,\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 24,\n  },\n  passwordContainer: {\n    position: 'relative',\n  },\n  passwordInput: {\n    backgroundColor: '#1A1A1A',\n    borderColor: '#333',\n    borderWidth: 1,\n    borderRadius: 12,\n    padding: 16,\n    paddingRight: 50,\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 24,\n  },"}, {"id": "app/(auth)/signup.tsx_8", "file": "app/(auth)/signup.tsx", "content": "paddingRight: 50,\n    fontSize: 16,\n    color: '#FFFFFF',\n    marginBottom: 24,\n  },\n  passwordToggle: {\n    position: 'absolute',\n    right: 16,\n    top: 16,\n    padding: 4,\n  },\n  button: {\n    backgroundColor: '#FF6B35',\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  buttonDisabled: {\n    opacity: 0.6,\n  },\n  buttonText: {\n    color: '#FFFFFF',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  linkContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  linkText: {\n    color: '#888',\n    fontSize: 16,\n  },\n  link: {\n    marginLeft: 4,\n  },\n  linkHighlight: {\n    color: '#FF6B35',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});"}, {"id": "app/(tabs)/_layout.tsx_0", "file": "app/(tabs)/_layout.tsx", "content": "================================================\nimport { Tabs } from 'expo-router';\nimport { \n  MapPin, \n  Wind, \n  Shield, \n  MessageSquare, \n  User \n} from 'lucide-react-native';\nimport { useAuthContext } from '../../contexts/AuthContext';\nimport { useRouter } from 'expo-router';\nimport { useEffect } from 'react';\n\nexport default function TabLayout() {\n  const { user, loading } = useAuthContext();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      router.replace('/(auth)/login');\n    }\n  }, [user, loading, router]);\n\n  if (!user && !loading) {\n    // Optionally render nothing while redirecting\n    return null;\n  }\n\n  return (\n    <Tabs\n      screenOptions={{\n        headerShown: false,\n        tabBarStyle: {\n          backgroundColor: '#1A1A1A',"}, {"id": "app/(tabs)/_layout.tsx_1", "file": "app/(tabs)/_layout.tsx", "content": "headerShown: false,\n        tabBarStyle: {\n          backgroundColor: '#1A1A1A',\n          borderTopColor: '#333',\n          borderTopWidth: 1,\n          height: 88,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n        tabBarActiveTintColor: '#FF6B35',\n        tabBarInactiveTintColor: '#666',\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '500',\n        },\n      }}>\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Map',\n          tabBarIcon: ({ size, color }) => (\n            <MapPin size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"air-quality\"\n        options={{\n          title: 'Air Quality',\n          tabBarIcon: ({ size, color }) => ("}, {"id": "app/(tabs)/_layout.tsx_2", "file": "app/(tabs)/_layout.tsx", "content": "options={{\n          title: 'Air Quality',\n          tabBarIcon: ({ size, color }) => (\n            <Wind size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"evacuation\"\n        options={{\n          title: 'Evacuation',\n          tabBarIcon: ({ size, color }) => (\n            <Shield size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"updates\"\n        options={{\n          title: 'Updates',\n          tabBarIcon: ({ size, color }) => (\n            <MessageSquare size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ size, color }) => ("}, {"id": "app/(tabs)/_layout.tsx_3", "file": "app/(tabs)/_layout.tsx", "content": "options={{\n          title: 'Profile',\n          tabBarIcon: ({ size, color }) => (\n            <User size={size} color={color} />\n          ),\n        }}\n      />\n    </Tabs>\n  );\n}"}, {"id": "app/(tabs)/air-quality.tsx_0", "file": "app/(tabs)/air-quality.tsx", "content": "================================================\nError reading file with 'cp1252': 'charmap' codec can't decode byte 0x8d in position 23810: character maps to <undefined>"}, {"id": "app/(tabs)/evacuation.tsx_0", "file": "app/(tabs)/evacuation.tsx", "content": "================================================\nError reading file with 'cp1252': 'charmap' codec can't decode byte 0x8d in position 22105: character maps to <undefined>"}, {"id": "app/(tabs)/index.tsx_0", "file": "app/(tabs)/index.tsx", "content": "================================================\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Platform,\n  FlatList,\n  TextInput,\n  ActivityIndicator,\n  Modal,\n  Pressable,\n  Animated,\n  Easing,\n} from 'react-native';\nimport * as Location from 'expo-location';\nimport { TriangleAlert as AlertTriangle, Flame, Shield, Navigation, RefreshCw, Eye, EyeOff, X, Crosshair } from 'lucide-react-native';\nimport MapView from 'react-native-maps';\n// import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport { useLocation } from '../../LocationContext';\nimport LottieView from 'lottie-react-native';\n\nconst GOOGLE_API_KEY = 'API_KEY_HERE';\n\nconst mapStyle = ["}, {"id": "app/(tabs)/index.tsx_1", "file": "app/(tabs)/index.tsx", "content": "const GOOGLE_API_KEY = 'API_KEY_HERE';\n\nconst mapStyle = [\n  { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\n  { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\n  { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },\n  {\n    featureType: 'administrative.locality',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#d59563' }],\n  },\n  {\n    featureType: 'poi',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#d59563' }],\n  },\n  {\n    featureType: 'poi.park',\n    elementType: 'geometry',\n    stylers: [{ color: '#263c3f' }],\n  },\n  {\n    featureType: 'poi.park',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#6b9a76' }],\n  },\n  {\n    featureType: 'road',\n    elementType: 'geometry',"}, {"id": "app/(tabs)/index.tsx_2", "file": "app/(tabs)/index.tsx", "content": "stylers: [{ color: '#6b9a76' }],\n  },\n  {\n    featureType: 'road',\n    elementType: 'geometry',\n    stylers: [{ color: '#38414e' }],\n  },\n  {\n    featureType: 'road',\n    elementType: 'geometry.stroke',\n    stylers: [{ color: '#212a37' }],\n  },\n  {\n    featureType: 'road',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#9ca5b3' }],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'geometry',\n    stylers: [{ color: '#746855' }],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'geometry.stroke',\n    stylers: [{ color: '#1f2835' }],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#f3d19c' }],\n  },\n  {\n    featureType: 'transit',\n    elementType: 'geometry',\n    stylers: [{ color: '#2f3948' }],\n  },"}, {"id": "app/(tabs)/index.tsx_3", "file": "app/(tabs)/index.tsx", "content": "featureType: 'transit',\n    elementType: 'geometry',\n    stylers: [{ color: '#2f3948' }],\n  },\n  {\n    featureType: 'transit.station',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#d59563' }],\n  },\n  {\n    featureType: 'water',\n    elementType: 'geometry',\n    stylers: [{ color: '#17263c' }],\n  },\n  {\n    featureType: 'water',\n    elementType: 'labels.text.fill',\n    stylers: [{ color: '#515c6d' }],\n  },\n  {\n    featureType: 'water',\n    elementType: 'labels.text.stroke',\n    stylers: [{ color: '#17263c' }],\n  },\n];\n\ninterface WildfireData {\n  id: string;\n  name: string;\n  latitude: number;\n  longitude: number;\n  containment: number;\n  acres: number;\n  severity: 'low' | 'moderate' | 'high' | 'extreme';\n  coordinates: Array<{ latitude: number; longitude: number }>;\n}"}, {"id": "app/(tabs)/index.tsx_4", "file": "app/(tabs)/index.tsx", "content": "coordinates: Array<{ latitude: number; longitude: number }>;\n}\n\ntype PlaceSuggestion = {\n  place_id: string;\n  description: string;\n};\n\ninterface EnvData {\n  temperature: number | null;\n  windSpeed: number | null;\n  humidity: number | null;\n  precipitation: number | null;\n  aqi: number | null;\n  pm25: number | null;\n  elevation: number | null;\n  aqiCategory: string | null;\n  aqiDisplay: string | null;\n  aqiPollutant: string | null;\n  aqiName: string | null;\n}\n\nexport default function MapScreen() {\n  const [wildfires, setWildfires] = useState<WildfireData[]>([]);\n  const [selectedFire, setSelectedFire] = useState<WildfireData | null>(null);\n  const [mapLayers, setMapLayers] = useState({\n    fires: true,\n    evacuation: true,\n    hazards: true,\n  });"}, {"id": "app/(tabs)/index.tsx_5", "file": "app/(tabs)/index.tsx", "content": "fires: true,\n    evacuation: true,\n    hazards: true,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const mapRef = useRef<MapView>(null);\n  const [search, setSearch] = useState('');\n  const [suggestions, setSuggestions] = useState<PlaceSuggestion[]>([]);\n  const [loadingSuggestions, setLoadingSuggestions] = useState(false);\n  const [envData, setEnvData] = useState<EnvData>({\n    temperature: null,\n    windSpeed: null,\n    humidity: null,\n    precipitation: null,\n    aqi: null,\n    pm25: null,\n    elevation: null,\n    aqiCategory: null,\n    aqiDisplay: null,\n    aqiPollutant: null,\n    aqiName: null,\n  });\n  const { location: sharedLocation, setLocation: setSharedLocation } = useLocation();\n  // Add state for wildfire risk prediction after envData"}, {"id": "app/(tabs)/index.tsx_6", "file": "app/(tabs)/index.tsx", "content": "// Add state for wildfire risk prediction after envData\n  const [wildfireRisk, setWildfireRisk] = useState<string | null>(null);\n  const [wildfireRiskLoading, setWildfireRiskLoading] = useState(false);\n  const [wildfireRiskModalVisible, setWildfireRiskModalVisible] = useState(false);\n  const [wildfireRiskFullResult, setWildfireRiskFullResult] = useState<any>(null);\n  const [mapRegion, setMapRegion] = useState({\n    latitude: 37.78825,\n    longitude: -122.4324,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421,\n  });\n\n  // Add helper to parse prediction string\n  function getParsedPrediction(pred: any) {\n    if (typeof pred === 'string') {\n      try {\n        const clean = pred.replace(/```json|```/g, '').trim();\n        return JSON.parse(clean);\n      } catch {\n        return null;"}, {"id": "app/(tabs)/index.tsx_7", "file": "app/(tabs)/index.tsx", "content": "return JSON.parse(clean);\n      } catch {\n        return null;\n      }\n    }\n    return pred;\n  }\n\n  // Helper to fetch pollutant concentrations (like air-quality.tsx)\n  const fetchPollutants = async (lat: number, lng: number) => {\n    try {\n      const airBody = {\n        location: { latitude: lat, longitude: lng },\n        languageCode: 'en',\n        universalAqi: true,\n        extraComputations: [\n          'POLLUTANT_CONCENTRATION',\n          'POLLUTANT_ADDITIONAL_INFO',\n        ],\n      };\n      const airRes = await fetch(`https://airquality.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(airBody),\n      });"}, {"id": "app/(tabs)/index.tsx_8", "file": "app/(tabs)/index.tsx", "content": "body: JSON.stringify(airBody),\n      });\n      const airJson = await airRes.json();\n      const pollutants = airJson?.pollutants || [];\n      return {\n        pm25: pollutants.find((p: any) => p.code === 'pm25' || p.code === 'PM2.5')?.concentration?.value ?? 0,\n        pm10: pollutants.find((p: any) => p.code === 'pm10' || p.code === 'PM10')?.concentration?.value ?? 0,\n        o3: pollutants.find((p: any) => p.code === 'o3' || p.code === 'O3')?.concentration?.value ?? 0,\n        no2: pollutants.find((p: any) => p.code === 'no2' || p.code === 'NO2')?.concentration?.value ?? 0,\n        so2: pollutants.find((p: any) => p.code === 'so2' || p.code === 'SO2')?.concentration?.value ?? 0,"}, {"id": "app/(tabs)/index.tsx_9", "file": "app/(tabs)/index.tsx", "content": "co: pollutants.find((p: any) => p.code === 'co' || p.code === 'CO')?.concentration?.value ?? 0,\n        aqi: airJson?.indexes?.[0]?.aqi ?? 0,\n      };\n    } catch (e) {\n      return { pm25: 0, pm10: 0, o3: 0, no2: 0, so2: 0, co: 0, aqi: 0 };\n    }\n  };\n\n  // Wildfire risk prediction fetcher\n  const fetchWildfireRisk = async (lat: number, lng: number, env: EnvData) => {\n    setWildfireRiskLoading(true);\n    setWildfireRisk(null);\n    setWildfireRiskFetched(false);\n    // Get pollutant concentrations\n    const pol = await fetchPollutants(lat, lng);\n    // Compose API query\n    const params = new URLSearchParams({\n      lat: lat.toString(),\n      lon: lng.toString(),\n      temperature: env.temperature?.toString() ?? '0',\n      humidity: env.humidity?.toString() ?? '0',"}, {"id": "app/(tabs)/index.tsx_10", "file": "app/(tabs)/index.tsx", "content": "humidity: env.humidity?.toString() ?? '0',\n      precipitation: env.precipitation?.toString() ?? '0',\n      windspeed: env.windSpeed?.toString() ?? '0',\n      aqi: pol.aqi?.toString() ?? '0',\n      elevation: env.elevation?.toString() ?? '0',\n      pm25: pol.pm25?.toString() ?? '0',\n      pm10: pol.pm10?.toString() ?? '0',\n      o3: pol.o3?.toString() ?? '0',\n      no2: pol.no2?.toString() ?? '0',\n      so2: pol.so2?.toString() ?? '0',\n      co: pol.co?.toString() ?? '0',\n    });\n    const apiUrl = `CUSTOM_API_ENDPOINT_HERE?${params.toString()}`;\n    console.log('Wildfire Risk API Query:', apiUrl);\n    try {\n      const res = await fetch(apiUrl);\n      const json = await res.json();\n      setWildfireRiskFullResult(json); // Store full result for modal"}, {"id": "app/(tabs)/index.tsx_11", "file": "app/(tabs)/index.tsx", "content": "setWildfireRiskFullResult(json); // Store full result for modal\n      let risk = json?.prediction?.prediction || json?.prediction || json?.result?.risk || 'Unknown';\n      // Try to extract just the risk string (e.g., Moderate, High, Low)\n      if (typeof risk === 'string') {\n        const match = risk.match(/\"prediction\"\\s*:\\s*\"(.*?)\"/);\n        if (match) risk = match[1];\n        else if (risk.startsWith('\"') && risk.endsWith('\"')) risk = risk.slice(1, -1);\n      }\n      setWildfireRisk(risk);\n      setWildfireRiskFetched(true);\n    } catch (e) {\n      setWildfireRisk('Unknown');\n      setWildfireRiskFullResult(null);\n      setWildfireRiskFetched(false);\n    }\n    setWildfireRiskLoading(false);\n  };\n\n  // Call wildfire risk prediction when location changes or recenters"}, {"id": "app/(tabs)/index.tsx_12", "file": "app/(tabs)/index.tsx", "content": "};\n\n  // Call wildfire risk prediction when location changes or recenters\n  const updateWildfireRisk = async (lat: number, lng: number, env: EnvData) => {\n    await fetchWildfireRisk(lat, lng, env);\n  };\n\n  // Refactor fetchEnvData to return the new data\n  const fetchEnvData = async (lat: number, lng: number) => {\n    // Elevation\n    const elevRes = await fetch(`https://maps.googleapis.com/maps/api/elevation/json?locations=${lat},${lng}&key=${GOOGLE_API_KEY}`);\n    const elevJson = await elevRes.json();\n    const elevation = elevJson.results?.[0]?.elevation ?? null;\n\n    // Air Quality (PM2.5, AQI)\n    let aqi = null;\n    let pm25 = null;\n    let aqiCategory = null;\n    let aqiDisplay = null;\n    let aqiPollutant = null;\n    let aqiName = null;\n    try {\n      const airBody = {"}, {"id": "app/(tabs)/index.tsx_13", "file": "app/(tabs)/index.tsx", "content": "let aqiPollutant = null;\n    let aqiName = null;\n    try {\n      const airBody = {\n        location: { latitude: lat, longitude: lng },\n        languageCode: 'en',\n        universalAqi: true\n      };\n      const airRes = await fetch(`https://airquality.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(airBody),\n      });\n      const airJson = await airRes.json();\n      const aqiObj = airJson?.indexes?.[0];\n      aqi = aqiObj?.aqi ?? null;\n      aqiDisplay = aqiObj?.aqiDisplay ?? null;\n      aqiCategory = aqiObj?.category ?? null;\n      aqiPollutant = aqiObj?.dominantPollutant ?? null;\n      aqiName = aqiObj?.displayName ?? null;"}, {"id": "app/(tabs)/index.tsx_14", "file": "app/(tabs)/index.tsx", "content": "aqiName = aqiObj?.displayName ?? null;\n      pm25 = airJson?.pollutants?.find((p: any) => p.code === 'pm25' || p.code === 'PM2.5')?.concentration?.value ?? null;\n    } catch (e) { }\n\n    // Weather (temperature, wind, humidity, precipitation)\n    let temperature = null, windSpeed = null, humidity = null, precipitation = null;\n    try {\n      const weatherUrl = `https://weather.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}&location.latitude=${lat}&location.longitude=${lng}`;\n      const weatherRes = await fetch(weatherUrl);\n      const weatherText = await weatherRes.text();\n      let weatherJson: any = {};\n      try {\n        weatherJson = JSON.parse(weatherText);\n      } catch (e) {}"}, {"id": "app/(tabs)/index.tsx_15", "file": "app/(tabs)/index.tsx", "content": "try {\n        weatherJson = JSON.parse(weatherText);\n      } catch (e) {}\n      console.log('Weather API raw output:', weatherJson); // Log full weatherJson\n      const temp = weatherJson?.temperature?.degrees ?? null;\n      const wind = weatherJson?.wind?.speed?.value ?? null;\n      const humid = weatherJson?.relativeHumidity ?? null;\n      // Precipitation: use probability.percent if available, else qpf.quantity\n      let precip = null;\n      if (weatherJson && weatherJson.precipitation && weatherJson.precipitation.probability && weatherJson.precipitation.probability.percent != null) {\n        precip = weatherJson.precipitation.probability.percent;"}, {"id": "app/(tabs)/index.tsx_16", "file": "app/(tabs)/index.tsx", "content": "precip = weatherJson.precipitation.probability.percent;\n      } else if (weatherJson && weatherJson.precipitation && weatherJson.precipitation.qpf && weatherJson.precipitation.qpf.quantity != null) {\n        precip = weatherJson.precipitation.qpf.quantity;\n      }\n      console.log('Precipitation used for wildfire risk:', precip);\n      temperature = temp;\n      windSpeed = wind;\n      humidity = humid;\n      precipitation = precip;\n    } catch (e) { }\n\n    const newEnv = { temperature, windSpeed, humidity, precipitation, aqi, pm25, elevation, aqiCategory, aqiDisplay, aqiPollutant, aqiName };\n    setEnvData(newEnv);\n    return newEnv;\n  };\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();"}, {"id": "app/(tabs)/index.tsx_17", "file": "app/(tabs)/index.tsx", "content": "(async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        return;\n      }\n\n      let currentLocation = await Location.getCurrentPositionAsync({});\n      setSharedLocation({\n        latitude: currentLocation.coords.latitude,\n        longitude: currentLocation.coords.longitude,\n      });\n\n      if (mapRef.current) {\n        const { latitude, longitude } = currentLocation.coords;\n        const radiusInMeters = 5000; // 5km\n\n        // Rough calculation for deltas\n        const latitudeDelta = radiusInMeters / 111320; // Meters in one degree of latitude\n        const longitudeDelta = radiusInMeters / (111320 * Math.cos(latitude * (Math.PI / 180)));\n\n        mapRef.current.animateToRegion({\n          latitude,"}, {"id": "app/(tabs)/index.tsx_18", "file": "app/(tabs)/index.tsx", "content": "mapRef.current.animateToRegion({\n          latitude,\n          longitude,\n          latitudeDelta,\n          longitudeDelta,\n        });\n        const env = await fetchEnvData(latitude, longitude);\n        await updateWildfireRisk(latitude, longitude, env);\n      }\n    })();\n\n    loadWildfireData();\n  }, []);\n\n  // Update map region when shared location changes\n  useEffect(() => {\n    if (sharedLocation?.latitude && sharedLocation?.longitude) {\n      const { latitude, longitude } = sharedLocation;\n      const radiusInMeters = 5000;\n      const latitudeDelta = radiusInMeters / 111320;\n      const longitudeDelta = radiusInMeters / (111320 * Math.cos(latitude * (Math.PI / 180)));\n      \n      setMapRegion({\n        latitude,\n        longitude,\n        latitudeDelta,"}, {"id": "app/(tabs)/index.tsx_19", "file": "app/(tabs)/index.tsx", "content": "setMapRegion({\n        latitude,\n        longitude,\n        latitudeDelta,\n        longitudeDelta,\n      });\n    }\n  }, [sharedLocation]);\n\n  const loadWildfireData = async () => {\n    setIsLoading(true);\n    // Simulate API call to NASA FIRMS or other wildfire data sources\n    setTimeout(() => {\n      const mockData: WildfireData[] = [\n        {\n          id: '1',\n          name: 'Palisades Fire',\n          latitude: 34.0522,\n          longitude: -118.2437,\n          containment: 23,\n          acres: 15420,\n          severity: 'extreme',\n          coordinates: [\n            { latitude: 34.0522, longitude: -118.2537 },\n            { latitude: 34.0622, longitude: -118.2337 },\n            { latitude: 34.0422, longitude: -118.2337 },"}, {"id": "app/(tabs)/index.tsx_20", "file": "app/(tabs)/index.tsx", "content": "{ latitude: 34.0422, longitude: -118.2337 },\n            { latitude: 34.0422, longitude: -118.2537 },\n          ],\n        },\n        {\n          id: '2',\n          name: 'Angeles Fire',\n          latitude: 34.1022,\n          longitude: -118.1937,\n          containment: 67,\n          acres: 8930,\n          severity: 'moderate',\n          coordinates: [\n            { latitude: 34.1022, longitude: -118.2037 },\n            { latitude: 34.1122, longitude: -118.1837 },\n            { latitude: 34.0922, longitude: -118.1837 },\n            { latitude: 34.0922, longitude: -118.2037 },\n          ],\n        },\n      ];\n      setWildfires(mockData);\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {"}, {"id": "app/(tabs)/index.tsx_21", "file": "app/(tabs)/index.tsx", "content": "}, 1000);\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'extreme': return '#DC2626';\n      case 'high': return '#EA580C';\n      case 'moderate': return '#D97706';\n      case 'low': return '#65A30D';\n      default: return '#6B7280';\n    }\n  };\n\n  const toggleLayer = (layer: keyof typeof mapLayers) => {\n    setMapLayers(prev => ({ ...prev, [layer]: !prev[layer] }));\n  };\n\n  // Custom autocomplete fetch\n  const fetchSuggestions = async (text: string) => {\n    setSearch(text);\n    if (text.length < 2) {\n      setSuggestions([]);\n      return;\n    }\n    setLoadingSuggestions(true);\n    try {\n      const url = `https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${encodeURIComponent(\n        text"}, {"id": "app/(tabs)/index.tsx_22", "file": "app/(tabs)/index.tsx", "content": "text\n      )}&key=${GOOGLE_API_KEY}&language=en`;\n      const res = await fetch(url);\n      const json = await res.json();\n      setSuggestions(json.predictions || []);\n    } catch (e) {\n      setSuggestions([]);\n    }\n    setLoadingSuggestions(false);\n  };\n\n  const fetchPlaceDetails = async (placeId: string) => {\n    const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&key=${GOOGLE_API_KEY}`;\n    const res = await fetch(url);\n    const json = await res.json();\n    return json.result;\n  };\n\n  const [wildfireRiskFetched, setWildfireRiskFetched] = useState(false);\n\n  // Animated value for button width\n  const riskButtonAnim = useRef(new Animated.Value(44)).current;\n  const riskButtonTargetWidth = wildfireRiskFetched && wildfireRisk ? 150 : 44;"}, {"id": "app/(tabs)/index.tsx_23", "file": "app/(tabs)/index.tsx", "content": "const riskButtonTargetWidth = wildfireRiskFetched && wildfireRisk ? 150 : 44;\n\n  // Animate button width when risk is fetched\n  useEffect(() => {\n    Animated.timing(riskButtonAnim, {\n      toValue: riskButtonTargetWidth,\n      duration: 350,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: false,\n    }).start();\n  }, [riskButtonTargetWidth]);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>HazMap</Text>\n        <View\n          style={styles.refreshButton}\n        >\n          <Flame size={20} color=\"#FF6B35\" />\n        </View>\n      </View>\n\n      {/* Search Bar */}\n      <View style={styles.searchBarContainer}>\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>"}, {"id": "app/(tabs)/index.tsx_24", "file": "app/(tabs)/index.tsx", "content": "<View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <TextInput\n            value={search}\n            onChangeText={fetchSuggestions}\n            placeholder=\"Search for a place\"\n            placeholderTextColor=\"#888\"\n            style={{\n              flex: 1,\n              backgroundColor: '#222',\n              color: '#fff',\n              borderRadius: 8,\n              paddingHorizontal: 10,\n              height: 40,\n              marginBottom: 2,\n            }}\n          />\n          {search.length > 0 && (\n            <TouchableOpacity\n              onPress={() => {\n                setSearch('');\n                setSuggestions([]);\n              }}\n              style={{ position: 'absolute', right: 10 }}\n            >"}, {"id": "app/(tabs)/index.tsx_25", "file": "app/(tabs)/index.tsx", "content": "}}\n              style={{ position: 'absolute', right: 10 }}\n            >\n              <X size={20} color=\"#fff\" />\n            </TouchableOpacity>\n          )}\n        </View>\n        {loadingSuggestions && <ActivityIndicator color=\"#fff\" style={{ marginVertical: 4 }} />}\n        {search.length >= 3 && (\n          <FlatList\n            data={suggestions}\n            keyExtractor={(item) => item.place_id}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                onPress={async () => {\n                  const details = await fetchPlaceDetails(item.place_id);\n                  setSearch(item.description);\n                  setSuggestions([]);\n                  if (\n                    details &&\n                    details.geometry &&"}, {"id": "app/(tabs)/index.tsx_26", "file": "app/(tabs)/index.tsx", "content": "if (\n                    details &&\n                    details.geometry &&\n                    details.geometry.location &&\n                    typeof details.geometry.location.lat === 'number' &&\n                    typeof details.geometry.location.lng === 'number'\n                  ) {\n                    const { lat, lng } = details.geometry.location;\n                    const radiusInMeters = 5000;\n                    const latitudeDelta = radiusInMeters / 111320;\n                    const longitudeDelta = radiusInMeters / (111320 * Math.cos(lat * (Math.PI / 180)));\n                    if (mapRef.current) {\n                      mapRef.current.animateToRegion({\n                        latitude: lat,\n                        longitude: lng,"}, {"id": "app/(tabs)/index.tsx_27", "file": "app/(tabs)/index.tsx", "content": "latitude: lat,\n                        longitude: lng,\n                        latitudeDelta,\n                        longitudeDelta,\n                      });\n                      setSharedLocation({ latitude: lat, longitude: lng });\n                      const env = await fetchEnvData(lat, lng);\n                      await updateWildfireRisk(lat, lng, env);\n                    }\n                  } else {\n                    alert('Could not get location details for this place.');\n                  }\n                }}\n                style={{ padding: 10, backgroundColor: '#222', borderBottomWidth: 1, borderBottomColor: '#333' }}\n              >\n                <Text style={{ color: '#fff' }}>{item.description}</Text>\n              </TouchableOpacity>"}, {"id": "app/(tabs)/index.tsx_28", "file": "app/(tabs)/index.tsx", "content": "</TouchableOpacity>\n            )}\n            style={{ backgroundColor: '#222', zIndex: 10, maxHeight: 180, borderRadius: 8 }}\n            keyboardShouldPersistTaps=\"handled\"\n          />\n        )}\n      </View>\n\n      {/* Environmental Data Bar */}\n      <ScrollView style={styles.envBarScroll} horizontal showsHorizontalScrollIndicator={false}>\n        <View style={styles.envBarCompact}>\n          <View style={styles.envBox}><Text style={styles.envBoxText}>Temp: {envData.temperature !== null ? `${envData.temperature}\u00c2\u00b0C` : '--'}</Text></View>\n          <View style={styles.envBox}><Text style={styles.envBoxText}>Wind: {envData.windSpeed !== null ? `${envData.windSpeed} m/s` : '--'}</Text></View>"}, {"id": "app/(tabs)/index.tsx_29", "file": "app/(tabs)/index.tsx", "content": "<View style={styles.envBox}><Text style={styles.envBoxText}>Humidity: {envData.humidity !== null ? `${envData.humidity}%` : '--'}</Text></View>\n          <View style={styles.envBox}><Text style={styles.envBoxText}>Precip: {envData.precipitation !== null ? `${envData.precipitation} mm` : '--'}</Text></View>\n          <View style={styles.envBox}><Text style={styles.envBoxText}>AQI: {envData.aqiDisplay || '--'} ({envData.aqiCategory || '--'})</Text></View>\n          <View style={styles.envBox}><Text style={styles.envBoxText}>Main: {envData.aqiPollutant || '--'}</Text></View>\n          <View style={styles.envBox}><Text style={styles.envBoxText}>Elev: {envData.elevation !== null ? `${Math.round(envData.elevation)} m` : '--'}</Text></View>\n        </View>\n      </ScrollView>"}, {"id": "app/(tabs)/index.tsx_30", "file": "app/(tabs)/index.tsx", "content": "</View>\n      </ScrollView>\n\n      <View style={styles.mapContainer}>\n        <MapView\n          ref={mapRef}\n          style={StyleSheet.absoluteFill}\n          region={mapRegion}\n          // customMapStyle={mapStyle} // Remove this line for hybrid\n          showsUserLocation={true}\n          showsMyLocationButton={false}\n          mapType=\"hybrid\" // Set to hybrid for satellite + labels\n        />\n        {/* AQI-based graphical overlay */}\n        {envData.aqi && envData.aqi > 50 ? (\n          <LottieView\n            source={require('../../assets/lottie/birds.json')}\n            autoPlay\n            loop\n            style={{\n              position: 'absolute',\n              top: 20, // Position just below the environmental data bar\n              left: 0,"}, {"id": "app/(tabs)/index.tsx_31", "file": "app/(tabs)/index.tsx", "content": "top: 20, // Position just below the environmental data bar\n              left: 0,\n              right: 0,\n              height: '48%', // 20% larger than 40% (40% * 1.2 = 48%)\n              zIndex: 10,\n            }}\n          />\n        ) : envData.aqi && envData.aqi <= 50 ? (\n          <LottieView\n            source={require('../../assets/lottie/smoke.json')}\n            autoPlay\n            loop\n            style={{\n              position: 'absolute',\n              top: 20, // Position just below the environmental data bar\n              left: 0,\n              right: 0,\n              height: '40%', // Take up upper half of the map\n              zIndex: 10,\n            }}\n          />\n        ) : null}\n        {/* Environmental Bar - top right overlay */}"}, {"id": "app/(tabs)/index.tsx_32", "file": "app/(tabs)/index.tsx", "content": "}}\n          />\n        ) : null}\n        {/* Environmental Bar - top right overlay */}\n        <ScrollView\n          style={styles.envBarOverlay}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.envBarOverlayContent}\n        >\n          <View style={styles.envBarCompactOverlay}>\n            <View style={styles.envBox}><Text style={styles.envBoxText}>Temp: {envData.temperature !== null ? `${envData.temperature}\u00c2\u00b0C` : '--'}</Text></View>\n            <View style={styles.envBox}><Text style={styles.envBoxText}>Wind: {envData.windSpeed !== null ? `${envData.windSpeed} m/s` : '--'}</Text></View>"}, {"id": "app/(tabs)/index.tsx_33", "file": "app/(tabs)/index.tsx", "content": "<View style={styles.envBox}><Text style={styles.envBoxText}>Humidity: {envData.humidity !== null ? `${envData.humidity}%` : '--'}</Text></View>\n            <View style={styles.envBox}><Text style={styles.envBoxText}>Precip: {envData.precipitation !== null ? `${envData.precipitation} mm` : '--'}</Text></View>\n            <View style={styles.envBox}><Text style={styles.envBoxText}>AQI: {envData.aqiDisplay || '--'} ({envData.aqiCategory || '--'})</Text></View>\n            <View style={styles.envBox}><Text style={styles.envBoxText}>Main: {envData.aqiPollutant || '--'}</Text></View>\n            <View style={styles.envBox}><Text style={styles.envBoxText}>Elev: {envData.elevation !== null ? `${Math.round(envData.elevation)} m` : '--'}</Text></View>\n          </View>"}, {"id": "app/(tabs)/index.tsx_34", "file": "app/(tabs)/index.tsx", "content": "</View>\n        </ScrollView>\n        {/* Custom recenter button */}\n        <TouchableOpacity\n          style={styles.recenterButton}\n          onPress={async () => {\n            let currentLocation = await Location.getCurrentPositionAsync({});\n            if (currentLocation && currentLocation.coords) {\n              const { latitude, longitude } = currentLocation.coords;\n              setSharedLocation({ latitude, longitude });\n              const env = await fetchEnvData(latitude, longitude);\n              await updateWildfireRisk(latitude, longitude, env);\n              setSearch('');\n              setSuggestions([]);\n              if (mapRef.current) {\n                const radiusInMeters = 5000;\n                const latitudeDelta = radiusInMeters / 111320;"}, {"id": "app/(tabs)/index.tsx_35", "file": "app/(tabs)/index.tsx", "content": "const latitudeDelta = radiusInMeters / 111320;\n                const longitudeDelta = radiusInMeters / (111320 * Math.cos(latitude * (Math.PI / 180)));\n                mapRef.current.animateToRegion({\n                  latitude,\n                  longitude,\n                  latitudeDelta,\n                  longitudeDelta,\n                });\n              }\n            }\n          }}\n        >\n          <Crosshair size={22} color=\"#FF6B35\" />\n        </TouchableOpacity>\n        {/* Add wildfire risk button to the left of recenter button */}\n        <Animated.View style={{ position: 'absolute', right: 78, bottom: 18, alignItems: 'center', zIndex: 21, width: riskButtonAnim }}>\n          <TouchableOpacity\n            style={{\n              backgroundColor: '#222',"}, {"id": "app/(tabs)/index.tsx_36", "file": "app/(tabs)/index.tsx", "content": "<TouchableOpacity\n            style={{\n              backgroundColor: '#222',\n              borderRadius: 20,\n              paddingVertical: 8,\n              paddingHorizontal: wildfireRiskFetched && wildfireRisk ? 18 : 8,\n              elevation: 4,\n              borderWidth: 2,\n              borderColor: '#FF6B35',\n              alignItems: 'center',\n              justifyContent: 'center',\n              flexDirection: 'row',\n              width: '100%',\n              minWidth: 44,\n              height: 44,\n              overflow: 'hidden',\n            }}\n            disabled={wildfireRiskLoading}\n            onPress={async () => {\n              if (wildfireRiskFetched && wildfireRiskFullResult) {\n                setWildfireRiskModalVisible(true);"}, {"id": "app/(tabs)/index.tsx_37", "file": "app/(tabs)/index.tsx", "content": "setWildfireRiskModalVisible(true);\n              } else if (!wildfireRiskLoading && sharedLocation?.latitude && sharedLocation?.longitude) {\n                const env = await fetchEnvData(sharedLocation.latitude, sharedLocation.longitude);\n                await updateWildfireRisk(sharedLocation.latitude, sharedLocation.longitude, env);\n                // Modal will open on next tap after fetch completes\n              }\n            }}\n          >\n            {wildfireRiskLoading ? (\n              <ActivityIndicator color=\"#FF6B35\" />\n            ) : (\n              <>\n                <Flame size={22} color=\"#FF6B35\" style={{ marginRight: wildfireRiskFetched && wildfireRisk ? 10 : 0 }} />\n                {wildfireRiskFetched && wildfireRisk && ("}, {"id": "app/(tabs)/index.tsx_38", "file": "app/(tabs)/index.tsx", "content": "{wildfireRiskFetched && wildfireRisk && (\n                  <Animated.Text\n                    style={{\n                      color: '#FF6B35',\n                      fontWeight: 'bold',\n                      fontSize: 15,\n                      opacity: riskButtonAnim.interpolate({ inputRange: [44, 150], outputRange: [0, 1] }),\n                      transform: [{ translateY: riskButtonAnim.interpolate({ inputRange: [44, 150], outputRange: [10, 0] }) }],\n                      letterSpacing: 0.5,\n                    }}\n                    numberOfLines={1}\n                  >\n                    {wildfireRisk}\n                  </Animated.Text>\n                )}\n              </>\n            )}\n          </TouchableOpacity>\n        </Animated.View>\n        {selectedFire && ("}, {"id": "app/(tabs)/index.tsx_39", "file": "app/(tabs)/index.tsx", "content": ")}\n          </TouchableOpacity>\n        </Animated.View>\n        {selectedFire && (\n          <View style={styles.fireDetails}>\n            <View style={styles.fireDetailsHeader}>\n              <View style={styles.fireDetailsInfo}>\n                <Text style={styles.fireDetailsName}> {selectedFire.name}</Text>\n                <Text style={styles.fireDetailsStats}>\n                  {selectedFire.acres.toLocaleString()} acres \u00e2\u20ac\u00a2 {selectedFire.containment}% contained\n                </Text>\n              </View>\n              <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(selectedFire.severity) }]}>\n                <Text style={styles.severityText}>{selectedFire.severity.toUpperCase()}</Text>\n              </View>\n            </View>"}, {"id": "app/(tabs)/index.tsx_40", "file": "app/(tabs)/index.tsx", "content": "</View>\n            </View>\n            \n            <View style={styles.fireActions}>\n              <TouchableOpacity style={styles.actionButton}>\n                <Shield size={16} color=\"#22C55E\" />\n                <Text style={styles.actionText}>Evacuation Info</Text>\n              </TouchableOpacity>\n              \n              <TouchableOpacity style={styles.actionButton}>\n                <Navigation size={16} color=\"#3B82F6\" />\n                <Text style={styles.actionText}>Get Directions</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n      </View>\n\n      {/* Add Modal for wildfire risk result */}\n      <Modal\n        visible={wildfireRiskModalVisible}\n        transparent\n        animationType=\"fade\""}, {"id": "app/(tabs)/index.tsx_41", "file": "app/(tabs)/index.tsx", "content": "visible={wildfireRiskModalVisible}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={() => setWildfireRiskModalVisible(false)}\n      >\n        <View style={{ flex: 1, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'center', alignItems: 'center' }}>\n          <View style={{ backgroundColor: '#23272F', borderRadius: 20, padding: 36, maxWidth: 480, width: '92%', maxHeight: 520, shadowColor: '#000', shadowOffset: { width: 0, height: 8 }, shadowOpacity: 0.25, shadowRadius: 16, elevation: 12, borderWidth: 1, borderColor: '#333' }}>\n            <Text style={{ color: '#fff', fontWeight: 'bold', fontSize: 22, marginBottom: 10, textAlign: 'center', letterSpacing: 0.5 }}>Wildfire Risk Prediction</Text>"}, {"id": "app/(tabs)/index.tsx_42", "file": "app/(tabs)/index.tsx", "content": "<Text style={{ color: '#FF6B35', fontWeight: 'bold', fontSize: 20, marginBottom: 12, textAlign: 'center', letterSpacing: 1 }}>{getParsedPrediction(wildfireRiskFullResult?.prediction)?.prediction || wildfireRisk || '--'}</Text>\n            <ScrollView style={{ flexGrow: 0 }} contentContainerStyle={{ paddingBottom: 8 }} showsVerticalScrollIndicator={true}>\n              {getParsedPrediction(wildfireRiskFullResult?.prediction)?.reasoning ? (\n                <Text style={{ color: '#E5E7EB', fontSize: 15, lineHeight: 22, textAlign: 'left' }}>{getParsedPrediction(wildfireRiskFullResult?.prediction).reasoning}</Text>\n              ) : (\n                !getParsedPrediction(wildfireRiskFullResult?.prediction) && wildfireRiskFullResult?.prediction && ("}, {"id": "app/(tabs)/index.tsx_43", "file": "app/(tabs)/index.tsx", "content": "<Text style={{ color: '#E5E7EB', fontSize: 15, lineHeight: 22, textAlign: 'left' }}>{wildfireRiskFullResult.prediction.replace(/```json|```/g, '').trim()}</Text>\n                )\n              )}\n            </ScrollView>\n            <Pressable\n              style={{ marginTop: 8, alignSelf: 'center', backgroundColor: '#FF6B35', borderRadius: 10, paddingVertical: 10, paddingHorizontal: 36, shadowColor: '#FF6B35', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.18, shadowRadius: 4, elevation: 4 }}\n              onPress={() => setWildfireRiskModalVisible(false)}\n            >\n              <Text style={{ color: '#fff', fontWeight: 'bold', fontSize: 16, letterSpacing: 0.5 }}>Close</Text>\n            </Pressable>\n          </View>\n        </View>\n      </Modal>"}, {"id": "app/(tabs)/index.tsx_44", "file": "app/(tabs)/index.tsx", "content": "</Pressable>\n          </View>\n        </View>\n      </Modal>\n\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0F0F0F',\n    paddingTop: 30,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    paddingTop: Platform.OS === 'ios' ? 8 : 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  refreshButton: {\n    padding: 8,\n  },\n  searchBarContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 8,\n  },\n  layerControls: {\n    paddingHorizontal: 16,\n    paddingBottom: 8,\n  },\n  layerButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 20,"}, {"id": "app/(tabs)/index.tsx_45", "file": "app/(tabs)/index.tsx", "content": "alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 20,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  layerButtonActive: {\n    backgroundColor: '#FF6B35',\n    borderColor: '#FF6B35',\n  },\n  layerText: {\n    color: '#666',\n    fontSize: 12,\n    fontWeight: '500',\n    marginLeft: 4,\n  },\n  layerTextActive: {\n    color: '#FFFFFF',\n  },\n  mapContainer: {\n    flex: 1,\n    position: 'relative',\n  },\n  mapPlaceholder: {\n    flex: 1,\n    backgroundColor: '#1A1A1A',\n    margin: 16,\n    borderRadius: 12,\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  mapPlaceholderText: {\n    color: '#FFFFFF',\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },"}, {"id": "app/(tabs)/index.tsx_46", "file": "app/(tabs)/index.tsx", "content": "color: '#FFFFFF',\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  mapPlaceholderSubtext: {\n    color: '#888',\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  locationInfo: {\n    backgroundColor: '#2A2A2A',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 20,\n  },\n  locationText: {\n    color: '#FFFFFF',\n    fontSize: 12,\n    fontFamily: 'monospace',\n  },\n  firesList: {\n    width: '100%',\n    maxHeight: 200,\n  },\n  fireItem: {\n    backgroundColor: '#2A2A2A',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  fireItemSelected: {\n    borderColor: '#FF6B35',\n    backgroundColor: '#2A1A1A',\n  },\n  fireHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },"}, {"id": "app/(tabs)/index.tsx_47", "file": "app/(tabs)/index.tsx", "content": "},\n  fireHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  fireMarker: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  fireInfo: {\n    flex: 1,\n  },\n  fireName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 2,\n  },\n  fireStats: {\n    fontSize: 12,\n    color: '#888',\n  },\n  severityBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 8,\n  },\n  severityText: {\n    color: '#FFFFFF',\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  fireDetails: {\n    position: 'absolute',\n    bottom: 16,\n    left: 16,\n    right: 16,\n    backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,"}, {"id": "app/(tabs)/index.tsx_48", "file": "app/(tabs)/index.tsx", "content": "backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  fireDetailsHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  fireDetailsInfo: {\n    flex: 1,\n  },\n  fireDetailsName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 4,\n  },\n  fireDetailsStats: {\n    fontSize: 14,\n    color: '#888',\n  },\n  fireActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#2A2A2A',\n    borderRadius: 8,\n    padding: 12,\n    gap: 8,\n  },\n  actionText: {\n    color: '#FFFFFF',\n    fontSize: 14,"}, {"id": "app/(tabs)/index.tsx_49", "file": "app/(tabs)/index.tsx", "content": "padding: 12,\n    gap: 8,\n  },\n  actionText: {\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  alertBanner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    padding: 16,\n    gap: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#333',\n  },\n  alertText: {\n    flex: 1,\n    color: '#FFFFFF',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  envBar: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    //backgroundColor: '#1A1A1A',\n    paddingVertical: 10,\n    borderTopWidth: 1,\n    borderTopColor: '#333',\n    minWidth: 600,\n    paddingHorizontal: 12,\n    gap: 18,\n  },\n  envBarScroll: {\n    //backgroundColor: '#1A1A1A',\n    borderTopWidth: 1,\n    borderTopColor: '#333',"}, {"id": "app/(tabs)/index.tsx_50", "file": "app/(tabs)/index.tsx", "content": "//backgroundColor: '#1A1A1A',\n    borderTopWidth: 1,\n    borderTopColor: '#333',\n    position: 'absolute',\n    bottom: 0,\n    paddingTop: 10,\n    paddingBottom:15,\n  },\n  envBarText: {\n    color: '#fff',\n    fontSize: 13,\n    fontWeight: 'bold',\n  },\n  envBarCompact: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    //backgroundColor: '#1A1A1A',\n    paddingVertical: 0,\n    minWidth: 350,\n    paddingHorizontal: 2,\n    gap: 8,\n    height: 28,\n  },\n  envBox: {\n    borderWidth: 2,\n    borderColor: '#FF6B35',\n    borderRadius: 12,\n    paddingVertical: 2,\n    paddingHorizontal: 10,\n    marginBottom: 0,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    minHeight: 22,\n    minWidth: 60,\n    backgroundColor: 'rgba(26,26,26,0.95)',\n  },\n  envBoxText: {\n    color: '#fff',"}, {"id": "app/(tabs)/index.tsx_51", "file": "app/(tabs)/index.tsx", "content": "backgroundColor: 'rgba(26,26,26,0.95)',\n  },\n  envBoxText: {\n    color: '#fff',\n    fontSize: 11,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n  recenterButton: {\n    position: 'absolute',\n    right: 18,\n    bottom: 18,\n    backgroundColor: '#222',\n    borderRadius: 20,\n    padding: 8,\n    elevation: 4,\n    zIndex: 20,\n    borderWidth: 2,\n    borderColor: '#FF6B35',\n  },\n  envBarOverlay: {\n    position: 'absolute',\n    top: 18,\n    left: 0,\n    right: 0,\n    backgroundColor: 'transparent',\n    zIndex: 21,\n    height: 36,\n  },\n  envBarOverlayContent: {\n    alignItems: 'center',\n  },\n  envBarCompactOverlay: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(26, 26, 26, 0)',\n    borderRadius: 16,\n    paddingVertical: 2,"}, {"id": "app/(tabs)/index.tsx_52", "file": "app/(tabs)/index.tsx", "content": "backgroundColor: 'rgba(26, 26, 26, 0)',\n    borderRadius: 16,\n    paddingVertical: 2,\n    paddingHorizontal: 8,\n    gap: 8,\n  },\n});"}, {"id": "app/(tabs)/profile.tsx_0", "file": "app/(tabs)/profile.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Switch,\n  Platform,\n  Alert,\n  Linking,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { useAuthContext } from '../../contexts/AuthContext';\nimport { Bell, MapPin, Shield, LogOut, TriangleAlert as AlertTriangle, Smartphone, Clock } from 'lucide-react-native';\nimport { startBackgroundFetch, stopBackgroundFetch, getBackgroundFetchStatus } from '../../services/backgroundTasks';\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as Notifications from 'expo-notifications';\nimport * as Location from 'expo-location';\nimport { useLocation } from '../../LocationContext';"}, {"id": "app/(tabs)/profile.tsx_1", "file": "app/(tabs)/profile.tsx", "content": "import * as Location from 'expo-location';\nimport { useLocation } from '../../LocationContext';\n\ninterface NotificationSettings {\n  emergencyAlerts: boolean;\n  pushNotifications: boolean;\n}\n\nexport default function ProfileScreen() {\n  const { user: authUser, signOut } = useAuthContext();\n  const { location: sharedLocation } = useLocation();\n  \n  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({\n    emergencyAlerts: true,\n    pushNotifications: true,\n  });\n\n  const [backgroundFetchEnabled, setBackgroundFetchEnabled] = useState(false);\n  const [userLocation, setUserLocation] = useState<string>('Getting location...');\n\n  useEffect(() => {\n    // Check background fetch status on component mount\n    checkBackgroundFetchStatus();\n  }, []);"}, {"id": "app/(tabs)/profile.tsx_2", "file": "app/(tabs)/profile.tsx", "content": "checkBackgroundFetchStatus();\n  }, []);\n\n  useEffect(() => {\n    // Update location when sharedLocation changes\n    if (sharedLocation) {\n      getLocationName(sharedLocation.latitude, sharedLocation.longitude);\n    } else {\n      // Try to get current location if shared location is not available\n      getCurrentLocation();\n    }\n  }, [sharedLocation]);\n\n  const getCurrentLocation = async () => {\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setUserLocation('Location permission denied');\n        return;\n      }\n\n      const location = await Location.getCurrentPositionAsync({});\n      getLocationName(location.coords.latitude, location.coords.longitude);\n    } catch (error) {"}, {"id": "app/(tabs)/profile.tsx_3", "file": "app/(tabs)/profile.tsx", "content": "getLocationName(location.coords.latitude, location.coords.longitude);\n    } catch (error) {\n      console.error('Error getting current location:', error);\n      setUserLocation('Unable to get location');\n    }\n  };\n\n  const getLocationName = async (latitude: number, longitude: number) => {\n    try {\n      const response = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=API_KEY_HERE`\n      );\n      const data = await response.json();\n      \n      if (data.results && data.results.length > 0) {\n        const addressComponents = data.results[0].address_components;\n        const city = addressComponents.find((component: any) => \n          component.types.includes('locality')\n        )?.long_name;"}, {"id": "app/(tabs)/profile.tsx_4", "file": "app/(tabs)/profile.tsx", "content": "component.types.includes('locality')\n        )?.long_name;\n        const state = addressComponents.find((component: any) => \n          component.types.includes('administrative_area_level_1')\n        )?.short_name;\n        \n        if (city && state) {\n          setUserLocation(`${city}, ${state}`);\n        } else {\n          setUserLocation(data.results[0].formatted_address);\n        }\n      } else {\n        setUserLocation('Unknown location');\n      }\n    } catch (error) {\n      console.error('Error getting location name:', error);\n      setUserLocation('Unable to get location name');\n    }\n  };\n\n  const checkBackgroundFetchStatus = async () => {\n    try {\n      const status = await getBackgroundFetchStatus();"}, {"id": "app/(tabs)/profile.tsx_5", "file": "app/(tabs)/profile.tsx", "content": "try {\n      const status = await getBackgroundFetchStatus();\n      setBackgroundFetchEnabled(status === BackgroundFetch.BackgroundFetchStatus.Available || status === BackgroundFetch.BackgroundFetchStatus.Restricted);\n    } catch (error) {\n      console.error('Error checking background fetch status:', error);\n    }\n  };\n\n  const toggleNotification = (key: keyof NotificationSettings) => {\n    setNotificationSettings(prev => ({\n      ...prev,\n      [key]: !prev[key],\n    }));\n  };\n\n  const toggleBackgroundFetch = async () => {\n    try {\n      if (backgroundFetchEnabled) {\n        await stopBackgroundFetch();\n        setBackgroundFetchEnabled(false);\n        Alert.alert('Background Monitoring Disabled', 'Wildfire prediction monitoring has been turned off.');\n      } else {"}, {"id": "app/(tabs)/profile.tsx_6", "file": "app/(tabs)/profile.tsx", "content": "} else {\n        await startBackgroundFetch();\n        setBackgroundFetchEnabled(true);\n        Alert.alert('Background Monitoring Enabled', 'Wildfire prediction monitoring is now active. You will receive alerts every 10 minutes if high risk is detected.');\n      }\n    } catch (error) {\n      console.error('Error toggling background fetch:', error);\n      Alert.alert('Error', 'Failed to update background monitoring settings.');\n    }\n  };\n\n  const handleLogout = async () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Sign Out', \n          style: 'destructive',\n          onPress: async () => {\n            try {\n              console.log('Attempting to sign out...');"}, {"id": "app/(tabs)/profile.tsx_7", "file": "app/(tabs)/profile.tsx", "content": "try {\n              console.log('Attempting to sign out...');\n              const { error } = await signOut();\n              if (error) {\n                console.error('Sign out error:', error);\n                Alert.alert('Error', 'Failed to sign out. Please try again.');\n              } else {\n                console.log('Sign out successful');\n                // The auth state change will automatically redirect to login\n              }\n            } catch (error) {\n              console.error('Sign out error:', error);\n              Alert.alert('Error', 'Failed to sign out. Please try again.');\n            }\n          }\n        },\n      ]\n    );\n  };\n\n  const handleEmergencyContact = () => {\n    Alert.alert(\n      'Emergency Contact',\n      'This will call 911. Continue?',"}, {"id": "app/(tabs)/profile.tsx_8", "file": "app/(tabs)/profile.tsx", "content": "Alert.alert(\n      'Emergency Contact',\n      'This will call 911. Continue?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Call 911', \n          style: 'destructive', \n          onPress: () => {\n            Linking.openURL('tel:911');\n          }\n        },\n      ]\n    );\n  };\n\n  const testWildfirePrediction = async () => {\n    try {\n      Alert.alert(\n        'Test Wildfire Prediction',\n        'This will test the wildfire prediction API and send a notification if high risk is detected. Continue?',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { \n            text: 'Test', \n            onPress: async () => {\n              // Import the background task function directly for testing"}, {"id": "app/(tabs)/profile.tsx_9", "file": "app/(tabs)/profile.tsx", "content": "// Import the background task function directly for testing\n              const { fetchWildfirePrediction, fetchEnvironmentalData, fetchPollutantData, sendWildfireAlert } = await import('../../services/backgroundTasks');\n              \n              // Get current location\n              const { status } = await Location.requestForegroundPermissionsAsync();\n              if (status !== 'granted') {\n                Alert.alert('Error', 'Location permission required for testing.');\n                return;\n              }\n\n              const location = await Location.getCurrentPositionAsync({});\n              const { latitude: lat, longitude: lng } = location.coords;\n\n              // Fetch data and make prediction"}, {"id": "app/(tabs)/profile.tsx_10", "file": "app/(tabs)/profile.tsx", "content": "// Fetch data and make prediction\n              const envData = await fetchEnvironmentalData(lat, lng);\n              const pollutantData = await fetchPollutantData(lat, lng);\n              const prediction = await fetchWildfirePrediction(lat, lng, envData, pollutantData);\n\n              if (prediction) {\n                Alert.alert('Prediction Result', `Wildfire risk level: ${prediction}`);\n                \n                // Send test notification for any prediction\n                await sendWildfireAlert(prediction, lat, lng);\n                Alert.alert('Test Complete', `Notification sent for ${prediction} risk level.`);\n              } else {\n                Alert.alert('Test Failed', 'Could not get prediction result.');\n              }\n            }\n          }"}, {"id": "app/(tabs)/profile.tsx_11", "file": "app/(tabs)/profile.tsx", "content": "}\n            }\n          }\n        ]\n      );\n    } catch (error) {\n      console.error('Error testing wildfire prediction:', error);\n      Alert.alert('Error', 'Failed to test wildfire prediction.');\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Profile</Text>\n        </View>\n\n        <View style={styles.profileCard}>\n          <View style={styles.userInfo}>\n            <Text style={styles.userEmail}>{authUser?.email || 'Signed Out'}</Text>\n          </View>\n          <View style={styles.locationInfo}>\n            <MapPin size={16} color=\"#888\" />"}, {"id": "app/(tabs)/profile.tsx_12", "file": "app/(tabs)/profile.tsx", "content": "<View style={styles.locationInfo}>\n            <MapPin size={16} color=\"#888\" />\n            <Text style={styles.locationText}>{userLocation}</Text>\n          </View>\n        </View>\n\n        <View style={styles.emergencySection}>\n          <TouchableOpacity \n            style={styles.emergencyButton}\n            onPress={handleEmergencyContact}\n          >\n            <AlertTriangle size={24} color=\"#FFFFFF\" />\n            <Text style={styles.emergencyText}>Emergency Contact</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Notifications</Text>\n          \n          <View style={styles.settingItem}>\n            <View style={styles.settingInfo}>\n              <Bell size={20} color=\"#FF6B35\" />"}, {"id": "app/(tabs)/profile.tsx_13", "file": "app/(tabs)/profile.tsx", "content": "<View style={styles.settingInfo}>\n              <Bell size={20} color=\"#FF6B35\" />\n              <View style={styles.settingText}>\n                <Text style={styles.settingName}>Alerts</Text>\n                <Text style={styles.settingDescription}>\n                  Critical fire and evacuation alerts\n                </Text>\n              </View>\n            </View>\n            <Switch\n              value={notificationSettings.emergencyAlerts}\n              onValueChange={() => toggleNotification('emergencyAlerts')}\n              trackColor={{ false: '#333', true: '#FF6B35' }}\n              thumbColor=\"#FFFFFF\"\n            />\n          </View>\n\n          <View style={styles.settingItem}>\n            <View style={styles.settingInfo}>"}, {"id": "app/(tabs)/profile.tsx_14", "file": "app/(tabs)/profile.tsx", "content": "<View style={styles.settingItem}>\n            <View style={styles.settingInfo}>\n              <Smartphone size={20} color=\"#10B981\" />\n              <View style={styles.settingText}>\n                <Text style={styles.settingName}>Push Notifications</Text>\n                <Text style={styles.settingDescription}>\n                  Allow notifications on this device\n                </Text>\n              </View>\n            </View>\n            <Switch\n              value={notificationSettings.pushNotifications}\n              onValueChange={() => toggleNotification('pushNotifications')}\n              trackColor={{ false: '#333', true: '#FF6B35' }}\n              thumbColor=\"#FFFFFF\"\n            />\n          </View>\n\n          <View style={styles.settingItem}>"}, {"id": "app/(tabs)/profile.tsx_15", "file": "app/(tabs)/profile.tsx", "content": "/>\n          </View>\n\n          <View style={styles.settingItem}>\n            <View style={styles.settingInfo}>\n              <Clock size={20} color=\"#8B5CF6\" />\n              <View style={styles.settingText}>\n                <Text style={styles.settingName}>Background Monitoring</Text>\n                <Text style={styles.settingDescription}>\n                  Check wildfire risk every 10 minutes\n                </Text>\n              </View>\n            </View>\n            <Switch\n              value={backgroundFetchEnabled}\n              onValueChange={toggleBackgroundFetch}\n              trackColor={{ false: '#333', true: '#FF6B35' }}\n              thumbColor=\"#FFFFFF\"\n            />\n          </View>\n        </View>\n\n\n\n        <View style={styles.section}>"}, {"id": "app/(tabs)/profile.tsx_16", "file": "app/(tabs)/profile.tsx", "content": "/>\n          </View>\n        </View>\n\n\n\n        <View style={styles.section}>\n          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n            <LogOut size={20} color=\"#EF4444\" />\n            <Text style={styles.logoutText}>Sign Out</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.footer}>\n          <Text style={styles.footerText}>HazMap v1.0.0</Text>\n          <Text style={styles.footerText}>Built for community & development</Text>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0F0F0F',\n    paddingTop: 30,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',"}, {"id": "app/(tabs)/profile.tsx_17", "file": "app/(tabs)/profile.tsx", "content": "paddingTop: 30,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    paddingTop: Platform.OS === 'ios' ? 8 : 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  profileCard: {\n    backgroundColor: '#1A1A1A',\n    margin: 20,\n    marginTop: 0,\n    borderRadius: 16,\n    padding: 20,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  userInfo: {\n    marginBottom: 10,\n  },\n  userEmail: {\n    fontSize: 20,\n    color: '#FFFFFF',\n    textAlign: 'left',\n    fontWeight: '600',\n  },\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  locationText: {\n    fontSize: 14,\n    color: '#888',\n  },\n  emergencySection: {"}, {"id": "app/(tabs)/profile.tsx_18", "file": "app/(tabs)/profile.tsx", "content": "gap: 8,\n  },\n  locationText: {\n    fontSize: 14,\n    color: '#888',\n  },\n  emergencySection: {\n    margin: 20,\n    marginTop: 0,\n  },\n  emergencyButton: {\n    backgroundColor: '#DC2626',\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 12,\n  },\n  emergencyText: {\n    color: '#FFFFFF',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  section: {\n    margin: 20,\n    marginTop: 0,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 16,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n    borderWidth: 1,"}, {"id": "app/(tabs)/profile.tsx_19", "file": "app/(tabs)/profile.tsx", "content": "borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  settingInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    gap: 12,\n  },\n  settingText: {\n    flex: 1,\n  },\n  settingName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#FFFFFF',\n    marginBottom: 2,\n  },\n  settingDescription: {\n    fontSize: 12,\n    color: '#888',\n    lineHeight: 16,\n  },\n  testButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n    gap: 12,\n  },\n  testButtonText: {\n    fontSize: 16,\n    color: '#FF6B35',\n    fontWeight: '600',\n  },\n  logoutButton: {"}, {"id": "app/(tabs)/profile.tsx_20", "file": "app/(tabs)/profile.tsx", "content": "fontSize: 16,\n    color: '#FF6B35',\n    fontWeight: '600',\n  },\n  logoutButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n    gap: 12,\n  },\n  logoutText: {\n    fontSize: 16,\n    color: '#EF4444',\n    fontWeight: '600',\n  },\n  footer: {\n    alignItems: 'center',\n    padding: 20,\n    paddingBottom: 40,\n  },\n  footerText: {\n    fontSize: 12,\n    color: '#666',\n    marginBottom: 4,\n  },\n});"}, {"id": "app/(tabs)/updates.tsx_0", "file": "app/(tabs)/updates.tsx", "content": "================================================\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Platform,\n  Alert,\n  FlatList,\n  ActivityIndicator,\n  KeyboardAvoidingView,\n} from 'react-native';\nimport { MessageSquare, MapPin, TriangleAlert as AlertTriangle, CircleCheck as CheckCircle, User, Flame, Shield, Info } from 'lucide-react-native';\n\ninterface Update {\n  id: string;\n  author: string;\n  role: 'citizen' | 'official' | 'responder';\n  content: string;\n  location: string;\n  latitude: number;\n  longitude: number;\n  timestamp: string;\n  verified: boolean;\n  category: 'road_closure' | 'fire_sighting' | 'evacuation' | 'safety' | 'resources';\n  likes: number;\n  reports: number;\n}"}, {"id": "app/(tabs)/updates.tsx_1", "file": "app/(tabs)/updates.tsx", "content": "likes: number;\n  reports: number;\n}\n\nexport default function UpdatesScreen() {\n  const [updates, setUpdates] = useState<Update[]>([]);\n  const [selectedTab, setSelectedTab] = useState<'prevention' | 'updates'>('prevention');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n\n  useEffect(() => {\n    if (selectedTab === 'updates') {\n      loadUpdates();\n    }\n  }, [selectedTab]);\n\n  const loadUpdates = async () => {\n    // Simulate API call to get community updates\n    const mockUpdates: Update[] = [\n      {\n        id: '1',\n        author: 'LA Fire Department',\n        role: 'official',\n        content: 'Palisades Fire containment increased to 23%. Evacuation orders remain in effect for zones A-C. Residents in zone D should prepare for possible evacuation.',"}, {"id": "app/(tabs)/updates.tsx_2", "file": "app/(tabs)/updates.tsx", "content": "location: 'Pacific Palisades',\n        latitude: 34.0522,\n        longitude: -118.2437,\n        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n        verified: true,\n        category: 'evacuation',\n        likes: 156,\n        reports: 0,\n      },\n      {\n        id: '2',\n        author: 'Sarah Martinez',\n        role: 'citizen',\n        content: 'PCH is completely blocked between Topanga and Malibu Canyon. Emergency vehicles only. Heavy smoke, zero visibility.',\n        location: 'Pacific Coast Highway',\n        latitude: 34.0359,\n        longitude: -118.6847,\n        timestamp: new Date(Date.now() - 45 * 60 * 1000).toISOString(),\n        verified: true,\n        category: 'road_closure',\n        likes: 89,\n        reports: 2,\n      },\n      {\n        id: '3',"}, {"id": "app/(tabs)/updates.tsx_3", "file": "app/(tabs)/updates.tsx", "content": "likes: 89,\n        reports: 2,\n      },\n      {\n        id: '3',\n        author: 'Emergency Responder',\n        role: 'responder',\n        content: 'New spot fire reported near Will Rogers State Park. Crews are responding. Hikers should evacuate the area immediately.',\n        location: 'Will Rogers State Park',\n        latitude: 34.0522,\n        longitude: -118.5014,\n        timestamp: new Date(Date.now() - 20 * 60 * 1000).toISOString(),\n        verified: true,\n        category: 'fire_sighting',\n        likes: 203,\n        reports: 0,\n      },\n      {\n        id: '4',\n        author: 'Mike Chen',\n        role: 'citizen',\n        content: 'Santa Monica Civic Center shelter has space available. They have pet accommodations and medical support on site.',"}, {"id": "app/(tabs)/updates.tsx_4", "file": "app/(tabs)/updates.tsx", "content": "location: 'Santa Monica',\n        latitude: 34.0195,\n        longitude: -118.4912,\n        timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n        verified: false,\n        category: 'resources',\n        likes: 67,\n        reports: 0,\n      },\n    ];\n    setUpdates(mockUpdates);\n  };\n\n  const categories = [\n    { key: 'all', label: 'All Updates', icon: MessageSquare },\n    { key: 'evacuation', label: 'Evacuation', icon: AlertTriangle },\n    { key: 'road_closure', label: 'Road Closures', icon: MapPin },\n    { key: 'fire_sighting', label: 'Fire Sightings', icon: AlertTriangle },\n    { key: 'safety', label: 'Safety', icon: CheckCircle },\n    { key: 'resources', label: 'Resources', icon: CheckCircle },\n  ];\n\n  const getRoleColor = (role: Update['role']) => {"}, {"id": "app/(tabs)/updates.tsx_5", "file": "app/(tabs)/updates.tsx", "content": "];\n\n  const getRoleColor = (role: Update['role']) => {\n    switch (role) {\n      case 'official': return '#3B82F6';\n      case 'responder': return '#10B981';\n      case 'citizen': return '#8B5CF6';\n      default: return '#6B7280';\n    }\n  };\n\n  const getCategoryColor = (category: Update['category']) => {\n    switch (category) {\n      case 'evacuation': return '#DC2626';\n      case 'road_closure': return '#EA580C';\n      case 'fire_sighting': return '#EF4444';\n      case 'safety': return '#22C55E';\n      case 'resources': return '#3B82F6';\n      default: return '#6B7280';\n    }\n  };\n\n  const filteredUpdates = selectedCategory === 'all' \n    ? updates \n    : updates.filter(update => update.category === selectedCategory);\n\n  const timeAgo = (timestamp: string) => {"}, {"id": "app/(tabs)/updates.tsx_6", "file": "app/(tabs)/updates.tsx", "content": "const timeAgo = (timestamp: string) => {\n    const now = new Date().getTime();\n    const updateTime = new Date(timestamp).getTime();\n    const diffMinutes = Math.floor((now - updateTime) / (1000 * 60));\n    \n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays}d ago`;\n  };\n\n  const renderPreventionContent = () => (\n    <ScrollView style={styles.contentArea} showsVerticalScrollIndicator={false}>\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Flame size={24} color=\"#FF6B35\" />"}, {"id": "app/(tabs)/updates.tsx_7", "file": "app/(tabs)/updates.tsx", "content": "<View style={styles.sectionHeader}>\n          <Flame size={24} color=\"#FF6B35\" />\n          <Text style={styles.sectionTitle}>Preventing Wildfires</Text>\n        </View>\n        \n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>Home Safety</Text>\n          <View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Clear leaves and debris from gutters and roof</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Remove dead vegetation within 30 feet of your home</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Keep grass cut to 4 inches or less</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Store firewood at least 30 feet from your house</Text>"}, {"id": "app/(tabs)/updates.tsx_8", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Use fire-resistant building materials</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Install ember-resistant vents</Text>\n          </View>\n        </View>\n\n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>Outdoor Activities</Text>\n          <View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Never leave campfires unattended</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Extinguish fires completely with water</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Don't use fireworks in dry conditions</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Avoid parking on dry grass</Text>"}, {"id": "app/(tabs)/updates.tsx_9", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Avoid parking on dry grass</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Check for fire restrictions before outdoor activities</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Report suspicious smoke immediately</Text>\n          </View>\n        </View>\n\n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>Vehicle Safety</Text>\n          <View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Maintain your vehicle to prevent sparks</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Don't drive over dry grass</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Secure trailer chains to prevent dragging</Text>"}, {"id": "app/(tabs)/updates.tsx_10", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Secure trailer chains to prevent dragging</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Check tire pressure regularly</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Never throw cigarettes from vehicles</Text>\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Shield size={24} color=\"#22C55E\" />\n          <Text style={styles.sectionTitle}>What to Do During a Wildfire</Text>\n        </View>\n\n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>If You're at Home</Text>\n          <View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Stay informed with local emergency alerts</Text>"}, {"id": "app/(tabs)/updates.tsx_11", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Stay informed with local emergency alerts</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Close all windows and doors</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Turn off air conditioning and fans</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Fill bathtubs and sinks with water</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Move flammable items away from windows</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Have your emergency kit ready</Text>\n          </View>\n        </View>\n\n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>If You Need to Evacuate</Text>\n          <View style={styles.infoList}>"}, {"id": "app/(tabs)/updates.tsx_12", "file": "app/(tabs)/updates.tsx", "content": "<View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Follow evacuation orders immediately</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Take your emergency kit and important documents</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Wear protective clothing (long sleeves, pants)</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Cover your nose and mouth with a wet cloth</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Know your evacuation route in advance</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Don't return until authorities say it's safe</Text>\n          </View>\n        </View>\n\n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>Emergency Kit Essentials</Text>"}, {"id": "app/(tabs)/updates.tsx_13", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoTitle}>Emergency Kit Essentials</Text>\n          <View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Water (1 gallon per person per day)</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Non-perishable food for 3 days</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 First aid kit and medications</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Flashlight and extra batteries</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Important documents (ID, insurance)</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Cash and credit cards</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Phone charger and backup battery</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Pet supplies if applicable</Text>"}, {"id": "app/(tabs)/updates.tsx_14", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Pet supplies if applicable</Text>\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Info size={24} color=\"#3B82F6\" />\n          <Text style={styles.sectionTitle}>Important Contacts</Text>\n        </View>\n\n        <View style={styles.infoCard}>\n          <Text style={styles.infoTitle}>Emergency Numbers</Text>\n          <View style={styles.infoList}>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 911 - Emergency Services</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Local Fire Department</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 County Emergency Management</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Red Cross Disaster Relief</Text>"}, {"id": "app/(tabs)/updates.tsx_15", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.infoItem}>\u00e2\u20ac\u00a2 Red Cross Disaster Relief</Text>\n            <Text style={styles.infoItem}>\u00e2\u20ac\u00a2 FEMA Disaster Assistance</Text>\n          </View>\n        </View>\n      </View>\n    </ScrollView>\n  );\n\n  const renderUpdatesContent = () => (\n    <>\n      <ScrollView \n        horizontal \n        style={styles.categorySelector}\n        showsHorizontalScrollIndicator={false}\n      >\n        {categories.map((category) => {\n          const IconComponent = category.icon;\n          return (\n            <TouchableOpacity\n              key={category.key}\n              style={[\n                styles.categoryButton,\n                selectedCategory === category.key && styles.categoryButtonActive,\n              ]}"}, {"id": "app/(tabs)/updates.tsx_16", "file": "app/(tabs)/updates.tsx", "content": "selectedCategory === category.key && styles.categoryButtonActive,\n              ]}\n              onPress={() => setSelectedCategory(category.key)}\n            >\n              <IconComponent \n                size={16} \n                color={selectedCategory === category.key ? '#FFFFFF' : '#666'} \n              />\n              <Text\n                style={[\n                  styles.categoryText,\n                  selectedCategory === category.key && styles.categoryTextActive,\n                ]}\n              >\n                {category.label}\n              </Text>\n            </TouchableOpacity>\n          );\n        })}\n      </ScrollView>\n\n      <View style={styles.dummyDataNote}>\n        <Info size={16} color=\"#FF6B35\" />\n        <Text style={styles.dummyDataText}>"}, {"id": "app/(tabs)/updates.tsx_17", "file": "app/(tabs)/updates.tsx", "content": "<Info size={16} color=\"#FF6B35\" />\n        <Text style={styles.dummyDataText}>\n          This is dummy data to show how the UI would look. As the app grows, we will make this a working feature.\n        </Text>\n      </View>\n\n      <ScrollView style={styles.updatesList} showsVerticalScrollIndicator={false}>\n        {filteredUpdates.map((update) => (\n          <View key={update.id} style={styles.updateCard}>\n            <View style={styles.updateHeader}>\n              <View style={styles.authorInfo}>\n                <View style={[styles.roleIndicator, { backgroundColor: getRoleColor(update.role) }]}>\n                  <User size={16} color=\"#FFFFFF\" />\n                </View>\n                <View style={styles.authorDetails}>\n                  <View style={styles.authorNameRow}>"}, {"id": "app/(tabs)/updates.tsx_18", "file": "app/(tabs)/updates.tsx", "content": "<View style={styles.authorNameRow}>\n                    <Text style={styles.authorName}>{update.author}</Text>\n                    {update.verified && update.role !== 'responder' && (\n                      <CheckCircle size={16} color=\"#22C55E\" />\n                    )}\n                  </View>\n                  <Text style={styles.authorRole}>{update.role.charAt(0).toUpperCase() + update.role.slice(1)}</Text>\n                </View>\n              </View>\n              <Text style={styles.timestamp}>{timeAgo(update.timestamp)}</Text>\n            </View>\n\n            <View style={styles.updateContent}>\n              <View style={styles.categoryBadge}>\n                <View style={[styles.categoryDot, { backgroundColor: getCategoryColor(update.category) }]} />"}, {"id": "app/(tabs)/updates.tsx_19", "file": "app/(tabs)/updates.tsx", "content": "<Text style={styles.categoryLabel}>\n                  {update.category.replace('_', ' ').toUpperCase()}\n                </Text>\n              </View>\n              \n              <Text style={styles.updateText}>{update.content}</Text>\n\n              {update.location && (\n                <View style={styles.locationInfo}>\n                  <MapPin size={14} color=\"#888\" />\n                  <Text style={styles.locationText}>{update.location}</Text>\n                </View>\n              )}\n            </View>\n\n            {update.reports > 0 && (\n              <View style={styles.updateActions}>\n                <TouchableOpacity style={styles.actionItem}>\n                  <AlertTriangle size={16} color=\"#EAB308\" />"}, {"id": "app/(tabs)/updates.tsx_20", "file": "app/(tabs)/updates.tsx", "content": "<AlertTriangle size={16} color=\"#EAB308\" />\n                  <Text style={styles.actionLabel}>{update.reports} reports</Text>\n                </TouchableOpacity>\n              </View>\n            )}\n          </View>\n        ))}\n      </ScrollView>\n    </>\n  );\n\n\n  useEffect(() => {\n    if (selectedTab === 'updates') {\n      loadUpdates();\n    }\n  }, [selectedTab]);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Community Updates</Text>\n      </View>\n\n      <View style={styles.tabSelector}>\n        <TouchableOpacity\n          style={[\n            styles.tabButton,\n            selectedTab === 'prevention' && styles.tabButtonActive,\n          ]}"}, {"id": "app/(tabs)/updates.tsx_21", "file": "app/(tabs)/updates.tsx", "content": "selectedTab === 'prevention' && styles.tabButtonActive,\n          ]}\n          onPress={() => setSelectedTab('prevention')}\n        >\n          <Shield size={16} color={selectedTab === 'prevention' ? '#FFFFFF' : '#666'} />\n          <Text\n            style={[\n              styles.tabText,\n              selectedTab === 'prevention' && styles.tabTextActive,\n            ]}\n          >\n            Prevention\n          </Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[\n            styles.tabButton,\n            selectedTab === 'updates' && styles.tabButtonActive,\n          ]}\n          onPress={() => setSelectedTab('updates')}\n        >\n          <MessageSquare size={16} color={selectedTab === 'updates' ? '#FFFFFF' : '#666'} />\n          <Text"}, {"id": "app/(tabs)/updates.tsx_22", "file": "app/(tabs)/updates.tsx", "content": "<Text\n            style={[\n              styles.tabText,\n              selectedTab === 'updates' && styles.tabTextActive,\n            ]}\n          >\n            Updates\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {selectedTab === 'prevention' ? (\n        renderPreventionContent()\n      ) : (\n        <KeyboardAvoidingView \n          behavior={Platform.OS === 'ios' ? 'padding' : 'height'} \n          style={{ flex: 1 }}\n          keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}\n        >\n          {renderUpdatesContent()}\n        </KeyboardAvoidingView>\n      )}\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0F0F0F',\n    paddingTop: 30,\n  },\n  header: {\n    flexDirection: 'row',"}, {"id": "app/(tabs)/updates.tsx_23", "file": "app/(tabs)/updates.tsx", "content": "backgroundColor: '#0F0F0F',\n    paddingTop: 30,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    paddingTop: Platform.OS === 'ios' ? 8 : 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  tabSelector: {\n    flexDirection: 'row',\n    paddingHorizontal: 20,\n    paddingBottom: 16,\n    gap: 8,\n  },\n  tabButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n    gap: 8,\n    justifyContent: 'center',\n  },\n  tabButtonActive: {\n    backgroundColor: '#FF6B35',\n    borderColor: '#FF6B35',\n  },\n  tabText: {"}, {"id": "app/(tabs)/updates.tsx_24", "file": "app/(tabs)/updates.tsx", "content": "tabButtonActive: {\n    backgroundColor: '#FF6B35',\n    borderColor: '#FF6B35',\n  },\n  tabText: {\n    color: '#666',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  tabTextActive: {\n    color: '#FFFFFF',\n  },\n  contentArea: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  infoCard: {\n    backgroundColor: '#1A1A1A',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  infoTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 12,\n  },\n  infoList: {\n    gap: 8,"}, {"id": "app/(tabs)/updates.tsx_25", "file": "app/(tabs)/updates.tsx", "content": "fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 12,\n  },\n  infoList: {\n    gap: 8,\n  },\n  infoItem: {\n    fontSize: 14,\n    color: '#CCCCCC',\n    lineHeight: 20,\n  },\n  categorySelector: {\n    paddingHorizontal: 20,\n    paddingBottom: 16,\n    maxHeight: 60,\n  },\n  categoryButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 20,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n    gap: 6,\n  },\n  categoryButtonActive: {\n    backgroundColor: '#FF6B35',\n    borderColor: '#FF6B35',\n  },\n  categoryText: {\n    color: '#666',\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  categoryTextActive: {\n    color: '#FFFFFF',\n  },\n  updatesList: {\n    flex: 1,"}, {"id": "app/(tabs)/updates.tsx_26", "file": "app/(tabs)/updates.tsx", "content": "},\n  categoryTextActive: {\n    color: '#FFFFFF',\n  },\n  updatesList: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  updateCard: {\n    backgroundColor: '#1A1A1A',\n    borderRadius: 16,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  updateHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  authorInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    flex: 1,\n  },\n  roleIndicator: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  authorDetails: {\n    flex: 1,\n  },\n  authorNameRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  authorName: {"}, {"id": "app/(tabs)/updates.tsx_27", "file": "app/(tabs)/updates.tsx", "content": "flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  authorName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n  },\n  authorRole: {\n    fontSize: 12,\n    color: '#888',\n    textTransform: 'capitalize',\n  },\n  timestamp: {\n    fontSize: 12,\n    color: '#666',\n  },\n  updateContent: {\n    marginBottom: 12,\n  },\n  categoryBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n    gap: 6,\n  },\n  categoryDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n  categoryLabel: {\n    fontSize: 12,\n    color: '#888',\n    fontWeight: '500',\n  },\n  updateText: {\n    fontSize: 14,\n    color: '#FFFFFF',\n    lineHeight: 20,\n    marginBottom: 8,\n  },\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,"}, {"id": "app/(tabs)/updates.tsx_28", "file": "app/(tabs)/updates.tsx", "content": "},\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  locationText: {\n    fontSize: 12,\n    color: '#888',\n  },\n  updateActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 16,\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#333',\n  },\n  actionItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  actionCount: {\n    fontSize: 12,\n    color: '#888',\n    fontWeight: '600',\n  },\n  actionLabel: {\n    fontSize: 12,\n    color: '#666',\n  },\n  dummyDataNote: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#1A1A1A',\n    borderRadius: 8,\n    padding: 12,\n    marginHorizontal: 20,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n    gap: 8,\n  },"}, {"id": "app/(tabs)/updates.tsx_29", "file": "app/(tabs)/updates.tsx", "content": "marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n    gap: 8,\n  },\n  dummyDataText: {\n    fontSize: 12,\n    color: '#CCCCCC',\n    flex: 1,\n    lineHeight: 16,\n  },\n});"}, {"id": "assets/lottie/birds.json_0", "file": "assets/lottie/birds.json", "content": "================================================"}, {"id": "assets/lottie/birds.json_1", "file": "assets/lottie/birds.json", "content": "\n{\"v\":\"5.7.4\",\"fr\":24,\"ip\":0,\"op\":337,\"w\":1229,\"h\":612,\"nm\":\"murmuration_05_Fullmove\",\"ddd\":0,\"assets\":[{\"id\":\"comp_0\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Bird1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[22.043,21.531,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[45.146,-7.263,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[92,92,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":18,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":34,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":49,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":71,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":91,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":109,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":125,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":140,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":156,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":171,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":192,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":212,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":230,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":246,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":261,\"s\":[{\"i\":[[1.625,0.5],[0.15,-2.164],[-0.699,0.012],[-0.805,1.497],[-0.875,0.062]],\"o\":[[-1.625,-0.5],[-0.157,2.267],[0.699,-0.012],[0.476,-0.885],[1.813,-0.113]],\"v\":[[44.125,-8.5],[41.213,-6.871],[41.663,-1.819],[43.774,-5.49],[45.75,-5.75]],\"c\":true}]},{\"t\":283,\"s\":[{\"i\":[[1.594,0.591],[1.382,-1.673],[-0.575,-0.397],[-1.382,0.99],[-2.239,-0.252]],\"o\":[[-1.594,-0.591],[-1.447,1.752],[0.575,0.397],[1.545,-1.107],[1.805,0.203]],\"v\":[[43.877,-8.412],[39.164,-7.963],[36.589,-3.593],[40.493,-5.313],[45.664,-5.682]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_2", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"LWing\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_3", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":18,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":34,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":49,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":71,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":91,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":109,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":125,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":140,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":156,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":171,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":192,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":212,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":230,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":246,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":261,\"s\":[{\"i\":[[-0.103,0.776],[1.891,0.147],[-0.75,-3.438],[0.028,0.877],[-1.242,-0.063]],\"o\":[[0.058,-0.952],[-2.234,-0.173],[0.495,2.269],[-0.062,-1.938],[2.143,0.108]],\"v\":[[53.25,-9.622],[46.422,-11.209],[44.5,-7.938],[46.812,-7.312],[48.044,-9.421]],\"c\":true}]},{\"t\":283,\"s\":[{\"i\":[[0.476,0.622],[1.341,-0.926],[-1.323,-2.7],[0.137,0.866],[-1.329,1.218]],\"o\":[[-0.633,-0.714],[-1.771,1.223],[1.022,2.086],[-0.43,-2.719],[1.329,-1.218]],\"v\":[[51.179,-16.056],[44.919,-13.19],[44.137,-7.802],[47.088,-7.14],[47.728,-11.791]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_4", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"RWing\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[4.125,1.25],[-1.812,-2.438],[-1.562,1.125]],\"o\":[[-3.405,-1.032],[1.538,2.068],[1.183,-0.852]],\"v\":[[46.188,-8.062],[44.5,-6.062],[48.938,-4.812]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape -"}, {"id": "assets/lottie/birds.json_5", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Body\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_6", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false}],\"ip\":0,\"op\":284,\"st\":0,\"bm\":0}]},{\"id\":\"comp_1\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Bird2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[17.153,15.863,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[37.153,138.863,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":18,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":33,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":48,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":63,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":78,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":99,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":109,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":127,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":142,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":157,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":178,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":194,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":212,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":227,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":242,\"s\":[{\"i\":[[3.625,3.938],[1.812,-0.375],[-0.286,2.062]],\"o\":[[-2.666,-2.895],[-1.812,0.375],[0.625,-4.5]],\"v\":[[44.625,137],[35.188,136.25],[40.688,139.562]],\"c\":true}]},{\"t\":263,\"s\":[{\"i\":[[2.812,-3.062],[1.812,-0.375],[-1.562,1.375]],\"o\":[[-2.751,2.995],[-1.812,0.375],[4.626,-4.071]],\"v\":[[45,130.062],[35.938,136.5],[40.688,139.688]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_7", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"RWing\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_8", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":18,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":33,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":48,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":63,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":78,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":99,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":109,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":127,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":142,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":157,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":178,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":194,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":212,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":227,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":242,\"s\":[{\"i\":[[0.657,-1.037],[0.535,-1.928],[-1.863,1.851],[-0.229,1.022]],\"o\":[[-1.384,2.187],[-0.535,1.928],[1.941,-1.928],[0.229,-1.022]],\"v\":[[34.072,137.813],[29.719,147.196],[32.247,146.99],[37.963,140.001]],\"c\":true}]},{\"t\":263,\"s\":[{\"i\":[[2.562,-0.188],[1.938,-0.5],[-2.613,-0.255],[-1,0.312]],\"o\":[[-2.562,0.188],[-1.938,0.5],[2.562,0.25],[1,-0.312]],\"v\":[[36.438,137.688],[28.562,138.938],[30.062,140.125],[39.25,141.062]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_9", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"LWing\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_10", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":3,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":21,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":36,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":51,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":66,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":81,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":102,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":112,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":130,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":145,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":160,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":181,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":197,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":215,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":230,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":245,\"s\":[{\"i\":[[2.958,1.449],[-1.579,-2.045],[-3.358,-1.327],[2.49,1.769]],\"o\":[[-1.589,-0.778],[1.887,2.444],[2.795,1.104],[-1.442,-1.024]],\"v\":[[35.392,136.128],[34.348,138.184],[41.607,143.189],[42.977,140.98]],\"c\":true}]},{\"t\":266,\"s\":[{\"i\":[[2.793,1.746],[-1.36,-2.197],[-3.454,-1.051],[2.625,1.562]],\"o\":[[-1.5,-0.938],[1.625,2.625],[2.875,0.875],[-1.52,-0.905]],\"v\":[[35.75,135.812],[34.5,137.75],[41.875,142.938],[43.062,140.625]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_11", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Body\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_12", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false}],\"ip\":0,\"op\":264,\"st\":0,\"bm\":0}]},{\"id\":\"comp_2\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Bird3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[13.564,9.61,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[-94.436,-31.39,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[-100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":0,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":16,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":29,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":39,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":55,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":68,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":81,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":94,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":107,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":126,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":136,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":152,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":165,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":178,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":191,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":204,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":223,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":233,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":249,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":262,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":275,\"s\":[{\"i\":[[0.336,0.205],[1.047,0.115],[-0.398,0.764]],\"o\":[[-0.914,-0.557],[-1.402,-0.154],[0.094,0.036]],\"v\":[[-94.274,-29.13],[-97.047,-30.052],[-93.594,-28.848]],\"c\":true}]},{\"t\":291,\"s\":[{\"i\":[[-0.479,1.844],[2.234,-2.073],[-0.818,1.533]],\"o\":[[0.649,-2.495],[-1.034,0.959],[1.282,-2.402]],\"v\":[[-91.524,-34.318],[-97.047,-30.052],[-93.094,-29.848]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_13", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"RWing\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_14", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":0,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":16,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":29,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":39,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":55,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":68,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":81,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":94,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":107,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":126,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":136,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":152,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":165,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":178,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":191,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":204,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":223,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":233,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":249,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":262,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":275,\"s\":[{\"i\":[[-0.562,-0.062],[1.312,-0.188],[-1.613,0.645]],\"o\":[[0,-0.688],[-1.396,0.199],[0.812,0]],\"v\":[[-91.875,-29.062],[-96.438,-30.312],[-93.188,-29.125]],\"c\":true}]},{\"t\":291,\"s\":[{\"i\":[[-1.196,1.483],[0.625,-1.375],[-0.964,1.446]],\"o\":[[1.562,-1.938],[-0.583,1.284],[1.5,-2.25]],\"v\":[[-89.125,-33.688],[-96.688,-30.625],[-92.875,-29.562]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_15", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"LWing\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_16", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":0,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":16,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":29,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":39,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":55,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":68,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":81,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":94,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":107,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":126,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":136,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":152,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":165,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":178,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":191,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":204,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":223,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":233,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":249,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":262,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":275,\"s\":[{\"i\":[[3.048,-0.733],[-1.719,0.334],[1.107,0.561]],\"o\":[[2.021,1.58],[1.493,-0.29],[-1.238,-0.627]],\"v\":[[-100.201,-29.801],[-92.234,-27.83],[-92.413,-29.763]],\"c\":true}]},{\"t\":291,\"s\":[{\"i\":[[3.125,-0.25],[-1.75,0.062],[1.006,0.726]],\"o\":[[1.75,1.875],[1.52,-0.054],[-1.125,-0.812]],\"v\":[[-99.938,-30.938],[-92.375,-27.75],[-92.25,-29.688]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_17", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Body\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_18", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false}],\"ip\":0,\"op\":292,\"st\":0,\"bm\":0}]},{\"id\":\"comp_3\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Bird4-A\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[16.404,16.31,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[-161.404,220.31,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[-100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":14,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":31,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":45,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":59,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":79,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":89,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":106,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":120,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":134,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":154,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":170,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":187,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":201,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":215,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":235,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":245,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":262,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":276,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":290,\"s\":[{\"i\":[[0.965,-0.62],[0.625,-0.688],[0.188,-0.438],[1.381,-0.69]],\"o\":[[-0.5,0.188],[-0.562,0.688],[-0.282,1.506],[-1.375,0.688]],\"v\":[[-161.188,217.25],[-162.688,218.375],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]},{\"t\":310,\"s\":[{\"i\":[[2,0.688],[-2.938,-2.438],[-0.312,-1.5],[1.468,0.477]],\"o\":[[-2,-0.688],[2.938,2.438],[0.312,1.5],[-2.5,-0.812]],\"v\":[[-166.438,212.812],[-168.25,213.75],[-163.438,219.5],[-158.875,215.688]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_19", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Rwing\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_20", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":14,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":31,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":45,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":59,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":79,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":89,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":106,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":120,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":134,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":154,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":170,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":187,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":201,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":215,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":235,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":245,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":262,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":276,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":290,\"s\":[{\"i\":[[-0.562,0.875],[-2.858,0.536],[-0.875,0.375],[-0.438,0.375]],\"o\":[[0.713,-1.109],[2,-0.375],[0.75,-0.375],[0.875,-0.438]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-159.812,219.312],[-159.062,218.75]],\"c\":true}]},{\"t\":310,\"s\":[{\"i\":[[0.125,1.312],[-2.562,-1.375],[-1.812,-2.5],[1.188,2.625]],\"o\":[[-0.125,-1.312],[2.562,1.375],[1.812,2.5],[-1.188,-2.625]],\"v\":[[-157.062,217.25],[-162.625,219.938],[-154.688,227.625],[-154.125,224.188]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_21", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"LWing\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_22", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":14,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":31,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":45,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":59,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":79,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":89,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":106,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":120,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":134,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":154,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":170,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":187,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":201,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":215,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":235,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":245,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":262,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.2,\"y\":0},\"t\":276,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]},{\"i\":{\"x\":0.8,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":290,\"s\":[{\"i\":[[3.008,1.504],[3.846,-2.39],[-1.106,-0.782],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.436,1.513],[2.256,1.595],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-163.861,219.22],[-165.581,222.782],[-162,221.125]],\"c\":true}]},{\"t\":310,\"s\":[{\"i\":[[3.008,1.504],[4.062,-2],[-1.965,-1.516],[-1.188,1.75]],\"o\":[[-3,-1.5],[-2.573,1.267],[2.188,1.688],[0.828,-1.221]],\"v\":[[-156.188,215.5],[-164.062,218.75],[-166.125,222.125],[-162,221.125]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_23", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Body\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_24", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false}],\"ip\":0,\"op\":311,\"st\":0,\"bm\":0}]},{\"id\":\"comp_4\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Bird5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[22.147,18.832,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[216.147,81.832,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":14,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":31,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":41,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":55,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":66,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":77,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":88,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":99,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":116,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":136,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":150,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":161,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":172,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":183,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":194,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":205,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":216,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":233,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":243,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":257,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":268,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":279,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":290,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":301,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":312,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":323,\"s\":[{\"i\":[[2.438,0.125],[-3.893,-2.075],[-1.694,-0.276],[0.375,0.357],[-0.811,-0.077]],\"o\":[[-2.438,-0.125],[1.979,1.055],[0.708,0.104],[-0.375,-0.518],[2.625,0.25]],\"v\":[[211.938,78.75],[210.956,81.325],[216.229,83.209],[216.437,82.58],[216.75,82.125]],\"c\":true}]},{\"t\":340,\"s\":[{\"i\":[[2.438,0.125],[-0.312,-4.312],[-0.938,-1.438],[0.057,2.43],[-5.312,0.062]],\"o\":[[-2.438,-0.125],[0.312,4.312],[0.938,1.438],[-0.125,-5.312],[5.312,-0.062]],\"v\":[[211.438,79],[206.188,83.5],[208.562,89.625],[209.5,87.875],[216.125,82.625]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_25", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"LWing\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_26", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":14,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":31,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":41,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":55,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":66,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":77,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":88,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":99,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":116,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":136,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":150,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":161,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":172,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":183,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":194,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":205,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":216,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":233,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":243,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":257,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":268,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":279,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":290,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":301,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":312,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":323,\"s\":[{\"i\":[[0.929,0.701],[1.062,-2.875],[-0.178,1.428],[-0.558,-0.408],[-0.068,1.157]],\"o\":[[-2.415,-1.821],[-0.562,1.521],[0.125,-0.938],[0.567,0.28],[0.064,-1.09]],\"v\":[[218.228,79.196],[212.5,77.062],[217.5,80.938],[217.933,80.595],[219.318,81.531]],\"c\":true}]},{\"t\":340,\"s\":[{\"i\":[[2.253,0.319],[1.062,-2.875],[-0.062,1.438],[-2.804,0.385],[1.062,2.125]],\"o\":[[-6.188,-0.875],[-0.562,1.521],[0.062,-1.438],[3.188,-0.438],[-0.488,-0.976]],\"v\":[[220.75,73.562],[212.5,77.062],[217.312,79.812],[221.312,76.688],[225.875,76.375]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_27", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"RWing\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_28", "file": "assets/lottie/birds.json", "content": "Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[3.125,0.188],[-2.062,-2.062],[-0.508,-1.571],[-1.749,1.206],[1.562,2]],\"o\":[[-2.371,-0.142],[2.062,2.062],[0.688,2.125],[1.812,-1.25],[-1.225,-1.568]],\"v\":[[210.875,76.438],[209.312,79.312],[215.875,82.438],[219.562,83.75],[218.25,80.125]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic -"}, {"id": "assets/lottie/birds.json_29", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Body\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_30", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false}],\"ip\":0,\"op\":341,\"st\":0,\"bm\":0}]},{\"id\":\"comp_5\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Bird6\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[17.993,16.813,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[23.993,113.813,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":0,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":30,\"s\":[{\"i\":[[0.877,-1.056],[0.73,-1.85],[-1.94,1.442],[-0.438,1.161]],\"o\":[[-0.877,1.056],[-0.861,2.182],[1.889,-1.404],[0.438,-1.161]],\"v\":[[21.469,113.444],[17.904,118.954],[21.408,117.745],[25.077,114.482]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":60,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":70,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":100,\"s\":[{\"i\":[[1.298,-0.444],[2.123,-0.423],[-2.296,-0.516],[-1.118,0.538]],\"o\":[[-1.321,0.452],[-2.301,0.458],[2.296,0.516],[1.118,-0.538]],\"v\":[[21.821,113.079],[15.439,114.267],[18.988,115.66],[24.329,115.851]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":130,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":140,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":170,\"s\":[{\"i\":[[0.877,-1.056],[0.73,-1.85],[-1.94,1.442],[-0.438,1.161]],\"o\":[[-0.877,1.056],[-0.861,2.182],[1.889,-1.404],[0.438,-1.161]],\"v\":[[21.469,113.444],[17.904,118.954],[21.408,117.745],[25.077,114.482]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":200,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":210,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":240,\"s\":[{\"i\":[[1.298,-0.444],[2.123,-0.423],[-2.296,-0.516],[-1.118,0.538]],\"o\":[[-1.321,0.452],[-2.301,0.458],[2.296,0.516],[1.118,-0.538]],\"v\":[[21.821,113.079],[15.439,114.267],[18.988,115.66],[24.329,115.851]],\"c\":true}]},{\"t\":270,\"s\":[{\"i\":[[1.188,-0.688],[1.325,-1.484],[-2.312,0.438],[-0.812,0.938]],\"o\":[[-1.188,0.688],[-1.562,1.75],[2.312,-0.438],[0.812,-0.938]],\"v\":[[21.562,113],[16.312,116.938],[20.375,117.312],[25.062,115.562]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_31", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"LWing\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/birds.json_32", "file": "assets/lottie/birds.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":0,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":30,\"s\":[{\"i\":[[1.53,-0.592],[1.806,-2.35],[-0.715,1.56]],\"o\":[[-1.822,0.705],[-0.75,0.976],[0.97,-2.116]],\"v\":[[28.559,106.01],[23.237,112.387],[26.249,114.022]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":60,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":70,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":100,\"s\":[{\"i\":[[1.549,0.657],[3.073,0.263],[-1.635,0.52]],\"o\":[[-2.123,-0.9],[-1.227,-0.105],[2.298,-0.731]],\"v\":[[32.169,112.875],[24.208,112.05],[25.296,115.044]],\"c\":true}]},{\"i\":{\"x\":0.833,\"y\":1},\"o\":{\"x\":0.167,\"y\":0},\"t\":130,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":140,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":170,\"s\":[{\"i\":[[1.53,-0.592],[1.806,-2.35],[-0.715,1.56]],\"o\":[[-1.822,0.705],[-0.75,0.976],[0.97,-2.116]],\"v\":[[28.559,106.01],[23.237,112.387],[26.249,114.022]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":200,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":210,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]},{\"i\":{\"x\":0.7,\"y\":1},\"o\":{\"x\":0.3,\"y\":0},\"t\":240,\"s\":[{\"i\":[[1.549,0.657],[3.073,0.263],[-1.635,0.52]],\"o\":[[-2.123,-0.9],[-1.227,-0.105],[2.298,-0.731]],\"v\":[[32.169,112.875],[24.208,112.05],[25.296,115.044]],\"c\":true}]},{\"t\":270,\"s\":[{\"i\":[[1.627,0.21],[2.709,-1.204],[-1.438,0.938]],\"o\":[[-1.938,-0.25],[-1.125,0.5],[2.039,-1.33]],\"v\":[[31.75,109.25],[23.812,112.125],[26.5,115.125]],\"c\":true}]}],\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_33", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"RWing\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[1.688,-0.938],[-3.625,-1.812],[-2.462,1.94],[1.342,1.776]],\"o\":[[-1.688,0.938],[2.608,1.304],[2.062,-1.625],[-2.125,-2.812]],\"v\":[[21.75,111.562],[24.25,115.812],[28.062,117.688],[26.125,114.062]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/birds.json_34", "file": "assets/lottie/birds.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[1,0.4431,0,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[0,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Body\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":271,\"st\":0,\"bm\":0}]}],\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":3,\"nm\":\"Null"}, {"id": "assets/lottie/birds.json_35", "file": "assets/lottie/birds.json", "content": " 6\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":0,\"s\":[614.5,306,0],\"to\":[14.25,-12.5,0],\"ti\":[12.917,-12.083,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":71,\"s\":[700,231,0],\"to\":[-12.917,12.083,0],\"ti\":[14.25,-12.5,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.4,\"y\":0},\"t\":179,\"s\":[537,378.5,0],\"to\":[-14.25,12.5,0],\"ti\":[-12.917,12.083,0]},{\"t\":248,\"s\":[614.5,306,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":2,\"ty\":3,\"nm\":\"Split-Up-3\",\"parent\":1,\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":49,\"s\":[0,0,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":118,\"s\":[156,-160.5,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"t\":205,\"s\":[0,0,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":49,\"s\":[100,100,100]},{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":118,\"s\":[85,85,100]},{\"t\":205,\"s\":[100,100,100]}],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":3,\"ty\":3,\"nm\":\"Split-Up-2\",\"parent\":1,\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":58,\"s\":[0,0,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":127,\"s\":[56,-56.5,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"t\":214,\"s\":[0,0,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":58,\"s\":[100,100,100]},{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":127,\"s\":[110,110,100]},{\"t\":214,\"s\":[100,100,100]}],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":4,\"ty\":3,\"nm\":\"Split-Up-1\",\"parent\":1,\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":52,\"s\":[0,0,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":121,\"s\":[104,-110,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"t\":208,\"s\":[0,0,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":52,\"s\":[100,100,100]},{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":121,\"s\":[90,90,100]},{\"t\":208,\"s\":[100,100,100]}],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":5,\"ty\":3,\"nm\":\"Split-Down\",\"parent\":1,\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":52,\"s\":[0,0,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":121,\"s\":[-94,98,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"t\":208,\"s\":[0,0,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":52,\"s\":[100,100,100]},{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":121,\"s\":[110,110,100]},{\"t\":208,\"s\":[100,100,100]}],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":6,\"ty\":3,\"nm\":\"Split-Down"}, {"id": "assets/lottie/birds.json_36", "file": "assets/lottie/birds.json", "content": "2\",\"parent\":1,\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":61,\"s\":[0,0,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":130,\"s\":[-53.5,55,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"t\":217,\"s\":[0,0,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":61,\"s\":[100,100,100]},{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":130,\"s\":[90,90,100]},{\"t\":217,\"s\":[100,100,100]}],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":7,\"ty\":3,\"nm\":\"Split-Down"}, {"id": "assets/lottie/birds.json_37", "file": "assets/lottie/birds.json", "content": " 3\",\"parent\":1,\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":0,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":46,\"s\":[0,0,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"i\":{\"x\":0.6,\"y\":1},\"o\":{\"x\":0.6,\"y\":0},\"t\":115,\"s\":[-175.5,173,0],\"to\":[0,0,0],\"ti\":[0,0,0]},{\"t\":202,\"s\":[0,0,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1,\"l\":2},\"s\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":46,\"s\":[100,100,100]},{\"i\":{\"x\":[0.6,0.6,0.6],\"y\":[1,1,1]},\"o\":{\"x\":[0.6,0.6,0.6],\"y\":[0,0,0]},\"t\":115,\"s\":[115,115,100]},{\"t\":202,\"s\":[110,110,100]}],\"ix\":6,\"l\":2}},\"ao\":0,\"ip\":0,\"op\":482,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":8,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[423,317,0],\"to\":[-157.5,-153,0],\"ti\":[441.333,61.333,0]},{\"t\":120,\"s\":[-772.442,-223.446,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":0,\"op\":121,\"st\":-50,\"bm\":0},{\"ddd\":0,\"ind\":9,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":5,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":10,\"s\":[373,367,0],\"to\":[-238.5,-242,0],\"ti\":[478.333,14.333,0]},{\"t\":130,\"s\":[-685,-143,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":10,\"op\":131,\"st\":10,\"bm\":0},{\"ddd\":0,\"ind\":10,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":10,\"s\":[446,326,0],\"to\":[-31.705,-183.193,0],\"ti\":[555.453,-149.377,0]},{\"t\":120,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":10,\"op\":131,\"st\":10,\"bm\":0},{\"ddd\":0,\"ind\":11,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":25,\"s\":[262,365,0],\"to\":[-186.5,-414,0],\"ti\":[406.333,-113.667,0]},{\"t\":136,\"s\":[-681,-96,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":25,\"op\":146,\"st\":25,\"bm\":0},{\"ddd\":0,\"ind\":12,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":2,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":20,\"s\":[466,346,0],\"to\":[-289.705,-371.193,0],\"ti\":[485.453,196.623,0]},{\"t\":120,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":20,\"op\":125,\"st\":20,\"bm\":0},{\"ddd\":0,\"ind\":13,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":22,\"s\":[262,365,0],\"to\":[-203.5,-412,0],\"ti\":[361.333,167.333,0]},{\"t\":143,\"s\":[-681,-96,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":22,\"op\":146,\"st\":22,\"bm\":0},{\"ddd\":0,\"ind\":14,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":14,\"s\":[651,259,0],\"to\":[-185.5,-197,0],\"ti\":[471.333,-158.667,0]},{\"t\":134,\"s\":[-831.19,-12.166,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":14,\"op\":135,\"st\":14,\"bm\":0},{\"ddd\":0,\"ind\":15,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":34,\"s\":[213,367,0],\"to\":[-62.5,-306,0],\"ti\":[296.333,238.333,0]},{\"t\":144,\"s\":[-609,-337,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":34,\"op\":155,\"st\":-32,\"bm\":0},{\"ddd\":0,\"ind\":16,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":24,\"s\":[492,346,0],\"to\":[-291.705,-361.193,0],\"ti\":[525.453,22.623,0]},{\"t\":134,\"s\":[-664.364,-202.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":24,\"op\":145,\"st\":-41,\"bm\":0},{\"ddd\":0,\"ind\":17,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":39,\"s\":[358,375,0],\"to\":[-616.5,-246,0],\"ti\":[338.333,-65.667,0]},{\"t\":150,\"s\":[-675,-62,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":39,\"op\":160,\"st\":-27,\"bm\":0},{\"ddd\":0,\"ind\":18,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":34,\"s\":[574,364,0],\"to\":[-217.705,-387.193,0],\"ti\":[571.453,146.623,0]},{\"t\":134,\"s\":[-634.364,-348.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":34,\"op\":155,\"st\":-32,\"bm\":0},{\"ddd\":0,\"ind\":19,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":36,\"s\":[656,255,0],\"to\":[-263.5,-430,0],\"ti\":[395.333,19.333,0]},{\"t\":157,\"s\":[-657,-216,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":36,\"op\":160,\"st\":-33,\"bm\":0},{\"ddd\":0,\"ind\":20,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":4,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":27,\"s\":[519,349,0],\"to\":[-133.5,-221,0],\"ti\":[429.333,39.333,0]},{\"t\":147,\"s\":[-794.969,-166.777,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":27,\"op\":148,\"st\":-123,\"bm\":0},{\"ddd\":0,\"ind\":21,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":37,\"s\":[319,373,0],\"to\":[-162.5,-290,0],\"ti\":[478.333,14.333,0]},{\"t\":157,\"s\":[-685,-99,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":37,\"op\":158,\"st\":-183,\"bm\":0},{\"ddd\":0,\"ind\":22,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":14.589,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":37,\"s\":[522,370,0],\"to\":[-5.705,-265.193,0],\"ti\":[555.453,-149.377,0]},{\"t\":147,\"s\":[-646.364,-228.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":37,\"op\":158,\"st\":-153,\"bm\":0},{\"ddd\":0,\"ind\":23,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":6,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":52,\"s\":[648,229,0],\"to\":[-470.5,-294,0],\"ti\":[426.333,20.333,0]},{\"t\":163,\"s\":[-681,-166,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":52,\"op\":173,\"st\":-119,\"bm\":0},{\"ddd\":0,\"ind\":24,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":47,\"s\":[468,390,0],\"to\":[-289.705,-371.193,0],\"ti\":[485.453,196.623,0]},{\"t\":147,\"s\":[-752.765,-267.533,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":47,\"op\":168,\"st\":-96,\"bm\":0},{\"ddd\":0,\"ind\":25,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":36,\"s\":[604,365,0],\"to\":[-203.5,-412,0],\"ti\":[405.333,3.333,0]},{\"t\":157,\"s\":[-681,-166,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":36,\"op\":160,\"st\":-124,\"bm\":0},{\"ddd\":0,\"ind\":26,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":42,\"s\":[475,373,0],\"to\":[-101.5,-244,0],\"ti\":[689.333,84.333,0]},{\"t\":162,\"s\":[-684.256,-281.48,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":42,\"op\":163,\"st\":-33,\"bm\":0},{\"ddd\":0,\"ind\":27,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":53,\"s\":[336,391,0],\"to\":[-71.5,-349,0],\"ti\":[263.333,243.333,0]},{\"t\":163,\"s\":[-609,-337,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":53,\"op\":174,\"st\":-13,\"bm\":0},{\"ddd\":0,\"ind\":28,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":3,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":54,\"s\":[517,399,0],\"to\":[-171.705,-283.193,0],\"ti\":[525.453,22.623,0]},{\"t\":164,\"s\":[-664.364,-121.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":54,\"op\":175,\"st\":-11,\"bm\":0},{\"ddd\":0,\"ind\":29,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":49,\"s\":[370,391,0],\"to\":[-413.5,-340,0],\"ti\":[327.333,203.333,0]},{\"t\":160,\"s\":[-677,-151,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":49,\"op\":170,\"st\":-17,\"bm\":0},{\"ddd\":0,\"ind\":30,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":2,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":59,\"s\":[557.118,370.138,0],\"to\":[-143.705,-419.193,0],\"ti\":[571.453,146.623,0]},{\"t\":159,\"s\":[-734.972,-306.871,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":59,\"op\":160,\"st\":-7,\"bm\":0},{\"ddd\":0,\"ind\":31,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":54,\"s\":[656,255,0],\"to\":[-263.5,-430,0],\"ti\":[395.333,19.333,0]},{\"t\":175,\"s\":[-653,-114,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":54,\"op\":178,\"st\":-15,\"bm\":0},{\"ddd\":0,\"ind\":32,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":53,\"s\":[473.001,398.001,0],\"to\":[-189.5,-219,0],\"ti\":[429.333,39.333,0]},{\"t\":173,\"s\":[-739.347,-281.466,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":49,\"op\":174,\"st\":49,\"bm\":0},{\"ddd\":0,\"ind\":33,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":62,\"s\":[250.956,406.913,0],\"to\":[-162.5,-290,0],\"ti\":[478.333,14.333,0]},{\"t\":182,\"s\":[-685,-43,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":62,\"op\":196,\"st\":62,\"bm\":0},{\"ddd\":0,\"ind\":34,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":3,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":14.589,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":62,\"s\":[665,280,0],\"to\":[-103.705,-254.193,0],\"ti\":[494.453,35.623,0]},{\"t\":172,\"s\":[-618.364,-340.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":62,\"op\":183,\"st\":62,\"bm\":0},{\"ddd\":0,\"ind\":35,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":67,\"s\":[556.054,353.019,0],\"to\":[-667.5,-301,0],\"ti\":[426.333,20.333,0]},{\"t\":178,\"s\":[-681,-276,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":67,\"op\":180,\"st\":67,\"bm\":0},{\"ddd\":0,\"ind\":36,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":7,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":58,\"s\":[534.952,394.856,0],\"to\":[-203.5,-412,0],\"ti\":[405.333,3.333,0]},{\"t\":179,\"s\":[-681,-257,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":58,\"op\":182,\"st\":58,\"bm\":0},{\"ddd\":0,\"ind\":37,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":2,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":36.957,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":72,\"s\":[539.925,418.092,0],\"to\":[-289.705,-371.193,0],\"ti\":[605.453,-27.377,0]},{\"t\":172,\"s\":[-855.704,-45.442,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":72,\"op\":193,\"st\":72,\"bm\":0},{\"ddd\":0,\"ind\":38,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":67,\"s\":[493.21,415.42,0],\"to\":[-101.5,-244,0],\"ti\":[689.333,84.333,0]},{\"t\":187,\"s\":[-666.475,-291.581,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":67,\"op\":188,\"st\":-8,\"bm\":0},{\"ddd\":0,\"ind\":39,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":36.203,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":78,\"s\":[329.893,376.821,0],\"to\":[-71.5,-349,0],\"ti\":[263.333,243.333,0]},{\"t\":188,\"s\":[-609,-337,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":78,\"op\":199,\"st\":12,\"bm\":0},{\"ddd\":0,\"ind\":40,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":79,\"s\":[534.452,382.342,0],\"to\":[-171.705,-283.193,0],\"ti\":[525.453,22.623,0]},{\"t\":189,\"s\":[-664.364,-121.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":79,\"op\":200,\"st\":14,\"bm\":0},{\"ddd\":0,\"ind\":41,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":74,\"s\":[456.23,401.177,0],\"to\":[-399.5,-370,0],\"ti\":[327.333,203.333,0]},{\"t\":185,\"s\":[-677,-151,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":74,\"op\":195,\"st\":8,\"bm\":0},{\"ddd\":0,\"ind\":42,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":78,\"s\":[515.241,454.01,0],\"to\":[-173.705,-412.193,0],\"ti\":[445.453,-2.377,0]},{\"t\":178,\"s\":[-758.376,-224.074,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":78,\"op\":199,\"st\":12,\"bm\":0},{\"ddd\":0,\"ind\":43,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":64,\"s\":[656,255,0],\"to\":[-303.5,-390,0],\"ti\":[395.333,19.333,0]},{\"t\":185,\"s\":[-648,-159,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":64,\"op\":188,\"st\":-5,\"bm\":0},{\"ddd\":0,\"ind\":44,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":39.231,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":71,\"s\":[499.363,410.363,0],\"to\":[-189.5,-219,0],\"ti\":[429.333,39.333,0]},{\"t\":188,\"s\":[-619,-217,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":64,\"op\":189,\"st\":-101,\"bm\":0},{\"ddd\":0,\"ind\":45,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":82,\"s\":[362,367,0],\"to\":[-162.5,-290,0],\"ti\":[478.333,14.333,0]},{\"t\":202,\"s\":[-685,-149,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":82,\"op\":205,\"st\":-106,\"bm\":0},{\"ddd\":0,\"ind\":46,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":3,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":14.589,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":72,\"s\":[665,280,0],\"to\":[-103.705,-254.193,0],\"ti\":[494.453,35.623,0]},{\"t\":182,\"s\":[-654.364,-292.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":72,\"op\":193,\"st\":-71,\"bm\":0},{\"ddd\":0,\"ind\":47,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":84,\"s\":[432.886,397.97,0],\"to\":[-174.5,-389,0],\"ti\":[454.333,-50.667,0]},{\"t\":195,\"s\":[-681,-157,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":84,\"op\":197,\"st\":-144,\"bm\":0},{\"ddd\":0,\"ind\":48,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":70,\"s\":[586,328,0],\"to\":[-203.5,-412,0],\"ti\":[184.333,324.333,0]},{\"t\":191,\"s\":[-521,-371,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":70,\"op\":194,\"st\":-90,\"bm\":0},{\"ddd\":0,\"ind\":49,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":87,\"s\":[521.093,423.276,0],\"to\":[-289.705,-371.193,0],\"ti\":[605.453,-27.377,0]},{\"t\":187,\"s\":[-706.364,-46.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":87,\"op\":208,\"st\":-63,\"bm\":0},{\"ddd\":0,\"ind\":50,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":92,\"s\":[541.012,390.758,0],\"to\":[-157.5,-153,0],\"ti\":[559.333,59.333,0]},{\"t\":212,\"s\":[-679.78,-181.805,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":92,\"op\":213,\"st\":42,\"bm\":0},{\"ddd\":0,\"ind\":51,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":5,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":88,\"s\":[373,367,0],\"to\":[-238.5,-242,0],\"ti\":[478.333,14.333,0]},{\"t\":208,\"s\":[-685,-143,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":88,\"op\":209,\"st\":88,\"bm\":0},{\"ddd\":0,\"ind\":52,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":88,\"s\":[467.451,403.753,0],\"to\":[-53.156,-259.246,0],\"ti\":[555.453,-149.377,0]},{\"t\":198,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":88,\"op\":209,\"st\":88,\"bm\":0},{\"ddd\":0,\"ind\":53,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":85,\"s\":[272.153,405.613,0],\"to\":[-186.5,-414,0],\"ti\":[406.333,-113.667,0]},{\"t\":196,\"s\":[-681,-96,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":85,\"op\":206,\"st\":85,\"bm\":0},{\"ddd\":0,\"ind\":54,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":2,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":97,\"s\":[599.74,405.49,0],\"to\":[-325.705,-334.193,0],\"ti\":[485.453,196.623,0]},{\"t\":197,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":97,\"op\":218,\"st\":97,\"bm\":0},{\"ddd\":0,\"ind\":55,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":88,\"s\":[262,365,0],\"to\":[-203.5,-412,0],\"ti\":[361.333,167.333,0]},{\"t\":209,\"s\":[-681,-96,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":88,\"op\":212,\"st\":88,\"bm\":0},{\"ddd\":0,\"ind\":56,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":80,\"s\":[651,259,0],\"to\":[-185.5,-197,0],\"ti\":[471.333,-158.667,0]},{\"t\":200,\"s\":[-697,-41,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":80,\"op\":201,\"st\":80,\"bm\":0},{\"ddd\":0,\"ind\":57,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":38.014,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":105,\"s\":[275,367,0],\"to\":[-142.5,-291,0],\"ti\":[296.333,238.333,0]},{\"t\":215,\"s\":[-609,-337,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":105,\"op\":226,\"st\":39,\"bm\":0},{\"ddd\":0,\"ind\":58,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":90,\"s\":[524.722,378.664,0],\"to\":[-291.705,-361.193,0],\"ti\":[525.453,22.623,0]},{\"t\":200,\"s\":[-664.364,-202.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":90,\"op\":211,\"st\":25,\"bm\":0},{\"ddd\":0,\"ind\":59,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":105,\"s\":[344,365,0],\"to\":[-616.5,-246,0],\"ti\":[338.333,-65.667,0]},{\"t\":216,\"s\":[-675,-62,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":105,\"op\":226,\"st\":39,\"bm\":0},{\"ddd\":0,\"ind\":60,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":100,\"s\":[554,328,0],\"to\":[-217.705,-387.193,0],\"ti\":[571.453,146.623,0]},{\"t\":200,\"s\":[-634.364,-348.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":100,\"op\":221,\"st\":34,\"bm\":0},{\"ddd\":0,\"ind\":61,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":102,\"s\":[656,255,0],\"to\":[-263.5,-430,0],\"ti\":[395.333,19.333,0]},{\"t\":223,\"s\":[-657,-216,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":102,\"op\":226,\"st\":33,\"bm\":0},{\"ddd\":0,\"ind\":62,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":4,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":93,\"s\":[536.822,352.253,0],\"to\":[-133.5,-221,0],\"ti\":[429.333,39.333,0]},{\"t\":213,\"s\":[-672.585,-154.656,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":93,\"op\":214,\"st\":-57,\"bm\":0},{\"ddd\":0,\"ind\":63,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":103,\"s\":[317,367,0],\"to\":[-162.5,-290,0],\"ti\":[478.333,14.333,0]},{\"t\":223,\"s\":[-685,-99,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":103,\"op\":224,\"st\":-117,\"bm\":0},{\"ddd\":0,\"ind\":64,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-5.726,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":98,\"s\":[522,370,0],\"to\":[-5.705,-265.193,0],\"ti\":[538.453,-24.377,0]},{\"t\":208,\"s\":[-646.364,-228.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":98,\"op\":219,\"st\":-92,\"bm\":0},{\"ddd\":0,\"ind\":65,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":6,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":13.921,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":114,\"s\":[711.429,250.872,0],\"to\":[-470.5,-294,0],\"ti\":[426.333,20.333,0]},{\"t\":225,\"s\":[-681,-166,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":114,\"op\":235,\"st\":-57,\"bm\":0},{\"ddd\":0,\"ind\":66,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":113,\"s\":[523.485,412.269,0],\"to\":[-286.705,-444.193,0],\"ti\":[491.453,157.623,0]},{\"t\":213,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":113,\"op\":234,\"st\":-30,\"bm\":0},{\"ddd\":0,\"ind\":67,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":102,\"s\":[604,365,0],\"to\":[-203.5,-412,0],\"ti\":[405.333,3.333,0]},{\"t\":223,\"s\":[-681,-166,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":102,\"op\":226,\"st\":-58,\"bm\":0},{\"ddd\":0,\"ind\":68,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":108,\"s\":[502.773,510.864,0],\"to\":[-87.121,-382.258,0],\"ti\":[689.333,84.333,0]},{\"t\":228,\"s\":[-680.763,-270.177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":108,\"op\":229,\"st\":33,\"bm\":0},{\"ddd\":0,\"ind\":69,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":113,\"s\":[324,367,0],\"to\":[-71.5,-349,0],\"ti\":[263.333,243.333,0]},{\"t\":223,\"s\":[-615,-345,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":113,\"op\":234,\"st\":47,\"bm\":0},{\"ddd\":0,\"ind\":70,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":3,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":118,\"s\":[505.075,366.8,0],\"to\":[-171.705,-283.193,0],\"ti\":[525.453,22.623,0]},{\"t\":228,\"s\":[-664.364,-121.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":118,\"op\":239,\"st\":53,\"bm\":0},{\"ddd\":0,\"ind\":71,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":115,\"s\":[344,365,0],\"to\":[-413.5,-340,0],\"ti\":[327.333,203.333,0]},{\"t\":226,\"s\":[-677,-151,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":115,\"op\":236,\"st\":49,\"bm\":0},{\"ddd\":0,\"ind\":72,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":2,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":125,\"s\":[593.859,389.108,0],\"to\":[-143.705,-419.193,0],\"ti\":[572.473,174.144,0]},{\"t\":225,\"s\":[-671.058,-250.227,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":125,\"op\":246,\"st\":59,\"bm\":0},{\"ddd\":0,\"ind\":73,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":120,\"s\":[656,255,0],\"to\":[-263.5,-430,0],\"ti\":[395.333,19.333,0]},{\"t\":241,\"s\":[-653,-114,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":120,\"op\":244,\"st\":51,\"bm\":0},{\"ddd\":0,\"ind\":74,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":114,\"s\":[585.276,436.436,0],\"to\":[-330.585,-279.436,0],\"ti\":[464.954,2.695,0]},{\"t\":234,\"s\":[-661.745,-193.592,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":110,\"op\":235,\"st\":110,\"bm\":0},{\"ddd\":0,\"ind\":75,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":128,\"s\":[231,367,0],\"to\":[-162.5,-290,0],\"ti\":[478.333,14.333,0]},{\"t\":248,\"s\":[-685,-43,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":128,\"op\":262,\"st\":128,\"bm\":0},{\"ddd\":0,\"ind\":76,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":3,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":14.589,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":128,\"s\":[665,280,0],\"to\":[-103.705,-254.193,0],\"ti\":[494.453,35.623,0]},{\"t\":238,\"s\":[-618.364,-340.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":128,\"op\":249,\"st\":128,\"bm\":0},{\"ddd\":0,\"ind\":77,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":123,\"s\":[484,327,0],\"to\":[-667.5,-301,0],\"ti\":[426.333,20.333,0]},{\"t\":234,\"s\":[-681,-276,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":123,\"op\":236,\"st\":123,\"bm\":0},{\"ddd\":0,\"ind\":78,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":7,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":122,\"s\":[525,365,0],\"to\":[-294.5,-390,0],\"ti\":[405.333,3.333,0]},{\"t\":243,\"s\":[-681,-257,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":122,\"op\":246,\"st\":122,\"bm\":0},{\"ddd\":0,\"ind\":79,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":2,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":36.957,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":138,\"s\":[611.336,458.049,0],\"to\":[-375.866,-466.669,0],\"ti\":[605.453,-27.377,0]},{\"t\":238,\"s\":[-706.364,-46.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":138,\"op\":259,\"st\":138,\"bm\":0},{\"ddd\":0,\"ind\":80,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":133,\"s\":[509.469,482.261,0],\"to\":[-33.959,-315.97,0],\"ti\":[689.333,84.333,0]},{\"t\":253,\"s\":[-668.55,-267.124,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":133,\"op\":254,\"st\":58,\"bm\":0},{\"ddd\":0,\"ind\":81,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":36.203,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":140,\"s\":[324,367,0],\"to\":[-71.5,-349,0],\"ti\":[223.333,462.333,0]},{\"t\":250,\"s\":[-609,-337,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":140,\"op\":261,\"st\":74,\"bm\":0},{\"ddd\":0,\"ind\":82,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-126.437,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":147,\"s\":[485,323,0],\"to\":[-171.705,-283.193,0],\"ti\":[525.453,22.623,0]},{\"t\":257,\"s\":[-664.364,-121.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":147,\"op\":268,\"st\":82,\"bm\":0},{\"ddd\":0,\"ind\":83,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":132,\"s\":[396,355,0],\"to\":[-364.5,-442,0],\"ti\":[367.333,79.333,0]},{\"t\":243,\"s\":[-677,-151,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":132,\"op\":253,\"st\":66,\"bm\":0},{\"ddd\":0,\"ind\":84,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":144,\"s\":[622.627,473.628,0],\"to\":[-279.624,-545.798,0],\"ti\":[445.453,-2.377,0]},{\"t\":244,\"s\":[-666.981,-230.86,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":144,\"op\":265,\"st\":78,\"bm\":0},{\"ddd\":0,\"ind\":85,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":127,\"s\":[656,255,0],\"to\":[-383.5,-327,0],\"ti\":[395.333,19.333,0]},{\"t\":248,\"s\":[-648,-159,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":127,\"op\":251,\"st\":58,\"bm\":0},{\"ddd\":0,\"ind\":86,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":39.231,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":134,\"s\":[566.331,489.51,0],\"to\":[-189.5,-219,0],\"ti\":[429.333,39.333,0]},{\"t\":254,\"s\":[-683.219,-238.037,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":130,\"op\":255,\"st\":-35,\"bm\":0},{\"ddd\":0,\"ind\":87,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":148,\"s\":[362,367,0],\"to\":[-162.5,-290,0],\"ti\":[478.333,14.333,0]},{\"t\":268,\"s\":[-685,-149,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":148,\"op\":271,\"st\":-40,\"bm\":0},{\"ddd\":0,\"ind\":88,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":3,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":14.589,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":138,\"s\":[665,280,0],\"to\":[-103.705,-254.193,0],\"ti\":[494.453,35.623,0]},{\"t\":248,\"s\":[-654.364,-292.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[200,200,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":138,\"op\":259,\"st\":-5,\"bm\":0},{\"ddd\":0,\"ind\":89,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":147,\"s\":[368,327,0],\"to\":[-174.5,-389,0],\"ti\":[454.333,-50.667,0]},{\"t\":258,\"s\":[-681,-157,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[220,220,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":147,\"op\":260,\"st\":-81,\"bm\":0},{\"ddd\":0,\"ind\":90,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":142,\"s\":[586,328,0],\"to\":[-203.5,-412,0],\"ti\":[184.333,324.333,0]},{\"t\":263,\"s\":[-521,-371,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[180,180,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":142,\"op\":266,\"st\":-18,\"bm\":0},{\"ddd\":0,\"ind\":91,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":155,\"s\":[559.402,503.891,0],\"to\":[-289.705,-371.193,0],\"ti\":[605.453,-27.377,0]},{\"t\":255,\"s\":[-890.92,-28.802,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[160,160,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":155,\"op\":276,\"st\":5,\"bm\":0},{\"ddd\":0,\"ind\":92,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[451,334,0],\"to\":[-163.5,-167,0],\"ti\":[605.676,1.333,0]},{\"t\":160,\"s\":[-692.905,-185.156,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[80,80,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":0,\"op\":163,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":93,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":5,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":17,\"s\":[373,367,0],\"to\":[-219.5,-291,0],\"ti\":[478.333,14.333,0]},{\"t\":177,\"s\":[-685,-143,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":17,\"op\":180,\"st\":17,\"bm\":0},{\"ddd\":0,\"ind\":94,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":16,\"s\":[462,346,0],\"to\":[-31.705,-183.193,0],\"ti\":[555.453,-149.377,0]},{\"t\":166,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":16,\"op\":179,\"st\":16,\"bm\":0},{\"ddd\":0,\"ind\":95,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":32,\"s\":[363,363,0],\"to\":[-197.5,-415,0],\"ti\":[470.333,3.333,0]},{\"t\":183,\"s\":[-651,-261,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[140,140,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":32,\"op\":195,\"st\":32,\"bm\":0},{\"ddd\":0,\"ind\":96,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":2,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":18,\"s\":[500,337,0],\"to\":[-289.705,-371.193,0],\"ti\":[474.453,245.623,0]},{\"t\":158,\"s\":[-604.364,-328.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":18,\"op\":181,\"st\":18,\"bm\":0},{\"ddd\":0,\"ind\":97,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":32,\"s\":[262,365,0],\"to\":[-203.5,-412,0],\"ti\":[361.333,-6.667,0]},{\"t\":193,\"s\":[-681,-96,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":32,\"op\":198,\"st\":32,\"bm\":0},{\"ddd\":0,\"ind\":98,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":4,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":10,\"s\":[449,328,0],\"to\":[-157.5,-153,0],\"ti\":[384.333,254.333,0]},{\"t\":170,\"s\":[-654.215,-299.442,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[80,80,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":10,\"op\":173,\"st\":-70,\"bm\":0},{\"ddd\":0,\"ind\":99,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":33,\"s\":[596,345,0],\"to\":[-238.5,-242,0],\"ti\":[478.333,14.333,0]},{\"t\":193,\"s\":[-659,-228,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":33,\"op\":196,\"st\":-117,\"bm\":0},{\"ddd\":0,\"ind\":100,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":22,\"s\":[578,347,0],\"to\":[-121.705,-277.193,0],\"ti\":[404.453,316.623,0]},{\"t\":172,\"s\":[-558.018,-339.245,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":22,\"op\":185,\"st\":-98,\"bm\":0},{\"ddd\":0,\"ind\":101,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":6,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":43,\"s\":[367,377,0],\"to\":[-187.5,-423,0],\"ti\":[417.333,-21.667,0]},{\"t\":194,\"s\":[-669,-160,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[140,140,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":43,\"op\":206,\"st\":-58,\"bm\":0},{\"ddd\":0,\"ind\":102,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":30,\"s\":[564,355,0],\"to\":[-289.705,-371.193,0],\"ti\":[474.453,245.623,0]},{\"t\":170,\"s\":[-500.364,-356.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":30,\"op\":193,\"st\":-43,\"bm\":0},{\"ddd\":0,\"ind\":103,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":48,\"s\":[313.998,382.995,0],\"to\":[-189.502,-435.997,0],\"ti\":[361.333,167.333,0]},{\"t\":209,\"s\":[-663,-197,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":48,\"op\":214,\"st\":-42,\"bm\":0},{\"ddd\":0,\"ind\":104,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":4,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":19,\"s\":[453,332,0],\"to\":[-205.5,-120,0],\"ti\":[581.333,50.333,0]},{\"t\":179,\"s\":[-638,-208,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[80,80,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":19,\"op\":182,\"st\":19,\"bm\":0},{\"ddd\":0,\"ind\":105,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":43,\"s\":[516.5,382.5,0],\"to\":[-219.5,-291,0],\"ti\":[496.333,-9.667,0]},{\"t\":203,\"s\":[-675,-177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":43,\"op\":206,\"st\":43,\"bm\":0},{\"ddd\":0,\"ind\":106,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":3,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":38,\"s\":[506,370,0],\"to\":[-209.705,-168.193,0],\"ti\":[710.453,-70.377,0]},{\"t\":188,\"s\":[-706.364,-210.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":38,\"op\":201,\"st\":38,\"bm\":0},{\"ddd\":0,\"ind\":107,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":56,\"s\":[373,397,0],\"to\":[-189.5,-431,0],\"ti\":[470.333,3.333,0]},{\"t\":207,\"s\":[-651,-261,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[140,140,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":56,\"op\":219,\"st\":56,\"bm\":0},{\"ddd\":0,\"ind\":108,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":39,\"s\":[516,373,0],\"to\":[-289.705,-371.193,0],\"ti\":[434.453,295.623,0]},{\"t\":179,\"s\":[-623.066,-336.903,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":39,\"op\":202,\"st\":39,\"bm\":0},{\"ddd\":0,\"ind\":109,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":53,\"s\":[275.978,390.96,0],\"to\":[-203.5,-412,0],\"ti\":[319.333,45.333,0]},{\"t\":214,\"s\":[-677,-106,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":53,\"op\":219,\"st\":53,\"bm\":0},{\"ddd\":0,\"ind\":110,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":31,\"s\":[449,352,0],\"to\":[-146.5,-316,0],\"ti\":[384.333,254.333,0]},{\"t\":191,\"s\":[-632.018,-308.301,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[80,80,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":31,\"op\":194,\"st\":-42,\"bm\":0},{\"ddd\":0,\"ind\":111,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":54,\"s\":[584,337,0],\"to\":[-238.5,-242,0],\"ti\":[478.333,14.333,0]},{\"t\":220,\"s\":[-659,-228,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":54,\"op\":225,\"st\":-58,\"bm\":0},{\"ddd\":0,\"ind\":112,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":3,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":43,\"s\":[580,325,0],\"to\":[-121.705,-277.193,0],\"ti\":[404.453,316.623,0]},{\"t\":193,\"s\":[-564.178,-341.466,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":43,\"op\":206,\"st\":-37,\"bm\":0},{\"ddd\":0,\"ind\":113,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":63,\"s\":[420.503,417.007,0],\"to\":[-216.5,-469.004,0],\"ti\":[432.333,-67.667,0]},{\"t\":214,\"s\":[-671,-150,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[140,140,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":63,\"op\":226,\"st\":-87,\"bm\":0},{\"ddd\":0,\"ind\":114,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":2,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":51,\"s\":[562.003,351.003,0],\"to\":[-289.705,-371.193,0],\"ti\":[474.453,245.623,0]},{\"t\":191,\"s\":[-542.775,-382.845,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":51,\"op\":214,\"st\":-50,\"bm\":0},{\"ddd\":0,\"ind\":115,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":60,\"s\":[313.813,392.679,0],\"to\":[-219.393,-453.719,0],\"ti\":[361.333,167.333,0]},{\"t\":227,\"s\":[-674,-149,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":60,\"op\":232,\"st\":-24,\"bm\":0},{\"ddd\":0,\"ind\":116,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":62,\"s\":[529.214,406.205,0],\"to\":[-211.618,-235.179,0],\"ti\":[573.333,1.333,0]},{\"t\":222,\"s\":[-675.532,-159.035,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[80,80,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":62,\"op\":225,\"st\":62,\"bm\":0},{\"ddd\":0,\"ind\":117,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":79,\"s\":[382.805,378.766,0],\"to\":[-219.5,-291,0],\"ti\":[478.333,14.333,0]},{\"t\":239,\"s\":[-685,-143,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":79,\"op\":242,\"st\":79,\"bm\":0},{\"ddd\":0,\"ind\":118,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":-165.091,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":78,\"s\":[471.745,416.999,0],\"to\":[-67.352,-274.29,0],\"ti\":[459.453,-1.377,0]},{\"t\":228,\"s\":[-654.364,-320.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":78,\"op\":241,\"st\":78,\"bm\":0},{\"ddd\":0,\"ind\":119,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":94,\"s\":[375.933,390.665,0],\"to\":[-197.5,-415,0],\"ti\":[470.333,3.333,0]},{\"t\":245,\"s\":[-651,-261,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[140,140,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":94,\"op\":257,\"st\":94,\"bm\":0},{\"ddd\":0,\"ind\":120,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":2,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":94,\"s\":[344.081,546.909,0],\"to\":[-223.466,-553.978,0],\"ti\":[350.333,37.333,0]},{\"t\":255,\"s\":[-681,-96,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":94,\"op\":260,\"st\":94,\"bm\":0},{\"ddd\":0,\"ind\":121,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":80,\"s\":[500,337,0],\"to\":[-289.705,-371.193,0],\"ti\":[474.453,245.623,0]},{\"t\":220,\"s\":[-604.364,-328.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":80,\"op\":243,\"st\":80,\"bm\":0},{\"ddd\":0,\"ind\":122,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":4,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":98,\"s\":[584,337,0],\"to\":[-238.5,-242,0],\"ti\":[478.333,14.333,0]},{\"t\":258,\"s\":[-659,-228,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":98,\"op\":261,\"st\":-80,\"bm\":0},{\"ddd\":0,\"ind\":123,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":72,\"s\":[516.156,389.234,0],\"to\":[-224.832,-222.313,0],\"ti\":[384.333,254.333,0]},{\"t\":232,\"s\":[-631,-291,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[80,80,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":72,\"op\":235,\"st\":-76,\"bm\":0},{\"ddd\":0,\"ind\":124,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":105,\"s\":[373.137,383.807,0],\"to\":[-197.5,-415,0],\"ti\":[432.333,-67.667,0]},{\"t\":256,\"s\":[-671,-150,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[140,140,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":105,\"op\":268,\"st\":-24,\"bm\":0},{\"ddd\":0,\"ind\":125,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":6,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":84,\"s\":[570.083,311,0],\"to\":[-121.705,-277.193,0],\"ti\":[404.453,316.623,0]},{\"t\":234,\"s\":[-575.187,-350.189,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":84,\"op\":247,\"st\":-17,\"bm\":0},{\"ddd\":0,\"ind\":126,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":2,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":110,\"s\":[402.949,616.412,0],\"to\":[-278.372,-580.463,0],\"ti\":[377.712,242.206,0]},{\"t\":271,\"s\":[-671.154,-199.039,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":110,\"op\":276,\"st\":-8,\"bm\":0},{\"ddd\":0,\"ind\":127,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":92,\"s\":[508.981,281.285,0],\"to\":[-289.705,-371.193,0],\"ti\":[522.453,168.623,0]},{\"t\":232,\"s\":[-500.364,-356.59,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[120,120,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":92,\"op\":255,\"st\":-16,\"bm\":0},{\"ddd\":0,\"ind\":128,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[539,338,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":132,\"s\":[-707.546,-255.4,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":0,\"op\":133,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":129,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":3,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":11,\"s\":[539,341,0],\"to\":[-135.5,-235,0],\"ti\":[559.333,11.333,0]},{\"t\":133,\"s\":[-658,-263,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":11,\"op\":144,\"st\":11,\"bm\":0},{\"ddd\":0,\"ind\":130,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":28,\"s\":[608,335,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":151,\"s\":[-661,-281.557,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":28,\"op\":161,\"st\":28,\"bm\":0},{\"ddd\":0,\"ind\":131,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":4,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":11,\"s\":[557,348,0],\"to\":[-157.5,-153,0],\"ti\":[715.412,6.107,0]},{\"t\":143,\"s\":[-761.218,-245.409,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":11,\"op\":144,\"st\":11,\"bm\":0},{\"ddd\":0,\"ind\":132,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":29,\"s\":[499,351,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":141,\"s\":[-645,-208,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":29,\"op\":162,\"st\":29,\"bm\":0},{\"ddd\":0,\"ind\":133,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":32,\"s\":[587,360,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":164,\"s\":[-725.79,-254.358,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":32,\"op\":168,\"st\":32,\"bm\":0},{\"ddd\":0,\"ind\":134,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":4,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":4,\"s\":[505,339,0],\"to\":[-157.5,-153,0],\"ti\":[699.914,10.331,0]},{\"t\":136,\"s\":[-826.156,-209.786,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":4,\"op\":137,\"st\":-127,\"bm\":0},{\"ddd\":0,\"ind\":135,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":20,\"s\":[558,342,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":142,\"s\":[-645,-302,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":20,\"op\":153,\"st\":-131,\"bm\":0},{\"ddd\":0,\"ind\":136,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":2,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":24,\"s\":[508,341,0],\"to\":[-243.5,-321,0],\"ti\":[626.748,-1.559,0]},{\"t\":147,\"s\":[-823.399,-177.298,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":24,\"op\":157,\"st\":-135,\"bm\":0},{\"ddd\":0,\"ind\":137,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":4,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":25,\"s\":[525,352,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":157,\"s\":[-711.019,-212.665,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":25,\"op\":158,\"st\":-183,\"bm\":0},{\"ddd\":0,\"ind\":138,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":20,\"s\":[425,342,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":132,\"s\":[-637,-190,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":20,\"op\":153,\"st\":-158,\"bm\":0},{\"ddd\":0,\"ind\":139,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":41,\"s\":[615,334,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":173,\"s\":[-669.978,-263.122,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":41,\"op\":177,\"st\":-94,\"bm\":0},{\"ddd\":0,\"ind\":140,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":27,\"s\":[590,349,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":159,\"s\":[-698.202,-251,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":27,\"op\":160,\"st\":27,\"bm\":0},{\"ddd\":0,\"ind\":141,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":3,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":38,\"s\":[557,379,0],\"to\":[-143.5,-276,0],\"ti\":[559.333,11.333,0]},{\"t\":160,\"s\":[-682,-259,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":38,\"op\":171,\"st\":38,\"bm\":0},{\"ddd\":0,\"ind\":142,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":55,\"s\":[612,333,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":178,\"s\":[-659,-277,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":55,\"op\":188,\"st\":55,\"bm\":0},{\"ddd\":0,\"ind\":143,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":38,\"s\":[567,368,0],\"to\":[-157.5,-153,0],\"ti\":[574.333,19.333,0]},{\"t\":170,\"s\":[-667,-235,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":38,\"op\":171,\"st\":38,\"bm\":0},{\"ddd\":0,\"ind\":144,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":56,\"s\":[530,394,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":168,\"s\":[-638,-187,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":56,\"op\":189,\"st\":56,\"bm\":0},{\"ddd\":0,\"ind\":145,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":59,\"s\":[557.066,344.039,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":191,\"s\":[-649,-241,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":59,\"op\":195,\"st\":59,\"bm\":0},{\"ddd\":0,\"ind\":146,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":36,\"s\":[519,367,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":168,\"s\":[-665.843,-212.482,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":36,\"op\":169,\"st\":36,\"bm\":0},{\"ddd\":0,\"ind\":147,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":47,\"s\":[576,350,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":169,\"s\":[-645,-302,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":47,\"op\":180,\"st\":-104,\"bm\":0},{\"ddd\":0,\"ind\":148,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":2,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":51,\"s\":[532.004,381.005,0],\"to\":[-267.503,-371.006,0],\"ti\":[546.333,5.333,0]},{\"t\":174,\"s\":[-656.144,-179.229,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":51,\"op\":184,\"st\":-108,\"bm\":0},{\"ddd\":0,\"ind\":149,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":4,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":46,\"s\":[551,390,0],\"to\":[-203.5,-239,0],\"ti\":[571.333,14.333,0]},{\"t\":178,\"s\":[-655,-219,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":46,\"op\":179,\"st\":-162,\"bm\":0},{\"ddd\":0,\"ind\":150,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":47,\"s\":[461,382,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":159,\"s\":[-637,-190,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":44,\"op\":160,\"st\":-124,\"bm\":0},{\"ddd\":0,\"ind\":151,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":64,\"s\":[615,328,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":196,\"s\":[-661,-255,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":64,\"op\":200,\"st\":-71,\"bm\":0},{\"ddd\":0,\"ind\":152,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":52,\"s\":[565,362,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":184,\"s\":[-671,-233,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":52,\"op\":185,\"st\":52,\"bm\":0},{\"ddd\":0,\"ind\":153,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":3,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":63,\"s\":[558.996,339,0],\"to\":[-135.5,-235,0],\"ti\":[559.333,11.333,0]},{\"t\":185,\"s\":[-648,-271,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":63,\"op\":196,\"st\":63,\"bm\":0},{\"ddd\":0,\"ind\":154,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":80,\"s\":[606,335,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":203,\"s\":[-669,-275,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":80,\"op\":213,\"st\":80,\"bm\":0},{\"ddd\":0,\"ind\":155,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":4,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":68,\"s\":[663,307,0],\"to\":[-24.251,-23.558,0],\"ti\":[485.901,16.356,0]},{\"t\":200,\"s\":[-663,-257,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":68,\"op\":201,\"st\":68,\"bm\":0},{\"ddd\":0,\"ind\":156,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":81,\"s\":[544.245,376.461,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":193,\"s\":[-625,-208,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":81,\"op\":214,\"st\":81,\"bm\":0},{\"ddd\":0,\"ind\":157,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":84,\"s\":[537,336,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":216,\"s\":[-661,-243,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":84,\"op\":220,\"st\":84,\"bm\":0},{\"ddd\":0,\"ind\":158,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":4,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":56,\"s\":[567.021,373.012,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":188,\"s\":[-641,-226,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":56,\"op\":189,\"st\":-75,\"bm\":0},{\"ddd\":0,\"ind\":159,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":72,\"s\":[562,340,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":194,\"s\":[-645,-302,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":72,\"op\":205,\"st\":-79,\"bm\":0},{\"ddd\":0,\"ind\":160,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":2,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":76,\"s\":[533.231,376.231,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":199,\"s\":[-635,-175,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":76,\"op\":209,\"st\":-83,\"bm\":0},{\"ddd\":0,\"ind\":161,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":4,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":77,\"s\":[557.911,372.607,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":209,\"s\":[-657,-223,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":77,\"op\":210,\"st\":-131,\"bm\":0},{\"ddd\":0,\"ind\":162,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":72,\"s\":[492.651,401.687,0],\"to\":[-231.142,-247.607,0],\"ti\":[580.333,41.333,0]},{\"t\":184,\"s\":[-637,-190,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":72,\"op\":205,\"st\":-106,\"bm\":0},{\"ddd\":0,\"ind\":163,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":2,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":89,\"s\":[617,332,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":221,\"s\":[-655,-263,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":89,\"op\":225,\"st\":-46,\"bm\":0},{\"ddd\":0,\"ind\":164,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":78,\"s\":[570,335,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":210,\"s\":[-653,-263,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":78,\"op\":211,\"st\":78,\"bm\":0},{\"ddd\":0,\"ind\":165,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":3,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":89,\"s\":[545,331,0],\"to\":[-143.5,-276,0],\"ti\":[559.333,11.333,0]},{\"t\":211,\"s\":[-660,-265,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":89,\"op\":222,\"st\":89,\"bm\":0},{\"ddd\":0,\"ind\":166,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":106,\"s\":[634,291,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":229,\"s\":[-627,-307,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":106,\"op\":239,\"st\":106,\"bm\":0},{\"ddd\":0,\"ind\":167,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":89,\"s\":[547.798,344.532,0],\"to\":[-157.5,-153,0],\"ti\":[574.333,19.333,0]},{\"t\":221,\"s\":[-653,-243,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":89,\"op\":222,\"st\":89,\"bm\":0},{\"ddd\":0,\"ind\":168,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":3,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":107,\"s\":[510.739,374.161,0],\"to\":[-185.367,-193.872,0],\"ti\":[580.333,41.333,0]},{\"t\":219,\"s\":[-638,-187,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":107,\"op\":240,\"st\":107,\"bm\":0},{\"ddd\":0,\"ind\":169,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":110,\"s\":[537,332,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":242,\"s\":[-645,-235,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":110,\"op\":246,\"st\":110,\"bm\":0},{\"ddd\":0,\"ind\":170,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":4,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":87,\"s\":[548.852,370.081,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":219,\"s\":[-659,-208,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":87,\"op\":220,\"st\":87,\"bm\":0},{\"ddd\":0,\"ind\":171,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":98,\"s\":[560,330,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":220,\"s\":[-645,-302,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":98,\"op\":231,\"st\":-53,\"bm\":0},{\"ddd\":0,\"ind\":172,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":2,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":102,\"s\":[518.357,340.178,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":225,\"s\":[-635,-175,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":102,\"op\":235,\"st\":-57,\"bm\":0},{\"ddd\":0,\"ind\":173,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":4,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":97,\"s\":[550.653,364.248,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":229,\"s\":[-661,-221,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":97,\"op\":230,\"st\":-111,\"bm\":0},{\"ddd\":0,\"ind\":174,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":99,\"s\":[466.24,387.035,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":211,\"s\":[-637,-190,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":98,\"op\":212,\"st\":-71,\"bm\":0},{\"ddd\":0,\"ind\":175,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":115,\"s\":[611,332,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":247,\"s\":[-655,-269,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":115,\"op\":251,\"st\":-20,\"bm\":0},{\"ddd\":0,\"ind\":176,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":4,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":96,\"s\":[556.205,354.803,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":228,\"s\":[-657,-235,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":96,\"op\":229,\"st\":96,\"bm\":0},{\"ddd\":0,\"ind\":177,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":3,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":107,\"s\":[547,329,0],\"to\":[-135.5,-235,0],\"ti\":[559.333,11.333,0]},{\"t\":229,\"s\":[-658,-271,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":107,\"op\":240,\"st\":107,\"bm\":0},{\"ddd\":0,\"ind\":178,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":2,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":124,\"s\":[602,331,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":247,\"s\":[-645,-273,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":124,\"op\":257,\"st\":124,\"bm\":0},{\"ddd\":0,\"ind\":179,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":4,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":112,\"s\":[639,278,0],\"to\":[-142.5,-201,0],\"ti\":[643.333,15.333,0]},{\"t\":244,\"s\":[-601,-323,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":112,\"op\":245,\"st\":112,\"bm\":0},{\"ddd\":0,\"ind\":180,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":125,\"s\":[493.185,352.096,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":237,\"s\":[-651,-210,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":125,\"op\":258,\"st\":125,\"bm\":0},{\"ddd\":0,\"ind\":181,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":2,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":128,\"s\":[572.643,357.558,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":260,\"s\":[-655,-235,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":128,\"op\":264,\"st\":128,\"bm\":0},{\"ddd\":0,\"ind\":182,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":4,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":100,\"s\":[544.833,361.715,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":232,\"s\":[-649,-204,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":100,\"op\":233,\"st\":-31,\"bm\":0},{\"ddd\":0,\"ind\":183,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":3,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":116,\"s\":[560,316,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":238,\"s\":[-645,-302,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":116,\"op\":249,\"st\":-35,\"bm\":0},{\"ddd\":0,\"ind\":184,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":2,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":120,\"s\":[534.349,362.291,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":243,\"s\":[-649,-177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":120,\"op\":253,\"st\":-39,\"bm\":0},{\"ddd\":0,\"ind\":185,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":4,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":115,\"s\":[577.064,374.577,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":247,\"s\":[-651,-215,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":115,\"op\":248,\"st\":-93,\"bm\":0},{\"ddd\":0,\"ind\":186,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":3,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":116,\"s\":[466.204,379.547,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":228,\"s\":[-637,-190,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":116,\"op\":249,\"st\":-62,\"bm\":0},{\"ddd\":0,\"ind\":187,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":2,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":133,\"s\":[599.5,322.5,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":265,\"s\":[-637,-262.5,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":133,\"op\":269,\"st\":-2,\"bm\":0},{\"ddd\":0,\"ind\":188,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":7,\"s\":[455,358,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":139,\"s\":[-681,-173,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":7,\"op\":140,\"st\":7,\"bm\":0},{\"ddd\":0,\"ind\":189,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":18,\"s\":[499,399,0],\"to\":[-135.5,-235,0],\"ti\":[559.333,11.333,0]},{\"t\":140,\"s\":[-698,-205,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":18,\"op\":151,\"st\":18,\"bm\":0},{\"ddd\":0,\"ind\":190,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":35,\"s\":[560,387,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":158,\"s\":[-701,-219,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":35,\"op\":168,\"st\":35,\"bm\":0},{\"ddd\":0,\"ind\":191,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":18,\"s\":[517,406,0],\"to\":[-157.5,-153,0],\"ti\":[574.333,19.333,0]},{\"t\":150,\"s\":[-691,-183,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":18,\"op\":151,\"st\":18,\"bm\":0},{\"ddd\":0,\"ind\":192,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":36,\"s\":[443,391,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":148,\"s\":[-685,-150,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":36,\"op\":169,\"st\":36,\"bm\":0},{\"ddd\":0,\"ind\":193,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":7,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":39,\"s\":[513,386,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":171,\"s\":[-689,-181,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":39,\"op\":175,\"st\":39,\"bm\":0},{\"ddd\":0,\"ind\":194,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":5,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":11,\"s\":[465,397,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":143,\"s\":[-689,-154,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":11,\"op\":144,\"st\":-120,\"bm\":0},{\"ddd\":0,\"ind\":195,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":27,\"s\":[518,400,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":149,\"s\":[-685,-244,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":27,\"op\":160,\"st\":-124,\"bm\":0},{\"ddd\":0,\"ind\":196,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":7,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":31,\"s\":[442,371,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":154,\"s\":[-675,-117,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":31,\"op\":164,\"st\":-128,\"bm\":0},{\"ddd\":0,\"ind\":197,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":32,\"s\":[465,390,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":164,\"s\":[-699,-159,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":32,\"op\":165,\"st\":-176,\"bm\":0},{\"ddd\":0,\"ind\":198,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":27,\"s\":[375,390,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":139,\"s\":[-677,-132,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":27,\"op\":160,\"st\":-151,\"bm\":0},{\"ddd\":0,\"ind\":199,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":48,\"s\":[575,392,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":180,\"s\":[-693,-203,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":48,\"op\":184,\"st\":-87,\"bm\":0},{\"ddd\":0,\"ind\":200,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":34,\"s\":[544,401,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":166,\"s\":[-695,-193,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":34,\"op\":167,\"st\":34,\"bm\":0},{\"ddd\":0,\"ind\":201,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":45,\"s\":[501,399,0],\"to\":[-143.5,-276,0],\"ti\":[559.333,11.333,0]},{\"t\":167,\"s\":[-722,-201,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":45,\"op\":178,\"st\":45,\"bm\":0},{\"ddd\":0,\"ind\":202,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":62,\"s\":[572,391,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":185,\"s\":[-699,-219,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":62,\"op\":195,\"st\":62,\"bm\":0},{\"ddd\":0,\"ind\":203,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":45,\"s\":[493,394,0],\"to\":[-157.5,-153,0],\"ti\":[574.333,19.333,0]},{\"t\":177,\"s\":[-707,-177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":45,\"op\":178,\"st\":45,\"bm\":0},{\"ddd\":0,\"ind\":204,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":6,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":63,\"s\":[412.001,402.002,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":175,\"s\":[-678,-129,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":63,\"op\":196,\"st\":63,\"bm\":0},{\"ddd\":0,\"ind\":205,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":7,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":66,\"s\":[497,390,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":198,\"s\":[-689,-183,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":66,\"op\":202,\"st\":66,\"bm\":0},{\"ddd\":0,\"ind\":206,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":5,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":43,\"s\":[451,393,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":175,\"s\":[-691,-146,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":43,\"op\":176,\"st\":43,\"bm\":0},{\"ddd\":0,\"ind\":207,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":54,\"s\":[510,396,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":176,\"s\":[-685,-244,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":54,\"op\":187,\"st\":-97,\"bm\":0},{\"ddd\":0,\"ind\":208,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":7,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":58,\"s\":[458,397,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":181,\"s\":[-675,-117,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":58,\"op\":191,\"st\":-101,\"bm\":0},{\"ddd\":0,\"ind\":209,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":53,\"s\":[463,398,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":185,\"s\":[-695,-161,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":53,\"op\":186,\"st\":-155,\"bm\":0},{\"ddd\":0,\"ind\":210,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":54,\"s\":[375,390,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":166,\"s\":[-677,-132,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":51,\"op\":167,\"st\":-117,\"bm\":0},{\"ddd\":0,\"ind\":211,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":71,\"s\":[575,386,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":203,\"s\":[-701,-197,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":71,\"op\":207,\"st\":-64,\"bm\":0},{\"ddd\":0,\"ind\":212,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":59,\"s\":[503,402,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":191,\"s\":[-711,-175,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":59,\"op\":192,\"st\":59,\"bm\":0},{\"ddd\":0,\"ind\":213,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":70,\"s\":[511,413.028,0],\"to\":[-135.5,-235,0],\"ti\":[559.333,11.333,0]},{\"t\":192,\"s\":[-688,-213,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":70,\"op\":203,\"st\":70,\"bm\":0},{\"ddd\":0,\"ind\":214,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":87,\"s\":[566,393,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":210,\"s\":[-709,-217,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":87,\"op\":220,\"st\":87,\"bm\":0},{\"ddd\":0,\"ind\":215,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":75,\"s\":[623,365,0],\"to\":[-157.5,-153,0],\"ti\":[574.333,19.333,0]},{\"t\":207,\"s\":[-703,-199,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":75,\"op\":208,\"st\":75,\"bm\":0},{\"ddd\":0,\"ind\":216,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":88,\"s\":[449,395,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":200,\"s\":[-665,-150,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":88,\"op\":221,\"st\":88,\"bm\":0},{\"ddd\":0,\"ind\":217,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":7,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":91,\"s\":[497,394,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":223,\"s\":[-701,-185,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":91,\"op\":227,\"st\":91,\"bm\":0},{\"ddd\":0,\"ind\":218,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":5,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":63,\"s\":[462.995,398.984,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":195,\"s\":[-681,-168,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":63,\"op\":196,\"st\":-68,\"bm\":0},{\"ddd\":0,\"ind\":219,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":79,\"s\":[522,398,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":201,\"s\":[-685,-244,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":79,\"op\":212,\"st\":-72,\"bm\":0},{\"ddd\":0,\"ind\":220,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":7,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":83,\"s\":[452,393,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":206,\"s\":[-675,-117,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":83,\"op\":216,\"st\":-76,\"bm\":0},{\"ddd\":0,\"ind\":221,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":84,\"s\":[463,394,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":216,\"s\":[-697,-165,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":84,\"op\":217,\"st\":-124,\"bm\":0},{\"ddd\":0,\"ind\":222,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":79,\"s\":[381.047,406.126,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":191,\"s\":[-677,-132,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":79,\"op\":212,\"st\":-99,\"bm\":0},{\"ddd\":0,\"ind\":223,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":96,\"s\":[577,390,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":228,\"s\":[-695,-205,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":96,\"op\":232,\"st\":-39,\"bm\":0},{\"ddd\":0,\"ind\":224,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":85,\"s\":[530,393,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":217,\"s\":[-693,-205,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":85,\"op\":218,\"st\":85,\"bm\":0},{\"ddd\":0,\"ind\":225,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":96,\"s\":[505,389,0],\"to\":[-143.5,-276,0],\"ti\":[559.333,11.333,0]},{\"t\":218,\"s\":[-700,-207,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":96,\"op\":229,\"st\":96,\"bm\":0},{\"ddd\":0,\"ind\":226,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":113,\"s\":[594,349,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":236,\"s\":[-653,-249,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":113,\"op\":246,\"st\":113,\"bm\":0},{\"ddd\":0,\"ind\":227,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":96,\"s\":[489,390,0],\"to\":[-157.5,-153,0],\"ti\":[574.333,19.333,0]},{\"t\":228,\"s\":[-693,-185,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":96,\"op\":229,\"st\":96,\"bm\":0},{\"ddd\":0,\"ind\":228,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":6,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":114,\"s\":[402,382,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":226,\"s\":[-678,-129,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":114,\"op\":247,\"st\":114,\"bm\":0},{\"ddd\":0,\"ind\":229,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":7,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":117,\"s\":[497,390,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":249,\"s\":[-685,-177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":117,\"op\":253,\"st\":117,\"bm\":0},{\"ddd\":0,\"ind\":230,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":5,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":94,\"s\":[459,399,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":226,\"s\":[-699,-150,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":94,\"op\":227,\"st\":94,\"bm\":0},{\"ddd\":0,\"ind\":231,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":105,\"s\":[520,388,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":227,\"s\":[-685,-244,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":105,\"op\":238,\"st\":-46,\"bm\":0},{\"ddd\":0,\"ind\":232,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":7,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":109,\"s\":[460,389,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":232,\"s\":[-675,-117,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":109,\"op\":242,\"st\":-50,\"bm\":0},{\"ddd\":0,\"ind\":233,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":104,\"s\":[455,388,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":236,\"s\":[-701,-163,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":104,\"op\":237,\"st\":-104,\"bm\":0},{\"ddd\":0,\"ind\":234,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":106,\"s\":[375,390,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":218,\"s\":[-677,-132,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":105,\"op\":219,\"st\":-62,\"bm\":0},{\"ddd\":0,\"ind\":235,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":122,\"s\":[571,390,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":254,\"s\":[-695,-211,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":122,\"op\":258,\"st\":-13,\"bm\":0},{\"ddd\":0,\"ind\":236,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":5,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":103,\"s\":[497,400,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":235,\"s\":[-697,-177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":103,\"op\":236,\"st\":103,\"bm\":0},{\"ddd\":0,\"ind\":237,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":6,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":114,\"s\":[507,387,0],\"to\":[-135.5,-235,0],\"ti\":[559.333,11.333,0]},{\"t\":236,\"s\":[-698,-213,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":114,\"op\":247,\"st\":114,\"bm\":0},{\"ddd\":0,\"ind\":238,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":7,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":131,\"s\":[562,389,0],\"to\":[-267.5,-355,0],\"ti\":[566.333,7.333,0]},{\"t\":254,\"s\":[-685,-215,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":131,\"op\":264,\"st\":131,\"bm\":0},{\"ddd\":0,\"ind\":239,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":5,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":119,\"s\":[599,336,0],\"to\":[-142.5,-201,0],\"ti\":[643.333,15.333,0]},{\"t\":251,\"s\":[-641,-255,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":119,\"op\":252,\"st\":119,\"bm\":0},{\"ddd\":0,\"ind\":240,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":132,\"s\":[435,381,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":244,\"s\":[-691,-152,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":132,\"op\":265,\"st\":132,\"bm\":0},{\"ddd\":0,\"ind\":241,\"ty\":0,\"nm\":\"Bird2-A\",\"parent\":7,\"refId\":\"comp_1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":135,\"s\":[481,378,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":267,\"s\":[-695,-177,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[17.5,15,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":35,\"h\":30,\"ip\":135,\"op\":271,\"st\":135,\"bm\":0},{\"ddd\":0,\"ind\":242,\"ty\":0,\"nm\":\"Bird6-A\",\"parent\":5,\"refId\":\"comp_5\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":107,\"s\":[453,383,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":239,\"s\":[-689,-146,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[18,17,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":36,\"h\":34,\"ip\":107,\"op\":240,\"st\":-24,\"bm\":0},{\"ddd\":0,\"ind\":243,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":6,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":123,\"s\":[520,374,0],\"to\":[-149.5,-255,0],\"ti\":[559.333,11.333,0]},{\"t\":245,\"s\":[-685,-244,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[199,199,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":123,\"op\":256,\"st\":-28,\"bm\":0},{\"ddd\":0,\"ind\":244,\"ty\":0,\"nm\":\"Bird3-A\",\"parent\":7,\"refId\":\"comp_2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":127,\"s\":[452,385,0],\"to\":[-243.5,-321,0],\"ti\":[546.333,5.333,0]},{\"t\":250,\"s\":[-689,-119,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[14,10,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[159,159,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":28,\"h\":20,\"ip\":127,\"op\":260,\"st\":-32,\"bm\":0},{\"ddd\":0,\"ind\":245,\"ty\":0,\"nm\":\"Bird5-A\",\"parent\":5,\"refId\":\"comp_4\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":122,\"s\":[455,386,0],\"to\":[-157.5,-153,0],\"ti\":[571.333,14.333,0]},{\"t\":254,\"s\":[-691,-157,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,18.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":37,\"ip\":122,\"op\":255,\"st\":-86,\"bm\":0},{\"ddd\":0,\"ind\":246,\"ty\":0,\"nm\":\"Bird4-A\",\"parent\":6,\"refId\":\"comp_3\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":123,\"s\":[375,390,0],\"to\":[-151.5,-160,0],\"ti\":[580.333,41.333,0]},{\"t\":235,\"s\":[-677,-132,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[16.5,16.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":33,\"h\":33,\"ip\":123,\"op\":256,\"st\":-55,\"bm\":0},{\"ddd\":0,\"ind\":247,\"ty\":0,\"nm\":\"Bird1-A\",\"parent\":7,\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":140,\"s\":[559.5,380.5,0],\"to\":[-157.5,-153,0],\"ti\":[580.333,41.333,0]},{\"t\":272,\"s\":[-677,-204.5,0]}],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[22,19.5,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[179,179,100],\"ix\":6,\"l\":2}},\"ao\":0,\"w\":44,\"h\":39,\"ip\":140,\"op\":276,\"st\":5,\"bm\":0}],\"markers\":[]}"}, {"id": "assets/lottie/smoke.json_0", "file": "assets/lottie/smoke.json", "content": "================================================"}, {"id": "assets/lottie/smoke.json_1", "file": "assets/lottie/smoke.json", "content": "{\"v\":\"4.8.0\",\"meta\":{\"g\":\"LottieFiles AE 1.1.0\",\"a\":\"\",\"k\":\"\",\"d\":\"\",\"tc\":\"\"},\"fr\":29.9701843261719,\"ip\":0,\"op\":599.003684063295,\"w\":1920,\"h\":1080,\"nm\":\"clouds\",\"ddd\":0,\"assets\":[{\"id\":\"comp_0\",\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Layer 1 Outlines\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[951.202,533.401,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[960,540,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6}},\"ao\":0,\"ef\":[{\"ty\":29,\"nm\":\"Gaussian Blur\",\"np\":5,\"mn\":\"ADBE Gaussian Blur 2\",\"ix\":1,\"en\":1,\"ef\":[{\"ty\":0,\"nm\":\"Blurriness\",\"mn\":\"ADBE Gaussian Blur 2-0001\",\"ix\":1,\"v\":{\"a\":0,\"k\":14.3,\"ix\":1}},{\"ty\":7,\"nm\":\"Blur Dimensions\",\"mn\":\"ADBE Gaussian Blur 2-0002\",\"ix\":2,\"v\":{\"a\":0,\"k\":1,\"ix\":2}},{\"ty\":7,\"nm\":\"Repeat Edge Pixels\",\"mn\":\"ADBE Gaussian Blur"}, {"id": "assets/lottie/smoke.json_2", "file": "assets/lottie/smoke.json", "content": " 2-0003\",\"ix\":3,\"v\":{\"a\":0,\"k\":1,\"ix\":3}}]}],\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-7.243,17.344],[-10.105,7.697],[-10.774,-6.093],[0,0],[-12.317,3.925],[-8.024,-8.73],[2.569,-8.52],[-10.098,-6.955],[0,0],[0,0],[39.404,1.198],[-24.006,1.493],[1.177,-31.674],[2.847,-10.474],[-9.248,1.506],[-1.916,-9.173],[1.267,-12.945],[-20.919,-11.977],[28.955,-13.43],[-21.207,-2.233],[3.833,-20.972],[3.77,-15.48],[-13.429,-3.643],[-2.403,-16.074],[-45.381,-20.523],[0.277,-2.136],[25.524,-9.869],[26.181,19.832],[15.974,-6.268],[18.208,-0.785],[10.647,14.788],[25.231,16.417],[25.569,8.767],[-1.351,26.997],[-1.36,16.163],[12.735,13.832]],\"o\":[[4.882,-11.666],[14.214,-9.686],[-32.226,12.964],[8.939,-26.125],[13.42,-4.276],[5.96,6.486],[22.412,-23.872],[-22.443,4.884],[58.017,-28.335],[0,0],[2.148,-20.421],[29.638,-1.821],[10.596,-2.365],[7.344,-5.793],[9.25,-1.484],[12.947,1.288],[17.493,-16.569],[-10.084,-30.273],[0.67,-21.315],[21.188,2.258],[15.193,-4.773],[6.004,-19.832],[-18.886,4.976],[6.143,-14.571],[-0.07,2.021],[-0.887,6.992],[-30.643,11.835],[1.988,17.079],[-17.01,6.622],[-18.21,0.763],[-14.996,26.131],[-15.464,22.167],[-25.562,-8.724],[-14.209,7.764],[-13.909,12.656],[-12.712,-13.834]],\"v\":[[-271.76,-47.389],[-248.331,-76.534],[-210.617,-78.87],[-237.57,-30.697],[-202.3,-68.507],[-166.934,-60.518],[-162.82,-35.318],[-106.651,-53.505],[-134.362,-27.739],[-43.769,-26.973],[-85.339,-56.914],[-45.088,-100.82],[7.845,-49.849],[26.594,-30.205],[50.986,-43.532],[73.124,-31.026],[95.43,-3.882],[162.454,-11.909],[84.566,-45.486],[127.527,-82.951],[161.668,-37.303],[190.423,-10.396],[232.68,-31.501],[208.558,12.534],[279.003,-11.613],[278.508,-5.358],[241.067,26.241],[146.253,23.201],[113.151,57.577],[60.58,71.695],[12.169,51.464],[-66.294,70.39],[-138.108,93.874],[-180.492,31.337],[-213.769,9.636],[-264.433,5.507]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_3", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[828.39,611.477],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_4", "file": "assets/lottie/smoke.json", "content": "1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-7.325,0.634],[-7.152,-4.438],[-1.5,0.172],[-1.185,1.264],[-9.403,-1.341],[-8.504,-4.228],[6.855,6.623],[8.023,-1.99],[4.666,-6.822],[2.447,-0.196],[1.363,0.712],[12.571,-6.156],[2.488,-13.773]],\"o\":[[8.386,-0.727],[1.282,0.796],[1.721,-0.197],[6.497,-6.927],[9.402,1.341],[-1.308,-9.442],[-5.945,-5.744],[-8.023,1.99],[-1.385,2.026],[-1.533,0.122],[-12.406,-6.481],[-12.57,6.156],[1.451,-8.029]],\"v\":[[-21.651,1.174],[2.353,7.488],[6.523,9.003],[10.647,6.039],[36.957,-1.633],[63.552,8.223],[53.714,-18.032],[30.633,-23.643],[11.049,-9.338],[5.643,-4.734],[1.315,-6.13],[-39.154,-6.657],[-63.553,25.633]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape -"}, {"id": "assets/lottie/smoke.json_5", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[755.137,598.711],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 2\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_6", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[1.382,-46.084],[0.277,-2.137],[25.525,-9.868],[26.181,19.832],[15.973,-6.267],[18.208,-0.785],[10.647,14.787],[25.23,16.417],[25.569,8.767],[-1.351,26.997],[-1.36,16.163],[12.734,13.832],[-7.243,17.345],[-10.106,7.697],[-1.03,4.18],[-2.419,3.519],[-15.566,-5.97],[-20.369,1.86],[1.179,-19.611],[-7.409,5.292],[-3.382,-1.354],[-33.339,-0.973],[-1.555,-21.911],[-11.741,-7.349],[6.774,-12.088],[-25.55,-9.654],[-2.414,-27.218]],\"o\":[[-0.07,2.022],[-0.887,6.991],[-30.643,11.835],[1.988,17.079],[-17.011,6.622],[-18.21,0.763],[-14.996,26.13],[-15.465,22.166],[-25.562,-8.723],[-14.209,7.764],[-13.909,12.656],[-12.713,-13.835],[4.882,-11.665],[-0.356,-4.288],[1.035,-4.136],[9.457,-13.739],[-6.258,-19.49],[19.713,-1.798],[0.963,-8.969],[17.348,-12.394],[4.977,-24.094],[33.315,0.955],[7.955,-11.333],[11.701,7.376],[19.812,-18.815],[25.572,9.651],[22.884,-7.028]],\"v\":[[278.312,30.134],[277.816,36.39],[240.375,67.988],[145.561,64.948],[112.46,99.324],[59.888,113.442],[11.477,93.212],[-66.984,112.138],[-138.799,135.621],[-181.184,73.084],[-214.461,51.383],[-265.123,47.255],[-272.451,-5.642],[-249.021,-34.787],[-248.005,-47.611],[-242.826,-59.204],[-198.517,-72.917],[-169.013,-117.508],[-131.784,-80.973],[-116.073,-102.087],[-80.682,-101.844],[-19.625,-143.415],[36.399,-98.455],[73.355,-105.932],[82.677,-69.413],[158.878,-84.796],[205.873,-22.855]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_7", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[829.081,569.73],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 3\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_8", "file": "assets/lottie/smoke.json", "content": "3\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[829.916,567.389],\"to\":[236.589,0],\"ti\":[-236.589,0]},{\"t\":598.003677912939,\"s\":[2249.447,567.389]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[829.916,567.389],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 15\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_9", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-21.487,-5.777],[-9.246,-0.994],[-5.748,-2.737],[-3.108,-0.269],[-22.732,-0.523],[-8.034,6.965],[-3.94,-1.363],[-4.326,1.359],[-0.143,-0.883],[-31.913,6.283],[-4.531,7.612],[-16.289,-3.434],[-9.541,7.596],[-10.342,-1.09],[-4.136,7.417],[0.677,14.533],[-8.651,3.645],[-1.94,2.123],[-6.498,-0.685],[-2.882,27.337],[1.072,4.987],[12.118,-22.496],[4.322,-10.494],[15.925,4.638],[8.541,-7.464],[-0.209,-0.081],[0,0],[57.708,5.611],[-19.045,-2.186],[12.549,2.053],[5.632,-1.576],[0.285,1.609],[9.878,1.18],[-1.046,-20.767],[13.593,-29.186],[-14.354,11.705],[5.12,-1.591],[1.066,-8.43],[8.577,-3.692],[0,0],[9.009,-19.391],[-9.598,-13.007],[15.8,-8.771],[11.662,-7.688],[12.452,-1.903],[-0.437,-11.193],[25.936,2.895],[7.811,4.691]],\"o\":[[12.222,3.281],[0.134,4.907],[3.609,1.702],[1.306,14.185],[18.285,0.408],[2.697,3.046],[5.94,2.046],[0.064,0.895],[3.275,18.338],[12.936,-2.562],[5.308,8.412],[15.751,3.298],[1.165,9.909],[8.975,0.947],[34.984,16.611],[4.17,5.55],[2.62,-1.085],[5.457,2.883],[27.356,2.885],[0.563,-5.346],[-16.362,-4.802],[-7.377,-15.733],[-6.204,-10.952],[-16.23,-4.75],[0.209,0.081],[28.712,11.353],[0,0],[0,0],[-6.078,-10.091],[-6.15,-0.984],[-0.067,-1.605],[-1.749,-9.792],[-16.558,-2.002],[0,0],[0,0],[-7.566,-7.585],[-11.872,3.7],[0,0],[-10.766,4.626],[-14.824,-4.798],[15.282,-4.229],[-14.585,-10.613],[2.341,-13.78],[-1.381,-12.535],[-10.069,1.563],[-6.634,-18.583],[-8.735,-0.975],[-5.954,3.891]],\"v\":[[-228.306,-21.468],[-196.128,-15.294],[-188.469,-2.609],[-178.367,0.192],[-147.581,30.053],[-109.055,17.562],[-99.184,24.423],[-83.722,24.849],[-83.43,27.504],[-34.982,57.51],[-9.856,40.193],[21.188,59.368],[58.919,50.305],[78.306,69.454],[99.679,58.351],[161.334,31.016],[188.902,33.765],[195.779,28.789],[213.807,34.26],[268.548,-10.021],[267.726,-25.615],[220.722,-7.566],[194.545,-11.53],[160.947,-35.669],[123.681,-25.591],[124.307,-25.347],[149.478,14.536],[82.005,-20.081],[110.174,-29.027],[81.246,-48.63],[63.441,-47.607],[62.944,-52.434],[44.156,-72.96],[13.607,-39.011],[-18.807,-16.189],[-0.908,-49.538],[-27.205,-55.921],[-44.371,-35.319],[-62.725,-39.01],[-70.666,-23.196],[-100.672,-11.424],[-60.489,3.407],[-111.711,0.275],[-139.495,-17.826],[-167.001,-36.687],[-183.185,-15.113],[-235.653,-32.66],[-263.158,-38.401]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_10", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1349.868,536.694],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 4\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_11", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-21.487,-5.777],[-9.246,-0.994],[-5.748,-2.737],[-3.108,-0.269],[-22.732,-0.523],[-8.034,6.965],[-3.94,-1.363],[-4.326,1.359],[-0.143,-0.883],[-31.913,6.283],[-4.531,7.612],[-16.289,-3.434],[-9.541,7.596],[-10.342,-1.09],[-4.136,7.417],[0.677,14.533],[-8.651,3.645],[-1.94,2.123],[-6.498,-0.685],[-2.882,27.337],[1.072,4.987],[22.01,2.321],[6.849,-2.455],[19.407,4.177],[2.453,0.12],[20.605,2.172],[7.661,-19.138],[3.679,0.664],[2.658,-0.509],[5.727,2.005],[6.621,-5.161],[13.444,1.417],[4.844,-14.878],[6.582,-5.916],[-3.193,-10.694],[-1.454,-10.531],[12.209,-8.578],[0.172,0.235],[2.477,-7.768],[23.856,-12.755],[0.128,-0.085]],\"o\":[[12.222,3.281],[0.134,4.907],[3.609,1.702],[1.306,14.185],[18.285,0.408],[2.697,3.046],[5.94,2.046],[0.064,0.895],[3.275,18.338],[12.936,-2.562],[5.308,8.412],[15.751,3.298],[1.165,9.909],[8.975,0.947],[34.984,16.611],[4.17,5.55],[2.62,-1.085],[5.457,2.883],[27.356,2.885],[0.563,-5.346],[-4.347,-20.522],[-7.707,-0.813],[-4.432,-7.925],[-2.217,-0.49],[-4.417,-19.11],[-21.522,-2.269],[-2.744,-1.67],[-3.563,-0.633],[-2.975,-5.285],[-7.978,-2.735],[-4.184,-11.963],[-16.176,-1.706],[-14.005,-6.389],[-8.391,7.539],[-10.119,-3.197],[-22.465,-14.285],[-0.153,-0.234],[-11.147,-10.246],[-22.529,-9.931],[-0.147,0.083],[-5.954,3.891]],\"v\":[[-228.306,5.507],[-196.128,11.682],[-188.469,24.367],[-178.367,27.168],[-147.581,57.029],[-109.055,44.538],[-99.184,51.399],[-83.722,51.824],[-83.43,54.48],[-34.982,84.485],[-9.856,67.168],[21.188,86.343],[58.919,77.28],[78.306,96.429],[99.679,85.327],[161.334,57.991],[188.902,60.74],[195.779,55.764],[213.807,61.236],[268.548,16.955],[267.726,1.361],[224.247,-37.788],[202.187,-35.142],[168.731,-58.952],[161.706,-59.869],[120.581,-96.265],[71.745,-66.829],[62.124,-70.447],[52.816,-70.483],[39.38,-82.079],[15.563,-77.744],[-12.843,-100.231],[-48.568,-77.069],[-80.326,-72.446],[-90.322,-38.087],[-107.391,-24.575],[-164.287,-19.921],[-164.785,-20.624],[-193.631,-17.595],[-262.756,-11.678],[-263.158,-11.426]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_12", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1349.868,509.719],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 5\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_13", "file": "assets/lottie/smoke.json", "content": "5\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[1352.154,507.784],\"to\":[189.462,0],\"ti\":[-189.462,0]},{\"t\":598.003677912939,\"s\":[2488.928,507.784]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[1352.154,507.784],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 12\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_14", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[15.665,-0.98],[3.078,-2.234],[13.567,-4.993],[-15.505,-2.804],[12.837,-11.492],[0,0],[21.616,3.193],[10.101,-16.052],[29.998,-27.427],[-5.153,-20.339],[5.062,-18.56],[7.274,-6.111],[-1.208,-4.903],[13.544,-16.007],[-21.592,-0.935],[24.945,-16.531],[15.094,7.752],[8.573,-14.616],[-11.469,-12.587],[11.798,-4.047],[0,0],[0,0],[-16.235,-1.673],[6.715,6.59],[16.183,-0.465],[3.397,-6.065],[-1.938,-7.82],[-13.566,-6.134],[-13.202,6.886],[-20.612,-2.577],[-18.058,10.26],[-11.925,-5.267],[-26.563,40.541],[-21.866,4.104],[-2.805,7.091],[-30.029,3.033],[-8.733,16.235],[-6.636,2.03],[3.648,5.837],[-4.812,0.707],[-6.704,7.433],[-0.912,-0.319],[-13.179,1.163]],\"o\":[[-4.697,0.274],[-13.043,-6.293],[5.016,-15.049],[-14.958,-8.641],[-4.013,3.603],[0,0],[-12.951,-1.915],[-11.219,-36.802],[19.677,-6.863],[-17.032,-8.801],[-1.345,-9.485],[-3.876,3.283],[-31.288,-22.046],[5.806,-19.233],[-23.644,-18.583],[10.033,-13.658],[-15.095,-7.73],[-8.619,14.616],[-12.486,-0.414],[10.525,6.817],[-18.283,-22.868],[0,0],[-2.481,-8.251],[-11.332,-11.173],[-6.818,-0.023],[-3.945,7.046],[3.603,14.456],[13.59,6.11],[10.283,18.036],[20.59,2.554],[-10.306,28.798],[37.554,16.576],[0,0],[16.394,-3.079],[12.7,13.134],[29.665,-2.987],[10.42,4.424],[30.075,-9.189],[2.257,0.934],[5.244,-0.73],[0.866,0.319],[16.166,5.655],[-24.056,-10.716]],\"v\":[[256.288,-26.735],[244.499,-23.064],[202.339,-25.139],[239.642,-47.325],[188.362,-44.68],[178.991,-32.276],[142.486,-56.628],[98.731,-36.585],[8.522,-58.156],[54.677,-43.585],[8.846,-23.338],[-13.065,-31.865],[-16.759,-18.184],[-106.469,-12.288],[-60.022,-38.778],[-143.262,-46.207],[-154.456,-89.712],[-198.417,-75.986],[-192.557,-28.65],[-229.385,-23.055],[-217.471,-0.006],[-263.517,-21.491],[-240.15,-26.242],[-254.417,-48.875],[-298.515,-60.458],[-315.411,-49.97],[-317.533,-26.439],[-289.874,6.715],[-246.71,5.461],[-195.956,37.565],[-136.238,24.158],[-105.822,80.865],[12.336,46.549],[48.02,60.891],[74.036,40.506],[136.991,63.148],[191.691,30.314],[218.665,33.278],[243.496,-5.552],[254.395,-4.23],[272.727,-15.266],[275.372,-14.308],[319.47,-8.403]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_15", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[350.759,524.683],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 6\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_16", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[7.274,-2.85],[2.827,-1.003],[15.414,-2.599],[3.968,-0.502],[17.032,-0.935],[25.378,-2.189],[16.167,5.655],[0.866,0.319],[5.244,-0.73],[-2.645,7.251],[-0.045,0.137],[-3.26,3.101],[-8.778,-1.824],[-6.795,-5.837],[-23.075,-5.677],[-4.013,-0.045],[-3.511,0.935],[-31.807,-4.491]],\"o\":[[-2.873,1.14],[-17.033,6.157],[-3.99,0.685],[-15.687,2.052],[-13.043,8.869],[-13.179,1.163],[-0.912,-0.319],[-6.704,7.433],[-1.231,-7.548],[0.045,-0.137],[1.574,-4.195],[6.522,-6.134],[8.756,1.802],[15.505,-18.013],[3.899,0.958],[3.625,0.046],[27.795,-7.547],[4.766,3.375]],\"v\":[[117.017,-17.045],[108.466,-13.853],[60.378,-1.243],[48.453,0.535],[-0.022,4.48],[-58.076,27.168],[-102.173,21.262],[-104.818,20.304],[-123.151,31.34],[-121.258,8.835],[-121.121,8.425],[-113.984,-2.884],[-88.834,-8.95],[-65.44,3.66],[-0.912,-16.976],[10.854,-14.65],[21.525,-16.588],[119.616,-26.85]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_17", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[728.304,489.113],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 7\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_18", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[4.766,3.375],[26.518,-0.137],[0,0],[37.199,-26.555],[22.802,-18.629],[39.401,5.495],[2.804,-39.948],[20.407,-12.017],[34.476,-2.713],[-1.961,-34.749],[21.045,-9.85],[1.962,-1.368],[3.192,-4.902],[12.062,-37.098],[-0.525,-6.635],[-0.661,-2.531],[3.398,-6.065],[-1.939,-7.821],[-13.567,-6.134],[-13.202,6.886],[-20.613,-2.576],[-18.058,10.261],[-11.925,-5.267],[-26.563,40.541],[-21.866,4.104],[-2.805,7.091],[-30.03,3.033],[-8.733,16.235],[-6.635,2.03],[3.648,5.837],[-4.812,0.707],[-6.704,7.434],[-0.912,-0.319],[-13.179,1.164],[-13.042,8.87],[-15.687,2.053],[-3.99,0.684],[-17.032,6.156],[-2.873,1.14]],\"o\":[[-8.687,-6.247],[-22.163,0.114],[-15.627,-13.953],[-9.941,-27.84],[7.981,-39.218],[-39.423,-5.472],[1.596,-23.759],[-3.602,-34.613],[-34.43,2.759],[-11.446,-20.384],[-2.189,1.026],[-4.765,3.352],[-26.404,-7.798],[-2.417,7.388],[0.228,2.828],[-6.818,-0.023],[-3.944,7.045],[3.602,14.456],[13.589,6.111],[10.283,18.036],[20.589,2.554],[-10.306,28.798],[37.554,16.577],[0,0],[16.395,-3.078],[12.7,13.133],[29.664,-2.987],[10.42,4.424],[30.075,-9.188],[2.257,0.935],[5.244,-0.73],[0.866,0.32],[16.166,5.655],[25.378,-2.188],[17.033,-0.935],[3.967,-0.501],[15.414,-2.599],[2.828,-1.003],[7.273,-2.85]],\"v\":[[405.933,-13.032],[345.874,-24.819],[280.89,-12.78],[172.196,-12.484],[99.596,-32.915],[38.078,-120.472],[-44.531,-53.002],[-93.714,-83.715],[-165.789,-144.116],[-227.307,-73.09],[-287.753,-92.632],[-293.956,-89.028],[-305.972,-76.488],[-388.49,-40.462],[-391.089,-19.119],[-389.744,-11.07],[-406.64,-0.582],[-408.76,22.949],[-381.102,56.103],[-337.939,54.848],[-287.183,86.952],[-227.467,73.546],[-197.05,130.252],[-78.893,95.936],[-43.209,110.278],[-17.192,89.895],[45.763,112.535],[100.463,79.702],[127.437,82.665],[152.268,43.835],[163.167,45.157],[181.499,34.121],[184.144,35.079],[228.242,40.985],[286.294,18.298],[334.77,14.353],[346.695,12.574],[394.783,-0.035],[403.334,-3.226]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_19", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[441.987,475.296],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 8\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[441.596,472.055],\"ix\":2},\"a\":{\"a\":0,\"k\":[441.596,472.055],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group"}, {"id": "assets/lottie/smoke.json_20", "file": "assets/lottie/smoke.json", "content": "14\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[442.119,473.203],\"to\":[361.333,0],\"ti\":[-361.333,0]},{\"t\":598.003677912939,\"s\":[2610.119,473.203]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[441.596,472.055],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 16\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_21", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[5.059,12.115],[7.058,5.377],[7.525,-4.256],[0,0],[8.603,2.741],[5.605,-6.098],[-1.795,-5.951],[7.054,-4.858],[0,0],[0,0],[-27.523,0.837],[16.768,1.043],[-0.821,-22.124],[-1.989,-7.316],[6.46,1.052],[1.339,-6.407],[-0.885,-9.042],[14.612,-8.367],[-20.225,-9.381],[14.813,-1.559],[-2.677,-14.649],[-2.633,-10.812],[9.38,-2.545],[1.679,-11.227],[31.698,-14.335],[-0.193,-1.493],[-17.829,-6.893],[-18.287,13.853],[-11.157,-4.377],[-12.718,-0.549],[-7.437,10.329],[-17.624,11.467],[-17.859,6.123],[0.944,18.857],[0.95,11.29],[-8.895,9.661]],\"o\":[[-3.41,-8.148],[-9.928,-6.765],[22.51,9.055],[-6.244,-18.248],[-9.374,-2.987],[-4.163,4.53],[-15.655,-16.674],[15.676,3.411],[-40.525,-19.792],[0,0],[-1.5,-14.264],[-20.702,-1.272],[-7.401,-1.652],[-5.13,-4.046],[-6.461,-1.036],[-9.044,0.9],[-12.219,-11.573],[7.044,-21.146],[-0.468,-14.888],[-14.8,1.577],[-10.612,-3.334],[-4.194,-13.852],[13.191,3.475],[-4.291,-10.177],[0.049,1.412],[0.62,4.883],[21.403,8.266],[-1.388,11.93],[11.882,4.626],[12.72,0.533],[10.474,18.252],[10.802,15.483],[17.855,-6.094],[9.925,5.423],[9.715,8.84],[8.88,-9.664]],\"v\":[[189.822,-33.101],[173.457,-53.458],[147.114,-55.089],[165.941,-21.441],[141.305,-47.851],[116.602,-42.271],[113.729,-24.669],[74.495,-37.372],[93.851,-19.375],[30.573,-18.839],[59.609,-39.753],[31.494,-70.422],[-5.48,-34.82],[-18.575,-21.097],[-35.613,-30.406],[-51.076,-21.672],[-66.656,-2.711],[-113.472,-8.318],[-59.068,-31.771],[-89.076,-57.94],[-112.924,-26.055],[-133.008,-7.261],[-162.524,-22.003],[-145.675,8.755],[-194.881,-8.112],[-194.535,-3.742],[-168.382,18.33],[-102.156,16.206],[-79.035,40.217],[-42.314,50.078],[-8.499,35.948],[46.306,49.167],[96.467,65.57],[126.072,21.888],[149.316,6.731],[184.704,3.848]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_22", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1757.288,463.517],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 9\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_23", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-0.965,-32.189],[-0.193,-1.493],[-17.828,-6.893],[-18.287,13.853],[-11.157,-4.377],[-12.718,-0.548],[-7.436,10.329],[-17.624,11.467],[-17.859,6.123],[0.944,18.858],[0.95,11.29],[-8.895,9.661],[5.059,12.115],[7.058,5.376],[0.719,2.919],[1.69,2.458],[10.873,-4.17],[14.227,1.3],[-0.823,-13.698],[5.175,3.696],[2.362,-0.946],[23.287,-0.68],[1.086,-15.305],[8.201,-5.133],[-4.731,-8.443],[17.847,-6.743],[1.686,-19.012]],\"o\":[[0.049,1.412],[0.62,4.883],[21.404,8.266],[-1.388,11.93],[11.882,4.626],[12.719,0.533],[10.475,18.252],[10.802,15.483],[17.855,-6.094],[9.925,5.423],[9.715,8.84],[8.879,-9.664],[-3.41,-8.148],[0.248,-2.996],[-0.723,-2.889],[-6.605,-9.596],[4.371,-13.614],[-13.77,-1.255],[-0.673,-6.265],[-12.118,-8.657],[-3.476,-16.829],[-23.27,0.667],[-5.557,-7.916],[-8.173,5.153],[-13.839,-13.142],[-17.861,6.741],[-15.985,-4.91]],\"v\":[[-194.398,21.048],[-194.052,25.419],[-167.901,47.49],[-101.673,45.365],[-78.552,69.376],[-41.832,79.238],[-8.017,65.107],[46.788,78.328],[96.949,94.73],[126.555,51.048],[149.798,35.891],[185.187,33.008],[190.305,-3.94],[173.94,-24.297],[173.229,-33.255],[169.612,-41.354],[138.661,-50.932],[118.055,-82.078],[92.05,-56.559],[81.076,-71.307],[56.355,-71.137],[13.709,-100.174],[-25.424,-68.77],[-51.239,-73.992],[-57.75,-48.484],[-110.975,-59.229],[-143.801,-15.964]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_24", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1756.805,434.357],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 11\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1756.222,432.722],\"ix\":2},\"a\":{\"a\":0,\"k\":[1756.222,432.722],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group"}, {"id": "assets/lottie/smoke.json_25", "file": "assets/lottie/smoke.json", "content": "11\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[5.117,0.443],[4.995,-3.1],[1.047,0.119],[0.828,0.883],[6.568,-0.937],[5.941,-2.954],[-4.788,4.627],[-5.604,-1.39],[-3.259,-4.766],[-1.709,-0.136],[-0.952,0.497],[-8.78,-4.299],[-1.738,-9.621]],\"o\":[[-5.858,-0.508],[-0.896,0.556],[-1.203,-0.138],[-4.538,-4.838],[-6.567,0.937],[0.914,-6.595],[4.153,-4.011],[5.604,1.39],[0.968,1.415],[1.071,0.086],[8.666,-4.527],[8.781,4.3],[-1.013,-5.609]],\"v\":[[15.123,0.82],[-1.643,5.23],[-4.556,6.289],[-7.437,4.218],[-25.814,-1.141],[-44.391,5.744],[-37.519,-12.596],[-21.397,-16.515],[-7.718,-6.522],[-3.942,-3.307],[-0.919,-4.282],[27.348,-4.65],[44.391,17.905]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape -"}, {"id": "assets/lottie/smoke.json_26", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1747.368,462.764],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 10\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_27", "file": "assets/lottie/smoke.json", "content": "10\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[1756.222,432.722],\"to\":[248.667,0],\"ti\":[-248.667,0]},{\"t\":598.003677912939,\"s\":[3248.222,432.722]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[1756.222,432.722],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 13\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":4,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":601.003696364007,\"st\":0,\"bm\":0}]}],\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Layer 1 Outlines"}, {"id": "assets/lottie/smoke.json_28", "file": "assets/lottie/smoke.json", "content": "1 Outlines 2\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[951.202,533.401,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[960,540,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6}},\"ao\":0,\"ef\":[{\"ty\":29,\"nm\":\"Gaussian Blur\",\"np\":5,\"mn\":\"ADBE Gaussian Blur 2\",\"ix\":1,\"en\":1,\"ef\":[{\"ty\":0,\"nm\":\"Blurriness\",\"mn\":\"ADBE Gaussian Blur 2-0001\",\"ix\":1,\"v\":{\"a\":0,\"k\":14.3,\"ix\":1}},{\"ty\":7,\"nm\":\"Blur Dimensions\",\"mn\":\"ADBE Gaussian Blur 2-0002\",\"ix\":2,\"v\":{\"a\":0,\"k\":1,\"ix\":2}},{\"ty\":7,\"nm\":\"Repeat Edge Pixels\",\"mn\":\"ADBE Gaussian Blur"}, {"id": "assets/lottie/smoke.json_29", "file": "assets/lottie/smoke.json", "content": " 2-0003\",\"ix\":3,\"v\":{\"a\":0,\"k\":1,\"ix\":3}}]}],\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-7.243,17.344],[-10.105,7.697],[-10.774,-6.093],[0,0],[-12.317,3.925],[-8.024,-8.73],[2.569,-8.52],[-10.098,-6.955],[0,0],[0,0],[39.404,1.198],[-24.006,1.493],[1.177,-31.674],[2.847,-10.474],[-9.248,1.506],[-1.916,-9.173],[1.267,-12.945],[-20.919,-11.977],[28.955,-13.43],[-21.207,-2.233],[3.833,-20.972],[3.77,-15.48],[-13.429,-3.643],[-2.403,-16.074],[-45.381,-20.523],[0.277,-2.136],[25.524,-9.869],[26.181,19.832],[15.974,-6.268],[18.208,-0.785],[10.647,14.788],[25.231,16.417],[25.569,8.767],[-1.351,26.997],[-1.36,16.163],[12.735,13.832]],\"o\":[[4.882,-11.666],[14.214,-9.686],[-32.226,12.964],[8.939,-26.125],[13.42,-4.276],[5.96,6.486],[22.412,-23.872],[-22.443,4.884],[58.017,-28.335],[0,0],[2.148,-20.421],[29.638,-1.821],[10.596,-2.365],[7.344,-5.793],[9.25,-1.484],[12.947,1.288],[17.493,-16.569],[-10.084,-30.273],[0.67,-21.315],[21.188,2.258],[15.193,-4.773],[6.004,-19.832],[-18.886,4.976],[6.143,-14.571],[-0.07,2.021],[-0.887,6.992],[-30.643,11.835],[1.988,17.079],[-17.01,6.622],[-18.21,0.763],[-14.996,26.131],[-15.464,22.167],[-25.562,-8.724],[-14.209,7.764],[-13.909,12.656],[-12.712,-13.834]],\"v\":[[-271.76,-47.389],[-248.331,-76.534],[-210.617,-78.87],[-237.57,-30.697],[-202.3,-68.507],[-166.934,-60.518],[-162.82,-35.318],[-106.651,-53.505],[-134.362,-27.739],[-43.769,-26.973],[-85.339,-56.914],[-45.088,-100.82],[7.845,-49.849],[26.594,-30.205],[50.986,-43.532],[73.124,-31.026],[95.43,-3.882],[162.454,-11.909],[84.566,-45.486],[127.527,-82.951],[161.668,-37.303],[190.423,-10.396],[232.68,-31.501],[208.558,12.534],[279.003,-11.613],[278.508,-5.358],[241.067,26.241],[146.253,23.201],[113.151,57.577],[60.58,71.695],[12.169,51.464],[-66.294,70.39],[-138.108,93.874],[-180.492,31.337],[-213.769,9.636],[-264.433,5.507]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_30", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[828.39,611.477],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_31", "file": "assets/lottie/smoke.json", "content": "1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-7.325,0.634],[-7.152,-4.438],[-1.5,0.172],[-1.185,1.264],[-9.403,-1.341],[-8.504,-4.228],[6.855,6.623],[8.023,-1.99],[4.666,-6.822],[2.447,-0.196],[1.363,0.712],[12.571,-6.156],[2.488,-13.773]],\"o\":[[8.386,-0.727],[1.282,0.796],[1.721,-0.197],[6.497,-6.927],[9.402,1.341],[-1.308,-9.442],[-5.945,-5.744],[-8.023,1.99],[-1.385,2.026],[-1.533,0.122],[-12.406,-6.481],[-12.57,6.156],[1.451,-8.029]],\"v\":[[-21.651,1.174],[2.353,7.488],[6.523,9.003],[10.647,6.039],[36.957,-1.633],[63.552,8.223],[53.714,-18.032],[30.633,-23.643],[11.049,-9.338],[5.643,-4.734],[1.315,-6.13],[-39.154,-6.657],[-63.553,25.633]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape -"}, {"id": "assets/lottie/smoke.json_32", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[755.137,598.711],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 2\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_33", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[1.382,-46.084],[0.277,-2.137],[25.525,-9.868],[26.181,19.832],[15.973,-6.267],[18.208,-0.785],[10.647,14.787],[25.23,16.417],[25.569,8.767],[-1.351,26.997],[-1.36,16.163],[12.734,13.832],[-7.243,17.345],[-10.106,7.697],[-1.03,4.18],[-2.419,3.519],[-15.566,-5.97],[-20.369,1.86],[1.179,-19.611],[-7.409,5.292],[-3.382,-1.354],[-33.339,-0.973],[-1.555,-21.911],[-11.741,-7.349],[6.774,-12.088],[-25.55,-9.654],[-2.414,-27.218]],\"o\":[[-0.07,2.022],[-0.887,6.991],[-30.643,11.835],[1.988,17.079],[-17.011,6.622],[-18.21,0.763],[-14.996,26.13],[-15.465,22.166],[-25.562,-8.723],[-14.209,7.764],[-13.909,12.656],[-12.713,-13.835],[4.882,-11.665],[-0.356,-4.288],[1.035,-4.136],[9.457,-13.739],[-6.258,-19.49],[19.713,-1.798],[0.963,-8.969],[17.348,-12.394],[4.977,-24.094],[33.315,0.955],[7.955,-11.333],[11.701,7.376],[19.812,-18.815],[25.572,9.651],[22.884,-7.028]],\"v\":[[278.312,30.134],[277.816,36.39],[240.375,67.988],[145.561,64.948],[112.46,99.324],[59.888,113.442],[11.477,93.212],[-66.984,112.138],[-138.799,135.621],[-181.184,73.084],[-214.461,51.383],[-265.123,47.255],[-272.451,-5.642],[-249.021,-34.787],[-248.005,-47.611],[-242.826,-59.204],[-198.517,-72.917],[-169.013,-117.508],[-131.784,-80.973],[-116.073,-102.087],[-80.682,-101.844],[-19.625,-143.415],[36.399,-98.455],[73.355,-105.932],[82.677,-69.413],[158.878,-84.796],[205.873,-22.855]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_34", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[829.081,569.73],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 3\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_35", "file": "assets/lottie/smoke.json", "content": "3\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[-376.084,567.389],\"to\":[201,0],\"ti\":[-201,0]},{\"t\":598.003677912939,\"s\":[829.916,567.389]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[829.916,567.389],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 15\",\"np\":3,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_36", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-21.487,-5.777],[-9.246,-0.994],[-5.748,-2.737],[-3.108,-0.269],[-22.732,-0.523],[-8.034,6.965],[-3.94,-1.363],[-4.326,1.359],[-0.143,-0.883],[-31.913,6.283],[-4.531,7.612],[-16.289,-3.434],[-9.541,7.596],[-10.342,-1.09],[-4.136,7.417],[0.677,14.533],[-8.651,3.645],[-1.94,2.123],[-6.498,-0.685],[-2.882,27.337],[1.072,4.987],[12.118,-22.496],[4.322,-10.494],[15.925,4.638],[8.541,-7.464],[-0.209,-0.081],[0,0],[57.708,5.611],[-19.045,-2.186],[12.549,2.053],[5.632,-1.576],[0.285,1.609],[9.878,1.18],[-1.046,-20.767],[13.593,-29.186],[-14.354,11.705],[5.12,-1.591],[1.066,-8.43],[8.577,-3.692],[0,0],[9.009,-19.391],[-9.598,-13.007],[15.8,-8.771],[11.662,-7.688],[12.452,-1.903],[-0.437,-11.193],[25.936,2.895],[7.811,4.691]],\"o\":[[12.222,3.281],[0.134,4.907],[3.609,1.702],[1.306,14.185],[18.285,0.408],[2.697,3.046],[5.94,2.046],[0.064,0.895],[3.275,18.338],[12.936,-2.562],[5.308,8.412],[15.751,3.298],[1.165,9.909],[8.975,0.947],[34.984,16.611],[4.17,5.55],[2.62,-1.085],[5.457,2.883],[27.356,2.885],[0.563,-5.346],[-16.362,-4.802],[-7.377,-15.733],[-6.204,-10.952],[-16.23,-4.75],[0.209,0.081],[28.712,11.353],[0,0],[0,0],[-6.078,-10.091],[-6.15,-0.984],[-0.067,-1.605],[-1.749,-9.792],[-16.558,-2.002],[0,0],[0,0],[-7.566,-7.585],[-11.872,3.7],[0,0],[-10.766,4.626],[-14.824,-4.798],[15.282,-4.229],[-14.585,-10.613],[2.341,-13.78],[-1.381,-12.535],[-10.069,1.563],[-6.634,-18.583],[-8.735,-0.975],[-5.954,3.891]],\"v\":[[-228.306,-21.468],[-196.128,-15.294],[-188.469,-2.609],[-178.367,0.192],[-147.581,30.053],[-109.055,17.562],[-99.184,24.423],[-83.722,24.849],[-83.43,27.504],[-34.982,57.51],[-9.856,40.193],[21.188,59.368],[58.919,50.305],[78.306,69.454],[99.679,58.351],[161.334,31.016],[188.902,33.765],[195.779,28.789],[213.807,34.26],[268.548,-10.021],[267.726,-25.615],[220.722,-7.566],[194.545,-11.53],[160.947,-35.669],[123.681,-25.591],[124.307,-25.347],[149.478,14.536],[82.005,-20.081],[110.174,-29.027],[81.246,-48.63],[63.441,-47.607],[62.944,-52.434],[44.156,-72.96],[13.607,-39.011],[-18.807,-16.189],[-0.908,-49.538],[-27.205,-55.921],[-44.371,-35.319],[-62.725,-39.01],[-70.666,-23.196],[-100.672,-11.424],[-60.489,3.407],[-111.711,0.275],[-139.495,-17.826],[-167.001,-36.687],[-183.185,-15.113],[-235.653,-32.66],[-263.158,-38.401]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_37", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1349.868,536.694],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 4\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_38", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-21.487,-5.777],[-9.246,-0.994],[-5.748,-2.737],[-3.108,-0.269],[-22.732,-0.523],[-8.034,6.965],[-3.94,-1.363],[-4.326,1.359],[-0.143,-0.883],[-31.913,6.283],[-4.531,7.612],[-16.289,-3.434],[-9.541,7.596],[-10.342,-1.09],[-4.136,7.417],[0.677,14.533],[-8.651,3.645],[-1.94,2.123],[-6.498,-0.685],[-2.882,27.337],[1.072,4.987],[22.01,2.321],[6.849,-2.455],[19.407,4.177],[2.453,0.12],[20.605,2.172],[7.661,-19.138],[3.679,0.664],[2.658,-0.509],[5.727,2.005],[6.621,-5.161],[13.444,1.417],[4.844,-14.878],[6.582,-5.916],[-3.193,-10.694],[-1.454,-10.531],[12.209,-8.578],[0.172,0.235],[2.477,-7.768],[23.856,-12.755],[0.128,-0.085]],\"o\":[[12.222,3.281],[0.134,4.907],[3.609,1.702],[1.306,14.185],[18.285,0.408],[2.697,3.046],[5.94,2.046],[0.064,0.895],[3.275,18.338],[12.936,-2.562],[5.308,8.412],[15.751,3.298],[1.165,9.909],[8.975,0.947],[34.984,16.611],[4.17,5.55],[2.62,-1.085],[5.457,2.883],[27.356,2.885],[0.563,-5.346],[-4.347,-20.522],[-7.707,-0.813],[-4.432,-7.925],[-2.217,-0.49],[-4.417,-19.11],[-21.522,-2.269],[-2.744,-1.67],[-3.563,-0.633],[-2.975,-5.285],[-7.978,-2.735],[-4.184,-11.963],[-16.176,-1.706],[-14.005,-6.389],[-8.391,7.539],[-10.119,-3.197],[-22.465,-14.285],[-0.153,-0.234],[-11.147,-10.246],[-22.529,-9.931],[-0.147,0.083],[-5.954,3.891]],\"v\":[[-228.306,5.507],[-196.128,11.682],[-188.469,24.367],[-178.367,27.168],[-147.581,57.029],[-109.055,44.538],[-99.184,51.399],[-83.722,51.824],[-83.43,54.48],[-34.982,84.485],[-9.856,67.168],[21.188,86.343],[58.919,77.28],[78.306,96.429],[99.679,85.327],[161.334,57.991],[188.902,60.74],[195.779,55.764],[213.807,61.236],[268.548,16.955],[267.726,1.361],[224.247,-37.788],[202.187,-35.142],[168.731,-58.952],[161.706,-59.869],[120.581,-96.265],[71.745,-66.829],[62.124,-70.447],[52.816,-70.483],[39.38,-82.079],[15.563,-77.744],[-12.843,-100.231],[-48.568,-77.069],[-80.326,-72.446],[-90.322,-38.087],[-107.391,-24.575],[-164.287,-19.921],[-164.785,-20.624],[-193.631,-17.595],[-262.756,-11.678],[-263.158,-11.426]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_39", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1349.868,509.719],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 5\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_40", "file": "assets/lottie/smoke.json", "content": "5\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[-987.01,508.136],\"to\":[389.922,0],\"ti\":[-389.922,0]},{\"t\":598.003677912939,\"s\":[1352.521,508.136]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[1352.154,507.784],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 12\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_41", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[15.665,-0.98],[3.078,-2.234],[13.567,-4.993],[-15.505,-2.804],[12.837,-11.492],[0,0],[21.616,3.193],[10.101,-16.052],[29.998,-27.427],[-5.153,-20.339],[5.062,-18.56],[7.274,-6.111],[-1.208,-4.903],[13.544,-16.007],[-21.592,-0.935],[24.945,-16.531],[15.094,7.752],[8.573,-14.616],[-11.469,-12.587],[11.798,-4.047],[0,0],[0,0],[-16.235,-1.673],[6.715,6.59],[16.183,-0.465],[3.397,-6.065],[-1.938,-7.82],[-13.566,-6.134],[-13.202,6.886],[-20.612,-2.577],[-18.058,10.26],[-11.925,-5.267],[-26.563,40.541],[-21.866,4.104],[-2.805,7.091],[-30.029,3.033],[-8.733,16.235],[-6.636,2.03],[3.648,5.837],[-4.812,0.707],[-6.704,7.433],[-0.912,-0.319],[-13.179,1.163]],\"o\":[[-4.697,0.274],[-13.043,-6.293],[5.016,-15.049],[-14.958,-8.641],[-4.013,3.603],[0,0],[-12.951,-1.915],[-11.219,-36.802],[19.677,-6.863],[-17.032,-8.801],[-1.345,-9.485],[-3.876,3.283],[-31.288,-22.046],[5.806,-19.233],[-23.644,-18.583],[10.033,-13.658],[-15.095,-7.73],[-8.619,14.616],[-12.486,-0.414],[10.525,6.817],[-18.283,-22.868],[0,0],[-2.481,-8.251],[-11.332,-11.173],[-6.818,-0.023],[-3.945,7.046],[3.603,14.456],[13.59,6.11],[10.283,18.036],[20.59,2.554],[-10.306,28.798],[37.554,16.576],[0,0],[16.394,-3.079],[12.7,13.134],[29.665,-2.987],[10.42,4.424],[30.075,-9.189],[2.257,0.934],[5.244,-0.73],[0.866,0.319],[16.166,5.655],[-24.056,-10.716]],\"v\":[[256.288,-26.735],[244.499,-23.064],[202.339,-25.139],[239.642,-47.325],[188.362,-44.68],[178.991,-32.276],[142.486,-56.628],[98.731,-36.585],[8.522,-58.156],[54.677,-43.585],[8.846,-23.338],[-13.065,-31.865],[-16.759,-18.184],[-106.469,-12.288],[-60.022,-38.778],[-143.262,-46.207],[-154.456,-89.712],[-198.417,-75.986],[-192.557,-28.65],[-229.385,-23.055],[-217.471,-0.006],[-263.517,-21.491],[-240.15,-26.242],[-254.417,-48.875],[-298.515,-60.458],[-315.411,-49.97],[-317.533,-26.439],[-289.874,6.715],[-246.71,5.461],[-195.956,37.565],[-136.238,24.158],[-105.822,80.865],[12.336,46.549],[48.02,60.891],[74.036,40.506],[136.991,63.148],[191.691,30.314],[218.665,33.278],[243.496,-5.552],[254.395,-4.23],[272.727,-15.266],[275.372,-14.308],[319.47,-8.403]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_42", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[350.759,524.683],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 6\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_43", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[7.274,-2.85],[2.827,-1.003],[15.414,-2.599],[3.968,-0.502],[17.032,-0.935],[25.378,-2.189],[16.167,5.655],[0.866,0.319],[5.244,-0.73],[-2.645,7.251],[-0.045,0.137],[-3.26,3.101],[-8.778,-1.824],[-6.795,-5.837],[-23.075,-5.677],[-4.013,-0.045],[-3.511,0.935],[-31.807,-4.491]],\"o\":[[-2.873,1.14],[-17.033,6.157],[-3.99,0.685],[-15.687,2.052],[-13.043,8.869],[-13.179,1.163],[-0.912,-0.319],[-6.704,7.433],[-1.231,-7.548],[0.045,-0.137],[1.574,-4.195],[6.522,-6.134],[8.756,1.802],[15.505,-18.013],[3.899,0.958],[3.625,0.046],[27.795,-7.547],[4.766,3.375]],\"v\":[[117.017,-17.045],[108.466,-13.853],[60.378,-1.243],[48.453,0.535],[-0.022,4.48],[-58.076,27.168],[-102.173,21.262],[-104.818,20.304],[-123.151,31.34],[-121.258,8.835],[-121.121,8.425],[-113.984,-2.884],[-88.834,-8.95],[-65.44,3.66],[-0.912,-16.976],[10.854,-14.65],[21.525,-16.588],[119.616,-26.85]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_44", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[728.304,489.113],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 7\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_45", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[4.766,3.375],[26.518,-0.137],[0,0],[37.199,-26.555],[22.802,-18.629],[39.401,5.495],[2.804,-39.948],[20.407,-12.017],[34.476,-2.713],[-1.961,-34.749],[21.045,-9.85],[1.962,-1.368],[3.192,-4.902],[12.062,-37.098],[-0.525,-6.635],[-0.661,-2.531],[3.398,-6.065],[-1.939,-7.821],[-13.567,-6.134],[-13.202,6.886],[-20.613,-2.576],[-18.058,10.261],[-11.925,-5.267],[-26.563,40.541],[-21.866,4.104],[-2.805,7.091],[-30.03,3.033],[-8.733,16.235],[-6.635,2.03],[3.648,5.837],[-4.812,0.707],[-6.704,7.434],[-0.912,-0.319],[-13.179,1.164],[-13.042,8.87],[-15.687,2.053],[-3.99,0.684],[-17.032,6.156],[-2.873,1.14]],\"o\":[[-8.687,-6.247],[-22.163,0.114],[-15.627,-13.953],[-9.941,-27.84],[7.981,-39.218],[-39.423,-5.472],[1.596,-23.759],[-3.602,-34.613],[-34.43,2.759],[-11.446,-20.384],[-2.189,1.026],[-4.765,3.352],[-26.404,-7.798],[-2.417,7.388],[0.228,2.828],[-6.818,-0.023],[-3.944,7.045],[3.602,14.456],[13.589,6.111],[10.283,18.036],[20.589,2.554],[-10.306,28.798],[37.554,16.577],[0,0],[16.395,-3.078],[12.7,13.133],[29.664,-2.987],[10.42,4.424],[30.075,-9.188],[2.257,0.935],[5.244,-0.73],[0.866,0.32],[16.166,5.655],[25.378,-2.188],[17.033,-0.935],[3.967,-0.501],[15.414,-2.599],[2.828,-1.003],[7.273,-2.85]],\"v\":[[405.933,-13.032],[345.874,-24.819],[280.89,-12.78],[172.196,-12.484],[99.596,-32.915],[38.078,-120.472],[-44.531,-53.002],[-93.714,-83.715],[-165.789,-144.116],[-227.307,-73.09],[-287.753,-92.632],[-293.956,-89.028],[-305.972,-76.488],[-388.49,-40.462],[-391.089,-19.119],[-389.744,-11.07],[-406.64,-0.582],[-408.76,22.949],[-381.102,56.103],[-337.939,54.848],[-287.183,86.952],[-227.467,73.546],[-197.05,130.252],[-78.893,95.936],[-43.209,110.278],[-17.192,89.895],[45.763,112.535],[100.463,79.702],[127.437,82.665],[152.268,43.835],[163.167,45.157],[181.499,34.121],[184.144,35.079],[228.242,40.985],[286.294,18.298],[334.77,14.353],[346.695,12.574],[394.783,-0.035],[403.334,-3.226]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_46", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[441.987,475.296],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 8\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[441.596,472.055],\"ix\":2},\"a\":{\"a\":0,\"k\":[441.596,472.055],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group"}, {"id": "assets/lottie/smoke.json_47", "file": "assets/lottie/smoke.json", "content": "14\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[-1769.459,473.203],\"to\":[368.596,0],\"ti\":[-368.596,0]},{\"t\":598.003677912939,\"s\":[442.119,473.203]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[441.596,472.055],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 16\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":3,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_48", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[5.059,12.115],[7.058,5.377],[7.525,-4.256],[0,0],[8.603,2.741],[5.605,-6.098],[-1.795,-5.951],[7.054,-4.858],[0,0],[0,0],[-27.523,0.837],[16.768,1.043],[-0.821,-22.124],[-1.989,-7.316],[6.46,1.052],[1.339,-6.407],[-0.885,-9.042],[14.612,-8.367],[-20.225,-9.381],[14.813,-1.559],[-2.677,-14.649],[-2.633,-10.812],[9.38,-2.545],[1.679,-11.227],[31.698,-14.335],[-0.193,-1.493],[-17.829,-6.893],[-18.287,13.853],[-11.157,-4.377],[-12.718,-0.549],[-7.437,10.329],[-17.624,11.467],[-17.859,6.123],[0.944,18.857],[0.95,11.29],[-8.895,9.661]],\"o\":[[-3.41,-8.148],[-9.928,-6.765],[22.51,9.055],[-6.244,-18.248],[-9.374,-2.987],[-4.163,4.53],[-15.655,-16.674],[15.676,3.411],[-40.525,-19.792],[0,0],[-1.5,-14.264],[-20.702,-1.272],[-7.401,-1.652],[-5.13,-4.046],[-6.461,-1.036],[-9.044,0.9],[-12.219,-11.573],[7.044,-21.146],[-0.468,-14.888],[-14.8,1.577],[-10.612,-3.334],[-4.194,-13.852],[13.191,3.475],[-4.291,-10.177],[0.049,1.412],[0.62,4.883],[21.403,8.266],[-1.388,11.93],[11.882,4.626],[12.72,0.533],[10.474,18.252],[10.802,15.483],[17.855,-6.094],[9.925,5.423],[9.715,8.84],[8.88,-9.664]],\"v\":[[189.822,-33.101],[173.457,-53.458],[147.114,-55.089],[165.941,-21.441],[141.305,-47.851],[116.602,-42.271],[113.729,-24.669],[74.495,-37.372],[93.851,-19.375],[30.573,-18.839],[59.609,-39.753],[31.494,-70.422],[-5.48,-34.82],[-18.575,-21.097],[-35.613,-30.406],[-51.076,-21.672],[-66.656,-2.711],[-113.472,-8.318],[-59.068,-31.771],[-89.076,-57.94],[-112.924,-26.055],[-133.008,-7.261],[-162.524,-22.003],[-145.675,8.755],[-194.881,-8.112],[-194.535,-3.742],[-168.382,18.33],[-102.156,16.206],[-79.035,40.217],[-42.314,50.078],[-8.499,35.948],[46.306,49.167],[96.467,65.57],[126.072,21.888],[149.316,6.731],[184.704,3.848]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_49", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.958,0.9372,0.802,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1757.288,463.517],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 9\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_50", "file": "assets/lottie/smoke.json", "content": " Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-0.965,-32.189],[-0.193,-1.493],[-17.828,-6.893],[-18.287,13.853],[-11.157,-4.377],[-12.718,-0.548],[-7.436,10.329],[-17.624,11.467],[-17.859,6.123],[0.944,18.858],[0.95,11.29],[-8.895,9.661],[5.059,12.115],[7.058,5.376],[0.719,2.919],[1.69,2.458],[10.873,-4.17],[14.227,1.3],[-0.823,-13.698],[5.175,3.696],[2.362,-0.946],[23.287,-0.68],[1.086,-15.305],[8.201,-5.133],[-4.731,-8.443],[17.847,-6.743],[1.686,-19.012]],\"o\":[[0.049,1.412],[0.62,4.883],[21.404,8.266],[-1.388,11.93],[11.882,4.626],[12.719,0.533],[10.475,18.252],[10.802,15.483],[17.855,-6.094],[9.925,5.423],[9.715,8.84],[8.879,-9.664],[-3.41,-8.148],[0.248,-2.996],[-0.723,-2.889],[-6.605,-9.596],[4.371,-13.614],[-13.77,-1.255],[-0.673,-6.265],[-12.118,-8.657],[-3.476,-16.829],[-23.27,0.667],[-5.557,-7.916],[-8.173,5.153],[-13.839,-13.142],[-17.861,6.741],[-15.985,-4.91]],\"v\":[[-194.398,21.048],[-194.052,25.419],[-167.901,47.49],[-101.673,45.365],[-78.552,69.376],[-41.832,79.238],[-8.017,65.107],[46.788,78.328],[96.949,94.73],[126.555,51.048],[149.798,35.891],[185.187,33.008],[190.305,-3.94],[173.94,-24.297],[173.229,-33.255],[169.612,-41.354],[138.661,-50.932],[118.055,-82.078],[92.05,-56.559],[81.076,-71.307],[56.355,-71.137],[13.709,-100.174],[-25.424,-68.77],[-51.239,-73.992],[-57.75,-48.484],[-110.975,-59.229],[-143.801,-15.964]],\"c\":true},\"ix\":2},\"nm\":\"Path"}, {"id": "assets/lottie/smoke.json_51", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1756.805,434.357],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 11\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1756.222,432.722],\"ix\":2},\"a\":{\"a\":0,\"k\":[1756.222,432.722],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group"}, {"id": "assets/lottie/smoke.json_52", "file": "assets/lottie/smoke.json", "content": "11\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[5.117,0.443],[4.995,-3.1],[1.047,0.119],[0.828,0.883],[6.568,-0.937],[5.941,-2.954],[-4.788,4.627],[-5.604,-1.39],[-3.259,-4.766],[-1.709,-0.136],[-0.952,0.497],[-8.78,-4.299],[-1.738,-9.621]],\"o\":[[-5.858,-0.508],[-0.896,0.556],[-1.203,-0.138],[-4.538,-4.838],[-6.567,0.937],[0.914,-6.595],[4.153,-4.011],[5.604,1.39],[0.968,1.415],[1.071,0.086],[8.666,-4.527],[8.781,4.3],[-1.013,-5.609]],\"v\":[[15.123,0.82],[-1.643,5.23],[-4.556,6.289],[-7.437,4.218],[-25.814,-1.141],[-44.391,5.744],[-37.519,-12.596],[-21.397,-16.515],[-7.718,-6.522],[-3.942,-3.307],[-0.919,-4.282],[27.348,-4.65],[44.391,17.905]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape -"}, {"id": "assets/lottie/smoke.json_53", "file": "assets/lottie/smoke.json", "content": "1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.9961,0.9608,0.7412,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1747.368,462.764],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 10\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_54", "file": "assets/lottie/smoke.json", "content": "10\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.833,\"y\":0.833},\"o\":{\"x\":0.167,\"y\":0.167},\"t\":0,\"s\":[-200.325,432.722],\"to\":[326.091,0],\"ti\":[-326.091,0]},{\"t\":598.003677912939,\"s\":[1756.222,432.722]}],\"ix\":2},\"a\":{\"a\":0,\"k\":[1756.222,432.722],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 13\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":4,\"mn\":\"ADBE Vector"}, {"id": "assets/lottie/smoke.json_55", "file": "assets/lottie/smoke.json", "content": "13\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":4,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":601.003696364007,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":2,\"ty\":0,\"nm\":\"clouds1\",\"refId\":\"comp_0\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[960,540,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[960,540,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100,100],\"ix\":6}},\"ao\":0,\"w\":1920,\"h\":1080,\"ip\":0,\"op\":599.003684063295,\"st\":0,\"bm\":0}],\"markers\":[]}"}, {"id": "components/LoadingScreen.tsx_0", "file": "components/LoadingScreen.tsx", "content": "================================================\nimport React from 'react';\nimport { View, Text, ActivityIndicator, StyleSheet } from 'react-native';\nimport { Flame } from 'lucide-react-native';\n\nexport default function LoadingScreen() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.content}>\n        <View style={styles.iconContainer}>\n          <Flame size={56} color=\"#FF6B35\" />\n        </View>\n        <Text style={styles.title}>HazMap</Text>\n        <Text style={styles.subtitle}>Loading...</Text>\n        <ActivityIndicator size=\"large\" color=\"#FF6B35\" style={styles.spinner} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#0F0F0F',\n    justifyContent: 'center',\n    alignItems: 'center',"}, {"id": "components/LoadingScreen.tsx_1", "file": "components/LoadingScreen.tsx", "content": "backgroundColor: '#0F0F0F',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  content: {\n    alignItems: 'center',\n  },\n  iconContainer: {\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#FFFFFF',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#888',\n    marginBottom: 24,\n  },\n  spinner: {\n    marginTop: 16,\n  },\n});"}, {"id": "contexts/AuthContext.tsx_0", "file": "contexts/AuthContext.tsx", "content": "================================================\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase } from '../supabaseClient';\n\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<{ data: any; error: any }>;\n  signUp: (email: string, password: string, userData?: any) => Promise<{ data: any; error: any }>;\n  signOut: () => Promise<{ error: any }>;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {"}, {"id": "contexts/AuthContext.tsx_1", "file": "contexts/AuthContext.tsx", "content": "const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      try {\n        console.log('Getting initial session...');\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Error getting session:', error);\n        } else {"}, {"id": "contexts/AuthContext.tsx_2", "file": "contexts/AuthContext.tsx", "content": "if (error) {\n          console.error('Error getting session:', error);\n        } else {\n          console.log('Initial session:', session?.user?.email);\n          setSession(session);\n          setUser(session?.user ?? null);\n        }\n      } catch (error) {\n        console.error('Error in getInitialSession:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        setSession(session);\n        setUser(session?.user ?? null);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);"}, {"id": "contexts/AuthContext.tsx_3", "file": "contexts/AuthContext.tsx", "content": "setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  const signUp = async (email: string, password: string, userData?: any) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData,\n        },\n      });\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }"}, {"id": "contexts/AuthContext.tsx_4", "file": "contexts/AuthContext.tsx", "content": "return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      return { error: null };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  const value = {\n    session,\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    isAuthenticated: !!session,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"}, {"id": "HazEnd - Flask Backend/backend/README.md_0", "file": "HazEnd - Flask Backend/backend/README.md", "content": "================================================\n# Flask Template\n\nThis sample repo contains the recommended structure for a Python Flask project. In this sample, we use `flask` to build a web application and the `pytest` to run tests.\n\n For a more in-depth tutorial, see our [Flask tutorial](https://code.visualstudio.com/docs/python/tutorial-flask).\n\n The code in this repo aims to follow Python style guidelines as outlined in [PEP 8](https://peps.python.org/pep-0008/)."}, {"id": "HazEnd - Flask Backend/backend/README.md_1", "file": "HazEnd - Flask Backend/backend/README.md", "content": "## Running the Sample\n\nTo successfully run this example, we recommend the following VS Code extensions:\n\n- [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)\n- [Python Debugger](https://marketplace.visualstudio.com/items?itemName=ms-python.debugpy)\n- [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) \n\n- Open the template folder in VS Code (**File** > **Open Folder...**)\n- Create a Python virtual environment using the **Python: Create Environment** command found in the Command Palette (**View > Command Palette**). Ensure you install dependencies found in the `pyproject.toml` file\n- Ensure your newly created environment is selected using the **Python: Select Interpreter** command found in the Command Palette"}, {"id": "HazEnd - Flask Backend/backend/README.md_2", "file": "HazEnd - Flask Backend/backend/README.md", "content": "- Run the app using the Run and Debug view or by pressing `F5`\n- To test your app, ensure you have the dependencies from `dev-requirements.txt` installed in your environment\n- Navigate to the Test Panel to configure your Python test or by triggering the **Python: Configure Tests** command from the Command Palette\n- Run tests in the Test Panel or by clicking the Play Button next to the individual tests in the `test_app.py` file"}, {"id": "HazEnd - Flask Backend/backend/app.py_0", "file": "HazEnd - Flask Backend/backend/app.py", "content": "================================================\nfrom flask import Flask, render_template, request, jsonify\nimport ee\nfrom datetime import date, timedelta\nimport requests\nimport json\nimport os\n\napp = Flask(__name__)\n\nSERVICE_ACCOUNT_FILE = 'your google earth engine json key file location here'\nSERVICE_ACCOUNT_EMAIL = 'your google earth engine service account email here'\n\ncredentials = ee.ServiceAccountCredentials(SERVICE_ACCOUNT_EMAIL, SERVICE_ACCOUNT_FILE)\n\ntry:\n    ee.Initialize(credentials)\nexcept Exception as e:\n\n    print(\"Earth Engine initialization failed:\", e)"}, {"id": "HazEnd - Flask Backend/backend/app.py_1", "file": "HazEnd - Flask Backend/backend/app.py", "content": "def get_wildfire_risk_prediction(data, openrouter_api_key):\n    url = \"https://openrouter.ai/api/v1/chat/completions\"\n    headers = {\n        \"Authorization\": f\"Bearer {openrouter_api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"X-Title\": \"HazEnd\",\n        \"HTTP-Referer\": \"https://hazend.tech\"  # Replace with your actual domain if you have one\n    }\n\n    prompt = f\"\"\"\nBased on the following environmental and physical data, predict the wildfire risk in the area and return the result as a JSON object with two fields: \"prediction\" (values: Low, Moderate, or High) and \"reasoning\" (detailed explanation why you made that prediction).\n\nData:\n{json.dumps(data, indent=2)}\nuse NDVI & lat long (do not mention lat and long in your answer only the NDVI) for type and amount of vegetation"}, {"id": "HazEnd - Flask Backend/backend/app.py_2", "file": "HazEnd - Flask Backend/backend/app.py", "content": "determine the wildfire risk as Low, Moderate, High, or Extreme. Use a conservative approach: if multiple high-risk indicators (e.g., temperature > 40\u00c2\u00b0C, humidity < 20%, wind > 20 m/s, zero precipitation, significant fire activity) are present, the risk should be marked as High\n\nRules:\n- Always respond with JSON. Format: {{ \"prediction\": \"Moderate\", \"reasoning\": \"...\" }}\n- Never say that you cannot predict due to missing data. Use all available signals.\n- Use the latitude and longitude to estimate the types and amount of vegetation present in the region.\n- Consider NDVI, temperature, humidity, precipitation, windspeed, AQI, fire activity, elevation, and more.\n- Reason through missing values intelligently based on the other data.\n- Do not break character. Only return the JSON.\n\"\"\""}, {"id": "HazEnd - Flask Backend/backend/app.py_3", "file": "HazEnd - Flask Backend/backend/app.py", "content": "- Do not break character. Only return the JSON.\n\"\"\"\n    \n    body = {\n        \"model\": \"google/gemma-3n-e2b-it:free\",\n        \"messages\": [\n            {\"role\": \"user\", \"content\": prompt}\n        ]\n    }\n\n    response = requests.post(url, headers=headers, data=json.dumps(body))\n    if response.status_code == 200:\n        return response.json()[\"choices\"][0][\"message\"][\"content\"]\n    else:\n        return f\"Error getting AI response: {response.text}\"\n\n\n@app.route(\"/\")"}, {"id": "HazEnd - Flask Backend/backend/app.py_4", "file": "HazEnd - Flask Backend/backend/app.py", "content": "def home():\n    return render_template(\"home.html\")\n\n\n@app.route(\"/about\")\ndef about():\n    return render_template(\"about.html\")\n\n@app.route(\"/gee-data\")"}, {"id": "HazEnd - Flask Backend/backend/app.py_5", "file": "HazEnd - Flask Backend/backend/app.py", "content": "def gee_data():\n    lat = float(request.args.get('lat', 0))\n    lon = float(request.args.get('lon', 0))\n    temperature = request.args.get('temperature')       # In Celsius or K?\n    humidity = request.args.get('humidity')             # In %\n    precipitation = request.args.get('precipitation')   # In mm\n    windspeed = request.args.get('windspeed')           # In m/s or km/h\n    aqi = request.args.get('aqi')                       # Air Quality Index\n    elevation = request.args.get('elevation')           # In meters\n    pm25 = request.args.get('pm25')                     # PM2.5 concentration in \u00c2\u00b5g/m\u00c2\u00b3\n    pm10 = request.args.get('pm10')                     # PM10 concentration in \u00c2\u00b5g/m\u00c2\u00b3\n    o3 = request.args.get('o3')                       # Ozone concentration in \u00c2\u00b5g/m\u00c2\u00b3"}, {"id": "HazEnd - Flask Backend/backend/app.py_6", "file": "HazEnd - Flask Backend/backend/app.py", "content": "o3 = request.args.get('o3')                       # Ozone concentration in \u00c2\u00b5g/m\u00c2\u00b3\n    no2 = request.args.get('no2')                     # Nitrogen Dioxide concentration in \u00c2\u00b5g/m\u00c2\u00b3\n    so2 = request.args.get('so2')                     # Sulfur Dioxide concentration in \u00c2\u00b5g/m\u00c2\u00b3\n    co = request.args.get('co')                       # Carbon Monoxide concentration in \u00c2\u00b5g/m\u00c2\u00b3\n    end_date = date.today().isoformat()\n    start_date = (date.today() - timedelta(days=30)).isoformat()\n    start_date = request.args.get('start', start_date)\n    end_date = request.args.get('end', end_date)\n    point = ee.Geometry.Point([lon, lat])\n\n    # NDVI from Sentinel-2 - get latest image and mean NDVI value"}, {"id": "HazEnd - Flask Backend/backend/app.py_7", "file": "HazEnd - Flask Backend/backend/app.py", "content": "# NDVI from Sentinel-2 - get latest image and mean NDVI value\n    s2 = ee.ImageCollection('COPERNICUS/S2').filterDate(start_date, end_date).filterBounds(point).sort('system:time_start', False)\n    if s2.size().getInfo() == 0:\n        ndvi_mean = None\n    else:\n        latest_img = ee.Image(s2.first())\n        ndvi_img = latest_img.normalizedDifference(['B8', 'B4']).rename('NDVI')\n        ndvi_stats = ndvi_img.reduceRegion(\n            reducer=ee.Reducer.mean(),\n            geometry=point.buffer(5000),\n            scale=30\n        )\n        ndvi_mean = ndvi_stats.get('NDVI').getInfo()\n\n    # Burn History from MODIS - get latest image and burn value\n    burn = ee.ImageCollection('MODIS/006/MCD64A1').filterDate(start_date, end_date).filterBounds(point).sort('system:time_start', False)"}, {"id": "HazEnd - Flask Backend/backend/app.py_8", "file": "HazEnd - Flask Backend/backend/app.py", "content": "if burn.size().getInfo() == 0:\n        burn_value = None\n    else:\n        latest_burn = ee.Image(burn.first())\n        burn_img = latest_burn.select('BurnDate')\n        burn_stats = burn_img.reduceRegion(\n            reducer=ee.Reducer.mean(),\n            geometry=point.buffer(5000),\n            scale=500\n        )\n        burn_value = burn_stats.get('BurnDate').getInfo()\n\n    # Ignition/Activity from FIRMS - count fire detections\n    firms = ee.FeatureCollection('FIRMS').filterDate(start_date, end_date).filterBounds(point.buffer(5000))\n    fire_count = firms.size().getInfo()\n\n    # Population Density from WorldPop (proxy)\n    # Use the latest available WorldPop image (2020)"}, {"id": "HazEnd - Flask Backend/backend/app.py_9", "file": "HazEnd - Flask Backend/backend/app.py", "content": "# Population Density from WorldPop (proxy)\n    # Use the latest available WorldPop image (2020)\n    pop_img = ee.ImageCollection('WorldPop/GP/100m/pop').filterDate('2020-01-01', '2020-12-31').filterBounds(point)\n    if pop_img.size().getInfo() == 0:\n        pop_density = None\n    else:\n        latest_pop = ee.Image(pop_img.first())\n        pop_stats = latest_pop.reduceRegion(\n            reducer=ee.Reducer.mean(),\n            geometry=point.buffer(20000),\n            scale=100\n        )\n        pop_density = pop_stats.get('population').getInfo()\n\n    result = {\n        \"latitude\": lat,\n        \"longitude\": lon,\n        \"ndvi_mean\": ndvi_mean,\n        \"fire_activity_count\": fire_count,\n        \"temperature\": float(temperature) if temperature else None,"}, {"id": "HazEnd - Flask Backend/backend/app.py_10", "file": "HazEnd - Flask Backend/backend/app.py", "content": "\"temperature\": float(temperature) if temperature else None,\n        \"humidity\": float(humidity) if humidity else None,\n        \"precipitation\": float(precipitation) if precipitation else None,\n        \"windspeed\": float(windspeed) if windspeed else None,\n        \"aqi\": float(aqi) if aqi else None,\n        \"elevation\": float(elevation) if elevation else None,\n        \"pm25\": float(pm25) if pm25 else None,\n        \"pm10\": float(pm10) if pm10 else None,\n        \"o3\": float(o3) if o3 else None,\n        \"no2\": float(no2) if no2 else None,\n        \"so2\": float(so2) if so2 else None,\n        \"co\": float(co) if co else None\n    }\n    openrouter_api_key = \"open router api key for gemma here\"\n    prediction = get_wildfire_risk_prediction(result, openrouter_api_key)"}, {"id": "HazEnd - Flask Backend/backend/app.py_11", "file": "HazEnd - Flask Backend/backend/app.py", "content": "prediction = get_wildfire_risk_prediction(result, openrouter_api_key)\n    \n    return jsonify({\"result\": result,  \"prediction\": prediction})\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"}, {"id": "HazEnd - Flask Backend/backend/dev-requirements.txt_0", "file": "HazEnd - Flask Backend/backend/dev-requirements.txt", "content": "================================================\n-r requirements.txt\npytest"}, {"id": "HazEnd - Flask Backend/backend/pyproject.toml_0", "file": "HazEnd - Flask Backend/backend/pyproject.toml", "content": "================================================\n[project]\nname = \"flask-app\"\nversion = \"0.1.0\"\ndescription = \"A simple Flask application.\"\n\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\n\n[project.dependencies]\ndependencies = \"requirements.txt\"\n\n[project.optional-dependencies]\ndev-requirements = {file = \"dev-requirements.txt\"}"}, {"id": "HazEnd - Flask Backend/backend/requirements.txt_0", "file": "HazEnd - Flask Backend/backend/requirements.txt", "content": "================================================\nflask"}, {"id": "HazEnd - Flask Backend/backend/static/site.css_0", "file": "HazEnd - Flask Backend/backend/static/site.css", "content": "================================================\n.navbar {\n    background-color: lightslategray;\n    font-size: 1em;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    color: white;\n    padding: 8px 5px 8px 5px;\n}\n\n.navbar a {\n    text-decoration: none;\n    color: inherit;\n}\n\n.navbar-brand {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.navbar-item {\n    font-variant: small-caps;\n    margin-left: 30px;\n}\n\n.body-content {\n    padding: 5px;\n    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}"}, {"id": "HazEnd - Flask Backend/backend/templates/about.html_0", "file": "HazEnd - Flask Backend/backend/templates/about.html", "content": "================================================\n{% extends 'base.html' %}\n\n{% block content %}\n    <h1>{% block title %} Welcome to your About page! {% endblock %}</h1>\n{% endblock %}"}, {"id": "HazEnd - Flask Backend/backend/templates/base.html_0", "file": "HazEnd - Flask Backend/backend/templates/base.html", "content": "================================================\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <title>{% block title %}{% endblock %}</title>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='site.css')}}\" />\n    </head>\n\n    <body>\n        <div class=\"navbar\">\n            <a href=\"{{ url_for('home') }}\" class=\"navbar-brand\">Home</a>\n            <a href=\"{{ url_for('about') }}\" class=\"navbar-item\">About</a>\n        </div>\n\n        <div class=\"body-content\">\n            {% block content %}\n            {% endblock %}\n            <hr/>\n        </div>\n    </body>\n</html>"}, {"id": "HazEnd - Flask Backend/backend/templates/home.html_0", "file": "HazEnd - Flask Backend/backend/templates/home.html", "content": "================================================\n{% extends 'base.html' %}\n\n{% block content %}\n    <h1>{% block title %} Welcome to your Flask app! {% endblock %}</h1>\n{% endblock %}"}, {"id": "HazEnd - Flask Backend/backend/tests/test_app.py_0", "file": "HazEnd - Flask Backend/backend/tests/test_app.py", "content": "================================================\nimport pytest\nfrom app import app as flask_app\n\n\n@pytest.fixture\ndef client():\n    with flask_app.test_client() as client:\n        yield client\n\n\ndef test_home(client):\n    response = client.get(\"/\")\n    assert response.status_code == 200\n\n\ndef test_about(client):\n    response = client.get(\"/about\")\n    assert response.status_code == 200"}, {"id": "hooks/useAuth.ts_0", "file": "hooks/useAuth.ts", "content": "================================================\nimport { useState, useEffect } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase } from '../supabaseClient';\n\nexport function useAuth() {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Error getting session:', error);\n        } else {\n          setSession(session);\n          setUser(session?.user ?? null);\n        }\n      } catch (error) {"}, {"id": "hooks/useAuth.ts_1", "file": "hooks/useAuth.ts", "content": "setUser(session?.user ?? null);\n        }\n      } catch (error) {\n        console.error('Error in getInitialSession:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        setSession(session);\n        setUser(session?.user ?? null);\n        setLoading(false);\n      }\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });"}, {"id": "hooks/useAuth.ts_2", "file": "hooks/useAuth.ts", "content": "email,\n        password,\n      });\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  const signUp = async (email: string, password: string, userData?: any) => {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userData,\n        },\n      });\n      if (error) throw error;\n      return { data, error: null };\n    } catch (error) {\n      return { data: null, error };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      return { error: null };\n    } catch (error) {\n      return { error };\n    }\n  };\n\n  return {\n    session,"}, {"id": "hooks/useAuth.ts_3", "file": "hooks/useAuth.ts", "content": "} catch (error) {\n      return { error };\n    }\n  };\n\n  return {\n    session,\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    isAuthenticated: !!session,\n  };\n}"}, {"id": "hooks/useFrameworkReady.ts_0", "file": "hooks/useFrameworkReady.ts", "content": "================================================\nimport { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    frameworkReady?: () => void;\n  }\n}\n\nexport function useFrameworkReady() {\n  useEffect(() => {\n    window.frameworkReady?.();\n  });\n}"}, {"id": "services/backgroundTasks.ts_0", "file": "services/backgroundTasks.ts", "content": "================================================\nimport * as BackgroundFetch from 'expo-background-fetch';\nimport * as TaskManager from 'expo-task-manager';\nimport * as Notifications from 'expo-notifications';\nimport * as Location from 'expo-location';\n\n// Replace this with your actual Google API key\nconst GOOGLE_API_KEY = 'API_KEY_HERE';\n\nconst BACKGROUND_FETCH_TASK = 'background-wildfire-prediction';\n\ninterface EnvData {\n  temperature: number | null;\n  windSpeed: number | null;\n  humidity: number | null;\n  precipitation: number | null;\n  aqi: number | null;\n  pm25: number | null;\n  elevation: number | null;\n}\n\ninterface PollutantData {\n  aqi: number | null;\n  pm25: number | null;\n  pm10: number | null;\n  o3: number | null;\n  no2: number | null;\n  so2: number | null;\n  co: number | null;"}, {"id": "services/backgroundTasks.ts_1", "file": "services/backgroundTasks.ts", "content": "o3: number | null;\n  no2: number | null;\n  so2: number | null;\n  co: number | null;\n}\n\n// Configure notifications\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: false,\n    shouldShowBanner: true,\n    shouldShowList: true,\n  }),\n});\n\n// Register background task\nTaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {\n  try {\n    console.log('Background task started');\n    \n    // Get current location\n    const { status } = await Location.requestForegroundPermissionsAsync();\n    if (status !== 'granted') {\n      console.log('Location permission denied');\n      return BackgroundFetch.BackgroundFetchResult.NoData;\n    }\n\n    const location = await Location.getCurrentPositionAsync({});"}, {"id": "services/backgroundTasks.ts_2", "file": "services/backgroundTasks.ts", "content": "}\n\n    const location = await Location.getCurrentPositionAsync({});\n    const { latitude: lat, longitude: lng } = location.coords;\n\n    // Fetch environmental data\n    const envData = await fetchEnvironmentalData(lat, lng);\n    \n    // Fetch pollutant data\n    const pollutantData = await fetchPollutantData(lat, lng);\n    \n    // Call wildfire prediction API\n    const prediction = await fetchWildfirePrediction(lat, lng, envData, pollutantData);\n    \n    // Send notification for any wildfire prediction\n    if (prediction) {\n      await sendWildfireAlert(prediction, lat, lng);\n    }\n\n    console.log('Background task completed successfully');\n    return BackgroundFetch.BackgroundFetchResult.NewData;\n  } catch (error) {\n    console.error('Background task failed:', error);"}, {"id": "services/backgroundTasks.ts_3", "file": "services/backgroundTasks.ts", "content": "} catch (error) {\n    console.error('Background task failed:', error);\n    return BackgroundFetch.BackgroundFetchResult.Failed;\n  }\n});\n\n// Fetch environmental data (weather, elevation)\nconst fetchEnvironmentalData = async (lat: number, lng: number): Promise<EnvData> => {\n  try {\n    // Get elevation\n    const elevRes = await fetch(`https://maps.googleapis.com/maps/api/elevation/json?locations=${lat},${lng}&key=${GOOGLE_API_KEY}`);\n    const elevJson = await elevRes.json();\n    const elevation = elevJson.results?.[0]?.elevation ?? null;\n\n    // Get weather data\n    const weatherUrl = `https://weather.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}&location.latitude=${lat}&location.longitude=${lng}`;\n    const weatherRes = await fetch(weatherUrl);"}, {"id": "services/backgroundTasks.ts_4", "file": "services/backgroundTasks.ts", "content": "const weatherRes = await fetch(weatherUrl);\n    const weatherJson = await weatherRes.json();\n    \n    const temperature = weatherJson?.temperature?.degrees ?? null;\n    const windSpeed = weatherJson?.wind?.speed?.value ?? null;\n    const humidity = weatherJson?.relativeHumidity ?? null;\n    const precipitation = weatherJson?.precipitation?.probability?.percent ?? \n                         weatherJson?.precipitation?.qpf?.quantity ?? null;\n\n    return {\n      temperature,\n      windSpeed,\n      humidity,\n      precipitation,\n      elevation,\n      aqi: null, // Will be fetched separately\n      pm25: null, // Will be fetched separately\n    };\n  } catch (error) {\n    console.error('Error fetching environmental data:', error);\n    return {\n      temperature: null,\n      windSpeed: null,"}, {"id": "services/backgroundTasks.ts_5", "file": "services/backgroundTasks.ts", "content": "return {\n      temperature: null,\n      windSpeed: null,\n      humidity: null,\n      precipitation: null,\n      elevation: null,\n      aqi: null,\n      pm25: null,\n    };\n  }\n};\n\n// Fetch pollutant data\nconst fetchPollutantData = async (lat: number, lng: number): Promise<PollutantData> => {\n  try {\n    const airBody = {\n      location: { latitude: lat, longitude: lng },\n      languageCode: 'en',\n      universalAqi: true\n    };\n    \n    const airRes = await fetch(`https://airquality.googleapis.com/v1/currentConditions:lookup?key=${GOOGLE_API_KEY}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(airBody),\n    });\n    \n    const airJson = await airRes.json();\n    const aqiObj = airJson?.indexes?.[0];\n    \n    return {"}, {"id": "services/backgroundTasks.ts_6", "file": "services/backgroundTasks.ts", "content": "const aqiObj = airJson?.indexes?.[0];\n    \n    return {\n      aqi: aqiObj?.aqi ?? null,\n      pm25: airJson?.pollutants?.find((p: any) => p.code === 'pm25')?.concentration?.value ?? null,\n      pm10: airJson?.pollutants?.find((p: any) => p.code === 'pm10')?.concentration?.value ?? null,\n      o3: airJson?.pollutants?.find((p: any) => p.code === 'o3')?.concentration?.value ?? null,\n      no2: airJson?.pollutants?.find((p: any) => p.code === 'no2')?.concentration?.value ?? null,\n      so2: airJson?.pollutants?.find((p: any) => p.code === 'so2')?.concentration?.value ?? null,\n      co: airJson?.pollutants?.find((p: any) => p.code === 'co')?.concentration?.value ?? null,\n    };\n  } catch (error) {\n    console.error('Error fetching pollutant data:', error);\n    return {\n      aqi: null,"}, {"id": "services/backgroundTasks.ts_7", "file": "services/backgroundTasks.ts", "content": "console.error('Error fetching pollutant data:', error);\n    return {\n      aqi: null,\n      pm25: null,\n      pm10: null,\n      o3: null,\n      no2: null,\n      so2: null,\n      co: null,\n    };\n  }\n};\n\n// Fetch wildfire prediction\nconst fetchWildfirePrediction = async (lat: number, lng: number, env: EnvData, pol: PollutantData): Promise<string | null> => {\n  try {\n    const params = new URLSearchParams({\n      lat: lat.toString(),\n      lon: lng.toString(),\n      temperature: env.temperature?.toString() ?? '0',\n      humidity: env.humidity?.toString() ?? '0',\n      precipitation: env.precipitation?.toString() ?? '0',\n      windspeed: env.windSpeed?.toString() ?? '0',\n      aqi: pol.aqi?.toString() ?? '0',\n      elevation: env.elevation?.toString() ?? '0',"}, {"id": "services/backgroundTasks.ts_8", "file": "services/backgroundTasks.ts", "content": "aqi: pol.aqi?.toString() ?? '0',\n      elevation: env.elevation?.toString() ?? '0',\n      pm25: pol.pm25?.toString() ?? '0',\n      pm10: pol.pm10?.toString() ?? '0',\n      o3: pol.o3?.toString() ?? '0',\n      no2: pol.no2?.toString() ?? '0',\n      so2: pol.so2?.toString() ?? '0',\n      co: pol.co?.toString() ?? '0',\n    });\n\n    const apiUrl = `CUSTOM_API_ENDPOINT_HERE?${params.toString()}`;\n    const res = await fetch(apiUrl);\n    const json = await res.json();\n    \n    let risk = json?.prediction?.prediction || json?.prediction || json?.result?.risk || 'Unknown';\n    \n    // Clean up the risk string\n    if (typeof risk === 'string') {\n      const match = risk.match(/\"prediction\"\\s*:\\s*\"(.*?)\"/);\n      if (match) risk = match[1];"}, {"id": "services/backgroundTasks.ts_9", "file": "services/backgroundTasks.ts", "content": "const match = risk.match(/\"prediction\"\\s*:\\s*\"(.*?)\"/);\n      if (match) risk = match[1];\n      else if (risk.startsWith('\"') && risk.endsWith('\"')) risk = risk.slice(1, -1);\n    }\n    \n    return risk;\n  } catch (error) {\n    console.error('Error fetching wildfire prediction:', error);\n    return null;\n  }\n};\n\n// Send wildfire alert notification\nconst sendWildfireAlert = async (prediction: string, lat: number, lng: number) => {\n  try {\n    // Request notification permissions\n    const { status } = await Notifications.requestPermissionsAsync();\n    if (status !== 'granted') {\n      console.log('Notification permission denied');\n      return;\n    }\n\n    // Get location name for better notification\n    let locationName = 'your area';\n    try {\n      const geocodeRes = await fetch("}, {"id": "services/backgroundTasks.ts_10", "file": "services/backgroundTasks.ts", "content": "let locationName = 'your area';\n    try {\n      const geocodeRes = await fetch(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=${GOOGLE_API_KEY}`\n      );\n      const geocodeJson = await geocodeRes.json();\n      const addressComponents = geocodeJson.results?.[0]?.address_components;\n      if (addressComponents) {\n        const city = addressComponents.find((comp: any) => \n          comp.types.includes('locality') || comp.types.includes('administrative_area_level_1')\n        );\n        if (city) {\n          locationName = city.long_name;\n        }\n      }\n    } catch (error) {\n      console.log('Could not get location name:', error);\n    }\n\n    // Send notification\n    await Notifications.scheduleNotificationAsync({\n      content: {"}, {"id": "services/backgroundTasks.ts_11", "file": "services/backgroundTasks.ts", "content": "// Send notification\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title: '\u00f0\u0178\u201d\u00a5 Wildfire Risk Alert',\n        body: `wildfire risk in ${locationName}. Risk level: ${prediction}. Stay alert and follow local emergency guidelines.`,\n        data: { prediction, latitude: lat, longitude: lng },\n      },\n      trigger: null, // Send immediately\n    });\n\n    console.log('Wildfire alert notification sent');\n  } catch (error) {\n    console.error('Error sending notification:', error);\n  }\n};\n\n// Export functions for testing\nexport { fetchEnvironmentalData, fetchPollutantData, fetchWildfirePrediction, sendWildfireAlert };\n\n// Start background fetch\nexport const startBackgroundFetch = async () => {\n  try {\n    // Register background fetch task"}, {"id": "services/backgroundTasks.ts_12", "file": "services/backgroundTasks.ts", "content": "export const startBackgroundFetch = async () => {\n  try {\n    // Register background fetch task\n    await BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {\n      minimumInterval: 10 * 60, // 10 minutes in seconds\n      stopOnTerminate: false,\n      startOnBoot: true,\n    });\n\n    console.log('Background fetch task registered');\n  } catch (error) {\n    console.error('Error registering background fetch task:', error);\n  }\n};\n\n// Stop background fetch\nexport const stopBackgroundFetch = async () => {\n  try {\n    await BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);\n    console.log('Background fetch task unregistered');\n  } catch (error) {\n    console.error('Error unregistering background fetch task:', error);\n  }\n};\n\n// Check background fetch status"}, {"id": "services/backgroundTasks.ts_13", "file": "services/backgroundTasks.ts", "content": "}\n};\n\n// Check background fetch status\nexport const getBackgroundFetchStatus = async () => {\n  try {\n    const status = await BackgroundFetch.getStatusAsync();\n    return status;\n  } catch (error) {\n    console.error('Error getting background fetch status:', error);\n    return null;\n  }\n};"}, {"id": "types/env.d.ts_0", "file": "types/env.d.ts", "content": "================================================\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: string;\n      EXPO_PUBLIC_SUPABASE_URL: string;\n      EXPO_PUBLIC_SUPABASE_KEY: string;\n    }\n  }\n}\n\nexport {};"}, {"id": ".bolt/config.json_0", "file": ".bolt/config.json", "content": "================================================\n{\n  \"template\": \"bolt-expo\"\n}"}]


================================================
FILE: indexes/HazMapApp/graph.pkl
================================================
[Binary file]


================================================
FILE: indexes/HazMapApp/repo.index
================================================
[Binary file]


================================================
FILE: services/__init__.py
================================================
# Services package for AI Project Analyzer

from .gitingest_processor import GitingestProcessor, AuthConfig, ProcessingConfig
from .config import GitingestConfig, load_gitingest_config, get_github_token, setup_gitingest_environment

__all__ = [
    'GitingestProcessor',
    'AuthConfig', 
    'ProcessingConfig',
    'GitingestConfig',
    'load_gitingest_config',
    'get_github_token',
    'setup_gitingest_environment'
]


================================================
FILE: services/code_analyzer.py
================================================
"""
Multi-Language Code Analyzer

This module provides comprehensive code analysis capabilities for 10+ programming languages.
It uses Tree-sitter for accurate parsing and extracts code structure, relationships, and metadata.
"""

import re
import ast
import json
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import logging

logger = logging.getLogger(__name__)


class ProgrammingLanguage(Enum):
    """Supported programming languages"""
    PYTHON = "python"
    JAVASCRIPT = "javascript"
    TYPESCRIPT = "typescript"
    RUST = "rust"
    GO = "go"
    JAVA = "java"
    CPP = "cpp"
    C = "c"
    CSHARP = "csharp"
    PHP = "php"
    RUBY = "ruby"
    SWIFT = "swift"
    KOTLIN = "kotlin"
    SCALA = "scala"
    DART = "dart"
    LUA = "lua"
    UNKNOWN = "unknown"


@dataclass
class CodeFunction:
    """Represents a function in the code"""
    name: str
    start_line: int
    end_line: int
    parameters: List[str]
    return_type: Optional[str]
    docstring: Optional[str]
    calls: List[str]  # Functions this function calls
    complexity: str  # low, medium, high
    is_async: bool = False
    is_static: bool = False
    visibility: str = "public"  # public, private, protected


@dataclass
class CodeClass:
    """Represents a class in the code"""
    name: str
    start_line: int
    end_line: int
    methods: List[CodeFunction]
    properties: List[str]
    inherits_from: List[str]
    implements: List[str]
    docstring: Optional[str]
    is_abstract: bool = False


@dataclass
class CodeImport:
    """Represents an import statement"""
    module: str
    items: List[str]  # Specific items imported
    alias: Optional[str]
    is_relative: bool = False
    line_number: int = 0


@dataclass
class CodeStructure:
    """Complete code structure for a file"""
    file_path: str
    language: ProgrammingLanguage
    functions: List[CodeFunction]
    classes: List[CodeClass]
    imports: List[CodeImport]
    exports: List[str]  # For languages that support exports
    variables: List[str]  # Global/module-level variables
    interfaces: List[Dict[str, Any]]  # For TypeScript/Java interfaces
    types: List[Dict[str, Any]]  # Custom types
    total_lines: int
    complexity_score: float
    entry_points: List[str]  # Main functions, if __name__ == "__main__", etc.


class LanguageDetector:
    """Detects programming language from file path and content"""
    
    EXTENSION_MAP = {
        '.py': ProgrammingLanguage.PYTHON,
        '.js': ProgrammingLanguage.JAVASCRIPT,
        '.mjs': ProgrammingLanguage.JAVASCRIPT,
        '.ts': ProgrammingLanguage.TYPESCRIPT,
        '.tsx': ProgrammingLanguage.TYPESCRIPT,
        '.jsx': ProgrammingLanguage.JAVASCRIPT,
        '.rs': ProgrammingLanguage.RUST,
        '.go': ProgrammingLanguage.GO,
        '.java': ProgrammingLanguage.JAVA,
        '.cpp': ProgrammingLanguage.CPP,
        '.cc': ProgrammingLanguage.CPP,
        '.cxx': ProgrammingLanguage.CPP,
        '.c': ProgrammingLanguage.C,
        '.h': ProgrammingLanguage.C,
        '.hpp': ProgrammingLanguage.CPP,
        '.cs': ProgrammingLanguage.CSHARP,
        '.php': ProgrammingLanguage.PHP,
        '.rb': ProgrammingLanguage.RUBY,
        '.swift': ProgrammingLanguage.SWIFT,
        '.kt': ProgrammingLanguage.KOTLIN,
        '.kts': ProgrammingLanguage.KOTLIN,
        '.scala': ProgrammingLanguage.SCALA,
        '.dart': ProgrammingLanguage.DART,
        '.lua': ProgrammingLanguage.LUA,
    }
    
    @classmethod
    def detect_from_path(cls, file_path: str) -> ProgrammingLanguage:
        """Detect language from file extension"""
        path = Path(file_path)
        extension = path.suffix.lower()
        return cls.EXTENSION_MAP.get(extension, ProgrammingLanguage.UNKNOWN)
    
    @classmethod
    def detect_language(cls, file_path: str, content: str) -> ProgrammingLanguage:
        """Comprehensive language detection"""
        # Try extension first (most reliable)
        ext_language = cls.detect_from_path(file_path)
        
        if ext_language != ProgrammingLanguage.UNKNOWN:
            return ext_language
        
        # Fall back to unknown for now
        return ProgrammingLanguage.UNKNOWN


class PythonAnalyzer:
    """Specialized analyzer for Python code"""
    
    @staticmethod
    def analyze(content: str, file_path: str) -> CodeStructure:
        """Analyze Python code structure"""
        functions = []
        classes = []
        imports = []
        variables = []
        entry_points = []
        
        try:
            tree = ast.parse(content)
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    func = CodeFunction(
                        name=node.name,
                        start_line=node.lineno,
                        end_line=getattr(node, 'end_lineno', node.lineno),
                        parameters=[arg.arg for arg in node.args.args],
                        return_type=None,  # Could extract from annotations
                        docstring=ast.get_docstring(node),
                        calls=PythonAnalyzer._extract_function_calls(node),
                        complexity=PythonAnalyzer._calculate_complexity(node),
                        is_async=isinstance(node, ast.AsyncFunctionDef)
                    )
                    functions.append(func)
                
                elif isinstance(node, ast.ClassDef):
                    class_methods = []
                    for item in node.body:
                        if isinstance(item, (ast.FunctionDef, ast.AsyncFunctionDef)):
                            method = CodeFunction(
                                name=item.name,
                                start_line=item.lineno,
                                end_line=getattr(item, 'end_lineno', item.lineno),
                                parameters=[arg.arg for arg in item.args.args],
                                return_type=None,
                                docstring=ast.get_docstring(item),
                                calls=PythonAnalyzer._extract_function_calls(item),
                                complexity=PythonAnalyzer._calculate_complexity(item),
                                is_async=isinstance(item, ast.AsyncFunctionDef)
                            )
                            class_methods.append(method)
                    
                    cls = CodeClass(
                        name=node.name,
                        start_line=node.lineno,
                        end_line=getattr(node, 'end_lineno', node.lineno),
                        methods=class_methods,
                        properties=[],  # Could extract from assignments
                        inherits_from=[base.id for base in node.bases if hasattr(base, 'id')],
                        implements=[],
                        docstring=ast.get_docstring(node)
                    )
                    classes.append(cls)
                
                elif isinstance(node, (ast.Import, ast.ImportFrom)):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            imp = CodeImport(
                                module=alias.name,
                                items=[],
                                alias=alias.asname,
                                line_number=node.lineno
                            )
                            imports.append(imp)
                    else:  # ImportFrom
                        items = [alias.name for alias in node.names]
                        imp = CodeImport(
                            module=node.module or '',
                            items=items,
                            alias=None,
                            is_relative=node.level > 0,
                            line_number=node.lineno
                        )
                        imports.append(imp)
            
            # Check for entry points
            if 'if __name__ == "__main__"' in content:
                entry_points.append('__main__')
            
        except SyntaxError as e:
            logger.warning(f"Failed to parse Python file {file_path}: {e}")
        
        return CodeStructure(
            file_path=file_path,
            language=ProgrammingLanguage.PYTHON,
            functions=functions,
            classes=classes,
            imports=imports,
            exports=[],
            variables=variables,
            interfaces=[],
            types=[],
            total_lines=len(content.split('\n')),
            complexity_score=len(functions) + len(classes) * 2,
            entry_points=entry_points
        )
    
    @staticmethod
    def _extract_function_calls(node: ast.AST) -> List[str]:
        """Extract function calls from AST node"""
        calls = []
        for child in ast.walk(node):
            if isinstance(child, ast.Call) and hasattr(child.func, 'id'):
                calls.append(child.func.id)
        return calls
    
    @staticmethod
    def _calculate_complexity(node: ast.AST) -> str:
        """Calculate cyclomatic complexity"""
        complexity = 1  # Base complexity
        
        for child in ast.walk(node):
            if isinstance(child, (ast.If, ast.While, ast.For, ast.Try, ast.With)):
                complexity += 1
            elif isinstance(child, ast.BoolOp):
                complexity += len(child.values) - 1
        
        if complexity <= 5:
            return "low"
        elif complexity <= 10:
            return "medium"
        else:
            return "high"


class TypeScriptAnalyzer:
    """Specialized analyzer for TypeScript/JavaScript code"""
    
    @staticmethod
    def analyze(content: str, file_path: str) -> CodeStructure:
        """Analyze TypeScript/JavaScript code structure using regex patterns"""
        functions = []
        classes = []
        imports = []
        exports = []
        interfaces = []
        entry_points = []
        
        lines = content.split('\n')
        
        # Patterns for different constructs
        function_patterns = [
            r'(?:export\s+)?(?:async\s+)?function\s+(\w+)\s*\(',  # function declarations
            r'(?:export\s+)?const\s+(\w+)\s*=\s*(?:async\s*)?\([^)]*\)\s*=>', # arrow functions
            r'(?:export\s+)?const\s+(\w+)\s*=\s*(?:async\s+)?function', # function expressions
        ]
        
        class_patterns = [
            r'(?:export\s+)?(?:default\s+)?class\s+(\w+)',  # class declarations
        ]
        
        interface_patterns = [
            r'(?:export\s+)?interface\s+(\w+)',  # interface declarations
            r'(?:export\s+)?type\s+(\w+)\s*=',   # type aliases
        ]
        
        import_patterns = [
            r'import\s+(?:\{([^}]+)\}|\*\s+as\s+(\w+)|(\w+))\s+from\s+[\'"]([^\'"]+)[\'"]',
            r'import\s+[\'"]([^\'"]+)[\'"]',  # side-effect imports
        ]
        
        export_patterns = [
            r'export\s+(?:default\s+)?(?:const|let|var|function|class)\s+(\w+)',
            r'export\s+\{([^}]+)\}',
        ]
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            
            # Find functions
            for pattern in function_patterns:
                matches = re.finditer(pattern, line)
                for match in matches:
                    func_name = match.group(1)
                    # Extract parameters (basic)
                    param_match = re.search(r'\(([^)]*)\)', line)
                    params = []
                    if param_match:
                        param_str = param_match.group(1)
                        if param_str.strip():
                            params = [p.split(':')[0].strip() for p in param_str.split(',') if p.strip()]
                    
                    func = CodeFunction(
                        name=func_name,
                        start_line=i,
                        end_line=i,  # Approximate
                        parameters=params,
                        return_type=None,
                        docstring=None,
                        calls=[],
                        complexity="medium",  # Default
                        is_async='async' in line
                    )
                    functions.append(func)
            
            # Find classes
            for pattern in class_patterns:
                matches = re.finditer(pattern, line)
                for match in matches:
                    class_name = match.group(1)
                    cls = CodeClass(
                        name=class_name,
                        start_line=i,
                        end_line=i,  # Approximate
                        methods=[],
                        properties=[],
                        inherits_from=[],
                        implements=[],
                        docstring=None
                    )
                    classes.append(cls)
            
            # Find interfaces/types
            for pattern in interface_patterns:
                matches = re.finditer(pattern, line)
                for match in matches:
                    interface_name = match.group(1)
                    interfaces.append({
                        'name': interface_name,
                        'line': i,
                        'type': 'interface' if 'interface' in line else 'type'
                    })
            
            # Find imports
            for pattern in import_patterns:
                matches = re.finditer(pattern, line)
                for match in matches:
                    groups = match.groups()
                    if len(groups) >= 4 and groups[3]:  # Named/default imports
                        module = groups[3]
                        items = []
                        if groups[0]:  # Named imports
                            items = [item.strip() for item in groups[0].split(',')]
                        elif groups[1]:  # Namespace import
                            items = [groups[1]]
                        elif groups[2]:  # Default import
                            items = [groups[2]]
                        
                        imp = CodeImport(
                            module=module,
                            items=items,
                            alias=None,
                            is_relative=module.startswith('.'),
                            line_number=i
                        )
                        imports.append(imp)
                    elif len(groups) >= 1 and groups[0]:  # Side-effect import
                        imp = CodeImport(
                            module=groups[0],
                            items=[],
                            alias=None,
                            is_relative=groups[0].startswith('.'),
                            line_number=i
                        )
                        imports.append(imp)
            
            # Find exports
            for pattern in export_patterns:
                matches = re.finditer(pattern, line)
                for match in matches:
                    if match.group(1):
                        exports.append(match.group(1))
                    else:
                        # Handle export { ... }
                        export_list = match.group(1) if len(match.groups()) > 1 else ""
                        if export_list:
                            exports.extend([e.strip() for e in export_list.split(',') if e.strip()])
        
        # Check for React component (common entry point)
        if 'export default' in content or 'export default function' in content:
            entry_points.append('default_export')
        
        return CodeStructure(
            file_path=file_path,
            language=ProgrammingLanguage.TYPESCRIPT if file_path.endswith(('.ts', '.tsx')) else ProgrammingLanguage.JAVASCRIPT,
            functions=functions,
            classes=classes,
            imports=imports,
            exports=exports,
            variables=[],
            interfaces=interfaces,
            types=[],
            total_lines=len(lines),
            complexity_score=len(functions) + len(classes) * 2 + len(interfaces),
            entry_points=entry_points
        )


class MultiLanguageCodeAnalyzer:
    """Main analyzer that coordinates language-specific analyzers"""
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.analyzers = {
            ProgrammingLanguage.PYTHON: PythonAnalyzer,
            ProgrammingLanguage.TYPESCRIPT: TypeScriptAnalyzer,
            ProgrammingLanguage.JAVASCRIPT: TypeScriptAnalyzer,  # Use same analyzer
        }
    
    def analyze_file(self, file_path: str, content: str) -> CodeStructure:
        """Analyze a single file and return its code structure"""
        try:
            # Detect language
            language = LanguageDetector.detect_language(file_path, content)
            
            self.logger.debug(f"Analyzing {file_path} as {language.value}")
            
            # Use specialized analyzer if available
            if language in self.analyzers:
                analyzer = self.analyzers[language]
                return analyzer.analyze(content, file_path)
            
            # Return minimal structure for unsupported languages
            return CodeStructure(
                file_path=file_path,
                language=language,
                functions=[],
                classes=[],
                imports=[],
                exports=[],
                variables=[],
                interfaces=[],
                types=[],
                total_lines=len(content.split('\n')),
                complexity_score=0,
                entry_points=[]
            )
            
        except Exception as e:
            self.logger.error(f"Error analyzing file {file_path}: {str(e)}")
            
            # Return minimal structure on error
            return CodeStructure(
                file_path=file_path,
                language=ProgrammingLanguage.UNKNOWN,
                functions=[],
                classes=[],
                imports=[],
                exports=[],
                variables=[],
                interfaces=[],
                types=[],
                total_lines=len(content.split('\n')),
                complexity_score=0,
                entry_points=[]
            )
    
    def analyze_project(self, files: Dict[str, str]) -> Dict[str, CodeStructure]:
        """Analyze multiple files and return project structure"""
        project_structure = {}
        
        for file_path, content in files.items():
            structure = self.analyze_file(file_path, content)
            project_structure[file_path] = structure
        
        return project_structure


================================================
FILE: services/config.py
================================================
"""
Configuration module for gitingest processing.

This module handles loading and validation of environment variables
for gitingest integration configuration.
"""

import os
from typing import List, Optional
from dataclasses import dataclass


@dataclass
class GitingestConfig:
    """Configuration class for gitingest processing settings"""
    
    max_file_size: int
    timeout: int
    temp_dir: str
    include_patterns: List[str]
    exclude_patterns: List[str]
    
    @classmethod
    def from_environment(cls) -> 'GitingestConfig':
        """
        Load gitingest configuration from environment variables.
        
        Returns:
            GitingestConfig instance with values from environment or defaults
        """
        # Load with defaults
        max_file_size = int(os.getenv('GITINGEST_MAX_FILE_SIZE', '10485760'))  # 10MB default
        timeout = int(os.getenv('GITINGEST_TIMEOUT', '300'))  # 5 minutes default
        temp_dir = os.getenv('GITINGEST_TEMP_DIR', '/tmp/gitingest')
        
        # Parse comma-separated patterns
        include_patterns_str = os.getenv(
            'GITINGEST_INCLUDE_PATTERNS', 
            '*.py,*.js,*.ts,*.jsx,*.tsx,*.md,*.json,*.yaml,*.yml'
        )
        include_patterns = [p.strip() for p in include_patterns_str.split(',') if p.strip()]
        
        exclude_patterns_str = os.getenv(
            'GITINGEST_EXCLUDE_PATTERNS',
            'node_modules,__pycache__,.git,*.pyc,*.log'
        )
        exclude_patterns = [p.strip() for p in exclude_patterns_str.split(',') if p.strip()]
        
        return cls(
            max_file_size=max_file_size,
            timeout=timeout,
            temp_dir=temp_dir,
            include_patterns=include_patterns,
            exclude_patterns=exclude_patterns
        )
    
    def validate(self) -> List[str]:
        """
        Validate configuration values.
        
        Returns:
            List of validation error messages, empty if valid
        """
        errors = []
        
        if self.max_file_size <= 0:
            errors.append("max_file_size must be positive")
        
        if self.timeout <= 0:
            errors.append("timeout must be positive")
        
        if not self.temp_dir:
            errors.append("temp_dir cannot be empty")
        
        if not self.include_patterns:
            errors.append("include_patterns cannot be empty")
        
        return errors
    
    def to_processing_config(self):
        """
        Convert to ProcessingConfig for GitingestProcessor.
        
        Returns:
            ProcessingConfig instance
        """
        from .gitingest_processor import ProcessingConfig
        
        return ProcessingConfig(
            include_patterns=self.include_patterns,
            exclude_patterns=self.exclude_patterns,
            max_file_size=self.max_file_size,
            respect_gitignore=True,
            include_binary_files=False,
            timeout=self.timeout
        )


def load_gitingest_config() -> GitingestConfig:
    """
    Load and validate gitingest configuration from environment.
    
    Returns:
        GitingestConfig instance
        
    Raises:
        ValueError: If configuration is invalid
    """
    config = GitingestConfig.from_environment()
    
    errors = config.validate()
    if errors:
        raise ValueError(f"Invalid gitingest configuration: {', '.join(errors)}")
    
    return config


def get_github_token() -> Optional[str]:
    """
    Get GitHub token from environment variables.
    
    Checks multiple possible environment variable names for GitHub token.
    
    Returns:
        GitHub token if found, None otherwise
    """
    # Check common environment variable names for GitHub token
    # Prioritize the one already used in your app
    token_vars = [
        'GITHUB_API_TOKEN',  # Your existing token variable
        'GITHUB_TOKEN',
        'GITHUB_ACCESS_TOKEN', 
        'GH_TOKEN',
        'PERSONAL_ACCESS_TOKEN'
    ]
    
    for var in token_vars:
        token = os.getenv(var)
        if token and token != 'your_github_token_here':  # Skip placeholder values
            return token
    
    return None


def setup_gitingest_environment() -> None:
    """
    Set up environment for gitingest processing.
    
    Creates necessary directories and validates configuration.
    """
    import tempfile
    from pathlib import Path
    
    config = load_gitingest_config()
    
    # Create temp directory if it doesn't exist
    temp_path = Path(config.temp_dir)
    if not temp_path.exists():
        try:
            temp_path.mkdir(parents=True, exist_ok=True)
        except PermissionError:
            # Fall back to system temp directory
            config.temp_dir = tempfile.gettempdir()
    
    # Validate gitingest is available
    import subprocess
    try:
        result = subprocess.run(['gitingest', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode != 0:
            raise RuntimeError("Gitingest command failed")
    except (FileNotFoundError, subprocess.TimeoutExpired):
        raise RuntimeError("Gitingest is not installed or not accessible in PATH")


================================================
FILE: services/gitingest_processor.py
================================================
"""
GitingestProcessor Service

This service handles gitingest execution and output processing for repository analysis.
It replaces the complex GitHub API streaming approach with gitingest's optimized
text format generation.
"""

import os
import subprocess
import tempfile
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime
import json
import shutil

logger = logging.getLogger(__name__)


@dataclass
class AuthConfig:
    """Configuration for repository authentication"""
    token: Optional[str] = None
    auth_method: str = "token"  # token, ssh, https
    

@dataclass
class ProcessingConfig:
    """Configuration for gitingest processing"""
    include_patterns: List[str] = None
    exclude_patterns: List[str] = None
    max_file_size: int = 10 * 1024 * 1024  # 10MB default
    respect_gitignore: bool = True
    include_binary_files: bool = False
    timeout: int = 300  # 5 minutes default
    
    def __post_init__(self):
        if self.include_patterns is None:
            self.include_patterns = ["*.py", "*.js", "*.ts", "*.jsx", "*.tsx", "*.md", "*.json", "*.yaml", "*.yml"]
        if self.exclude_patterns is None:
            self.exclude_patterns = ["node_modules", "__pycache__", ".git", "*.pyc", "*.log"]


@dataclass
class GitingestMetadata:
    """Metadata from gitingest processing"""
    processing_time: float
    total_files: int
    total_size: int
    gitingest_version: str
    processed_at: str


@dataclass
class ContentBlock:
    """Represents a content block from gitingest output"""
    file_path: str
    content: str
    language: str
    line_count: int
    size_bytes: int
    file_type: str


@dataclass
class StructuredRepository:
    """Structured representation of repository from gitingest"""
    repo_url: str
    files: Dict[str, ContentBlock]
    file_hierarchy: Dict[str, Any]
    language_stats: Dict[str, int]
    gitingest_metadata: GitingestMetadata
    raw_output: str


@dataclass
class ValidationResult:
    """Result of repository validation"""
    valid: bool
    error: Optional[str] = None
    repo_info: Optional[Dict[str, Any]] = None


@dataclass
class GitingestOutput:
    """Complete output from gitingest processing"""
    success: bool
    structured_repo: Optional[StructuredRepository] = None
    error: Optional[str] = None
    processing_stats: Optional[Dict[str, Any]] = None


class GitingestProcessor:
    """
    Core service that handles gitingest execution and output processing.
    
    This service provides methods to:
    - Process repositories using gitingest
    - Parse gitingest output into structured format
    - Validate repository access
    - Handle authentication and cleanup
    """
    
    def __init__(self, config: Optional[ProcessingConfig] = None):
        """
        Initialize GitingestProcessor with configuration.
        
        Args:
            config: Processing configuration, uses defaults if None
        """
        self.config = config or ProcessingConfig()
        self.temp_dir = None
        self._setup_logging()
    
    def _setup_logging(self):
        """Setup logging for gitingest operations"""
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
    
    async def process_repository(self, repo_url: str, auth_config: AuthConfig) -> GitingestOutput:
        """
        Process a repository using gitingest to convert it to structured text format.
        
        Args:
            repo_url: URL of the repository to process
            auth_config: Authentication configuration for repository access
            
        Returns:
            GitingestOutput containing structured repository data or error information
        """
        start_time = datetime.now()
        process_id = None
        
        try:
            self.logger.info(f"Starting gitingest processing for repository: {repo_url}")
            
            # Validate repository first
            validation = await self.validate_repository(repo_url)
            if not validation.valid:
                return GitingestOutput(
                    success=False,
                    error=f"Repository validation failed: {validation.error}"
                )
            
            # Create temporary directory for processing
            process_id = self._create_temp_directory()
            
            # Execute gitingest command
            raw_output = await self._execute_gitingest(repo_url, auth_config, process_id)
            
            # Parse gitingest output
            structured_repo = self.parse_gitingest_output(raw_output, repo_url)
            
            # Calculate processing stats
            processing_time = (datetime.now() - start_time).total_seconds()
            processing_stats = {
                'processing_time_seconds': processing_time,
                'files_processed': len(structured_repo.files),
                'total_size_bytes': sum(block.size_bytes for block in structured_repo.files.values()),
                'started_at': start_time.isoformat(),
                'completed_at': datetime.now().isoformat()
            }
            
            self.logger.info(f"Successfully processed repository {repo_url} in {processing_time:.2f} seconds")
            
            return GitingestOutput(
                success=True,
                structured_repo=structured_repo,
                processing_stats=processing_stats
            )
            
        except Exception as e:
            self.logger.error(f"Error processing repository {repo_url}: {str(e)}")
            return GitingestOutput(
                success=False,
                error=f"Processing failed: {str(e)}"
            )
        finally:
            # Always cleanup temporary files
            if process_id:
                self.cleanup_temporary_files(process_id)
    
    async def validate_repository(self, repo_url: str) -> ValidationResult:
        """
        Validate repository URL and check basic accessibility.
        
        Args:
            repo_url: Repository URL to validate
            
        Returns:
            ValidationResult indicating if repository is valid and accessible
        """
        try:
            # Basic URL validation
            if not repo_url or not isinstance(repo_url, str):
                return ValidationResult(valid=False, error="Invalid repository URL")
            
            # Check if it's a valid Git URL format
            valid_patterns = [
                r'https://github\.com/[\w\-\.]+/[\w\-\.]+',
                r'git@github\.com:[\w\-\.]+/[\w\-\.]+\.git',
                r'https://gitlab\.com/[\w\-\.]+/[\w\-\.]+',
                r'https://bitbucket\.org/[\w\-\.]+/[\w\-\.]+',
            ]
            
            import re
            is_valid_format = any(re.match(pattern, repo_url) for pattern in valid_patterns)
            
            if not is_valid_format:
                return ValidationResult(
                    valid=False, 
                    error="Repository URL format not supported. Please use GitHub, GitLab, or Bitbucket URLs."
                )
            
            # For now, assume valid if format is correct
            # In a full implementation, we might do additional checks here
            return ValidationResult(
                valid=True,
                repo_info={
                    'url': repo_url,
                    'validated_at': datetime.now().isoformat()
                }
            )
            
        except Exception as e:
            self.logger.error(f"Repository validation error: {str(e)}")
            return ValidationResult(valid=False, error=f"Validation failed: {str(e)}")
    
    def parse_gitingest_output(self, raw_output: str, repo_url: str) -> StructuredRepository:
        """
        Parse gitingest raw output into structured repository representation.
        
        Args:
            raw_output: Raw text output from gitingest command
            repo_url: Original repository URL
            
        Returns:
            StructuredRepository with parsed and structured data
        """
        try:
            self.logger.info("Parsing gitingest output into structured format")
            
            # Initialize data structures
            files = {}
            file_hierarchy = {}
            language_stats = {}
            
            # Parse the gitingest output
            # Gitingest format: FILE: filename followed by content
            lines = raw_output.split('\n')
            current_file = None
            current_content = []
            in_file_section = False
            
            for line in lines:
                # Detect file headers - gitingest uses "FILE: filename" format
                if line.startswith('FILE: '):
                    # Save previous file if exists
                    if current_file and current_content:
                        self._add_file_to_structure(current_file, current_content, files, language_stats)
                    
                    # Start new file
                    current_file = line.replace('FILE: ', '').strip()
                    current_content = []
                    in_file_section = True
                    
                elif line.startswith('='):
                    # Skip separator lines
                    continue
                    
                elif line.startswith('Directory structure:'):
                    # Skip directory structure section
                    in_file_section = False
                    current_file = None
                    
                elif in_file_section and current_file:
                    # Add content line
                    current_content.append(line)
            
            # Add last file
            if current_file and current_content:
                self._add_file_to_structure(current_file, current_content, files, language_stats)
            
            # Build file hierarchy from the raw output directory structure
            file_hierarchy = self._parse_directory_structure(raw_output)
            
            # Create metadata
            metadata = GitingestMetadata(
                processing_time=0.0,  # Will be set by caller
                total_files=len(files),
                total_size=sum(block.size_bytes for block in files.values()),
                gitingest_version="unknown",  # Could be detected from gitingest --version
                processed_at=datetime.now().isoformat()
            )
            
            return StructuredRepository(
                repo_url=repo_url,
                files=files,
                file_hierarchy=file_hierarchy,
                language_stats=language_stats,
                gitingest_metadata=metadata,
                raw_output=raw_output
            )
            
        except Exception as e:
            self.logger.error(f"Error parsing gitingest output: {str(e)}")
            raise
    
    def cleanup_temporary_files(self, process_id: str) -> None:
        """
        Clean up temporary files and directories created during processing.
        
        Args:
            process_id: Unique identifier for the processing session
        """
        try:
            if self.temp_dir and os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                self.logger.info(f"Cleaned up temporary directory for process {process_id}")
        except Exception as e:
            self.logger.error(f"Error cleaning up temporary files for process {process_id}: {str(e)}")
    
    def _create_temp_directory(self) -> str:
        """Create temporary directory for processing and return process ID"""
        self.temp_dir = tempfile.mkdtemp(prefix="gitingest_")
        process_id = os.path.basename(self.temp_dir)
        self.logger.debug(f"Created temporary directory: {self.temp_dir}")
        return process_id
    
    async def _execute_gitingest(self, repo_url: str, auth_config: AuthConfig, process_id: str) -> str:
        """
        Execute gitingest command with proper authentication and configuration.
        
        Args:
            repo_url: Repository URL to process
            auth_config: Authentication configuration
            process_id: Process identifier for cleanup
            
        Returns:
            Raw output from gitingest command
        """
        output_file = None
        try:
            # Create temporary output file (Windows encoding workaround)
            import tempfile
            output_fd, output_file = tempfile.mkstemp(suffix='.txt', dir=self.temp_dir, text=True)
            os.close(output_fd)  # Close the file descriptor, we'll use the path
            
            # Build gitingest command with correct syntax
            cmd = ['gitingest', repo_url]
            
            # Add configuration options using correct flags
            if self.config.max_file_size:
                cmd.extend(['--max-size', str(self.config.max_file_size)])
            
            # Add include patterns
            for pattern in self.config.include_patterns:
                cmd.extend(['--include-pattern', pattern])
            
            # Add exclude patterns
            for pattern in self.config.exclude_patterns:
                cmd.extend(['--exclude-pattern', pattern])
            
            # Include gitignored files if configured
            if not self.config.respect_gitignore:
                cmd.append('--include-gitignored')
            
            # Add token if provided
            if auth_config.token:
                cmd.extend(['--token', auth_config.token])
            
            # Output to temporary file (Windows encoding workaround)
            cmd.extend(['--output', output_file])
            
            # Set up environment
            env = os.environ.copy()
            if auth_config.token:
                env['GITHUB_TOKEN'] = auth_config.token
            
            # Execute gitingest
            self.logger.debug(f"Executing gitingest command: {' '.join(cmd[:-2])} [URL] --output [temp_file]")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=self.config.timeout,
                env=env,
                cwd=self.temp_dir,
                encoding='utf-8',
                errors='replace'  # Handle encoding errors gracefully
            )
            
            if result.returncode != 0:
                error_msg = result.stderr.strip() if result.stderr else "Unknown gitingest error"
                raise RuntimeError(f"Gitingest execution failed: {error_msg}")
            
            # Read the output file
            with open(output_file, 'r', encoding='utf-8', errors='replace') as f:
                output_content = f.read()
            
            return output_content
            
        except subprocess.TimeoutExpired:
            raise RuntimeError(f"Gitingest execution timed out after {self.config.timeout} seconds")
        except FileNotFoundError:
            raise RuntimeError("Gitingest is not installed or not in PATH")
        except Exception as e:
            raise RuntimeError(f"Gitingest execution failed: {str(e)}")
        finally:
            # Clean up temporary output file
            if output_file and os.path.exists(output_file):
                try:
                    os.remove(output_file)
                except Exception as e:
                    self.logger.warning(f"Failed to clean up temporary output file {output_file}: {e}")
    
    def _add_file_to_structure(self, file_path: str, content_lines: List[str], 
                              files: Dict[str, ContentBlock], language_stats: Dict[str, int]) -> None:
        """Add a file to the structured repository data"""
        # Clean up content - remove empty lines at the end
        while content_lines and not content_lines[-1].strip():
            content_lines.pop()
        
        content = '\n'.join(content_lines)
        language = self._detect_language(file_path)
        
        # Update language statistics
        if language:
            language_stats[language] = language_stats.get(language, 0) + 1
        
        # Create content block
        content_block = ContentBlock(
            file_path=file_path,
            content=content,
            language=language or 'unknown',
            line_count=len(content_lines),
            size_bytes=len(content.encode('utf-8')),
            file_type=self._get_file_type(file_path)
        )
        
        files[file_path] = content_block
    
    def _parse_directory_structure(self, raw_output: str) -> Dict[str, Any]:
        """Parse directory structure from gitingest output"""
        hierarchy = {}
        
        lines = raw_output.split('\n')
        in_directory_section = False
        
        for line in lines:
            if line.startswith('Directory structure:'):
                in_directory_section = True
                continue
            elif line.startswith('=') and in_directory_section:
                # End of directory section
                break
            elif in_directory_section and line.strip():
                # Parse directory tree lines
                # Example: "    â””â”€â”€ README" or "â””â”€â”€ octocat-hello-world/"
                if 'â””â”€â”€' in line or 'â”œâ”€â”€' in line:
                    # Extract file/folder name
                    parts = line.split('â”€â”€')
                    if len(parts) > 1:
                        name = parts[-1].strip()
                        if name.endswith('/'):
                            # Directory
                            hierarchy[name[:-1]] = {}
                        else:
                            # File
                            hierarchy[name] = name
        
        return hierarchy
    
    def _build_file_hierarchy(self, file_paths: List[str]) -> Dict[str, Any]:
        """Build hierarchical structure from file paths"""
        hierarchy = {}
        
        for file_path in file_paths:
            parts = file_path.split('/')
            current = hierarchy
            
            for part in parts[:-1]:  # Directories
                if part not in current:
                    current[part] = {}
                current = current[part]
            
            # File
            if parts:
                current[parts[-1]] = file_path
        
        return hierarchy
    
    def _detect_language(self, file_path: str) -> Optional[str]:
        """Detect programming language from file extension"""
        ext = Path(file_path).suffix.lower()
        
        language_map = {
            '.py': 'Python',
            '.js': 'JavaScript',
            '.ts': 'TypeScript',
            '.jsx': 'JavaScript',
            '.tsx': 'TypeScript',
            '.java': 'Java',
            '.cpp': 'C++',
            '.c': 'C',
            '.cs': 'C#',
            '.go': 'Go',
            '.rs': 'Rust',
            '.php': 'PHP',
            '.rb': 'Ruby',
            '.swift': 'Swift',
            '.kt': 'Kotlin',
            '.scala': 'Scala',
            '.html': 'HTML',
            '.css': 'CSS',
            '.scss': 'SCSS',
            '.md': 'Markdown',
            '.json': 'JSON',
            '.yaml': 'YAML',
            '.yml': 'YAML',
            '.xml': 'XML',
            '.sql': 'SQL',
            '.sh': 'Shell',
            '.bash': 'Shell',
            '.ps1': 'PowerShell'
        }
        
        return language_map.get(ext)
    
    def _get_file_type(self, file_path: str) -> str:
        """Determine file type category"""
        ext = Path(file_path).suffix.lower()
        
        if ext in ['.py', '.js', '.ts', '.jsx', '.tsx', '.java', '.cpp', '.c', '.cs', '.go', '.rs', '.php', '.rb', '.swift', '.kt', '.scala']:
            return 'source'
        elif ext in ['.md', '.txt', '.rst', '.doc', '.docx']:
            return 'documentation'
        elif ext in ['.json', '.yaml', '.yml', '.xml', '.toml', '.ini', '.cfg']:
            return 'configuration'
        elif ext in ['.html', '.css', '.scss', '.less']:
            return 'web'
        elif ext in ['.sql']:
            return 'database'
        elif ext in ['.sh', '.bash', '.ps1', '.bat']:
            return 'script'
        else:
            return 'other'


================================================
FILE: services/rag_service.py
================================================
[Empty file]


================================================
FILE: services/rag_system.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x8d in position 36680: character maps to <undefined>


================================================
FILE: static/index.css
================================================
/* Reset + Base */
body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: "Inter", sans-serif;
    display: flex;
    flex-direction: column;
    background: radial-gradient(circle at bottom center, #ff6a3d, #2b2d77 70%);
    color: white;
  }
  
  /* Header */
  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 40px;
  }
  
  header .logo {
    font-family: "Instrument Serif", serif;
    font-weight: 100;
    font-size: 20px;
  }
  
  header nav a {
    margin-left: 20px;
    text-decoration: none;
    color: white;
    font-size: 14px;
    opacity: 0.9;
  }
  
  /* Main hero */
  .main {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
  .main h1 {
    font-size: 78px;
    margin-bottom: 0px;
    font-weight: 100;
    font-family: "Instrument Serif", sans-serif;
  }
  
  .main p {
    font-size: 18px;
    opacity: 0.85;
    margin-bottom: 40px;
    
  }
  
  /* Input box */
  .input-box {
    background: #111;
    padding: 20px;
    border-radius: 12px;
    width: 600px;
    max-width: 90%;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .input-box input[type="text"] {
    padding: 15px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    outline: none;
    width: 100%;
  }
  
  .input-box button {
    padding: 12px;
    border: none;
    border-radius: 8px;
    background: #007bff;
    color: white;
    font-size: 16px;
    cursor: pointer;
  }
  
  .input-box button:hover {
    background: #0056b3;
  }
  
  /* Repo list */
  .repo-list {
    margin-top: 40px;
    text-align: left;
    width: 600px;
    max-width: 90%;
  }
  
  .repo-list h2 {
    margin-bottom: 15px;
    font-size: 20px;
  }
  
  .repo-list ul {
    display: flex;          /* activate flexbox */
    flex-wrap: wrap;        /* wrap the items */
    gap: 20px;              /* space between items (will be overridden below) */
    justify-content: space-between; /* keep items spread out */
    padding: 0;
    margin: 0;
  }
  
  .repo-list li {
    flex: 0 0 calc((100% - 2 * 20px) / 3);  /* 20px is the gap, adjust if you change it */   
    min-width: 180px;                        /* so the card never gets too small */
    max-width: 100%;                         /* for very small screens */
    background: rgba(255,255,255,0.1);
    padding: 12px;
    border-radius: 8px;
    margin: 0;           /* we use gap in the UL, not margin */
  }
  
  .repo-list li a {
    color: white;
    text-decoration: none;
  }


  .repo-input-container {
    background: #1c1c1c; /* dark background like Lovable */
    border-radius: 12px;
    padding: 12px 16px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 50%;
    max-width: 100%;
    margin: 0 auto;
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  }
  
  .repo-input-container form {
    display: flex;
    flex: 1;
    align-items: center;
    gap: 10px;
  }
  
  .repo-input-container input {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: white;
    font-size: 15px;
    padding: 10px;
  }
  
  .repo-input-container input::placeholder {
    color: #888;
  }
  
  .repo-input-container button {
    background: #484848; /* blue button */
    color: white;
    border: none;
    padding: 10px 18px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: background 0.2s ease;
  }
  
  .repo-input-container button:hover {
    background: #0056b3;
  }

  .repos-section {
    margin-top: 40px;
    text-align: center;
    max-width: 100%;
  }
  
  .repos-section h2 {
    font-family: "Lora", serif;
    font-size: 28px;
    margin-bottom: 20px;
    color: white;
  }
  
  .repos-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 50px;
    justify-items: center;
    padding: 0 20px;
  }
  
  .repo-card {
    /* ---- Layout & sizing ------------------------------------------------ */
    display: flex;                /* keep the flexâ€‘row from the original     */
    flex-direction: column;       /* vertical stacking of card content       */
    width: 100%;                  /* full width inside the grid column       */
    max-width: 260px;             /* caps the card width                     */
    height: 50%;                 /* takes the full height of the grid cell  */
    margin-top: -10px;
  
    /* ---- Cosmetics ----------------------------------------------------- */
    background: #ffffff20;          /* solid dark background â€“ same as input   */
    color: white;                 /* bright text on dark bg                  */
    border-radius: 12px;          /* same rounded corners as the input box   */
    box-shadow: 0 2px 6px rgba(0,0,0,.3);  /* subtle lift effect                    */
    padding: 16px;                /* generous internal spacing                */
    overflow: hidden;             /* clip any overflowing content           */
    text-align: center;
    flex-direction: column;
    text-decoration: none;      /* Just in case */
    align-items: center;
    justify-content: center;
    /* ---- Transition / hover tweak ------------------------------------- */
    transition: transform .15s ease, box-shadow .15s ease;
  }

/* Link inside the card */
.repo-card a {
    display: flex;           /* Makes the link a flex item */
    align-items: center;     /* Centers its own text vertically */
    text-decoration: none;   /* No underline */
    color: inherit;          /* Keeps the cardâ€™s color (white) */
    width: 100%;             /* Optional: fill the card if you only have one link */
  }

  

.repo-card:hover {
transform: translateY(-3px);  /* a tiny lift on hover */
box-shadow: 0 4px 12px rgba(0,0,0,.35);
}



================================================
FILE: static/loading-dark.css
================================================
body {
  min-height: 100vh;
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  /* Gradient background similar to index.html */
  background: radial-gradient(circle at bottom center, #ff6a3d, #2b2d77 70%);
  color: #f3f3f3;
  font-family: 'Instrument Serif', serif;
}
h1 {

  margin-top: 40px;
  font-weight: 100;
  letter-spacing: 1px;
  font-size: 40px;
}
p {
  color: #b0b0b0;
  margin-bottom: 40px;
  font-size: 1.1em;
}
.analyzing-text {
  color: #b0b0b0;
  margin: 32px 0 0 0;
  font-size: 1.1em;
  width: 400px;
  text-align: center;
  display: block;
}
#lottie-loader {
  display: flex;
  align-items: center;
  justify-content: center;
}


================================================
FILE: static/Looping Flower (1).json
================================================
{"nm":"Main Scene","ddd":0,"h":1080,"w":1080,"meta":{"g":"@lottiefiles/creator 1.50.3"},"layers":[{"ty":4,"nm":"Shape Layer 1","sr":1,"st":-1,"op":136,"ip":0,"hd":false,"ddd":0,"bm":0,"hasMask":false,"ao":0,"ks":{"a":{"a":1,"k":[{"o":{"x":1,"y":0},"i":{"x":0.99,"y":1},"s":[0,0,0],"t":111},{"s":[-720,0,0],"t":136}],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6},"sk":{"a":0,"k":0},"p":{"a":1,"k":[{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,-7.749,0],"t":0},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,540,0],"t":7},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,502.42,0],"t":8},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,468.173,0],"t":9},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,437.259,0],"t":10},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,409.679,0],"t":11},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,385.431,0],"t":12},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,364.518,0],"t":13},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,346.937,0],"t":14},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,332.69,0],"t":15},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,321.777,0],"t":16},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,314.196,0],"t":17},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,309.949,0],"t":18},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,309.036,0],"t":19},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,311.455,0],"t":20},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,317.208,0],"t":21},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,326.294,0],"t":22},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,338.714,0],"t":23},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,354.467,0],"t":24},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,373.553,0],"t":25},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,395.973,0],"t":26},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,421.726,0],"t":27},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,450.812,0],"t":28},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,483.232,0],"t":29},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,518.985,0],"t":30},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,531.475,0],"t":31},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,515.024,0],"t":32},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,501.906,0],"t":33},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,492.122,0],"t":34},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,485.671,0],"t":35},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,482.553,0],"t":36},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,482.769,0],"t":37},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,486.318,0],"t":38},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,493.201,0],"t":39},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,503.416,0],"t":40},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,516.965,0],"t":41},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,533.848,0],"t":42},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,534.116,0],"t":43},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,528.23,0],"t":44},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,525.677,0],"t":45},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,526.458,0],"t":46},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,530.571,0],"t":47},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,538.019,0],"t":48},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,537.163,0],"t":49},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,536.559,0],"t":50},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[540,539.289,0],"t":51},{"s":[540,540,0],"t":52}]},"r":{"a":1,"k":[{"o":{"x":0.95,"y":0},"i":{"x":0.92,"y":1},"s":[0],"t":69},{"s":[90],"t":119}],"ix":10},"sa":{"a":0,"k":0},"o":{"a":0,"k":100,"ix":11}},"ef":[{"ty":5,"mn":"ADBE Slider Control","nm":"Position - Stretch","ix":1,"en":1,"ef":[{"ty":0,"mn":"ADBE Slider Control-0001","nm":"Slider","ix":1,"v":{"a":0,"k":50,"ix":1}}]},{"ty":5,"mn":"ADBE Slider Control","nm":"Position - Gravity","ix":2,"en":1,"ef":[{"ty":0,"mn":"ADBE Slider Control-0001","nm":"Slider","ix":1,"v":{"a":1,"k":[{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[30],"t":0},{"s":[30],"t":135}]}}]},{"ty":5,"mn":"ADBE Slider Control","nm":"Position - Max Jumps","ix":3,"en":1,"ef":[{"ty":0,"mn":"ADBE Slider Control-0001","nm":"Slider","ix":1,"v":{"a":1,"k":[{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[4],"t":0},{"s":[4],"t":135}]}}]},{"ty":5,"mn":"ADBE Checkbox Control","nm":"Position - Jump In/Out","ix":4,"en":1,"ef":[{"ty":7,"mn":"ADBE Checkbox Control-0001","nm":"Checkbox","ix":1,"v":{"a":0,"k":0,"ix":1}}]}],"shapes":[{"ty":"gr","bm":0,"hd":false,"mn":"ADBE Vector Group","nm":"Ellipse 1","ix":1,"cix":2,"np":1,"it":[{"ty":"el","bm":0,"hd":false,"mn":"ADBE Vector Shape - Ellipse","nm":"Ellipse Path 1","d":1,"p":{"a":1,"k":[{"o":{"x":0.26,"y":0},"i":{"x":0.02,"y":1},"s":[0,0],"t":29},{"o":{"x":0.167,"y":0.167},"i":{"x":0.833,"y":0.833},"s":[0,150],"t":69},{"o":{"x":0.84,"y":0},"i":{"x":0.16,"y":1},"s":[0,150],"t":89},{"s":[0,0],"t":119}],"ix":3},"s":{"a":1,"k":[{"o":{"x":0.26,"y":0},"i":{"x":0.02,"y":1},"s":[150,150],"t":29},{"o":{"x":0.26,"y":0},"i":{"x":0.16,"y":1},"s":[150,300],"t":69},{"o":{"x":0.84,"y":0},"i":{"x":0.16,"y":1},"s":[150,300],"t":89},{"s":[150,150],"t":119}],"ix":2}},{"ty":"tr","a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"sk":{"a":0,"k":0,"ix":4},"p":{"a":0,"k":[0,0],"ix":2},"r":{"a":1,"k":[{"o":{"x":0.26,"y":0},"i":{"x":0.02,"y":1},"s":[-180],"t":29},{"s":[0],"t":119}],"ix":6},"sa":{"a":0,"k":0,"ix":5},"o":{"a":0,"k":100,"ix":7}}]},{"ty":"gf","bm":0,"hd":false,"mn":"ADBE Vector Graphic - G-Fill","nm":"Gradient Fill 1","e":{"a":0,"k":[141,-9],"ix":6},"g":{"p":3,"k":{"a":0,"k":[0.213,1,0.3843137254901961,0.49019607843137253,0.494,1,0.6274509803921569,0.3843137254901961,0.775,1,0.8745098039215686,0.2823529411764706],"ix":9}},"t":1,"a":{"a":0,"k":0},"h":{"a":0,"k":0},"s":{"a":0,"k":[-74,3],"ix":5},"r":1,"o":{"a":0,"k":100,"ix":10}},{"ty":"rp","bm":0,"hd":false,"mn":"ADBE Vector Filter - Repeater","nm":"Repeater 1","ix":3,"m":1,"c":{"a":0,"k":6,"ix":1},"o":{"a":0,"k":0,"ix":2},"tr":{"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"sk":{"a":0,"k":0},"p":{"a":0,"k":[0,0],"ix":2},"r":{"a":1,"k":[{"o":{"x":0.26,"y":0},"i":{"x":0.02,"y":1},"s":[0],"t":29},{"o":{"x":0.167,"y":0},"i":{"x":0.16,"y":1},"s":[60],"t":69},{"o":{"x":0.84,"y":0},"i":{"x":0.16,"y":1},"s":[60],"t":89},{"s":[90],"t":119}],"ix":4},"sa":{"a":0,"k":0},"so":{"a":0,"k":100,"ix":5},"eo":{"a":0,"k":100,"ix":6}}}],"ind":1}],"v":"5.7.0","fr":30,"op":114,"ip":31,"assets":[],"markers":[{"cm":"Segment 1","tm":30,"dr":83}]}


================================================
FILE: static/workspace-dark.css
================================================
body, html {
  margin: 0 !important;
  padding: 0 !important;
  height: 100%;
  font-family: 'Segoe UI', 'Fira Mono', 'Consolas', 'monospace', 'Instrument Serif', serif;
  background: #1e1e1e;
  color: #d4d4d4;
  overflow: hidden;
}
.container {
  display: flex;
  height: calc(100vh - 32px);
  margin: 0 !important;
  padding: 0 !important;
}
.sidebar {
  width: 260px; min-width: 180px; max-width: 320px;
  overflow-y: auto;
  background: #23272e;
  color: #d4d4d4;
  border-right: 1px solid #181a20;
  display: flex;
  flex-direction: column;
  transition: width 0.2s, min-width 0.2s, max-width 0.2s, padding 0.2s;
  min-height: 0;
  height: 100%;
}
.main {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #1e1e1e;
  margin: 0 !important;
  padding: 0 !important;
}
.code-viewer {
  flex: 2;
  display: flex;
  flex-direction: column;
  background: #1e1e1e;
  border-bottom: 1px solid #23272e;
  min-height: 0;
}
.chat {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #1e1e1e;
  margin: 0 !important;
  padding: 0 !important;
}
.chat-history {
  flex: 1;
  overflow-y: auto;
  padding: 10px 16px;
  background: #23272e;
  color: #d4d4d4;
  font-family: 'Fira Mono', 'Consolas', 'monospace';
  font-size: 1em;
  display: flex;
  flex-direction: column;
  margin: 0 !important;
  padding: 0 !important;
}
.chat-input {
  display: flex;
  flex-direction: column;
  border-top: #0002 solid 1px;
  align-items: stretch;
  background: none;
  border-top: none;
  padding: 0 0 0 0 !important;
  border-radius: 0;
  gap: 0;
  box-shadow: none;
}
.chat-input textarea {
  width: 97%;
  min-width: 0;
  max-width: 100%;
  box-sizing: border-box;
  border-radius: 10px;
  margin: 0 auto 0 auto;
  display: block;
  min-height: 44px;
  max-height: 120px;
  resize: none;
  padding: 12px 16px;
  border: none;
  background: #494949 !important;
  color: #ffffff;
  font-family: 'Fira Mono', 'Consolas', 'monospace';
  font-size: 1.08em;
  outline: none;
  box-shadow: none;
  transition: background 0.2s;
  align-self: center;
}
.chat-input textarea:focus, .chat-input textarea:active {
  background: #232946 !important;
  color: #e0e0e0;
}
.chat-input-row {
  display: flex;
  align-self: center;
  flex-direction: row;
  gap: 8px;
  margin-top: 8px;
  margin-bottom: 8px;
  justify-content: center;
  max-width: 97%;
  align-items: center;
  justify-content: center;
}
.chat-input button {
  min-width: 0;
  max-width: none;
  flex: 1 1 0;
  height: 32px;
  border: none;
  border-radius: 6px;
  background: #1b2e8e !important;
  color: #fff;
  font-size: 1em;
  font-weight: 600;
  cursor: pointer;
  box-shadow: 0 2px 8px 0 #23294622;
  transition: background 0.18s, box-shadow 0.18s, opacity 0.18s;
  outline: none;
  padding: 0 16px;
  opacity: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0;
}
.chat-input button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: #23272e !important;
  color: #bdbdbd;
  box-shadow: none;
}
.chat-input button:focus, .chat-input button:active, .chat-input button:hover:not(:disabled) {
  background: #007acc !important;
  color: #fff;
  box-shadow: 0 4px 16px 0 #007acc44;
}
#context-btn {
  background: #ee7f1e !important;
  color: #e0e0e0;
  font-weight: 500;
}
#context-btn:focus, #context-btn:active, #context-btn:hover:not(:disabled) {
  background: #ff7700 !important;
  color: #fff;
}
#context-btn::before {
  content: '\1F4CE'; /* paperclip emoji */
  font-size: 1.1em;
  margin-right: 7px;
  vertical-align: middle;
}
#send-btn::before {
  content: '\1F4E7'; /* envelope emoji as a stand-in for paper plane */
  font-size: 1.1em;
  margin-right: 7px;
  vertical-align: middle;
}
@media (max-width: 600px) {
  .chat-input button {
    width: 100%;
    min-width: 0;
    align-self: stretch;
  }
}

/* Remove textarea resize handle for a clean look */
.chat-input textarea::-webkit-resizer {
  display: none;
}
ul { list-style: none; padding-left: 20px; margin: 0; }
li { cursor: pointer; }
li.folder > span { font-weight: bold; }
h3 { margin: 0; padding: 10px; border-bottom: 1px solid #232946; background: #232946; color: #f3f3f3; }
.CodeMirror {
  height: 100% !important;
  font-size: 15px;
  background: #1e1e1e;
  color: #d4d4d4;
}
#code-editor {
  height: 100%;
}
.file { padding-left: 10px; }
.folder > span::before {

  display: inline-block;
  margin-right: 5px;
  transition: transform 0.2s;
}
.folder.open > span::before {

  transform: rotate(90deg);
}
.folder ul {
  display: none;
}
.folder.open ul {
  display: block;
}
.sidebar-toggle {
  background: none;
  color: #d4d4d4;
  border: none;
  font-size: 1.5em;
  cursor: pointer;
  margin: 8px 0 8px 8px;
  align-self: flex-start;
  transition: background 0.2s;
  border-radius: 4px;
  padding: 2px 8px;
}
.sidebar-toggle:hover {
  background: #2c2c32;
}
.container.collapsed .sidebar {
  width: 0;
  min-width: 0;
  padding: 0;
  overflow: hidden;
  border: none;
}
.container.collapsed .main {
  margin-left: 0;
}
.sidebar ul ul {
  display: none;
}
.sidebar li.open > ul {
  display: block;
}
.vscode-titlebar {
  background: #23272e;
  height: 32px;
  display: flex;
  align-items: center;
  padding: 0 12px;
  border-bottom: 1px solid #181a20;
  position: relative;
}
.vscode-dot {
  width: 10px; height: 10px; border-radius: 50%; display: inline-block; margin-right: 6px;
}
.vscode-dot.red { background: #ff5f56; }
.vscode-dot.yellow { background: #ffbd2e; }
.vscode-dot.green { background: #27c93f; }
.vscode-title {
  font-weight: bold;
  font-size: 1.1em;
  margin-left: 12px;
  color: #d4d4d4;
}
.sidebar.collapsed, .container.collapsed .sidebar {
  width: 0 !important;
  min-width: 0 !important;
  max-width: 0 !important;
  padding: 0 !important;
  overflow: hidden !important;
  border: none;
}
.sidebar-title {
  font-size: 0.95em;
  font-weight: bold;
  letter-spacing: 1px;
  color: #858585;
  margin: 16px 0 8px 16px;
}
.file-tree {
  list-style: none;
  padding-left: 0;
  margin: 0;
}
.file, .folder > span {
  padding: 2px 0 2px 18px;
  cursor: pointer;
  user-select: none;
  font-size: 1em;
  color: #d4d4d4;
  display: flex;
  align-items: center;
}
.file:hover, .folder > span:hover {
  background: #2c2c32;
}
.folder > span {
  font-weight: 500;
}
.folder > span .arrow {
  display: inline-block;
  width: 10px;
  margin-right: 4px;
  transition: transform 0.2s;
  content: '';
}
.folder.open > span .arrow {
  transform: rotate(90deg);
}
.folder .arrow::before {
  content: "â–¶";
  font-size: 0.9em;
  color: #858585;
}
.folder.open > span .arrow::before {
  color: #d4d4d4;
}
.folder ul {
  display: none;
  padding-left: 14px;
}
.folder.open > ul {
  display: block;
}
.folder-icon, .file-icon {
  margin-right: 6px;
}
.current-file {
  padding: 8px 16px;
  background: #23272e;
  color: #d4d4d4;
  font-size: 1em;
  border-bottom: 1px solid #181a20;
  font-family: 'Segoe UI', 'Fira Mono', 'Consolas', 'monospace';
}
.vscode-main {
  display: flex;
  height: calc(100vh - 32px);
  width: 100%;
  transition: all 0.2s;
  overflow: hidden;
  flex-wrap: nowrap;
  margin: 0 !important;
  padding: 0 !important;
}
.vscode-main.collapsed .sidebar {
  width: 0 !important;
  min-width: 0 !important;
  max-width: 0 !important;
  padding: 0 !important;
  overflow: hidden !important;
  border: none;
}
.activitybar {
  width: 48px;
  background: #20232a;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding-top: 8px;
  border-right: 1px solid #181a20;
}
.activity-icon {
  width: 32px; height: 32px;
  margin: 8px 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.3em;
  color: #858585;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.2s, color 0.2s;
}
.activity-icon.active, .activity-icon:hover {
  background: #23272e;
  color: #d4d4d4;
}
.code-panel {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: #1e1e1e;
  border-right: 1px solid #23272e;
  min-width: 0;
  min-height: 0;
  overflow: hidden;
}
.chat-panel {
  width: 260px;
  min-width: 180px;
  max-width: 1800px;
  display: flex;
  flex-direction: column;
  background: #23272e;
  min-height: 0;
  height: 100%;
  overflow-y: auto;
  border: none;
  box-shadow: none;
  flex-shrink: 0;
  flex-grow: 0;
  overflow: hidden;
  justify-content: flex-end;
  margin: 0;
  padding: 0;
}
@media (max-width: 1100px) {
  .chat-panel { display: none; }
}
@media (max-width: 800px) {
  .sidebar {
    position: absolute;
    z-index: 10;
    height: 100%;
    left: 0;
    top: 32px;
  }
  .container.collapsed .sidebar {
    left: -270px;
  }
}
.vscode-main.collapsed .code-panel {
  border-left: none;
}

/* Dark, minimal scrollbars for all elements */
body, .sidebar, .file-tree, .chat-history, .code-panel, .vscode-main {
  scrollbar-width: thin;
  scrollbar-color: #23272e #181a20;
}

/* Chrome, Edge, Safari */
body::-webkit-scrollbar,
.sidebar::-webkit-scrollbar,
.file-tree::-webkit-scrollbar,
.chat-history::-webkit-scrollbar,
.code-panel::-webkit-scrollbar,
.vscode-main::-webkit-scrollbar {
  width: 8px;
  background: transparent;
}
body::-webkit-scrollbar-thumb,
.sidebar::-webkit-scrollbar-thumb,
.file-tree::-webkit-scrollbar-thumb,
.chat-history::-webkit-scrollbar-thumb,
.code-panel::-webkit-scrollbar-thumb,
.vscode-main::-webkit-scrollbar-thumb {
  background: #23272e;
  border-radius: 8px;
}
body::-webkit-scrollbar-track,
.sidebar::-webkit-scrollbar-track,
.file-tree::-webkit-scrollbar-track,
.chat-history::-webkit-scrollbar-track,
.code-panel::-webkit-scrollbar-track,
.vscode-main::-webkit-scrollbar-track {
  background: transparent;
}

.resizer {
  width: 5px;
  cursor: ew-resize;
  background: #23272e;
  transition: background 0.2s;
  z-index: 10;
}
.resizer:hover {
  background: #007acc;
}

/* Use Instrument Serif for Markdown headings in chat replies */
.chat-history h1,
.chat-history h2,
.chat-history h3,
.chat-history h4,
.chat-history h5,
.chat-history h6 {
  font-family: 'Instrument Serif', serif;
  font-weight: 500;
}

/* Chat bubble containers for chat history */
.chat-history .chat-bubble {
  margin: 12px 0;
  padding: 12px 18px;
  border-radius: 12px;
  max-width: 80%;
  word-break: break-word;
  box-shadow: 0 2px 8px 0 #0002;
  font-size: 1em;
}
.chat-history .chat-bubble.user {
  background: #23272e !important;
  color: #e0e0e0;
  align-self: flex-end;
  margin-left: auto;
}
.chat-history .chat-bubble.assistant {
  background: #181a20;
  color: #f3f3f3;
  align-self: flex-start;
  margin-right: auto;
}
.chat-history .chat-bubble.system {
  background: #2c2c32;
  color: #bdbdbd;
  text-align: center;
  font-style: italic;
}

/* Markdown code blocks in chat replies */
.code-block {
  background: #393939 !important;
  color: #e0e0e0 !important;
  border-radius: 8px;
  padding: 12px 16px;
  margin: 12px 0;
  font-family: 'Fira Mono', 'Consolas', 'monospace';
  font-size: 0.98em;
  overflow-x: auto;
  box-shadow: 0 1px 6px 0 #0003;
}

/* Remove default code block background from marked.js */
.chat-history pre code {
  background: none !important;
  color: inherit !portant;
  padding: 0;
}


================================================
FILE: static/workspace.css
================================================
[Empty file]


================================================
FILE: templates/index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>NaviGit</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='index.css') }}">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Instrument+Serif:ital@0;1&display=swap" rel="stylesheet">

</head>
<body>
  <!-- Header -->
  <header>
    <div class="logo">NaviGit</div>

  </header>

  <!-- Main -->
  <div class="main">
    <h1>Get the gist before the first sip</h1>
    <p>Ingest repos and chat with your code</p>

    <!-- Repo input -->
    <div class="repo-input-container">
      <form id="ingest-form">
        <input type="text" id="repo-link" name="repo-link" placeholder="Enter GitHub repo URL" required>
        <button type="submit" id="ingest-btn">Ingest</button>
      </form>
      <div id="loading" style="display:none;">
        <div class="spinner"></div>
      </div>
      <div id="result"></div>
    </div>

    <div class="repos-section">

      <div class="repos-grid">
        {% for repo_key in repos %}
          <a href="{{ url_for('loading', owner=repo_key.split('/')[0], repo=repo_key.split('/')[1]) }}" class="repo-card">
            <div class="repo-title">{{ repo_key }}</div>
          </a>
        {% endfor %}
      </div>
    </div>
  </div>
  <style>
  .spinner {
    border: 6px solid #333333;
    border-top: 6px solid #ff0073;
    border-radius: 50%;
    width: 15px;
    height: 15px;
    animation: spin 1s linear infinite;

  }
  @keyframes spin {
    0% { transform: rotate(0deg);}
    100% { transform: rotate(360deg);}
  }
  </style>
  <script>
  document.getElementById('ingest-form').onsubmit = async function(e) {
    e.preventDefault();
    document.getElementById('loading').style.display = 'block';
    document.getElementById('ingest-btn').style.display = 'none';
    document.getElementById('result').innerText = '';
    const repo = document.getElementById('repo-link').value;
    try {
      const res = await fetch('/ingest', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({repo_link: repo})
      });
      const data = await res.json();
      // Hide spinner and reload page after ingestion
      document.getElementById('loading').style.display = 'none';
      if (data.success) {
        location.reload();
      } else {
        document.getElementById('result').innerText = 'Error: ' + data.error;
        document.getElementById('ingest-btn').style.display = '';
      }
    } catch (err) {
      document.getElementById('loading').style.display = 'none';
      document.getElementById('result').innerText = 'Request failed.';
      document.getElementById('ingest-btn').style.display = '';
    }
  };
  </script>
</body>
</html>



================================================
FILE: templates/loading.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Loading Repo</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='loading-dark.css') }}">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Instrument+Serif:ital@0;1&display=swap" rel="stylesheet">
</head>
<body>

  <div id="lottie-loader" style="width:300px;height:300px;margin:40px auto;"></div>
  <h1>Analyzing The Codebase</h1>
  <script>
    // Lottie animation
    lottie.loadAnimation({
      container: document.getElementById('lottie-loader'),
      renderer: 'svg',
      loop: true,
      autoplay: true,
      path: "{{ url_for('static', filename='Looping Flower (1).json') }}"
    });

    const owner = "{{ owner }}";
    const repo = "{{ repo }}";
    async function pollStatus() {
      const res = await fetch(`/api/index_status/${owner}/${repo}`);
      const data = await res.json();
      if (data.ready) {
        window.location.href = `/workspace/${owner}/${repo}`;
      } else {
        setTimeout(pollStatus, 1500);
      }
    }
    fetch(`/api/build_index/${owner}/${repo}`, {method: 'POST'});
    pollStatus();
  </script>
</body>
</html>



================================================
FILE: templates/workspace.html
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x81 in position 2717: character maps to <undefined>


================================================
FILE: test_files/quick_test.py
================================================
#!/usr/bin/env python3
import requests
import json

# Test with a well-known public repository
BASE_URL = "http://localhost:5000"

def test_with_known_repo():
    print("Testing with octocat/Hello-World (known public repo)...")
    
    url = f"{BASE_URL}/api/repositories/validate"
    data = {"url": "https://github.com/octocat/Hello-World"}
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_with_your_repo():
    print("Testing with Emon69420/HazMapApp...")
    
    url = f"{BASE_URL}/api/repositories/validate"
    data = {"url": "https://github.com/Emon69420/HazMapApp"}
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

if __name__ == "__main__":
    try:
        test_with_known_repo()
        test_with_your_repo()
    except requests.exceptions.ConnectionError:
        print("Error: Could not connect to Flask server.")
        print("Make sure the server is running with: python app.py")
    except Exception as e:
        print(f"Error: {e}")


================================================
FILE: test_files/quick_token_test.py
================================================
#!/usr/bin/env python3
"""
Quick test to verify your GitHub token works
"""

import requests

def test_github_token():
    """Test if your GitHub token works"""
    print("🔑 GitHub Token Tester")
    print("=" * 30)
    
    # Get token from user
    token = input("Paste your GitHub token here: ").strip()
    
    if not token:
        print("❌ No token provided!")
        return
    
    if not token.startswith('ghp_'):
        print("⚠️  Warning: Token should start with 'ghp_'")
    
    print("\n🔍 Testing token...")
    
    # Test the token
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    try:
        # Test 1: Get user info
        response = requests.get('https://api.github.com/user', headers=headers)
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"✅ Token valid!")
            print(f"   User: {user_data.get('login')}")
            print(f"   Name: {user_data.get('name', 'Not set')}")
            print(f"   Email: {user_data.get('email', 'Not public')}")
            
            # Test 2: Check rate limits
            rate_response = requests.get('https://api.github.com/rate_limit', headers=headers)
            if rate_response.status_code == 200:
                rate_data = rate_response.json()
                core = rate_data['resources']['core']
                print(f"\n📊 Rate Limits:")
                print(f"   Limit: {core['limit']} requests/hour")
                print(f"   Remaining: {core['remaining']}")
                print(f"   Used: {core['used']}")
            
            # Test 3: Access your repository
            print(f"\n🔍 Testing repository access...")
            repo_response = requests.get('https://api.github.com/repos/Emon69420/HazMapApp', headers=headers)
            
            if repo_response.status_code == 200:
                repo_data = repo_response.json()
                print(f"✅ Repository accessible!")
                print(f"   Name: {repo_data['full_name']}")
                print(f"   Private: {repo_data['private']}")
                print(f"   Size: {repo_data['size']} KB")
                
                print(f"\n🎉 Token is working perfectly!")
                print(f"💾 Save this token: {token}")
                
            else:
                print(f"❌ Repository access failed: {repo_response.status_code}")
                
        elif response.status_code == 401:
            print("❌ Token is invalid or expired")
        elif response.status_code == 403:
            print("❌ Token doesn't have required permissions")
        else:
            print(f"❌ Unexpected error: {response.status_code}")
            
    except Exception as e:
        print(f"❌ Error testing token: {e}")

if __name__ == "__main__":
    test_github_token()
    
    print("\n💡 Next steps:")
    print("1. If token works: Run 'python test_with_token.py'")
    print("2. If token fails: Check permissions and regenerate")
    print("3. Keep your token safe - don't share it!")


================================================
FILE: test_files/streamlit_app.py
================================================
import streamlit as st
import requests
from datetime import datetime
import os
import json

def load_custom_css():
    """Load custom CSS for dark theme styling"""
    st.markdown("""
    <style>
    .main {
        background-color: #0E1117;
    }
    
    .stApp {
        background-color: #0E1117;
    }
    
    .css-1d391kg {
        background-color: #0E1117;
    }
    
    .stSelectbox > div > div {
        background-color: #262730;
        color: #FAFAFA;
    }
    
    .stTextInput > div > div > input {
        background-color: #262730;
        color: #FAFAFA;
        border: 1px solid #4F4F4F;
    }
    
    .stButton > button {
        background-color: #FF4B4B;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.5rem 1rem;
    }
    
    .stButton > button:hover {
        background-color: #FF6B6B;
    }
    
    .success-message {
        background-color: #00CC88;
        color: white;
        padding: 0.5rem;
        border-radius: 4px;
        margin: 0.5rem 0;
    }
    
    .error-message {
        background-color: #FF6B6B;
        color: white;
        padding: 0.5rem;
        border-radius: 4px;
        margin: 0.5rem 0;
    }
    
    .info-message {
        background-color: #4A90E2;
        color: white;
        padding: 0.5rem;
        border-radius: 4px;
        margin: 0.5rem 0;
    }
    
    .repo-card {
        background-color: #262730;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
        border: 1px solid #4F4F4F;
    }
    
    .repo-card:hover {
        border-color: #FF4B4B;
        transition: border-color 0.3s ease;
    }
    </style>
    """, unsafe_allow_html=True)

def initialize_session_state():
    """Initialize session state variables"""
    if 'repositories' not in st.session_state:
        st.session_state.repositories = []
    if 'loading' not in st.session_state:
        st.session_state.loading = False
    if 'current_operation' not in st.session_state:
        st.session_state.current_operation = ""
    if 'notifications' not in st.session_state:
        st.session_state.notifications = []
    if 'github_token' not in st.session_state:
        st.session_state.github_token = ""
    if 'last_refresh' not in st.session_state:
        st.session_state.last_refresh = None

def render_header():
    """Render the application header"""
    st.title("ðŸš€ AI Project Analyzer")
    st.markdown("---")

def main():
    """Main application entry point"""
    # Configure Streamlit page
    st.set_page_config(
        page_title="AI Project Analyzer",
        page_icon="ðŸš€",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    
    # Load custom styling
    load_custom_css()
    
    # Initialize session state
    initialize_session_state()
    
    # Render header
    render_header()
    
    # Placeholder content for now
    st.info("ðŸ”§ Application structure set up successfully!")
    st.markdown("### Next Steps:")
    st.markdown("- Dark theme styling system")
    st.markdown("- API client module")
    st.markdown("- Repository list display")
    st.markdown("- Add repository form")

if __name__ == "__main__":
    main()


================================================
FILE: test_files/suppress_warnings.py
================================================
#!/usr/bin/env python3
"""
Utility to suppress ONNX Runtime warnings and other verbose output
"""

import os
import sys
import warnings
import logging

def suppress_all_warnings():
    """Suppress all the annoying warnings from ML libraries"""
    
    # 1. Suppress TensorFlow warnings
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # Only show errors
    os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # Disable oneDNN warnings
    
    # 2. Suppress ONNX Runtime warnings
    os.environ['ORT_DISABLE_ALL_LOGS'] = '1'
    
    # 3. Suppress Python warnings
    warnings.filterwarnings('ignore')
    
    # 4. Suppress specific library warnings
    logging.getLogger('tensorflow').setLevel(logging.ERROR)
    logging.getLogger('onnxruntime').setLevel(logging.ERROR)
    logging.getLogger('transformers').setLevel(logging.ERROR)
    logging.getLogger('sentence_transformers').setLevel(logging.ERROR)
    logging.getLogger('chromadb').setLevel(logging.ERROR)
    
    # 5. Redirect stderr temporarily to suppress C++ warnings
    import contextlib
    
    @contextlib.contextmanager
    def suppress_stderr():
        with open(os.devnull, "w") as devnull:
            old_stderr = sys.stderr
            sys.stderr = devnull
            try:
                yield
            finally:
                sys.stderr = old_stderr
    
    return suppress_stderr

# Call this at the start of any script
def setup_clean_environment():
    """Set up a clean environment without warnings"""
    suppress_all_warnings()
    
    # Also suppress the specific ONNX warnings by setting environment variables
    os.environ['CUDA_VISIBLE_DEVICES'] = ''  # Force CPU-only
    os.environ['OMP_NUM_THREADS'] = '1'  # Reduce threading warnings
    
    print("ðŸ”‡ Warnings suppressed - clean output enabled!")

if __name__ == "__main__":
    setup_clean_environment()
    print("âœ… Warning suppression configured!")


================================================
FILE: test_files/test_api.py
================================================
#!/usr/bin/env python3
"""
Simple test script to verify the API endpoints work correctly
"""

import requests
import json

BASE_URL = "http://localhost:5000"

def test_repository_validation():
    """Test repository validation endpoint"""
    print("Testing repository validation...")
    
    url = f"{BASE_URL}/api/repositories/validate"
    data = {"url": "https://github.com/Emon69420/HazMapApp"}
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_repository_analysis():
    """Test repository analysis endpoint"""
    print("Testing repository analysis...")
    
    url = f"{BASE_URL}/api/repositories/analyze"
    data = {"url": "https://github.com/Emon69420/HazMapApp"}
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_repository_tree():
    """Test repository tree endpoint"""
    print("Testing repository tree...")
    
    url = f"{BASE_URL}/api/repositories/Emon69420/HazMapApp/tree"
    
    response = requests.get(url)
    print(f"Status: {response.status_code}")
    result = response.json()
    if 'tree' in result:
        print(f"Files found: {result['tree']['total_files']}")
        print(f"Directories found: {result['tree']['total_directories']}")
        # Show first few files
        files = result['tree']['files'][:5]
        print("Sample files:")
        for file in files:
            print(f"  - {file['path']}")
    else:
        print(f"Response: {result}")
    print()

def test_file_content():
    """Test file content endpoint"""
    print("Testing file content...")
    
    url = f"{BASE_URL}/api/repositories/Emon69420/HazMapApp/files/README.md"
    
    response = requests.get(url)
    print(f"Status: {response.status_code}")
    result = response.json()
    if 'file' in result:
        print(f"File: {result['file']['name']}")
        print(f"Size: {result['file']['size']} bytes")
        print(f"Encoding: {result['file']['encoding']}")
    else:
        print(f"Response: {result}")
    print()

if __name__ == "__main__":
    print("Testing AI Project Analyzer API endpoints")
    print("=" * 50)
    
    try:
        test_repository_validation()
        test_repository_analysis()
        test_repository_tree()
        test_file_content()
        
        print("All tests completed!")
        
    except requests.exceptions.ConnectionError:
        print("Error: Could not connect to Flask server.")
        print("Make sure the server is running with: python app.py")
    except Exception as e:
        print(f"Error: {e}")


================================================
FILE: test_files/test_clone.py
================================================
#!/usr/bin/env python3
"""
Test script for repository cloning functionality
"""

import requests
import json
import os
from pathlib import Path

BASE_URL = "http://localhost:5000"

def test_clone_repository():
    """Test cloning a repository"""
    print("🔄 Testing repository cloning...")
    print("=" * 50)
    
    url = f"{BASE_URL}/api/repositories/clone"
    data = {
        "url": "https://github.com/Emon69420/HazMapApp",
        "target_dir": "./my_repos"
    }
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"✅ Clone successful!")
        print(f"📁 Clone path: {result['clone_path']}")
        print(f"📊 Total files: {result['stats']['total_files']}")
        print(f"📂 Total directories: {result['stats']['total_directories']}")
        print(f"💾 Size: {result['stats']['size_bytes']} bytes")
        print(f"🔤 Languages detected:")
        for lang, count in result['stats']['languages'].items():
            print(f"   - {lang}: {count} files")
        
        # Check if directory actually exists
        clone_path = Path(result['clone_path'])
        if clone_path.exists():
            print(f"✅ Directory exists: {clone_path}")
            
            # List some files
            files = list(clone_path.rglob('*'))[:10]
            print(f"📄 Sample files:")
            for file in files:
                if file.is_file():
                    print(f"   - {file.relative_to(clone_path)}")
        else:
            print(f"❌ Directory not found: {clone_path}")
            
    else:
        print(f"❌ Clone failed: {response.json()}")
    
    print()

def test_clone_and_analyze():
    """Test clone and analyze in one operation"""
    print("🔍 Testing clone and analyze...")
    print("=" * 50)
    
    url = f"{BASE_URL}/api/repositories/clone-and-analyze"
    data = {
        "url": "https://github.com/Emon69420/HazMapApp",
        "target_dir": "./my_repos",
        "max_file_size": 512 * 1024,  # 512KB limit
        "cleanup_after": False  # Keep the repository for inspection
    }
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        
        # Clone info
        clone_info = result['clone_info']
        print(f"✅ Clone successful!")
        print(f"📁 Clone path: {clone_info['clone_path']}")
        print(f"⏰ Cloned at: {clone_info['cloned_at']}")
        
        # Analysis info
        analysis = result['analysis']
        stats = analysis['processing_stats']
        
        print(f"\n📈 Analysis Results:")
        print(f"  ✅ Files processed: {stats['processed']}")
        print(f"  ⚠️  Files skipped (too large): {stats['skipped_large']}")
        print(f"  🚫 Files skipped (binary): {stats['skipped_binary']}")
        print(f"  ❌ Errors: {stats['errors']}")
        
        # Repository stats
        repo_stats = analysis['stats']
        print(f"\n📊 Repository Statistics:")
        print(f"  📄 Total files: {repo_stats['total_files']}")
        print(f"  📂 Total directories: {repo_stats['total_directories']}")
        print(f"  💾 Size: {repo_stats['size_bytes']} bytes")
        
        # Languages
        if repo_stats['languages']:
            print(f"\n🔤 Languages detected:")
            for lang, count in sorted(repo_stats['languages'].items(), key=lambda x: x[1], reverse=True):
                print(f"   - {lang}: {count} files")
        
        # Show some processed files
        files_with_content = analysis['files_with_content'][:5]
        print(f"\n📄 Sample processed files:")
        for file_info in files_with_content:
            print(f"   - {file_info['path']} ({file_info['lines']} lines, {file_info['language'] or 'Unknown'})")
        
        if len(analysis['files_with_content']) > 5:
            print(f"   ... and {len(analysis['files_with_content']) - 5} more files")
        
        # Save detailed results
        output_file = "clone_analysis_result.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print(f"\n💾 Full results saved to: {output_file}")
        
    else:
        print(f"❌ Clone and analyze failed: {response.json()}")
    
    print()

def test_performance_comparison():
    """Compare API vs Clone performance"""
    print("⚡ Performance Comparison: API vs Clone")
    print("=" * 50)
    
    import time
    
    # Test API approach
    print("Testing API approach...")
    start_time = time.time()
    
    api_url = f"{BASE_URL}/api/repositories/deep-analyze"
    api_data = {
        "url": "https://github.com/octocat/Hello-World",  # Small repo for fair comparison
        "max_file_size": 1024 * 1024
    }
    
    api_response = requests.post(api_url, json=api_data)
    api_time = time.time() - start_time
    
    print(f"API approach: {api_time:.2f} seconds")
    
    # Test Clone approach
    print("Testing Clone approach...")
    start_time = time.time()
    
    clone_url = f"{BASE_URL}/api/repositories/clone-and-analyze"
    clone_data = {
        "url": "https://github.com/octocat/Hello-World",
        "cleanup_after": True  # Clean up after test
    }
    
    clone_response = requests.post(clone_url, json=clone_data)
    clone_time = time.time() - start_time
    
    print(f"Clone approach: {clone_time:.2f} seconds")
    
    # Compare results
    if api_response.status_code == 200 and clone_response.status_code == 200:
        api_files = len(api_response.json()['deep_analysis']['structure']['files_with_content'])
        clone_files = len(clone_response.json()['analysis']['files_with_content'])
        
        print(f"\n📊 Results:")
        print(f"API files processed: {api_files}")
        print(f"Clone files processed: {clone_files}")
        print(f"Speed improvement: {api_time/clone_time:.1f}x faster" if clone_time < api_time else f"API was {clone_time/api_time:.1f}x faster")
    
    print()

if __name__ == "__main__":
    print("🚀 Testing Repository Cloning System")
    print("=" * 60)
    
    try:
        # Check if git is available
        import subprocess
        result = subprocess.run(['git', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            print("❌ Git is not installed or not in PATH")
            print("Please install Git to use cloning functionality")
            exit(1)
        else:
            print(f"✅ Git available: {result.stdout.strip()}")
            print()
        
        test_clone_repository()
        test_clone_and_analyze()
        test_performance_comparison()
        
        print("🎉 All cloning tests completed!")
        
    except requests.exceptions.ConnectionError:
        print("❌ Error: Could not connect to Flask server.")
        print("Make sure the server is running with: python app.py")
    except Exception as e:
        print(f"❌ Error: {e}")


================================================
FILE: test_files/test_consistent_indexing.py
================================================
#!/usr/bin/env python3
"""
Test to check consistency of RAG indexing across multiple runs
"""

import sys
import os
from pathlib import Path

# Add services to path
sys.path.append(str(Path(__file__).parent))

try:
    from services.rag_system import CPUOptimizedRAGSystem
except ImportError as e:
    print(f"❌ Import error: {e}")
    sys.exit(1)


def run_indexing_test(run_number):
    """Run a single indexing test and return metrics"""
    print(f"\n🔄 Run {run_number}:")
    print("-" * 30)
    
    gitingest_file = "gitingest_outputs/Samay1011_Project_ecommerce_React_20250906_104832.txt"
    
    if not os.path.exists(gitingest_file):
        print(f"❌ Gitingest file not found: {gitingest_file}")
        return None
    
    try:
        # Initialize RAG system with unique storage path
        storage_path = f"./temp_consistency_test_{run_number}"
        rag = CPUOptimizedRAGSystem(storage_path=storage_path)
        
        # Build RAG system
        metrics = rag.build_rag_from_gitingest(gitingest_file, f"consistency_test_{run_number}")
        print(f"✅ Indexed {metrics.total_chunks} chunks from {metrics.total_files} files")
        
        # Get all chunks to analyze
        all_results = rag.query("*", max_results=200, collection_name=f"consistency_test_{run_number}")
        
        # Count by file type
        file_types = {}
        chunk_types = {}
        python_files = []
        
        for chunk in all_results.chunks:
            # File extension
            ext = Path(chunk.file_path).suffix or 'no-ext'
            file_types[ext] = file_types.get(ext, 0) + 1
            
            # Chunk type
            chunk_types[chunk.chunk_type] = chunk_types.get(chunk.chunk_type, 0) + 1
            
            # Track Python files specifically
            if ext == '.py':
                python_files.append({
                    'file': chunk.file_path,
                    'type': chunk.chunk_type,
                    'content_preview': chunk.content[:100].replace('\n', ' ')
                })
        
        print("📁 File types:")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            print(f"   {ext}: {count}")
        
        print("🧩 Chunk types:")
        for chunk_type, count in sorted(chunk_types.items(), key=lambda x: x[1], reverse=True):
            print(f"   {chunk_type}: {count}")
        
        if python_files:
            print("🐍 Python files found:")
            for py_file in python_files:
                print(f"   {py_file['type']}: {py_file['file']}")
                print(f"      Preview: {py_file['content_preview']}...")
        
        return {
            'total_chunks': metrics.total_chunks,
            'total_files': metrics.total_files,
            'file_types': file_types,
            'chunk_types': chunk_types,
            'python_files': python_files
        }
        
    except Exception as e:
        print(f"❌ Run {run_number} failed: {str(e)}")
        return None
    
    finally:
        # Clean up
        try:
            if 'rag' in locals():
                rag.chroma_client = None
                rag.collection = None
            
            import shutil
            import time
            time.sleep(0.5)
            if os.path.exists(storage_path):
                shutil.rmtree(storage_path)
        except Exception as e:
            print(f"⚠️  Warning: Could not clean up run {run_number}: {e}")


def test_consistency():
    """Test consistency across multiple runs"""
    print("🔍 Testing RAG Indexing Consistency")
    print("=" * 50)
    
    results = []
    num_runs = 3
    
    for i in range(1, num_runs + 1):
        result = run_indexing_test(i)
        if result:
            results.append(result)
    
    if len(results) < 2:
        print("❌ Not enough successful runs to compare")
        return
    
    print(f"\n📊 Consistency Analysis ({len(results)} runs):")
    print("=" * 40)
    
    # Compare total counts
    chunk_counts = [r['total_chunks'] for r in results]
    file_counts = [r['total_files'] for r in results]
    
    print(f"📦 Total chunks: {chunk_counts}")
    print(f"📁 Total files: {file_counts}")
    
    if len(set(chunk_counts)) == 1:
        print("✅ Chunk counts are consistent")
    else:
        print("⚠️  Chunk counts vary between runs")
    
    if len(set(file_counts)) == 1:
        print("✅ File counts are consistent")
    else:
        print("⚠️  File counts vary between runs")
    
    # Compare file type distributions
    print(f"\n📁 File Type Consistency:")
    all_extensions = set()
    for result in results:
        all_extensions.update(result['file_types'].keys())
    
    for ext in sorted(all_extensions):
        counts = [result['file_types'].get(ext, 0) for result in results]
        if len(set(counts)) == 1:
            print(f"   {ext}: {counts[0]} ✅")
        else:
            print(f"   {ext}: {counts} ⚠️")
    
    # Compare Python file detection
    print(f"\n🐍 Python File Detection:")
    py_file_counts = [len(r['python_files']) for r in results]
    print(f"Python chunks found: {py_file_counts}")
    
    if len(set(py_file_counts)) == 1:
        print("✅ Python file detection is consistent")
    else:
        print("⚠️  Python file detection varies")
        
        # Show what Python files were found in each run
        for i, result in enumerate(results, 1):
            print(f"  Run {i} Python files:")
            for py_file in result['python_files']:
                print(f"    - {py_file['file']} ({py_file['type']})")


if __name__ == "__main__":
    test_consistency()


================================================
FILE: test_files/test_deep_analysis.py
================================================
#!/usr/bin/env python3
"""
Test script for deep repository analysis - fetches all files with their content
"""

import requests
import json
import os

BASE_URL = "http://localhost:5000"

def test_deep_analysis():
    """Test deep analysis of HazMapApp repository"""
    print("🔍 Starting deep analysis of HazMapApp repository...")
    print("=" * 60)
    
    url = f"{BASE_URL}/api/repositories/deep-analyze"
    data = {
        "url": "https://github.com/Redomic/NeuThera-Drug-Discovery-Toolkit",
        "max_file_size": 1024 * 1024  # 512KB limit for demo
    }
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        deep_analysis = result['deep_analysis']
        
        # Repository info
        repo_info = deep_analysis['repository_info']
        print(f"\n📁 Repository: {repo_info['full_name']}")
        print(f"📝 Description: {repo_info['description']}")
        print(f"🔤 Language: {repo_info['language']}")
        print(f"📊 Size: {repo_info['size']} KB")
        print(f"⭐ Stars: {repo_info['stargazers_count']}")
        
        # Structure stats
        structure = deep_analysis['structure']
        stats = structure['processing_stats']
        
        print(f"\n📈 Processing Statistics:")
        print(f"  ✅ Files processed: {stats['processed']}")
        print(f"  ⚠️  Files skipped (too large): {stats['skipped_large']}")
        print(f"  🚫 Files skipped (binary): {stats['skipped_binary']}")
        print(f"  ❌ Errors: {stats['errors']}")
        print(f"  📂 Total directories: {structure['total_directories']}")
        print(f"  📄 Total files: {structure['total_files']}")
        
        # Display timing information
        if 'processing_time' in result:
            timing = result['processing_time']
            print(f"\n⏱️  Performance Metrics:")
            print(f"  🕐 Processing time: {timing['formatted']} ({timing['seconds']}s)")
            print(f"  🚀 Files per second: {stats.get('files_per_second', 0)}")
            print(f"  📊 Average time per file: {round(timing['seconds'] / max(stats['processed'], 1), 3)}s")
        
        # Show directory structure
        print(f"\n📂 Directory Structure:")
        for directory in structure['directories'][:10]:
            print(f"  📁 {directory['path']}")
        if len(structure['directories']) > 10:
            print(f"  ... and {len(structure['directories']) - 10} more directories")
        
        # Show files with content
        print(f"\n📄 Files with Content ({len(structure['files_with_content'])}):")
        for i, file_info in enumerate(structure['files_with_content'][:5]):
            print(f"\n  {i+1}. 📄 {file_info['path']}")
            print(f"     Size: {file_info['size']} bytes")
            print(f"     Lines: {file_info['lines']}")
            print(f"     Extension: {file_info['extension']}")
            
            # Show first few lines of content
            content = file_info['content']
            if content:
                lines = content.split('\n')
                print(f"     Content preview (first 3 lines):")
                for j, line in enumerate(lines[:3]):
                    print(f"       {j+1}: {line[:80]}{'...' if len(line) > 80 else ''}")
            else:
                print(f"     Content: [Empty file]")
        
        if len(structure['files_with_content']) > 5:
            print(f"\n  ... and {len(structure['files_with_content']) - 5} more files with content")
        
        # Show skipped files
        if structure['skipped_files']:
            print(f"\n⚠️  Skipped Files ({len(structure['skipped_files'])}):")
            for skip_info in structure['skipped_files'][:5]:
                reason = skip_info['reason']
                path = skip_info['path']
                if reason == 'file_too_large':
                    print(f"  📏 {path} (too large: {skip_info['size']} bytes)")
                elif reason == 'binary_file':
                    print(f"  🔧 {path} (binary: {skip_info['extension']})")
                else:
                    print(f"  ❌ {path} ({reason})")
            
            if len(structure['skipped_files']) > 5:
                print(f"  ... and {len(structure['skipped_files']) - 5} more skipped files")
        
        # Save detailed results to file
        output_file = "hazmap_deep_analysis.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print(f"\n💾 Full analysis saved to: {output_file}")
        print(f"📊 Analysis completed at: {result['analyzed_at']}")
        
        if 'processing_time' in result:
            print(f"⚡ Total processing time: {result['processing_time']['formatted']}")
        
    else:
        print(f"❌ Error: {response.json()}")

def test_explore_endpoint():
    """Test the alternative explore endpoint"""
    print("\n🔍 Testing explore endpoint...")
    print("=" * 40)
    
    url = f"{BASE_URL}/api/repositories/Redomic/NeuThera-Drug-Discovery-Toolkit/explore?max_file_size=102400"  # 100KB limit
    
    response = requests.get(url)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        stats = result['deep_analysis']['structure']['processing_stats']
        print(f"✅ Processed {stats['processed']} files")
        print(f"⚠️  Skipped {stats['skipped_large'] + stats['skipped_binary']} files")
    else:
        print(f"❌ Error: {response.json()}")

if __name__ == "__main__":
    try:
        test_deep_analysis()
        test_explore_endpoint()
        
        print("\n🎉 Deep analysis testing completed!")
        
    except requests.exceptions.ConnectionError:
        print("❌ Error: Could not connect to Flask server.")
        print("Make sure the server is running with: python app.py")
    except Exception as e:
        print(f"❌ Error: {e}")


================================================
FILE: test_files/test_final.py
================================================
#!/usr/bin/env python3
"""
Final clean RAG test - no warnings, no Unicode issues
"""

import os
import sys
import warnings

# Suppress everything
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
os.environ['PYTHONWARNINGS'] = 'ignore'
warnings.filterwarnings('ignore')

from pathlib import Path
import logging
logging.disable(logging.CRITICAL)

sys.path.append(str(Path(__file__).parent))

def main():
    print("Running Clean RAG Test")
    print("=" * 30)
    
    try:
        from services.rag_system import CPUOptimizedRAGSystem
        
        gitingest_file = "gitingest_outputs/Emon69420_HazMapApp_20250905_194000.txt"
        
        if not os.path.exists(gitingest_file):
            print(f"File not found: {gitingest_file}")
            return
        
        print("Building RAG index...")
        
        # Silent build
        with open(os.devnull, 'w') as devnull:
            old_stdout = sys.stdout
            old_stderr = sys.stderr
            sys.stdout = devnull
            sys.stderr = devnull
            
            try:
                rag = CPUOptimizedRAGSystem(storage_path="./final_rag")
                metrics = rag.build_rag_from_gitingest(gitingest_file, "final_test")
            finally:
                sys.stdout = old_stdout
                sys.stderr = old_stderr
        
        print(f"SUCCESS: {metrics.total_chunks} chunks from {metrics.total_files} files")
        
        # Test searches
        searches = [
            ("login authentication", "Login"),
            ("wildfire prediction", "Wildfire"),
            ("location GPS", "Location"),
            ("map component", "Map"),
            ("background task", "Background"),
            ("user profile", "Profile")
        ]
        
        print(f"\nTesting {len(searches)} searches:")
        
        for query, desc in searches:
            # Silent query
            with open(os.devnull, 'w') as devnull:
                old_stderr = sys.stderr
                sys.stderr = devnull
                try:
                    result = rag.query(query, max_results=1, collection_name="final_test")
                finally:
                    sys.stderr = old_stderr
            
            if result.chunks:
                chunk = result.chunks[0]
                file_name = Path(chunk.file_path).name
                func_name = chunk.metadata.get('function_name', 'N/A')
                print(f"  {desc}: {func_name} in {file_name}")
        
        print(f"\nSummary: {metrics.total_files} files, {metrics.total_chunks} chunks")
        print("Test complete!")
        
        # Cleanup
        try:
            rag.chroma_client = None
            rag.collection = None
            import shutil
            import time
            time.sleep(0.5)
            if os.path.exists("./final_rag"):
                shutil.rmtree("./final_rag")
        except:
            pass
            
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()


================================================
FILE: test_files/test_find_functions.py
================================================
#!/usr/bin/env python3
"""

"""

import sys
import os
from pathlib import Path

# Add services to path
sys.path.append(str(Path(__file__).parent))

try:
    from services.rag_system import CPUOptimizedRAGSystem
except ImportError as e:
    print(f"❌ Import error: {e}")
    sys.exit(1)


def test_find_specific_functions():
    """Test finding specific functions and components"""
    print("🔍 Testing Function & Component Discovery")
    print("=" * 50)
    
    gitingest_file = "https://github.com/Emon69420/MedMint"
    
    if not os.path.exists(gitingest_file):
        print(f"❌ Gitingest file not found: {gitingest_file}")
        return
    
    try:
        # Initialize RAG system
        print("🔧 Building RAG index...")
        rag = CPUOptimizedRAGSystem(storage_path="./temp_rag_storage")
        
        # Build RAG system
        metrics = rag.build_rag_from_gitingest(gitingest_file, "find_functions_test")
        print(f"✅ Indexed {metrics.total_chunks} chunks from {metrics.total_files} files")
        
        # Test specific function/component searches
        searches = [
            {
                "query": "authentication login function",
                "expect": "Should find login-related code"
            },
            {
                "query": "wildfire risk prediction algorithm",
                "expect": "Should find prediction functions in Flask backend"
            },
            {
                "query": "Flask backend get_wildfire_risk_prediction function",
                "expect": "Should find the main Python prediction function"
            },
            {
                "query": "gee_data Google Earth Engine API",
                "expect": "Should find the GEE data processing function"
            },
            {
                "query": "Python Flask route handler",
                "expect": "Should find Flask route functions like home and about"
            },
            {
                "query": "environmental data processing Python",
                "expect": "Should find Python functions that process environmental data"
            },
            {
                "query": "location tracking GPS coordinates",
                "expect": "Should find LocationContext and location services"
            },
            {
                "query": "air quality monitoring API calls",
                "expect": "Should find air quality related functions"
            },
            {
                "query": "React Native map component MapView",
                "expect": "Should find map implementation"
            },
            {
                "query": "background task notification system",
                "expect": "Should find background task services"
            },
            {
                "query": "user profile management settings",
                "expect": "Should find profile screen and user management"
            },
            {
                "query": "evacuation route planning emergency",
                "expect": "Should find evacuation-related components"
            },
            {
                "query": "Python test functions pytest",
                "expect": "Should find test functions in test_app.py"
            },
            {
                "query": "Flask app configuration setup",
                "expect": "Should find Flask app initialization and config"
            }
        ]
        
        print(f"\n🎯 Testing {len(searches)} specific searches:")
        print("=" * 50)
        
        for i, search in enumerate(searches, 1):
            print(f"\n🔎 Search {i}: '{search['query']}'")
            print(f"   Expected: {search['expect']}")
            
            # Query the RAG system
            result = rag.query(search['query'], max_results=3, collection_name="find_functions_test")
            
            print(f"   ⚡ Found {len(result.chunks)} results:")
            
            # Show results with confidence scores
            for j, (chunk, confidence) in enumerate(zip(result.chunks, result.confidence_scores)):
                confidence_emoji = "🎯" if confidence > 0.1 else "📍" if confidence > 0.05 else "📌"
                print(f"     {confidence_emoji} {chunk.chunk_type} in {chunk.file_path}")
                print(f"        Confidence: {confidence:.3f}")
                
                # Show content preview
                preview = chunk.content.replace('\n', ' ')[:80]
                print(f"        Preview: {preview}...")
                
                # Show metadata if available
                if chunk.metadata:
                    relevant_meta = {}
                    for key in ['function_name', 'class_name', 'method_name']:
                        if key in chunk.metadata and chunk.metadata[key]:
                            relevant_meta[key] = chunk.metadata[key]
                    if relevant_meta:
                        print(f"        Metadata: {relevant_meta}")
            
            # Show relationships if found
            if result.relationships and any(result.relationships.values()):
                related_info = []
                for rel_type, items in result.relationships.items():
                    if items:
                        related_info.append(f"{rel_type}: {len(items)}")
                if related_info:
                    print(f"   🔗 Related: {', '.join(related_info)}")
        
        # Test finding specific code patterns
        print(f"\n🧩 Testing Code Pattern Discovery:")
        print("=" * 30)
        
        pattern_searches = [
            "async function with await",
            "React useState hook",
            "API fetch request",
            "error handling try catch",
            "TypeScript interface definition",
            "Python Flask route decorator",
            "Python function with parameters",
            "Python import statement",
            "Python class definition",
            "Python exception handling try except"
        ]
        
        for pattern in pattern_searches:
            print(f"\n🔍 Pattern: '{pattern}'")
            result = rag.query(pattern, max_results=2, collection_name="find_functions_test")
            
            for chunk, confidence in zip(result.chunks[:2], result.confidence_scores[:2]):
                if confidence > 0.01:  # Only show if there's some relevance
                    print(f"   📄 {chunk.file_path} (confidence: {confidence:.3f})")
                    # Show a longer preview for code patterns
                    preview = chunk.content.replace('\n', ' ')[:120]
                    print(f"      {preview}...")
        
        # Summary of what we found
        print(f"\n📊 Discovery Summary:")
        print("=" * 20)
        
        # Get all chunks to analyze what we have
        all_results = rag.query("*", max_results=50, collection_name="find_functions_test")
        
        # Count by file type
        file_types = {}
        chunk_types = {}
        
        for chunk in all_results.chunks:
            # File extension
            ext = Path(chunk.file_path).suffix or 'no-ext'
            file_types[ext] = file_types.get(ext, 0) + 1
            
            # Chunk type
            chunk_types[chunk.chunk_type] = chunk_types.get(chunk.chunk_type, 0) + 1
        
        print("📁 File types indexed:")
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            print(f"   {ext}: {count} chunks")
        
        print("\n🧩 Chunk types created:")
        for chunk_type, count in sorted(chunk_types.items(), key=lambda x: x[1], reverse=True):
            print(f"   {chunk_type}: {count} chunks")
        
        print(f"\n🎉 Function discovery test complete!")
        
    except Exception as e:
        print(f"\n❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1
    
    finally:
        # Clean up
        try:
            if 'rag' in locals():
                rag.chroma_client = None
                rag.collection = None
            
            import shutil
            import time
            time.sleep(1)
            if os.path.exists("./temp_rag_storage"):
                print("🧹 Cleaning up...")
                shutil.rmtree("./temp_rag_storage")
        except Exception as e:
            print(f"⚠️  Warning: Could not clean up: {e}")
    
    return 0


if __name__ == "__main__":
    exit_code = test_find_specific_functions()
    sys.exit(exit_code)


================================================
FILE: test_files/test_find_functions_clean.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x9d in position 1034: character maps to <undefined>


================================================
FILE: test_files/test_github_auth.py
================================================
import unittest
from unittest.mock import patch, MagicMock
import json
from app import app, GitHubService

class TestGitHubService(unittest.TestCase):
    
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True
        self.github_service = GitHubService()
    
    @patch('requests.get')
    def test_validate_token_success(self, mock_get):
        """Test successful token validation"""
        # Mock successful GitHub API response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'login': 'testuser',
            'id': 12345,
            'name': 'Test User',
            'email': 'test@example.com'
        }
        mock_response.headers = {'X-OAuth-Scopes': 'repo, user:email'}
        mock_get.return_value = mock_response
        
        result = self.github_service.validate_token('valid_token')
        
        self.assertTrue(result['valid'])
        self.assertEqual(result['user']['login'], 'testuser')
        self.assertIn('repo', result['scopes'])
    
    @patch('requests.get')
    def test_validate_token_invalid(self, mock_get):
        """Test invalid token validation"""
        # Mock failed GitHub API response
        mock_response = MagicMock()
        mock_response.status_code = 401
        mock_get.return_value = mock_response
        
        result = self.github_service.validate_token('invalid_token')
        
        self.assertFalse(result['valid'])
        self.assertIn('error', result)
    
    def test_get_oauth_url(self):
        """Test OAuth URL generation"""
        with patch.dict('os.environ', {'GITHUB_CLIENT_ID': 'test_client_id'}):
            url = self.github_service.get_oauth_url('test_state')
            
            self.assertIn('github.com/login/oauth/authorize', url)
            self.assertIn('client_id=test_client_id', url)
            self.assertIn('state=test_state', url)
    
    def test_login_with_token(self):
        """Test login endpoint with personal access token"""
        with patch.object(self.github_service, 'validate_token') as mock_validate:
            mock_validate.return_value = {
                'valid': True,
                'user': {'login': 'testuser', 'id': 12345},
                'scopes': ['repo', 'user:email']
            }
            
            response = self.app.post('/auth/github/login',
                                   data=json.dumps({'token': 'test_token'}),
                                   content_type='application/json')
            
            self.assertEqual(response.status_code, 200)
            data = json.loads(response.data)
            self.assertTrue(data['success'])
            self.assertEqual(data['user']['login'], 'testuser')
    
    def test_login_with_oauth(self):
        """Test login endpoint OAuth flow initiation"""
        with patch.dict('os.environ', {'GITHUB_CLIENT_ID': 'test_client_id'}):
            response = self.app.post('/auth/github/login',
                                   data=json.dumps({'oauth': True}),
                                   content_type='application/json')
            
            self.assertEqual(response.status_code, 200)
            data = json.loads(response.data)
            self.assertTrue(data['success'])
            self.assertIn('oauth_url', data)
    
    def test_auth_status_authenticated(self):
        """Test auth status when user is authenticated"""
        with self.app.session_transaction() as sess:
            sess['github_token'] = 'test_token'
            sess['github_user'] = {'login': 'testuser', 'id': 12345}
        
        response = self.app.get('/auth/status')
        
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['authenticated'])
        self.assertEqual(data['user']['login'], 'testuser')
    
    def test_auth_status_not_authenticated(self):
        """Test auth status when user is not authenticated"""
        response = self.app.get('/auth/status')
        
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertFalse(data['authenticated'])
    
    def test_logout(self):
        """Test logout functionality"""
        with self.app.session_transaction() as sess:
            sess['github_token'] = 'test_token'
            sess['github_user'] = {'login': 'testuser'}
        
        response = self.app.post('/auth/logout')
        
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertTrue(data['success'])
    
    def test_parse_github_url(self):
        """Test GitHub URL parsing"""
        # Test various URL formats
        test_cases = [
            ('https://github.com/owner/repo', {'owner': 'owner', 'repo': 'repo'}),
            ('https://github.com/owner/repo.git', {'owner': 'owner', 'repo': 'repo'}),
            ('git@github.com:owner/repo.git', {'owner': 'owner', 'repo': 'repo'}),
            ('https://github.com/owner/repo/', {'owner': 'owner', 'repo': 'repo'}),
            ('invalid-url', None)
        ]
        
        for url, expected in test_cases:
            result = self.github_service.parse_github_url(url)
            self.assertEqual(result, expected)
    
    @patch('requests.get')
    def test_validate_repository_access_public(self, mock_get):
        """Test repository validation for public repo"""
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'name': 'test-repo',
            'full_name': 'owner/test-repo',
            'private': False,
            'description': 'Test repository'
        }
        mock_get.return_value = mock_response
        
        result = self.github_service.validate_repository_access('owner', 'test-repo')
        
        self.assertTrue(result['accessible'])
        self.assertEqual(result['repo_info']['name'], 'test-repo')
        self.assertFalse(result['repo_info']['private'])
    
    def test_validate_repository_endpoint(self):
        """Test repository validation endpoint"""
        with patch.object(self.github_service, 'parse_github_url') as mock_parse, \
             patch.object(self.github_service, 'validate_repository_access') as mock_validate:
            
            mock_parse.return_value = {'owner': 'owner', 'repo': 'repo'}
            mock_validate.return_value = {
                'accessible': True,
                'repo_info': {'name': 'repo', 'private': False}
            }
            
            response = self.app.post('/api/repositories/validate',
                                   data=json.dumps({'url': 'https://github.com/owner/repo'}),
                                   content_type='application/json')
            
            self.assertEqual(response.status_code, 200)
            data = json.loads(response.data)
            self.assertTrue(data['success'])
            self.assertEqual(data['repository']['name'], 'repo')
    
    def test_analyze_repository_endpoint(self):
        """Test repository analysis endpoint"""
        with patch.object(self.github_service, 'parse_github_url') as mock_parse, \
             patch.object(self.github_service, 'validate_repository_access') as mock_validate, \
             patch.object(self.github_service, 'get_repository_tree') as mock_tree:
            
            mock_parse.return_value = {'owner': 'owner', 'repo': 'repo'}
            mock_validate.return_value = {
                'accessible': True,
                'repo_info': {'name': 'repo', 'private': False}
            }
            mock_tree.return_value = {
                'success': True,
                'tree': {'files': [], 'directories': [], 'total_files': 0}
            }
            
            response = self.app.post('/api/repositories/analyze',
                                   data=json.dumps({'url': 'https://github.com/owner/repo'}),
                                   content_type='application/json')
            
            self.assertEqual(response.status_code, 200)
            data = json.loads(response.data)
            self.assertTrue(data['success'])
            self.assertIn('analysis', data)

if __name__ == '__main__':
    unittest.main()


================================================
FILE: test_files/test_gitingest.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x81 in position 1533: character maps to <undefined>


================================================
FILE: test_files/test_gitingest_simple.py
================================================
#!/usr/bin/env python3
"""
Simple direct test of gitingest command to debug encoding issues.
"""

import subprocess
import sys

def test_direct_gitingest():
    """Test gitingest directly with a simple repo"""
    
    print("🧪 Testing gitingest directly...")
    
    # Test with a very simple repo
    repo_url = "https://github.com/octocat/Hello-World"
    
    try:
        # Simple gitingest command
        cmd = ['gitingest', repo_url, '--output', '-']
        
        print(f"🔧 Running: {' '.join(cmd)}")
        
        # Try with UTF-8 encoding
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=60,
            encoding='utf-8',
            errors='replace'
        )
        
        print(f"📊 Return code: {result.returncode}")
        print(f"📏 Stdout length: {len(result.stdout)} chars")
        print(f"📏 Stderr length: {len(result.stderr)} chars")
        
        if result.returncode == 0:
            print("✅ Success! Here's the first 500 chars of output:")
            print("-" * 50)
            print(result.stdout[:500])
            print("-" * 50)
            if len(result.stdout) > 500:
                print(f"... and {len(result.stdout) - 500} more characters")
        else:
            print("❌ Failed!")
            print("STDERR:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("⏰ Command timed out")
    except Exception as e:
        print(f"💥 Error: {e}")

def test_gitingest_to_file():
    """Test gitingest with file output instead of stdout"""
    
    print("\n🧪 Testing gitingest with file output...")
    
    repo_url = "https://github.com/octocat/Hello-World"
    output_file = "test_output.txt"
    
    try:
        # Output to file instead of stdout
        cmd = ['gitingest', repo_url, '--output', output_file]
        
        print(f"🔧 Running: {' '.join(cmd)}")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=60,
            encoding='utf-8',
            errors='replace'
        )
        
        print(f"📊 Return code: {result.returncode}")
        
        if result.returncode == 0:
            print("✅ Success! Checking output file...")
            try:
                with open(output_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    print(f"📏 File size: {len(content)} chars")
                    print("📄 First 500 chars:")
                    print("-" * 50)
                    print(content[:500])
                    print("-" * 50)
                    
                # Clean up
                import os
                os.remove(output_file)
                print("🧹 Cleaned up output file")
                
            except Exception as e:
                print(f"❌ Error reading output file: {e}")
        else:
            print("❌ Failed!")
            print("STDERR:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("⏰ Command timed out")
    except Exception as e:
        print(f"💥 Error: {e}")

if __name__ == "__main__":
    test_direct_gitingest()
    test_gitingest_to_file()


================================================
FILE: test_files/test_gitingest_with_output.py
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x81 in position 1276: character maps to <undefined>


================================================
FILE: test_files/test_hazmap.py
================================================
#!/usr/bin/env python3
import requests
import json

BASE_URL = "http://localhost:5000"

def test_hazmap_analysis():
    print("Analyzing HazMapApp repository...")
    
    url = f"{BASE_URL}/api/repositories/analyze"
    data = {"url": "https://github.com/Emon69420/HazMapApp"}
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        analysis = result['analysis']
        
        print(f"Repository: {analysis['repository']['full_name']}")
        print(f"Description: {analysis['repository']['description']}")
        print(f"Language: {analysis['repository']['language']}")
        print(f"Size: {analysis['repository']['size']} KB")
        print(f"Stars: {analysis['repository']['stargazers_count']}")
        print(f"Default branch: {analysis['repository']['default_branch']}")
        print()
        
        structure = analysis['structure']
        print(f"Total files: {structure['total_files']}")
        print(f"Total directories: {structure['total_directories']}")
        print()
        
        print("File structure (first 10 files):")
        for file in structure['files'][:10]:
            print(f"  - {file['path']} ({file['size']} bytes)")
        
        if len(structure['files']) > 10:
            print(f"  ... and {len(structure['files']) - 10} more files")
        
    else:
        print(f"Error: {response.json()}")

def test_get_readme():
    print("\nGetting README.md content...")
    
    url = f"{BASE_URL}/api/repositories/Emon69420/HazMapApp/files/README.md"
    
    response = requests.get(url)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        file_info = result['file']
        
        print(f"File: {file_info['name']}")
        print(f"Size: {file_info['size']} bytes")
        print(f"Encoding: {file_info['encoding']}")
        print(f"Download URL: {file_info['download_url']}")
        
        # Decode base64 content if available
        if file_info['content'] and file_info['encoding'] == 'base64':
            import base64
            content = base64.b64decode(file_info['content']).decode('utf-8')
            print("\nREADME content (first 500 chars):")
            print(content[:500] + "..." if len(content) > 500 else content)
    else:
        print(f"Error: {response.json()}")

if __name__ == "__main__":
    try:
        test_hazmap_analysis()
        test_get_readme()
    except requests.exceptions.ConnectionError:
        print("Error: Could not connect to Flask server.")
        print("Make sure the server is running with: python app.py")
    except Exception as e:
        print(f"Error: {e}")


================================================
FILE: test_files/test_hazmap_rag.py
================================================
#!/usr/bin/env python3
"""
Test RAG system with HazMap app gitingest output
"""

import sys
import os
from pathlib import Path
import time

# Add services to path
sys.path.append(str(Path(__file__).parent))

try:
    from services.rag_system import CPUOptimizedRAGSystem, GitingestParser
    from services.code_analyzer import MultiLanguageCodeAnalyzer
except ImportError as e:
    print(f"❌ Import error: {e}")
    sys.exit(1)


def test_hazmap_rag():
    """Test RAG system with HazMap app"""
    print("🚀 Testing RAG System with HazMap App")
    print("=" * 60)
    
    gitingest_file = "gitingest_outputs/Emon69420_HazMapApp_20250905_194000.txt"
    
    if not os.path.exists(gitingest_file):
        print(f"❌ Gitingest file not found: {gitingest_file}")
        return
    
    try:
        # Initialize RAG system
        print("🔧 Initializing RAG system...")
        rag = CPUOptimizedRAGSystem(storage_path="./hazmap_rag_storage")
        
        # Build RAG system from HazMap gitingest
        print("📊 Building RAG system from HazMap codebase...")
        start_time = time.time()
        
        metrics = rag.build_rag_from_gitingest(gitingest_file, "hazmap_collection")
        
        build_time = time.time() - start_time
        
        print(f"\n✅ RAG system built successfully!")
        print(f"  📁 Total files: {metrics.total_files}")
        print(f"  🧩 Total chunks: {metrics.total_chunks}")
        print(f"  🌐 Languages: {', '.join(metrics.languages_detected)}")
        print(f"  ⏱️  Build time: {build_time:.2f}s")
        print(f"  💾 Index size: {metrics.index_size_mb:.2f}MB")
        
        # Test queries relevant to HazMap
        test_queries = [
            "How do I implement location tracking?",
            "Show me authentication code",
            "How is the map component implemented?",
            "Find air quality monitoring functions",
            "How does wildfire risk prediction work?",
            "Show me background task implementation",
            "How is user profile managed?",
            "Find evacuation route planning code",
            "How are notifications handled?",
            "Show me the database configuration",
            "How is the Google Maps API integrated?",
            "Find React Native navigation setup",
            "How are environmental data fetched?",
            "Show me TypeScript interfaces",
            "How is the app styled?"
        ]
        
        print(f"\n🔍 Testing {len(test_queries)} queries...")
        print("=" * 60)
        
        for i, query in enumerate(test_queries, 1):
            print(f"\n🔎 Query {i}: '{query}'")
            
            query_start = time.time()
            result = rag.query(query, max_results=5, collection_name="hazmap_collection")
            query_time = time.time() - query_start
            
            print(f"  ⚡ Found {len(result.chunks)} results in {query_time:.3f}s")
            
            # Show top 3 results
            for j, (chunk, confidence) in enumerate(zip(result.chunks[:3], result.confidence_scores[:3])):
                print(f"    {j+1}. {chunk.chunk_type} in {chunk.file_path} (confidence: {confidence:.2f})")
                # Show a snippet of the content
                content_preview = chunk.content.replace('\n', ' ')[:100]
                print(f"       Preview: {content_preview}...")
            
            if result.relationships and any(result.relationships.values()):
                print(f"    🔗 Related: {', '.join([f'{k}: {len(v)}' for k, v in result.relationships.items() if v])}")
        
        # Test context generation for LLM
        print(f"\n📝 Testing context generation...")
        test_context_query = "How does the HazMap app handle real-time wildfire monitoring and user notifications?"
        
        result = rag.query(test_context_query, max_results=8, collection_name="hazmap_collection")
        context = rag.get_context_for_llm(result, max_tokens=2000)
        
        print(f"  📄 Generated context ({len(context)} chars):")
        print(f"  Preview: {context[:300]}...")
        
        # Show some interesting statistics
        print(f"\n📊 HazMap Codebase Analysis:")
        
        # Parse the gitingest file to get file breakdown
        files = GitingestParser.parse_gitingest_file(gitingest_file)
        analyzer = MultiLanguageCodeAnalyzer()
        project_structure = analyzer.analyze_project(files)
        
        # Language breakdown
        lang_stats = {}
        for structure in project_structure.values():
            lang = structure.language.value
            if lang not in lang_stats:
                lang_stats[lang] = {'files': 0, 'functions': 0, 'classes': 0, 'lines': 0}
            lang_stats[lang]['files'] += 1
            lang_stats[lang]['functions'] += len(structure.functions)
            lang_stats[lang]['classes'] += len(structure.classes)
            lang_stats[lang]['lines'] += structure.total_lines
        
        for lang, stats in sorted(lang_stats.items(), key=lambda x: x[1]['lines'], reverse=True):
            if stats['files'] > 0:
                print(f"  🔤 {lang.upper()}: {stats['files']} files, {stats['functions']} functions, {stats['classes']} classes, {stats['lines']} lines")
        
        # Find key components
        key_files = []
        for file_path, structure in project_structure.items():
            if any(keyword in file_path.lower() for keyword in ['map', 'auth', 'profile', 'air-quality', 'evacuation']):
                key_files.append((file_path, len(structure.functions), len(structure.classes)))
        
        if key_files:
            print(f"\n🎯 Key Components Found:")
            for file_path, func_count, class_count in sorted(key_files, key=lambda x: x[1] + x[2], reverse=True)[:10]:
                print(f"  📄 {file_path}: {func_count} functions, {class_count} classes")
        
        print(f"\n🎉 HazMap RAG analysis complete!")
        
    except Exception as e:
        print(f"\n❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1
    
    finally:
        # Clean up
        try:
            if 'rag' in locals():
                rag.chroma_client = None
                rag.collection = None
            
            import shutil
            time.sleep(1)
            if os.path.exists("./hazmap_rag_storage"):
                print("🧹 Cleaning up storage...")
                shutil.rmtree("./hazmap_rag_storage")
        except Exception as e:
            print(f"⚠️  Warning: Could not clean up storage: {e}")
    
    return 0


if __name__ == "__main__":
    exit_code = test_hazmap_rag()
    sys.exit(exit_code)


================================================
FILE: test_files/test_rag_simple.py
================================================
#!/usr/bin/env python3
"""
Simple test for CPU-optimized RAG system.
"""

import os
import sys
import tempfile
import time
from pathlib import Path

# Add services to path
sys.path.append(str(Path(__file__).parent))

try:
    from services.rag_system import CPUOptimizedRAGSystem, GitingestParser
    from services.code_analyzer import MultiLanguageCodeAnalyzer
except ImportError as e:
    print(f"❌ Import error: {e}")
    sys.exit(1)


def test_simple_rag():
    """Test basic RAG functionality"""
    print("🚀 Testing CPU-Optimized RAG System")
    print("=" * 50)
    
    # Sample gitingest content
    sample_content = """
Directory structure:
├── calculator.py
└── main.py

================================================================================

FILE: calculator.py
class Calculator:
    \"\"\"Simple calculator class\"\"\"
    
    def __init__(self):
        self.history = []
    
    def add(self, a, b):
        \"\"\"Add two numbers\"\"\"
        result = a + b
        self.history.append(f"{a} + {b} = {result}")
        return result
    
    def multiply(self, a, b):
        \"\"\"Multiply two numbers\"\"\"
        result = a * b
        self.history.append(f"{a} * {b} = {result}")
        return result

================================================================================

FILE: main.py
from calculator import Calculator

def main():
    \"\"\"Main function\"\"\"
    calc = Calculator()
    result = calc.add(5, 3)
    print(f"5 + 3 = {result}")
    
    product = calc.multiply(4, 6)
    print(f"4 * 6 = {product}")

if __name__ == "__main__":
    main()
"""
    
    # Use a persistent directory instead of temp
    storage_dir = "./rag_test_storage"
    
    try:
        # Clean up any existing storage
        if os.path.exists(storage_dir):
            import shutil
            try:
                shutil.rmtree(storage_dir)
            except:
                pass
        
        # Create gitingest file
        gitingest_file = "test_sample.txt"
        with open(gitingest_file, 'w', encoding='utf-8') as f:
            f.write(sample_content)
        
        print("📝 Created sample gitingest file")
        
        # Initialize RAG system
        print("🔧 Initializing RAG system...")
        rag = CPUOptimizedRAGSystem(storage_path=storage_dir)
        
        # Build RAG system
        print("🏗️ Building RAG system...")
        metrics = rag.build_rag_from_gitingest(gitingest_file, "test_collection")
        
        print(f"✅ RAG system built successfully!")
        print(f"  - Total chunks: {metrics.total_chunks}")
        print(f"  - Total files: {metrics.total_files}")
        print(f"  - Languages: {', '.join(metrics.languages_detected)}")
        print(f"  - Build time: {metrics.build_time:.2f}s")
        print(f"  - Index size: {metrics.index_size_mb:.2f}MB")
        
        # Test queries
        test_queries = [
            "How do I add two numbers?",
            "Show me calculator methods",
            "What is the main function?",
            "Find multiplication function"
        ]
        
        print(f"\n🔍 Testing queries...")
        for query in test_queries:
            print(f"\nQuery: '{query}'")
            result = rag.query(query, max_results=3, collection_name="test_collection")
            
            print(f"  Found {len(result.chunks)} results in {result.query_time:.3f}s")
            for i, (chunk, confidence) in enumerate(zip(result.chunks, result.confidence_scores)):
                print(f"  {i+1}. {chunk.chunk_type} in {chunk.file_path} (confidence: {confidence:.2f})")
                print(f"     {chunk.content[:80]}...")
        
        # Test context generation
        print(f"\n📝 Testing context generation...")
        result = rag.query("calculator functions", max_results=5, collection_name="test_collection")
        context = rag.get_context_for_llm(result, max_tokens=1000)
        print(f"Generated context ({len(context)} chars):")
        print(context[:300] + "..." if len(context) > 300 else context)
        
        print(f"\n🎉 All tests completed successfully!")
        return True
        
    except Exception as e:
        print(f"\n❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # Clean up files
        try:
            if os.path.exists(gitingest_file):
                os.remove(gitingest_file)
        except:
            pass
        
        # Note: We'll leave the storage directory for manual cleanup
        # since Windows file locking makes automatic cleanup difficult
        print(f"\n💡 Note: Test storage left at '{storage_dir}' for manual cleanup if needed")


if __name__ == "__main__":
    success = test_simple_rag()
    sys.exit(0 if success else 1)


================================================
FILE: test_files/test_rag_system.py
================================================
#!/usr/bin/env python3
"""
Test script for CPU-optimized RAG system.
This tests the complete pipeline from gitingest file to queryable RAG system.
"""

import asyncio
import sys
import os
from pathlib import Path
import time

# Add services to path
sys.path.append(str(Path(__file__).parent))

try:
    from services.rag_system import CPUOptimizedRAGSystem, GitingestParser
    from services.code_analyzer import MultiLanguageCodeAnalyzer
except ImportError as e:
    print(f"❌ Import error: {e}")
    print("💡 Make sure to install dependencies: pip install chromadb sentence-transformers networkx")
    sys.exit(1)


def test_gitingest_parsing():
    """Test parsing of gitingest files"""
    print("🧪 Testing gitingest parsing...")
    
    # Create a sample gitingest content
    sample_content = """
Directory structure:
├── main.py
├── utils.py
└── README.md

================================================================================

FILE: main.py
def hello_world():
    \"\"\"Simple hello world function\"\"\"
    print("Hello, World!")
    return "success"

if __name__ == "__main__":
    hello_world()

================================================================================

FILE: utils.py
import os
import sys

def get_file_size(filepath):
    \"\"\"Get file size in bytes\"\"\"
    return os.path.getsize(filepath)

class FileManager:
    def __init__(self, base_path):
        self.base_path = base_path
    
    def list_files(self):
        return os.listdir(self.base_path)

================================================================================

FILE: README.md
# Test Project

This is a test project for RAG system.
"""
    
    files = GitingestParser.parse_gitingest_content(sample_content)
    
    print(f"✅ Parsed {len(files)} files:")
    for file_path, content in files.items():
        print(f"  - {file_path} ({len(content)} chars)")
    
    return files


def test_code_analysis():
    """Test multi-language code analysis"""
    print("\n🧪 Testing code analysis...")
    
    # Get sample files from gitingest parsing
    files = test_gitingest_parsing()
    
    analyzer = MultiLanguageCodeAnalyzer()
    project_structure = analyzer.analyze_project(files)
    
    print(f"✅ Analyzed {len(project_structure)} files:")
    for file_path, structure in project_structure.items():
        print(f"  - {file_path}: {structure.language.value}")
        print(f"    Functions: {len(structure.functions)}")
        print(f"    Classes: {len(structure.classes)}")
        print(f"    Imports: {len(structure.imports)}")
    
    return project_structure


def test_rag_system():
    """Test complete RAG system"""
    print("\n🧪 Testing RAG system...")
    
    import tempfile
    
    # Use a temporary directory that gets cleaned up automatically
    with tempfile.TemporaryDirectory() as temp_dir:
        # Initialize RAG system
        rag = CPUOptimizedRAGSystem(storage_path=temp_dir)
    
        # Create a temporary gitingest file
        temp_file = "temp_gitingest.txt"
    sample_content = """
Directory structure:
├── main.py
├── utils.py
└── calculator.py

================================================================================

FILE: main.py
def hello_world():
    \"\"\"Simple hello world function\"\"\"
    print("Hello, World!")
    return "success"

def main():
    \"\"\"Main entry point\"\"\"
    result = hello_world()
    calc = Calculator()
    sum_result = calc.add(5, 3)
    print(f"5 + 3 = {sum_result}")

if __name__ == "__main__":
    main()

================================================================================

FILE: utils.py
import os
import sys
from pathlib import Path

def get_file_size(filepath):
    \"\"\"Get file size in bytes\"\"\"
    return os.path.getsize(filepath)

def read_config(config_path):
    \"\"\"Read configuration file\"\"\"
    with open(config_path, 'r') as f:
        return f.read()

class FileManager:
    def __init__(self, base_path):
        self.base_path = base_path
    
    def list_files(self):
        \"\"\"List all files in base path\"\"\"
        return os.listdir(self.base_path)
    
    def create_file(self, filename, content):
        \"\"\"Create a new file\"\"\"
        filepath = Path(self.base_path) / filename
        with open(filepath, 'w') as f:
            f.write(content)

================================================================================

FILE: calculator.py
class Calculator:
    \"\"\"Simple calculator class\"\"\"
    
    def __init__(self):
        self.history = []
    
    def add(self, a, b):
        \"\"\"Add two numbers\"\"\"
        result = a + b
        self.history.append(f"{a} + {b} = {result}")
        return result
    
    def subtract(self, a, b):
        \"\"\"Subtract two numbers\"\"\"
        result = a - b
        self.history.append(f"{a} - {b} = {result}")
        return result
    
    def multiply(self, a, b):
        \"\"\"Multiply two numbers\"\"\"
        result = a * b
        self.history.append(f"{a} * {b} = {result}")
        return result
    
    def get_history(self):
        \"\"\"Get calculation history\"\"\"
        return self.history.copy()
"""
    
    # Write temporary file
    with open(temp_file, 'w', encoding='utf-8') as f:
        f.write(sample_content)
    
    try:
        # Build RAG system
        print("Building RAG system...")
        metrics = rag.build_rag_from_gitingest(temp_file, "test_collection")
        
        print(f"✅ RAG system built successfully!")
        print(f"  - Total chunks: {metrics.total_chunks}")
        print(f"  - Total files: {metrics.total_files}")
        print(f"  - Languages: {', '.join(metrics.languages_detected)}")
        print(f"  - Build time: {metrics.build_time:.2f}s")
        print(f"  - Index size: {metrics.index_size_mb:.2f}MB")
        
        # Test queries
        test_queries = [
            "How do I add two numbers?",
            "Show me file management functions",
            "What is the main entry point?",
            "Find calculator methods"
        ]
        
        print(f"\n🔍 Testing queries...")
        for query in test_queries:
            print(f"\nQuery: '{query}'")
            result = rag.query(query, max_results=3, collection_name="test_collection")
            
            print(f"  Found {len(result.chunks)} results in {result.query_time:.3f}s")
            for i, (chunk, confidence) in enumerate(zip(result.chunks, result.confidence_scores)):
                print(f"  {i+1}. {chunk.chunk_type} in {chunk.file_path} (confidence: {confidence:.2f})")
                print(f"     {chunk.content[:100]}...")
        
        # Test context generation
        print(f"\n📝 Testing context generation...")
        result = rag.query("calculator functions", max_results=5, collection_name="test_collection")
        context = rag.get_context_for_llm(result, max_tokens=1000)
        print(f"Generated context ({len(context)} chars):")
        print(context[:500] + "..." if len(context) > 500 else context)
        
    finally:
        # Clean up
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        # Clean up test storage - close ChromaDB first
        try:
            if 'rag' in locals():
                rag.cleanup()
            
            import shutil
            import time
            import gc
            
            # Force garbage collection to release file handles
            gc.collect()
            time.sleep(2)  # Give more time for file handles to close
            
            if os.path.exists("./test_rag_storage"):
                shutil.rmtree("./test_rag_storage")
        except Exception as e:
            print(f"Warning: Could not clean up test storage: {e}")
            print("You may need to manually delete the ./test_rag_storage folder")


def main():
    """Run all tests"""
    print("🚀 Starting RAG System Tests")
    print("=" * 50)
    
    try:
        # Test individual components
        test_gitingest_parsing()
        test_code_analysis()
        
        # Test complete system
        test_rag_system()
        
        print("\n" + "=" * 50)
        print("🎉 All tests completed successfully!")
        
    except Exception as e:
        print(f"\n❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)


================================================
FILE: test_files/test_silent.py
================================================
#!/usr/bin/env python3
"""
Ultra-clean test with maximum warning suppression
"""

import os
import sys
import warnings
import subprocess

# Maximum suppression
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
os.environ['ORT_DISABLE_ALL_LOGS'] = '1'
os.environ['CUDA_VISIBLE_DEVICES'] = ''
os.environ['PYTHONWARNINGS'] = 'ignore'
warnings.filterwarnings('ignore')

from pathlib import Path
import logging

# Suppress all logging
logging.disable(logging.CRITICAL)

sys.path.append(str(Path(__file__).parent))

def run_silent_test():
    """Run the test with maximum output suppression"""
    print("🔇 Running SILENT RAG test...")
    print("=" * 40)
    
    try:
        from services.rag_system import CPUOptimizedRAGSystem
        
        gitingest_file = "gitingest_outputs/Emon69420_HazMapApp_20250905_194000.txt"
        
        if not os.path.exists(gitingest_file):
            print(f"❌ File not found: {gitingest_file}")
            return
        
        print("🔧 Building index (silent)...")
        
        # Redirect ALL output during initialization
        with open(os.devnull, 'w') as devnull:
            old_stdout = sys.stdout
            old_stderr = sys.stderr
            sys.stdout = devnull
            sys.stderr = devnull
            
            try:
                rag = CPUOptimizedRAGSystem(storage_path="./silent_rag")
                metrics = rag.build_rag_from_gitingest(gitingest_file, "silent_test")
            finally:
                sys.stdout = old_stdout
                sys.stderr = old_stderr
        
        print(f"✅ Success! {metrics.total_chunks} chunks from {metrics.total_files} files")
        
        # Test key searches silently
        searches = [
            ("login authentication", "🔐 Login"),
            ("wildfire prediction", "🔥 Wildfire"),
            ("location GPS", "📍 Location"),
            ("map component", "🗺️  Map"),
            ("background task", "⏰ Background"),
            ("user profile", "👤 Profile")
        ]
        
        print(f"\n🎯 Testing {len(searches)} searches:")
        
        for query, emoji_desc in searches:
            # Silent query
            with open(os.devnull, 'w') as devnull:
                old_stderr = sys.stderr
                sys.stderr = devnull
                try:
                    result = rag.query(query, max_results=1, collection_name="silent_test")
                finally:
                    sys.stderr = old_stderr
            
            if result.chunks:
                chunk = result.chunks[0]
                confidence = result.confidence_scores[0]
                
                # Clean output
                file_name = Path(chunk.file_path).name
                func_name = chunk.metadata.get('function_name', 'N/A')
                
                status = "🎯" if confidence > 0.05 else "✅" if confidence > 0.01 else "📌"
                print(f"   {status} {emoji_desc}: {func_name} in {file_name}")
        
        print(f"\n📊 Index: {metrics.total_files} files, {metrics.total_chunks} chunks, {metrics.index_size_mb:.1f}MB")
        print("🎉 Silent test complete!")
        
        # Silent cleanup
        try:
            rag.chroma_client = None
            rag.collection = None
            import shutil
            import time
            time.sleep(0.5)
            if os.path.exists("./silent_rag"):
                shutil.rmtree("./silent_rag")
        except:
            pass
            
    except Exception as e:
        print(f"❌ Error: {e}")

if __name__ == "__main__":
    run_silent_test()


================================================
FILE: test_files/test_timing_small.py
================================================
#!/usr/bin/env python3
"""
Test timing with a very small repository to minimize API calls
"""

import requests
import json

BASE_URL = "http://localhost:5000"

def test_small_repo_timing():
    """Test with a very small repository"""
    print("🔍 Testing timing with small repository...")
    print("Note: This might still fail due to rate limits")
    
    # Try with a very small, well-known repo
    url = f"{BASE_URL}/api/repositories/deep-analyze"
    data = {
        "url": "https://github.com/octocat/Hello-World",  # Very small repo
        "max_file_size": 1024 * 1024  # 1MB limit
    }
    
    response = requests.post(url, json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print("✅ Analysis successful!")
        
        # Show timing information
        if 'processing_time' in result:
            timing = result['processing_time']
            print(f"\n⏱️  Timing Results:")
            print(f"  🕐 Total time: {timing['formatted']} ({timing['seconds']}s)")
            print(f"  📊 Minutes: {timing['minutes']}")
        
        stats = result['deep_analysis']['structure']['processing_stats']
        print(f"\n📈 Performance:")
        print(f"  ✅ Files processed: {stats['processed']}")
        print(f"  🚀 Files per second: {stats.get('files_per_second', 0)}")
        print(f"  ⏱️  Start: {stats.get('start_time', 'N/A')}")
        print(f"  🏁 End: {stats.get('end_time', 'N/A')}")
        
    else:
        error = response.json()
        if 'rate limited' in error.get('error', '').lower():
            print("❌ Still rate limited. Try one of these:")
            print("1. Use GitHub token: python test_with_token.py")
            print("2. Wait until 00:39:17 for rate limit reset")
        else:
            print(f"❌ Error: {error}")

if __name__ == "__main__":
    test_small_repo_timing()


================================================
FILE: test_files/test_token.py
================================================
#!/usr/bin/env python3
"""
Test script to validate your GitHub token with the Flask API
"""

import requests
import json

BASE_URL = "http://localhost:5000"

def test_github_token():
    """Test GitHub token authentication"""
    
    # Get token from user
    print("🔑 GitHub Token Tester")
    print("=" * 30)
    
    token = input("Enter your GitHub Personal Access Token: ").strip()
    
    if not token:
        print("❌ No token provided!")
        return
    
    print(f"\n🔍 Testing token: {token[:8]}...")
    
    # Test token with login endpoint
    url = f"{BASE_URL}/auth/github/login"
    data = {"token": token}
    
    try:
        response = requests.post(url, json=data)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            user = result['user']
            
            print("✅ Token is valid!")
            print(f"👤 User: {user['login']}")
            print(f"📧 Email: {user.get('email', 'Not provided')}")
            print(f"🔐 Scopes: {', '.join(result['scopes'])}")
            
            # Test repository access with token
            print(f"\n🔍 Testing repository access...")
            test_repo_with_token()
            
        else:
            error = response.json()
            print(f"❌ Token validation failed: {error.get('error')}")
            
    except requests.exceptions.ConnectionError:
        print("❌ Error: Could not connect to Flask server.")
        print("Make sure the server is running with: python app.py")
    except Exception as e:
        print(f"❌ Error: {e}")

def test_repo_with_token():
    """Test repository access with authenticated token"""
    
    # Test with your repository
    url = f"{BASE_URL}/api/repositories/validate"
    data = {"url": "https://github.com/Emon69420/HazMapApp"}
    
    response = requests.post(url, json=data)
    
    if response.status_code == 200:
        result = response.json()
        repo = result['repository']
        print(f"✅ Repository access successful!")
        print(f"📁 Repo: {repo['full_name']}")
        print(f"🔒 Private: {repo['private']}")
        print(f"⭐ Stars: {repo['stargazers_count']}")
    else:
        print(f"⚠️  Repository access issue: {response.json()}")

def show_token_info():
    """Show information about GitHub tokens"""
    print("\n📋 GitHub Token Information:")
    print("=" * 40)
    print("🔗 Get token at: https://github.com/settings/tokens")
    print("\n📝 Required scopes:")
    print("  ✅ repo (for private repositories)")
    print("  ✅ public_repo (for public repositories)")
    print("  ✅ user:email (for user information)")
    print("\n⚠️  Security tips:")
    print("  • Never share your token publicly")
    print("  • Set appropriate expiration dates")
    print("  • Use environment variables in production")
    print("  • Revoke tokens you no longer need")

if __name__ == "__main__":
    show_token_info()
    test_github_token()


================================================
FILE: test_files/test_with_token.py
================================================
#!/usr/bin/env python3
"""
Test with GitHub token to bypass rate limits
"""

import requests
import json

BASE_URL = "http://localhost:5000"

def login_with_token():
    """Login with GitHub token first"""
    # Replace with your actual GitHub token
    github_token = input("Enter your GitHub Personal Access Token: ").strip()
    
    if not github_token:
        print("❌ No token provided")
        return False
    
    print("🔐 Logging in with GitHub token...")
    
    url = f"{BASE_URL}/auth/github/login"
    data = {"token": github_token}
    
    response = requests.post(url, json=data)
    
    if response.status_code == 200:
        result = response.json()
        print(f"✅ Logged in as: {result['user']['login']}")
        return True
    else:
        print(f"❌ Login failed: {response.json()}")
        return False

def test_deep_analysis_with_auth():
    """Test deep analysis with authentication"""
    print("\n🔍 Testing deep analysis with authentication...")
    
    url = f"{BASE_URL}/api/repositories/deep-analyze"
    data = {
        "url": "https://github.com/Emon69420/HazMapApp",
        "max_file_size": 512 * 1024
    }
    
    # Use session to maintain login
    session = requests.Session()
    
    response = session.post(url, json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print("✅ Deep analysis successful!")
        
        if 'processing_time' in result:
            timing = result['processing_time']
            print(f"⏱️  Processing time: {timing['formatted']}")
        
        stats = result['deep_analysis']['structure']['processing_stats']
        print(f"📊 Files processed: {stats['processed']}")
        
    else:
        print(f"❌ Error: {response.json()}")

if __name__ == "__main__":
    print("🚀 Testing with GitHub Authentication")
    print("=" * 50)
    
    if login_with_token():
        test_deep_analysis_with_auth()
    else:
        print("\n💡 To get a GitHub token:")
        print("1. Go to https://github.com/settings/tokens")
        print("2. Generate new token (classic)")
        print("3. Select 'repo' scope")
        print("4. Copy the token and paste it here")


================================================
FILE: .kiro/specs/ai-project-analyzer/design.md
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x9d in position 1179: character maps to <undefined>


================================================
FILE: .kiro/specs/ai-project-analyzer/requirements.md
================================================
# Requirements Document

## Introduction

The AI Project Analyzer is a web application that enables developers to analyze GitHub repositories using AI-powered insights. The system ingests public or private repositories, creates a RAG (Retrieval-Augmented Generation) knowledge base, and provides both visual flowcharts and conversational AI interfaces for exploring codebases. The application integrates with GPT OSS via Hugging Face to deliver semantic search capabilities and intelligent code analysis.

## Requirements

### Requirement 1

**User Story:** As a developer, I want to input a GitHub repository URL and have the system analyze the entire codebase, so that I can understand the project structure and relationships.

#### Acceptance Criteria

1. WHEN a user provides a public GitHub repository URL THEN the system SHALL clone and parse the repository content
2. WHEN a user provides a private GitHub repository URL THEN the system SHALL prompt for authentication credentials (token or SSH key)
3. WHEN repository ingestion begins THEN the system SHALL display progress indicators showing parsing status
4. WHEN ingestion completes THEN the system SHALL confirm successful analysis and display available features
5. IF a repository URL is invalid or inaccessible THEN the system SHALL display clear error messages with suggested corrections

### Requirement 2

**User Story:** As a project maintainer, I want to ask natural language questions about my repository and receive AI-generated answers, so that I can quickly understand code functionality and architecture.

#### Acceptance Criteria

1. WHEN a repository has been analyzed THEN the system SHALL create a RAG knowledge base from all code files and documentation
2. WHEN a user submits a natural language question THEN the system SHALL use GPT OSS via Hugging Face to generate contextual answers
3. WHEN answering questions THEN the system SHALL reference specific files, functions, or code sections in the response
4. WHEN no relevant information is found THEN the system SHALL indicate the limitation and suggest alternative queries
5. WHEN multiple relevant code sections exist THEN the system SHALL provide comprehensive answers referencing all applicable parts

### Requirement 3

**User Story:** As a team member, I want to securely analyze private repositories without exposing sensitive credentials, so that I can maintain security while gaining insights.

#### Acceptance Criteria

1. WHEN handling private repositories THEN the system SHALL accept GitHub personal access tokens through secure input fields
2. WHEN credentials are provided THEN the system SHALL store them only in memory or secure environment variables
3. WHEN analysis completes THEN the system SHALL clear all authentication data from memory
4. WHEN invalid credentials are provided THEN the system SHALL display authentication errors without exposing credential details
5. IF SSH key authentication is used THEN the system SHALL support standard SSH key formats and secure key handling

### Requirement 4

**User Story:** As a new contributor, I want to see an interactive visual flowchart of the repository structure, so that I can understand how files and components relate to each other.

#### Acceptance Criteria

1. WHEN repository analysis completes THEN the system SHALL generate an interactive flowchart showing file and module relationships
2. WHEN a user clicks on a flowchart node THEN the system SHALL display the corresponding source code or file content
3. WHEN hovering over nodes THEN the system SHALL show AI-generated summaries of the component's purpose
4. WHEN the flowchart is complex THEN the system SHALL provide zoom, pan, and filtering capabilities
5. WHEN displaying relationships THEN the system SHALL show imports, dependencies, function calls, and class inheritance

### Requirement 5

**User Story:** As a developer, I want the analysis to stay current with repository changes, so that the insights remain accurate over time.

#### Acceptance Criteria

1. WHEN a user requests re-analysis THEN the system SHALL update the RAG knowledge base with current repository state
2. WHEN repository changes are detected THEN the system SHALL offer automatic re-analysis options
3. WHEN re-analysis occurs THEN the system SHALL preserve user session data and preferences
4. WHEN updates complete THEN the system SHALL refresh the flowchart and knowledge base automatically
5. IF webhook integration is configured THEN the system SHALL trigger re-analysis on repository push events

### Requirement 6

**User Story:** As a user, I want a clean web interface to interact with both the AI chat and visual flowchart, so that I can efficiently explore repositories.

#### Acceptance Criteria

1. WHEN accessing the application THEN the system SHALL provide a responsive web interface compatible with modern browsers
2. WHEN using the chat interface THEN the system SHALL display conversation history and allow follow-up questions
3. WHEN viewing flowcharts THEN the system SHALL provide intuitive navigation controls and clear visual hierarchy
4. WHEN switching between features THEN the system SHALL maintain context and allow seamless transitions
5. WHEN on mobile devices THEN the system SHALL adapt the interface for touch interaction and smaller screens

### Requirement 7

**User Story:** As a security-conscious user, I want all sensitive data handled according to industry standards, so that my credentials and code remain protected.

#### Acceptance Criteria

1. WHEN handling authentication THEN the system SHALL use HTTPS for all credential transmission
2. WHEN storing temporary data THEN the system SHALL encrypt sensitive information at rest
3. WHEN processing private repositories THEN the system SHALL not log or persist repository content unnecessarily
4. WHEN errors occur THEN the system SHALL not expose sensitive information in error messages or logs
5. WHEN sessions end THEN the system SHALL clear all authentication tokens and temporary repository data


================================================
FILE: .kiro/specs/ai-project-analyzer/tasks.md
================================================
# Implementation Plan

- [ ] 1. Set up project dependencies and core infrastructure





  - Install required npm packages: @octokit/rest (GitHub API), @huggingface/inference, Redis, D3.js
  - Configure environment variables for GitHub API, Hugging Face API keys
  - Create service directory structure optimized for API-only processing (no file storage)
  - _Requirements: 7.1, 7.2_

- [ ] 2. Implement GitHub authentication and repository access
- [x] 2.1 Create GitHub authentication service



  - Write GitHubAuthService class with token validation and SSH key support
  - Implement secure credential handling with in-memory storage only
  - Create unit tests for authentication flows and error handling
  - _Requirements: 1.2, 3.1, 3.2, 3.3_

- [x] 2.2 Implement repository validation and access checking




  - Code repository URL validation and accessibility verification
  - Write functions to check public/private repository permissions
  - Create unit tests for various repository access scenarios



  - _Requirements: 1.1, 1.5_

- [ ] 3. Build repository ingestion and parsing system
- [ ] 3.1 Create GitHub API streaming service
  - Implement GitHub API client with rate limiting and error handling
  - Write file streaming functions that fetch content directly from GitHub API
  - Create progress tracking for API-based repository analysis
  - _Requirements: 1.1, 1.3, 7.3_

- [ ] 3.2 Implement code structure parsing from API


  - Write AST parsers that work with streamed file content from GitHub API
  - Create dependency mapping by parsing package.json, requirements.txt via API
  - Implement repository tree analysis using GitHub's tree API endpoint
  - _Requirements: 4.5, 1.1_

- [ ] 3.3 Build repository analysis orchestrator
  - Create RepositoryService class that coordinates API streaming and parsing
  - Implement parallel file processing with GitHub API rate limit management
  - Write integration tests for complete API-based repository analysis workflow
  - _Requirements: 1.3, 1.4_

- [ ] 4. Implement AI processing and RAG system
- [ ] 4.1 Create Hugging Face GPT OSS integration
  - Write AIService class with Hugging Face API client
  - Implement error handling and retry logic for API failures
  - Create unit tests for AI service integration
  - _Requirements: 2.2, 2.4_

- [ ] 4.2 Build RAG knowledge base creation from GitHub API
  - Implement streaming document embedding generation from GitHub API responses
  - Create vector storage and indexing system that processes files as they stream
  - Write functions to intelligently chunk files during API streaming
  - _Requirements: 2.1, 2.5_

- [ ] 4.3 Implement semantic query processing
  - Create natural language query handler with context retrieval
  - Write response generation with source code references
  - Implement confidence scoring and fallback responses
  - _Requirements: 2.2, 2.3, 2.4_

- [ ] 5. Build interactive flowchart visualization system
- [ ] 5.1 Create flowchart data generation
  - Write VisualizationService to convert AST data to flowchart nodes and edges
  - Implement relationship mapping for imports, function calls, and inheritance
  - Create layout algorithms for optimal node positioning
  - _Requirements: 4.1, 4.5_

- [ ] 5.2 Implement AI-powered node summaries
  - Integrate AI service to generate component summaries for flowchart nodes
  - Create caching system for generated summaries
  - Write functions to update summaries when code changes
  - _Requirements: 4.3_

- [ ] 5.3 Build interactive flowchart features
  - Implement zoom, pan, and filtering capabilities for complex graphs
  - Create click handlers for node navigation to source code
  - Write hover functionality for displaying AI summaries
  - _Requirements: 4.2, 4.3, 4.4_

- [ ] 6. Create web API endpoints
- [ ] 6.1 Implement repository analysis endpoints
  - Create POST /api/repositories/analyze endpoint for repository submission
  - Write GET /api/repositories/:id/status for analysis progress tracking
  - Implement DELETE /api/repositories/:id for cleanup operations
  - _Requirements: 1.1, 1.3, 1.4_

- [ ] 6.2 Build AI query endpoints
  - Create POST /api/repositories/:id/query for natural language questions
  - Write GET /api/repositories/:id/summaries for component summaries
  - Implement caching middleware for frequently asked questions
  - _Requirements: 2.2, 2.3_

- [ ] 6.3 Create visualization endpoints
  - Write GET /api/repositories/:id/flowchart for flowchart data
  - Implement PUT /api/repositories/:id/flowchart for layout updates
  - Create WebSocket endpoints for real-time flowchart updates
  - _Requirements: 4.1, 4.2_

- [ ] 7. Build frontend user interface
- [ ] 7.1 Create repository input interface
  - Build React components for repository URL input and credential forms
  - Implement secure credential input with no browser storage
  - Create progress indicators and status displays for analysis
  - _Requirements: 1.1, 1.2, 1.3, 3.1, 3.2_

- [ ] 7.2 Implement AI chat interface
  - Create conversational UI components for natural language queries
  - Build chat history display with source code references
  - Implement follow-up question suggestions and context preservation
  - _Requirements: 2.2, 2.3, 6.2_

- [ ] 7.3 Build interactive flowchart viewer
  - Create React components for flowchart rendering using D3.js or similar
  - Implement navigation controls, zoom, and filtering UI
  - Build click handlers for source code navigation and summary display
  - _Requirements: 4.1, 4.2, 4.3, 4.4, 6.1_

- [ ] 8. Implement repository update and re-analysis features
- [ ] 8.1 Create manual re-analysis functionality
  - Build UI controls for triggering repository re-analysis
  - Implement incremental update detection and processing
  - Create functions to preserve user session data during updates
  - _Requirements: 5.1, 5.3_

- [ ] 8.2 Implement automatic update detection
  - Create webhook endpoint for GitHub repository change notifications
  - Write scheduled job system for periodic repository checking
  - Implement smart update triggers based on change significance
  - _Requirements: 5.2, 5.5_

- [ ] 8.3 Build update notification system
  - Create real-time notifications for completed re-analysis
  - Implement UI updates for refreshed flowcharts and knowledge base
  - Write functions to maintain user context across updates
  - _Requirements: 5.4_

- [ ] 9. Implement security and performance optimizations
- [ ] 9.1 Add comprehensive security measures
  - Implement HTTPS enforcement and secure header middleware
  - Create input validation and sanitization for all endpoints
  - Write rate limiting and authentication middleware
  - _Requirements: 7.1, 7.4, 7.5_

- [ ] 9.2 Optimize performance and caching
  - Implement Redis caching for GitHub API responses and AI-generated content
  - Create intelligent batching for GitHub API requests to maximize rate limits
  - Write memory-efficient streaming processors that don't accumulate file content
  - _Requirements: 6.4_

- [ ] 9.3 Add monitoring and error handling
  - Create comprehensive error handling with user-friendly messages
  - Implement logging system that excludes sensitive information
  - Write health check endpoints and performance monitoring
  - _Requirements: 7.4, 7.5_

- [ ] 10. Create comprehensive testing suite
- [ ] 10.1 Write unit tests for all services
  - Create test suites for RepositoryService, AIService, and VisualizationService
  - Write mock implementations for external APIs (GitHub, Hugging Face)
  - Implement test fixtures with sample repositories and expected outputs
  - _Requirements: All requirements_

- [ ] 10.2 Build integration tests
  - Create end-to-end tests for complete repository analysis workflows
  - Write API endpoint tests with authentication and error scenarios
  - Implement frontend component tests with user interaction simulation
  - _Requirements: All requirements_

- [ ] 10.3 Add performance and security tests
  - Create load tests for concurrent repository analysis
  - Write security tests for credential handling and data protection
  - Implement memory usage and cleanup validation tests
  - _Requirements: 3.3, 7.1, 7.2, 7.3, 7.4, 7.5_


================================================
FILE: .kiro/specs/gitingest-integration/design.md
================================================
# Design Document

## Overview

The Gitingest Integration replaces the complex GitHub API streaming approach in the AI Project Analyzer with gitingest, a Python tool that converts Git repositories into LLM-optimized text format. This design maintains the existing system architecture while significantly simplifying repository ingestion and improving AI analysis quality through better structured input.

## Architecture

### High-Level Architecture

The integration modifies the existing system by replacing the GitHub API streaming layer with a gitingest processing service, while maintaining all other components:

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Web Frontend  │────│   API Gateway    │────│  Auth Service   │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                    Repository Service                           │
│  ┌─────────────────┐    ┌──────────────────┐                  │
│  │ GitHub API      │────│ Gitingest        │                  │
│  │ (validation)    │    │ Processing       │                  │
│  └─────────────────┘    └──────────────────┘                  │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   AI Service    │────│   RAG System     │────│ Vector Storage  │
│ (Hugging Face)  │    │                  │    │                 │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                 Visualization Service                           │
│  ┌─────────────────┐    ┌──────────────────┐                  │
│  │ Flowchart       │────│ Interactive      │                  │
│  │ Generator       │    │ Components       │                  │
│  └─────────────────┘    └──────────────────┘                  │
└─────────────────────────────────────────────────────────────────┘
```

### Integration Points

1. **Repository Service Enhancement**: Replaces GitHub API streaming with gitingest processing
2. **RAG System Optimization**: Leverages gitingest's structured output for better chunking
3. **Visualization Improvement**: Uses gitingest's comprehensive file mapping for accurate dependency graphs
4. **Security Preservation**: Maintains existing authentication and credential handling patterns

## Components and Interfaces

### GitingestProcessor

**Purpose**: Core service that handles gitingest execution and output processing

**Key Methods**:
```python
class GitingestProcessor:
    async def process_repository(self, repo_url: str, auth_config: AuthConfig) -> GitingestOutput
    async def validate_repository(self, repo_url: str) -> ValidationResult
    def parse_gitingest_output(self, raw_output: str) -> StructuredRepository
    def cleanup_temporary_files(self, process_id: str) -> None
```

**Interfaces**:
- Input: Repository URL, authentication credentials
- Output: Structured repository representation with file hierarchy and content
- Dependencies: gitingest Python package, subprocess management, temporary file handling

### RepositoryService (Enhanced)

**Purpose**: Orchestrates repository analysis using gitingest instead of GitHub API streaming

**Key Methods**:
```python
class RepositoryService:
    async def analyze_repository(self, repo_url: str, auth_config: AuthConfig) -> AnalysisResult
    async def get_analysis_progress(self, analysis_id: str) -> ProgressStatus
    def create_rag_documents(self, structured_repo: StructuredRepository) -> List[Document]
```

**Changes from Current Design**:
- Replaces GitHub API client with GitingestProcessor
- Simplifies file streaming logic
- Improves error handling for repository access issues
- Maintains existing progress tracking and caching mechanisms

### AuthenticationService (Unchanged)

**Purpose**: Handles GitHub authentication for both public and private repositories

**Integration**: Passes credentials to gitingest through environment variables or command-line arguments securely

### RAGService (Enhanced)

**Purpose**: Creates knowledge base from gitingest's structured output

**Key Enhancements**:
```python
class RAGService:
    def chunk_gitingest_output(self, structured_repo: StructuredRepository) -> List[Chunk]
    def create_embeddings_batch(self, chunks: List[Chunk]) -> List[Embedding]
    def build_file_hierarchy_index(self, structured_repo: StructuredRepository) -> HierarchyIndex
```

**Improvements**:
- Better chunking strategy using gitingest's file boundaries
- Improved context preservation through structured file hierarchy
- Enhanced metadata extraction from gitingest's comprehensive output

## Data Models

### GitingestOutput

```python
@dataclass
class GitingestOutput:
    repository_info: RepositoryInfo
    file_tree: FileTree
    content_blocks: List[ContentBlock]
    metadata: GitingestMetadata
    processing_stats: ProcessingStats
```

### StructuredRepository

```python
@dataclass
class StructuredRepository:
    repo_url: str
    files: Dict[str, FileContent]
    dependencies: List[Dependency]
    file_hierarchy: FileHierarchy
    language_stats: LanguageStats
    gitingest_metadata: GitingestMetadata
```

### ContentBlock

```python
@dataclass
class ContentBlock:
    file_path: str
    content: str
    language: str
    line_count: int
    size_bytes: int
    file_type: FileType
```

### ProcessingConfig

```python
@dataclass
class ProcessingConfig:
    include_patterns: List[str]
    exclude_patterns: List[str]
    max_file_size: int
    respect_gitignore: bool
    include_binary_files: bool
    auth_method: AuthMethod
```

## Error Handling

### Gitingest-Specific Errors

1. **Repository Access Errors**
   - Invalid repository URLs
   - Authentication failures
   - Network connectivity issues
   - Repository not found or private access denied

2. **Processing Errors**
   - Gitingest execution failures
   - Large repository timeout handling
   - Memory limitations for massive repositories
   - Corrupted or incomplete output

3. **Integration Errors**
   - Python environment issues
   - Gitingest package version conflicts
   - Temporary file system errors
   - Output parsing failures

### Error Recovery Strategies

```python
class ErrorRecoveryService:
    async def retry_with_smaller_scope(self, repo_url: str, config: ProcessingConfig) -> GitingestOutput
    async def fallback_to_api_streaming(self, repo_url: str) -> RepositoryData
    def diagnose_gitingest_failure(self, error: Exception) -> DiagnosticReport
```

## Testing Strategy

### Unit Testing

1. **GitingestProcessor Tests**
   - Mock gitingest execution with sample outputs
   - Test various repository types and sizes
   - Validate error handling for different failure scenarios
   - Test authentication credential passing

2. **Output Parsing Tests**
   - Test parsing of gitingest output format
   - Validate file hierarchy reconstruction
   - Test content extraction and metadata handling
   - Verify language detection and statistics

### Integration Testing

1. **End-to-End Repository Processing**
   - Test complete workflow from URL input to structured output
   - Validate with both public and private repositories
   - Test different authentication methods
   - Verify cleanup of temporary files and credentials

2. **RAG System Integration**
   - Test improved chunking with gitingest output
   - Validate embedding generation from structured content
   - Test query performance improvements
   - Verify file reference accuracy in AI responses

### Performance Testing

1. **Repository Size Scaling**
   - Test with repositories of varying sizes (small, medium, large)
   - Measure processing time improvements over GitHub API approach
   - Validate memory usage patterns
   - Test concurrent repository processing

2. **Comparison Benchmarks**
   - Compare gitingest vs GitHub API streaming performance
   - Measure AI analysis quality improvements
   - Test flowchart generation accuracy
   - Validate user experience improvements

## Security Considerations

### Credential Handling

1. **Environment Variable Management**
   - Pass GitHub tokens through secure environment variables
   - Clear environment variables after gitingest execution
   - Validate credential format before passing to gitingest

2. **Temporary File Security**
   - Create temporary directories with restricted permissions
   - Encrypt temporary files containing sensitive repository content
   - Implement secure cleanup procedures for all temporary artifacts

### Repository Content Protection

1. **Memory Management**
   - Process gitingest output in streaming fashion when possible
   - Avoid keeping complete repository content in memory longer than necessary
   - Implement secure memory clearing for sensitive content

2. **Logging and Monitoring**
   - Exclude repository content from application logs
   - Log only metadata and processing statistics
   - Implement audit trails for repository access without content exposure

## Deployment Considerations

### Python Environment

1. **Dependency Management**
   - Add gitingest to requirements.txt with version pinning
   - Ensure Python environment compatibility
   - Handle potential conflicts with existing dependencies

2. **System Requirements**
   - Ensure Git is available in the deployment environment
   - Configure appropriate disk space for temporary repository processing
   - Set up proper file system permissions for temporary directories

### Configuration

1. **Environment Variables**
   ```
   GITINGEST_MAX_FILE_SIZE=10MB
   GITINGEST_TIMEOUT=300
   GITINGEST_TEMP_DIR=/tmp/gitingest
   GITINGEST_INCLUDE_PATTERNS=*.py,*.js,*.md,*.json
   GITINGEST_EXCLUDE_PATTERNS=node_modules,__pycache__,.git
   ```

2. **Runtime Configuration**
   - Configurable processing timeouts
   - Adjustable file size limits
   - Customizable include/exclude patterns
   - Flexible authentication method selection


================================================
FILE: .kiro/specs/gitingest-integration/requirements.md
================================================
# Requirements Document

## Introduction

The Gitingest Integration enhances the existing AI Project Analyzer by replacing the complex GitHub API streaming approach with gitingest, a Python tool that converts Git repositories into LLM-optimized text format. This integration will simplify repository ingestion, improve parsing accuracy, and provide better context for AI analysis while maintaining all existing security and functionality requirements.

## Requirements

### Requirement 1

**User Story:** As a developer, I want the system to use gitingest to efficiently convert any Git repository into a structured text format, so that AI analysis becomes faster and more comprehensive.

#### Acceptance Criteria

1. WHEN a user provides a repository URL THEN the system SHALL use gitingest to convert the repository into structured text format
2. WHEN gitingest processes a repository THEN the system SHALL capture the complete codebase structure including file paths, content, and metadata
3. WHEN ingestion completes THEN the system SHALL have a single text representation optimized for LLM consumption
4. WHEN processing large repositories THEN the system SHALL handle gitingest output efficiently without memory overflow
5. IF gitingest fails to process a repository THEN the system SHALL provide clear error messages and fallback options

### Requirement 2

**User Story:** As a project maintainer, I want gitingest integration to preserve all file types and relationships, so that AI analysis covers the complete project ecosystem including documentation, configuration, and code files.

#### Acceptance Criteria

1. WHEN gitingest processes a repository THEN the system SHALL include all relevant file types (code, docs, configs, tests)
2. WHEN analyzing the gitingest output THEN the system SHALL maintain file hierarchy and relationship information
3. WHEN creating the RAG knowledge base THEN the system SHALL use gitingest's structured format for better context chunking
4. WHEN generating responses THEN the system SHALL reference specific files and line numbers from the gitingest output
5. WHEN filtering files THEN the system SHALL respect gitignore rules and exclude binary/irrelevant files automatically

### Requirement 3

**User Story:** As a security-conscious user, I want gitingest integration to work with both public and private repositories while maintaining the same security standards, so that sensitive code remains protected.

#### Acceptance Criteria

1. WHEN processing private repositories THEN the system SHALL pass authentication credentials securely to gitingest
2. WHEN gitingest accesses repositories THEN the system SHALL ensure credentials are handled only in memory
3. WHEN processing completes THEN the system SHALL clear all temporary files and authentication data
4. WHEN errors occur THEN the system SHALL not expose repository content or credentials in logs
5. IF gitingest creates temporary files THEN the system SHALL clean them up immediately after processing

### Requirement 4

**User Story:** As a team member, I want gitingest integration to be faster than the current GitHub API approach, so that I can analyze repositories more efficiently.

#### Acceptance Criteria

1. WHEN comparing to GitHub API streaming THEN gitingest integration SHALL complete repository ingestion faster
2. WHEN processing repositories THEN the system SHALL show progress indicators for gitingest operations
3. WHEN gitingest runs THEN the system SHALL provide real-time status updates to users
4. WHEN analysis completes THEN the system SHALL transition seamlessly to AI processing and visualization
5. IF gitingest takes longer than expected THEN the system SHALL provide estimated completion times

### Requirement 5

**User Story:** As a developer, I want the gitingest integration to enhance the existing flowchart and AI chat features, so that I get better insights from the improved repository representation.

#### Acceptance Criteria

1. WHEN gitingest output is processed THEN the system SHALL generate more accurate dependency graphs for flowcharts
2. WHEN AI answers questions THEN the system SHALL leverage gitingest's structured format for better context retrieval
3. WHEN displaying code references THEN the system SHALL use gitingest's file path information for precise navigation
4. WHEN generating summaries THEN the system SHALL benefit from gitingest's comprehensive file inclusion
5. WHEN updating repositories THEN the system SHALL re-run gitingest to maintain current analysis

### Requirement 6

**User Story:** As a system administrator, I want gitingest integration to be configurable and maintainable, so that the system can adapt to different repository types and requirements.

#### Acceptance Criteria

1. WHEN installing the system THEN gitingest SHALL be included as a Python dependency with proper version management
2. WHEN configuring gitingest THEN the system SHALL allow customization of file inclusion/exclusion patterns
3. WHEN running gitingest THEN the system SHALL handle different Git authentication methods (HTTPS, SSH, tokens)
4. WHEN processing fails THEN the system SHALL provide detailed diagnostic information for troubleshooting
5. IF gitingest updates are available THEN the system SHALL support easy upgrades without breaking existing functionality

### Requirement 7

**User Story:** As a user, I want gitingest integration to work seamlessly with the existing web interface, so that the improved backend processing is transparent to my workflow.

#### Acceptance Criteria

1. WHEN using the repository input interface THEN the system SHALL show gitingest processing status alongside existing progress indicators
2. WHEN gitingest completes THEN the system SHALL automatically proceed to AI processing and flowchart generation
3. WHEN errors occur during gitingest processing THEN the system SHALL display user-friendly error messages
4. WHEN switching between repositories THEN the system SHALL manage gitingest operations efficiently
5. IF gitingest processing is interrupted THEN the system SHALL allow users to retry or cancel operations gracefully


================================================
FILE: .kiro/specs/gitingest-integration/tasks.md
================================================
# Implementation Plan

- [x] 1. Set up gitingest dependency and core infrastructure






  - Add gitingest to requirements.txt with version pinning
  - Create GitingestProcessor service class with basic structure
  - Set up environment configuration for gitingest processing
  - _Requirements: 6.1, 6.2_

- [ ] 2. Implement GitingestProcessor core functionality
- [ ] 2.1 Create repository processing method
  - Write async process_repository method that executes gitingest command
  - Implement secure credential passing through environment variables
  - Add subprocess management with timeout and error handling
  - _Requirements: 1.1, 3.1, 3.2_

- [ ] 2.2 Implement gitingest output parsing
  - Write parse_gitingest_output method to convert raw text to structured data
  - Create file hierarchy reconstruction from gitingest output
  - Implement content block extraction with metadata preservation
  - _Requirements: 1.2, 1.3, 2.2_

- [ ] 2.3 Add repository validation and cleanup
  - Write validate_repository method for URL and access checking
  - Implement cleanup_temporary_files for secure file management
  - Create error handling for gitingest execution failures
  - _Requirements: 1.5, 3.3, 3.4_

- [ ] 3. Enhance RepositoryService with gitingest integration
- [ ] 3.1 Replace GitHub API streaming with gitingest processing
  - Modify analyze_repository method to use GitingestProcessor
  - Update progress tracking for gitingest operations
  - Maintain existing caching and session management
  - _Requirements: 4.1, 4.3, 7.2_

- [ ] 3.2 Implement improved error handling and diagnostics
  - Create gitingest-specific error types and messages
  - Add fallback mechanisms for gitingest failures
  - Implement diagnostic reporting for troubleshooting
  - _Requirements: 1.5, 6.4, 7.3_

- [ ] 4. Optimize RAGService for gitingest output
- [ ] 4.1 Create enhanced chunking strategy
  - Write chunk_gitingest_output method using file boundaries
  - Implement improved context preservation through structured hierarchy
  - Create metadata extraction from gitingest's comprehensive output
  - _Requirements: 2.1, 2.3, 5.2_

- [ ] 4.2 Build file hierarchy indexing
  - Write build_file_hierarchy_index for better navigation
  - Implement dependency mapping from gitingest structure
  - Create enhanced embedding generation with file context
  - _Requirements: 2.2, 2.4, 5.3_

- [ ] 5. Update VisualizationService for improved flowcharts
- [ ] 5.1 Enhance dependency graph generation
  - Modify flowchart data generation to use gitingest's structured output
  - Improve relationship mapping accuracy with comprehensive file inclusion
  - Update layout algorithms for better node positioning with more complete data
  - _Requirements: 5.1, 5.4_

- [ ] 5.2 Implement better source code navigation
  - Update click handlers to use gitingest's precise file path information
  - Enhance code reference display with line number accuracy
  - Create improved hover functionality with comprehensive summaries
  - _Requirements: 5.3, 5.4_

- [ ] 6. Create gitingest-specific API endpoints
- [ ] 6.1 Add gitingest processing status endpoints
  - Create GET /api/gitingest/:id/status for processing progress
  - Write POST /api/gitingest/process for repository submission
  - Implement DELETE /api/gitingest/:id for cleanup operations
  - _Requirements: 4.2, 7.1, 7.4_

- [ ] 6.2 Update existing repository endpoints
  - Modify existing repository analysis endpoints to use gitingest
  - Update response formats to include gitingest metadata
  - Maintain backward compatibility with existing frontend
  - _Requirements: 7.2, 7.5_

- [ ] 7. Enhance frontend for gitingest integration
- [ ] 7.1 Update repository input interface
  - Add gitingest processing indicators to existing progress displays
  - Create configuration options for gitingest include/exclude patterns
  - Implement better error messaging for gitingest-specific failures
  - _Requirements: 6.2, 7.1, 7.3_

- [ ] 7.2 Improve AI chat interface with better context
  - Update chat components to leverage improved file references
  - Enhance source code navigation with gitingest's precise paths
  - Create better context display using gitingest's structured format
  - _Requirements: 5.2, 5.3, 7.2_

- [ ] 8. Implement configuration and customization features
- [ ] 8.1 Create gitingest configuration management
  - Write configuration service for include/exclude patterns
  - Implement file size limits and processing timeout settings
  - Create authentication method selection for different Git providers
  - _Requirements: 6.2, 6.3_

- [ ] 8.2 Add processing optimization controls
  - Implement configurable memory usage limits
  - Create batch processing options for multiple repositories
  - Write performance monitoring and metrics collection
  - _Requirements: 4.1, 4.4, 6.5_

- [ ] 9. Build comprehensive testing suite
- [ ] 9.1 Create GitingestProcessor unit tests
  - Write tests for repository processing with mock gitingest execution
  - Create output parsing tests with sample gitingest outputs
  - Implement error handling tests for various failure scenarios
  - _Requirements: 1.1, 1.2, 1.5_

- [ ] 9.2 Write integration tests for enhanced services
  - Create end-to-end tests for complete gitingest workflow
  - Write RAG system tests with gitingest output
  - Implement visualization tests with improved dependency graphs
  - _Requirements: 2.1, 4.1, 5.1_

- [ ] 9.3 Add performance and security tests
  - Create performance comparison tests between gitingest and GitHub API
  - Write security tests for credential handling and cleanup
  - Implement load tests for concurrent gitingest processing
  - _Requirements: 3.1, 3.2, 3.3, 4.1_

- [ ] 10. Create migration and deployment utilities
- [ ] 10.1 Build migration tools for existing repositories
  - Write scripts to re-process existing repositories with gitingest
  - Create data migration utilities for RAG knowledge base updates
  - Implement rollback mechanisms for deployment safety
  - _Requirements: 5.5, 6.5_

- [ ] 10.2 Add monitoring and maintenance features
  - Create health check endpoints for gitingest functionality
  - Implement logging and metrics for gitingest operations
  - Write maintenance scripts for cleanup and optimization
  - _Requirements: 6.4, 6.5_


================================================
FILE: .kiro/specs/self-configuring-ai-agents/requirements.md
================================================
[Empty file]


================================================
FILE: .kiro/specs/streamlit-frontend/design.md
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x90 in position 4761: character maps to <undefined>


================================================
FILE: .kiro/specs/streamlit-frontend/requirements.md
================================================
# Requirements Document

## Introduction

This feature creates a beautiful, dark-mode Streamlit frontend for the AI Project Analyzer Flask backend. The frontend will provide an intuitive interface for users to view their existing repositories and add new ones by providing GitHub repository URLs. The interface will communicate with the Flask backend to clone repositories and display analysis results.

## Requirements

### Requirement 1

**User Story:** As a user, I want to see a list of my existing repositories in a clean, organized interface, so that I can quickly browse and select repositories I've already analyzed.

#### Acceptance Criteria

1. WHEN the application loads THEN the system SHALL display all repositories from the my_repos directory
2. WHEN repositories are displayed THEN the system SHALL show repository name, description, and last modified date
3. WHEN no repositories exist THEN the system SHALL display a friendly message indicating no repositories are available
4. WHEN repositories are listed THEN the system SHALL use a dark theme with good contrast and readability

### Requirement 2

**User Story:** As a user, I want to input a GitHub repository URL and have it cloned automatically, so that I can analyze new repositories without manual setup.

#### Acceptance Criteria

1. WHEN I enter a valid GitHub repository URL THEN the system SHALL validate the URL format
2. WHEN I submit a repository URL THEN the system SHALL call the Flask backend to clone the repository
3. WHEN cloning is successful THEN the system SHALL display a success message and refresh the repository list
4. WHEN cloning fails THEN the system SHALL display a clear error message explaining what went wrong
5. WHEN cloning is in progress THEN the system SHALL show a loading indicator

### Requirement 3

**User Story:** As a user, I want the interface to have a beautiful dark mode design, so that I can work comfortably in low-light environments and have a modern user experience.

#### Acceptance Criteria

1. WHEN the application loads THEN the system SHALL use a dark color scheme as the default theme
2. WHEN displaying content THEN the system SHALL use high contrast colors for good readability
3. WHEN showing interactive elements THEN the system SHALL provide clear visual feedback on hover and click
4. WHEN displaying status messages THEN the system SHALL use appropriate colors (green for success, red for errors, blue for info)

### Requirement 4

**User Story:** As a user, I want real-time feedback on repository operations, so that I understand what's happening and can track progress.

#### Acceptance Criteria

1. WHEN a repository operation starts THEN the system SHALL display a progress indicator
2. WHEN operations complete THEN the system SHALL show success/failure notifications
3. WHEN errors occur THEN the system SHALL display detailed error messages with suggested actions
4. WHEN the repository list changes THEN the system SHALL automatically refresh the display

### Requirement 5

**User Story:** As a user, I want the interface to be responsive and intuitive, so that I can efficiently manage my repositories regardless of screen size.

#### Acceptance Criteria

1. WHEN using different screen sizes THEN the system SHALL adapt the layout appropriately
2. WHEN interacting with form elements THEN the system SHALL provide clear labels and validation feedback
3. WHEN navigating the interface THEN the system SHALL maintain consistent styling and behavior
4. WHEN performing actions THEN the system SHALL provide keyboard shortcuts where appropriate


================================================
FILE: .kiro/specs/streamlit-frontend/tasks.md
================================================
# Implementation Plan

- [x] 1. Set up Streamlit application structure and dependencies




  - Create streamlit_app.py as main entry point
  - Create requirements.txt with Streamlit, requests, and other dependencies
  - Set up basic Streamlit configuration and page setup
  - _Requirements: 3.1, 3.3_

- [ ] 2. Implement dark theme styling system
  - Create custom CSS for dark theme with specified color palette
  - Implement load_custom_css() function to inject styles
  - Style all UI components for consistent dark theme appearance
  - _Requirements: 3.1, 3.2, 3.3_

- [ ] 3. Create API client module for Flask backend communication
  - Implement get_local_repositories() function to fetch repository list
  - Create clone_repository() function to call Flask clone endpoint
  - Add validate_github_url() function for client-side URL validation
  - Implement handle_api_response() function for consistent error handling
  - _Requirements: 2.2, 2.3, 4.2, 4.3_

- [ ] 4. Build repository list display component
  - Create render_repository_list() function to display repository cards
  - Implement repository card layout with metadata display
  - Add file statistics, language breakdown, and last modified info
  - Style repository cards with hover effects and responsive design
  - _Requirements: 1.1, 1.2, 1.4, 5.3_

- [ ] 5. Implement add repository form component
  - Create render_add_repository_form() function with URL input field
  - Add optional GitHub token input with secure handling
  - Implement form validation and submission logic
  - Add clone and analyze button functionality
  - _Requirements: 2.1, 2.2, 2.4, 5.2_

- [ ] 6. Create notification and status system
  - Implement render_notifications() function for user feedback
  - Add loading indicators for repository operations
  - Create success, error, and info notification types with appropriate colors
  - Implement progress tracking for clone operations
  - _Requirements: 2.3, 2.5, 4.1, 4.2, 4.3_

- [ ] 7. Add session state management and initialization
  - Create initialize_session_state() function for app state setup
  - Implement repository caching with refresh functionality
  - Add state management for current operations and notifications
  - Handle GitHub token storage in session state securely
  - _Requirements: 4.4, 5.3_

- [ ] 8. Implement main application orchestration
  - Create main() function as application entry point
  - Add render_header() function for app title and navigation
  - Integrate all components into cohesive user interface
  - Implement auto-refresh functionality for repository list
  - _Requirements: 1.3, 1.4, 4.4, 5.1_

- [ ] 9. Add error handling and user feedback systems
  - Implement comprehensive error handling for API failures
  - Add user-friendly error messages with suggested actions
  - Create timeout handling for long-running operations
  - Add validation feedback for form inputs
  - _Requirements: 2.4, 4.2, 4.3, 5.2_

- [ ] 10. Create responsive layout and mobile optimization
  - Implement responsive design for different screen sizes
  - Add mobile-friendly touch interactions
  - Optimize layout for tablet and desktop viewing
  - Test and adjust component spacing and sizing
  - _Requirements: 5.1, 5.3_

- [ ] 11. Add repository statistics and metadata display
  - Implement detailed file type breakdown visualization
  - Create language percentage display with color coding
  - Add repository size formatting and display
  - Show clone timestamp and source URL information
  - _Requirements: 1.2, 1.4_

- [ ] 12. Implement real-time operation feedback
  - Add progress bars for clone operations
  - Create real-time status updates during repository processing
  - Implement operation cancellation if supported by backend
  - Add estimated time remaining for long operations
  - _Requirements: 4.1, 4.4_

- [ ] 13. Create comprehensive testing suite
  - Write unit tests for API client functions
  - Create integration tests for Flask backend communication
  - Add UI component testing with mock data
  - Implement error scenario testing and validation
  - _Requirements: All requirements validation_

- [ ] 14. Add final polish and optimization
  - Optimize performance for large repository lists
  - Add keyboard shortcuts for common actions
  - Implement caching for improved responsiveness
  - Add final styling touches and animations
  - _Requirements: 5.1, 5.3, 5.4_

