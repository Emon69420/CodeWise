Directory structure:
└── urvashixo-land_registry/
    ├── README.md
    ├── app.py
    ├── requirements.txt
    ├── truffle-config.js
    ├── contracts/
    │   ├── LandRegistry.sol
    │   └── .gitkeep
    ├── migrations/
    │   ├── 2_deploy_landregistry.js
    │   └── .gitkeep
    ├── static/
    │   ├── script.js
    │   └── styles.css
    ├── templates/
    │   ├── base.html
    │   ├── chatbot.html
    │   ├── dashboard.html
    │   ├── digital_identity.html
    │   ├── documents.html
    │   ├── index.html
    │   ├── land_registry.html
    │   ├── login.html
    │   ├── profile.html
    │   ├── register.html
    │   ├── settings.html
    │   ├── test_db.html
    │   └── transactions.html
    └── test/
        └── .gitkeep

================================================
FILE: README.md
================================================
# SwaBhoomi (स्वभूमि)

A modern, responsive web UI for a blockchain-based land registry platform that combines Blockchain and Self-Sovereign Identity (SSI) technologies to revolutionize land ownership in India.

## Features

- Clean, modern, and responsive design
- Secure login system with form validation
- Social login integration (Google & MetaMask)
- Feature-rich dashboard
- Mobile-first approach
- Smooth animations and transitions
- Semantic HTML5 markup
- CSS3 with modern features (CSS Variables, Flexbox, Grid)
- Vanilla JavaScript with modern ES6+ features

## Project Structure

```
swabhoomi/
├── index.html          # Login page
├── home.html           # Dashboard/Homepage
├── styles.css          # Main stylesheet
├── script.js           # JavaScript functionality
└── README.md          # Project documentation
```

## Setup and Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/swabhoomi.git
```

2. Navigate to the project directory:
```bash
cd swabhoomi
```

3. Open `index.html` in your web browser to view the login page.

## Usage

1. Open the login page (`index.html`)
2. Enter your credentials or use social login
3. After successful login, you'll be redirected to the dashboard
4. Explore the various features and sections of the platform

## Browser Support

- Chrome (latest)
- Firefox (latest)
- Safari (latest)
- Edge (latest)
- Opera (latest)

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Team

- Team Bhen Code

## Acknowledgments

- Inspired by the need for transparent and secure land registry systems
- Built with modern web technologies
- Special thanks to all contributors and supporters 



================================================
FILE: app.py
================================================
from flask import Flask, render_template, redirect, url_for, session, flash, request, jsonify
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, TextAreaField
from wtforms.validators import DataRequired, Email, ValidationError
import bcrypt
import MySQLdb
import MySQLdb.cursors
import uuid
import json
import jwt as PyJWT
from datetime import datetime, timedelta
import secrets

app = Flask(__name__)

# Configure MySQL
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': 'admin',
    'db': 'swabhoomi',
    'cursorclass': MySQLdb.cursors.DictCursor
}

app.secret_key = 'your_secret_key_here'

def get_db():
    """Get database connection"""
    try:
        connection = MySQLdb.connect(**DB_CONFIG)
        return connection
    except Exception as e:
        print(f"Database connection error: {e}")
        return None

# Initialize database
def init_db():
    try:
        # First connect without database
        conn = MySQLdb.connect(
            host=DB_CONFIG['host'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password']
        )
        cursor = conn.cursor()
        
        # Create database
        cursor.execute("CREATE DATABASE IF NOT EXISTS swabhoomi")
        cursor.execute("USE swabhoomi")
        
        # Create users table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                did VARCHAR(255) UNIQUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Check if did column exists and add it if it doesn't
        cursor.execute("SHOW COLUMNS FROM users LIKE 'did'")
        if not cursor.fetchone():
            cursor.execute("ALTER TABLE users ADD COLUMN did VARCHAR(255) UNIQUE")
        
        # Create addresses table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS addresses (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                address_type VARCHAR(50) NOT NULL,
                street_address TEXT NOT NULL,
                city VARCHAR(100) NOT NULL,
                state VARCHAR(100) NOT NULL,
                postal_code VARCHAR(20) NOT NULL,
                country VARCHAR(100) NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)
        
        # Create properties table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS properties (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                location VARCHAR(255) NOT NULL,
                area DECIMAL(10,2) NOT NULL,
                status ENUM('pending', 'verified', 'rejected') DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)
        
        # Create verifiable_credentials table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS verifiable_credentials (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                type VARCHAR(100) NOT NULL,
                credential_data JSON NOT NULL,
                status ENUM('active', 'revoked') DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """)
        
        conn.commit()
        cursor.close()
        conn.close()
        print("Database initialized successfully!")
        return True
    except Exception as e:
        print(f"Error initializing database: {str(e)}")
        return False

# Initialize database on startup
init_db()

class RegisterForm(FlaskForm):
    first_name = StringField("First Name", validators=[DataRequired()])
    last_name = StringField("Last Name", validators=[DataRequired()])
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    confirm_password = PasswordField("Confirm Password", validators=[DataRequired()])
    street = TextAreaField("Street Address", validators=[DataRequired()])
    city = StringField("City", validators=[DataRequired()])
    state = StringField("State", validators=[DataRequired()])
    country = StringField("Country", validators=[DataRequired()])
    pincode = StringField("Pincode", validators=[DataRequired()])
    submit = SubmitField("Register")

    def validate_email(self, field):
        try:
            conn = get_db()
            if conn:
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users WHERE email=%s", (field.data,))
                user = cursor.fetchone()
                cursor.close()
                conn.close()
                if user:
                    raise ValidationError('Email already registered. Please choose a different one.')
        except Exception as e:
            print(f"Database error in validate_email: {e}")
            raise ValidationError('Unable to validate email. Please try again.')

class LoginForm(FlaskForm):
    email=StringField("Email", validators=[DataRequired(), Email()])
    password=PasswordField("Password", validators=[DataRequired()])
    submit=SubmitField("Login")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        try:
            conn = get_db()
            if not conn:
                flash('Database connection error. Please try again later.', 'error')
                return render_template('register.html', form=form)

            cursor = conn.cursor()

            # Check if passwords match
            if form.password.data != form.confirm_password.data:
                flash('Passwords do not match.', 'error')
                return render_template('register.html', form=form)

            first_name = form.first_name.data
            last_name = form.last_name.data
            email = form.email.data
            password = form.password.data
            street = form.street.data
            city = form.city.data
            state = form.state.data
            country = form.country.data
            pincode = form.pincode.data

            # Check if email already exists
            cursor.execute("SELECT * FROM users WHERE email = %s", (email,))
            existing_user = cursor.fetchone()
            if existing_user:
                cursor.close()
                conn.close()
                flash('Email already registered. Please choose a different one.', 'error')
                return render_template('register.html', form=form)

            # Hash password
            hash_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

            # Store user data
            cursor.execute("""
                INSERT INTO users (name, email, password) 
                VALUES (%s, %s, %s)
            """, (f"{first_name} {last_name}", email, hash_password))
            conn.commit()
            user_id = cursor.lastrowid

            # Store address data
            cursor.execute("""
                INSERT INTO addresses (user_id, address_type, street_address, city, state, postal_code, country) 
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (user_id, 'PRIMARY', street, city, state, pincode, country))
            conn.commit()
            
            cursor.close()
            conn.close()
            flash('Registration successful! Please login.', 'success')
            return redirect('/login')

        except Exception as e:
            print(f"Registration error: {e}")
            flash('An error occurred during registration. Please try again.', 'error')
            return render_template('register.html', form=form)
    
    return render_template('register.html', form=form)

def generate_did():
    """Generate a unique DID for a user"""
    # Generate a unique identifier
    unique_id = str(uuid.uuid4())
    # Create a DID in the format: did:swabhoomi:unique_id
    did = f"did:swabhoomi:{unique_id}"
    return did

def generate_verifiable_credential(user_data):
    """Generate a verifiable credential for the user"""
    # Create a credential ID
    credential_id = f"vc:{uuid.uuid4()}"
    
    # Create the credential
    credential = {
        "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://www.w3.org/2018/credentials/identity/v1"
        ],
        "id": credential_id,
        "type": ["VerifiableCredential", "IdentityCredential"],
        "issuer": "did:swabhoomi:issuer",
        "issuanceDate": datetime.utcnow().isoformat(),
        "credentialSubject": {
            "id": user_data['did'],
            "type": "Person",
            "name": user_data['name'],
            "email": user_data['email']
        }
    }
    
    # Sign the credential (in a real implementation, this would use proper cryptographic signing)
    signed_credential = PyJWT.encode(
        credential,
        app.secret_key,
        algorithm='HS256'
    )
    
    return signed_credential

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        email = form.email.data
        password = form.password.data
        
        connection = get_db()
        if connection:
            cursor = connection.cursor()
            cursor.execute('SELECT * FROM users WHERE email = %s', (email,))
            user = cursor.fetchone()
            cursor.close()
            connection.close()
            
            if user and bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
                session['user_id'] = user['id']
                session['email'] = user['email']
                
                # Generate DID if user doesn't have one or if did is None
                if 'did' not in user or not user['did']:
                    did = generate_did()
                    connection = get_db()
                    if connection:
                        cursor = connection.cursor()
                        cursor.execute('UPDATE users SET did = %s WHERE id = %s', (did, user['id']))
                        connection.commit()
                        cursor.close()
                        connection.close()
                        
                        # Generate verifiable credential
                        user_data = {
                            'did': did,
                            'name': user['name'],
                            'email': user['email']
                        }
                        vc = generate_verifiable_credential(user_data)
                        
                        # Store the credential
                        connection = get_db()
                        if connection:
                            cursor = connection.cursor()
                            cursor.execute(
                                'INSERT INTO verifiable_credentials (user_id, credential_type, credential_data) VALUES (%s, %s, %s)',
                                (user['id'], 'identity', vc)
                            )
                            connection.commit()
                            cursor.close()
                            connection.close()
                
                flash('Login successful!', 'success')
                return redirect(url_for('dashboard'))
            else:
                flash('Invalid email or password', 'error')
    
    return render_template('login.html', form=form)

@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')

    try:
        conn = get_db()
        if not conn:
            flash('Database connection error. Please try again later.')
            return redirect('/login')

        user_id = session.get('user_id')
        cursor = conn.cursor()
        
        # Get user data
        cursor.execute("SELECT * FROM users WHERE id=%s", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            session.pop('user_id', None)
            flash('User not found. Please login again.')
            return redirect('/login')
        
        # Get property counts
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN status = 'verified' THEN 1 ELSE 0 END) as verified,
                SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
                SUM(CASE WHEN status = 'rejected' THEN 1 ELSE 0 END) as rejected
            FROM properties 
            WHERE user_id = %s
        """, (user_id,))
        counts = cursor.fetchone()
        
        # Get recent properties
        cursor.execute("""
            SELECT * FROM properties 
            WHERE user_id = %s 
            ORDER BY created_at DESC 
            LIMIT 5
        """, (user_id,))
        recent_properties = cursor.fetchall()
        
        # Get verifiable credentials
        cursor.execute("""
            SELECT * FROM verifiable_credentials 
            WHERE user_id = %s AND status = 'active'
        """, (user_id,))
        verifiable_credentials = cursor.fetchall()
        
        cursor.close()
        conn.close()

        return render_template('dashboard.html',
            current_user=user,
            land_count=counts['total'] or 0,
            verified_count=counts['verified'] or 0,
            pending_count=counts['pending'] or 0,
            issues_count=counts['rejected'] or 0,
            recent_properties=recent_properties,
            verifiable_credentials=verifiable_credentials
        )
        
    except Exception as e:
        print(f"Dashboard error: {e}")
        flash('An error occurred. Please try again.')
        return redirect('/login')

@app.route('/profile')
def profile():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')

    try:
        conn = get_db()
        if not conn:
            flash('Database connection error. Please try again later.')
            return redirect('/login')

        user_id = session.get('user_id')
        
        cursor = conn.cursor()
        cursor.execute("""
            SELECT u.*, a.* 
            FROM users u 
            LEFT JOIN addresses a ON u.id = a.user_id 
            WHERE u.id=%s
        """, (user_id,))
        user_data = cursor.fetchone()
        cursor.close()
        conn.close()

        if user_data:
            return render_template('profile.html', user_data=user_data)
        
        session.pop('user_id', None)
        flash('User not found. Please login again.')
        return redirect('/login')
    except Exception as e:
        print(f"Profile error: {e}")
        flash('An error occurred. Please try again.')
        return redirect('/login')

@app.route('/digital-identity')
def digital_identity():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')
    
    # Get user's DID
    connection = get_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute('SELECT did FROM users WHERE id = %s', (session['user_id'],))
        user = cursor.fetchone()
        
        # Get verifiable credentials
        cursor.execute('SELECT * FROM verifiable_credentials WHERE user_id = %s', (session['user_id'],))
        credentials = cursor.fetchall()
        
        cursor.close()
        connection.close()
        
        return render_template('digital_identity.html', 
                             user=user,
                             credentials=credentials)
    
    flash('Database connection error. Please try again.')
    return redirect('/dashboard')

@app.route('/land-registry')
def land_registry():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')
    return render_template('land_registry.html')

@app.route('/transactions')
def transactions():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')
    return render_template('transactions.html')

@app.route('/documents')
def documents():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')
    return render_template('documents.html')

@app.route('/settings')
def settings():
    if 'user_id' not in session:
        flash('Please login first.')
        return redirect('/login')
    return render_template('settings.html')

@app.route('/logout')
def logout():
    session.clear()  # Clear all session data
    flash('You have been successfully logged out.', 'success')
    return redirect('/')  # Redirect to index page instead of login

@app.route('/test-db')
def test_db():
    try:
        conn = get_db()
        if not conn:
            return "Database connection failed"
        
        cursor = conn.cursor()
        
        # Check if tables exist
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        
        # Get table structures
        table_info = {}
        for table in tables:
            table_name = table['Tables_in_swabhoomi']
            cursor.execute(f"DESCRIBE {table_name}")
            table_info[table_name] = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        return render_template('test_db.html', tables=tables, table_info=table_info)
    except Exception as e:
        return f"Error: {str(e)}"

def login_required(f):
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)


================================================
FILE: requirements.txt
================================================
Flask==2.0.1
Flask-WTF==0.15.1
mysqlclient==2.0.3
bcrypt==3.2.0
Werkzeug==2.0.1
email_validator==1.1.3
Flask-Login==0.5.0
didkit==0.1.0
PyJWT==2.6.0
cryptography==41.0.1 


================================================
FILE: truffle-config.js
================================================
module.exports = {
  networks: {
    development: {
      host: "127.0.0.1",     // Ganache local host
      port: 8545,            // Ganache default port
      network_id: "*",       // Match any network id
    },
  },

  compilers: {
    solc: {
      version: "0.8.20"
    }
  }
};



================================================
FILE: contracts/LandRegistry.sol
================================================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract LandRegistry {
    struct Land {
        string ownerName;
        string location;
        uint area;
        address ownerAddress;
    }

    uint public landCount = 0;
    mapping(uint => Land) public lands;

    event LandRegistered(uint id, address indexed owner);

    function registerLand(string memory _ownerName, string memory _location, uint _area) public {
        landCount++;
        lands[landCount] = Land(_ownerName, _location, _area, msg.sender);
        emit LandRegistered(landCount, msg.sender);
    }

    function getLand(uint _id) public view returns (string memory, string memory, uint, address) {
        require(_id > 0 && _id <= landCount, "Land ID invalid");
        Land memory land = lands[_id];
        return (land.ownerName, land.location, land.area, land.ownerAddress);
    }

    function isOwner(uint _id) public view returns (bool) {
        require(_id > 0 && _id <= landCount, "Invalid land ID");
        return lands[_id].ownerAddress == msg.sender;
    }
}



================================================
FILE: contracts/.gitkeep
================================================
[Empty file]


================================================
FILE: migrations/2_deploy_landregistry.js
================================================
const LandRegistry = artifacts.require("LandRegistry");

module.exports = function (deployer) {
    deployer.deploy(LandRegistry);
};



================================================
FILE: migrations/.gitkeep
================================================
[Empty file]


================================================
FILE: static/script.js
================================================
document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('loginForm');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const emailError = document.getElementById('emailError');
    const passwordError = document.getElementById('passwordError');
    const loginButton = document.querySelector('.login-button');
    const buttonText = document.querySelector('.button-text');
    const spinner = document.querySelector('.spinner');

    // Form validation
    function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    function validatePassword(password) {
        return password.length >= 6;
    }

    function showError(element, message) {
        element.textContent = message;
        element.style.display = 'block';
    }

    function hideError(element) {
        element.textContent = '';
        element.style.display = 'none';
    }

    function showLoading() {
        buttonText.classList.add('hidden');
        spinner.classList.remove('hidden');
        loginButton.disabled = true;
    }

    function hideLoading() {
        buttonText.classList.remove('hidden');
        spinner.classList.add('hidden');
        loginButton.disabled = false;
    }

    // Input validation
    emailInput.addEventListener('input', () => {
        if (!validateEmail(emailInput.value)) {
            showError(emailError, 'Please enter a valid email address');
        } else {
            hideError(emailError);
        }
    });

    passwordInput.addEventListener('input', () => {
        if (!validatePassword(passwordInput.value)) {
            showError(passwordError, 'Password must be at least 6 characters long');
        } else {
            hideError(passwordError);
        }
    });

    // Form submission
    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Reset error messages
        hideError(emailError);
        hideError(passwordError);

        // Validate inputs
        let isValid = true;

        if (!validateEmail(emailInput.value)) {
            showError(emailError, 'Please enter a valid email address');
            isValid = false;
        }

        if (!validatePassword(passwordInput.value)) {
            showError(passwordError, 'Password must be at least 6 characters long');
            isValid = false;
        }

        if (!isValid) return;

        // Show loading state
        showLoading();

        try {
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1500));

            // Redirect to home page on successful login
            window.location.href = 'home.html';
        } catch (error) {
            // Handle login error
            showError(emailError, 'Invalid email or password');
            hideLoading();
        }
    });

    // Social login buttons
    const googleButton = document.querySelector('.social-button.google');
    const metamaskButton = document.querySelector('.social-button.metamask');

    googleButton.addEventListener('click', () => {
        // Implement Google login
        console.log('Google login clicked');
    });

    metamaskButton.addEventListener('click', () => {
        // Implement MetaMask login
        console.log('MetaMask login clicked');
    });

    // Mobile Menu Toggle
    const mobileMenuBtn = document.querySelector('.mobile-menu');
    const navLinks = document.querySelector('.nav-links');
    const body = document.body;

    mobileMenuBtn.addEventListener('click', () => {
        navLinks.classList.toggle('active');
        mobileMenuBtn.classList.toggle('active');
        body.classList.toggle('menu-open');
    });

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
        if (!navLinks.contains(e.target) && !mobileMenuBtn.contains(e.target)) {
            navLinks.classList.remove('active');
            mobileMenuBtn.classList.remove('active');
            body.classList.remove('menu-open');
        }
    });

    // Smooth Scroll with Offset
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const headerOffset = 80;
                const elementPosition = target.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Intersection Observer for Animations
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    // Observe all animated elements
    document.querySelectorAll('.feature-card, .choose-item, .step, .use-case-card, .tech-card, .info-item, .contact-form').forEach(element => {
        observer.observe(element);
    });

    // Parallax Effect for Hero Section
    const hero = document.querySelector('.hero');
    if (hero) {
        window.addEventListener('scroll', () => {
            const scrolled = window.pageYOffset;
            hero.style.backgroundPositionY = -(scrolled * 0.5) + 'px';
        });
    }

    // Form Validation with Enhanced Feedback
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const submitButton = form.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;

            // Show loading state
            submitButton.classList.add('loading');
            submitButton.disabled = true;

            // Simulate form submission
            setTimeout(() => {
                submitButton.classList.remove('loading');
                submitButton.disabled = false;
                submitButton.textContent = 'Success!';
                
                // Reset button text after 2 seconds
                setTimeout(() => {
                    submitButton.textContent = originalText;
                }, 2000);
            }, 1500);
        });
    });

    // Enhanced Hover Effects
    const cards = document.querySelectorAll('.feature-card, .choose-item, .step, .use-case-card, .tech-card');
    cards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.style.transform = 'translateY(-10px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', () => {
            card.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Dynamic Header Background
    const header = document.querySelector('.header');
    window.addEventListener('scroll', () => {
        if (window.scrollY > 50) {
            header.style.background = 'rgba(255, 255, 255, 0.95)';
            header.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
        } else {
            header.style.background = 'transparent';
            header.style.boxShadow = 'none';
        }
    });

    // Theme Toggle Functionality
    const themeToggle = document.querySelector('.theme-toggle');
    const themeIcon = themeToggle.querySelector('i');
    
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);

    themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
    });

    function updateThemeIcon(theme) {
        themeIcon.className = theme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
    }

    // Add animation class to elements when they come into view
    const animateOnScroll = () => {
        const elements = document.querySelectorAll('.feature-card, .about-content');
        elements.forEach(element => {
            const elementTop = element.getBoundingClientRect().top;
            const elementBottom = element.getBoundingClientRect().bottom;
            
            if (elementTop < window.innerHeight && elementBottom > 0) {
                element.classList.add('visible');
            }
        });
    };

    // Initial check
    animateOnScroll();

    // Check on scroll
    window.addEventListener('scroll', animateOnScroll);

    // Handle CTA button click
    const ctaButton = document.querySelector('.cta-button');
    ctaButton.addEventListener('click', () => {
        // Add your desired action here
        console.log('Get Started button clicked');
        // Example: Redirect to registration page
        // window.location.href = '/register';
    });
}); 


================================================
FILE: static/styles.css
================================================
/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

:root {
    --primary-color: #2c3e50;
    --secondary-color: #3498db;
    --accent-color: #e74c3c;
    --text-color: #333;
    --light-bg: #f8f9fa;
    --white: #ffffff;
    --shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    --border-radius: 12px;
    --card-padding: 2rem;
    --hover-transform: translateY(-5px);
    --transition-speed: 0.3s;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--text-color);
}

/* Header Styles */
.header {
    background-color: var(--white);
    box-shadow: var(--shadow);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.logo-img {
    height: 80px;
    width: auto;
    object-fit: contain;
}

.logo h1 {
    font-size: 1.8rem;
    color: var(--primary-color);
    margin: 0;
}

.hindi {
    font-family: 'Noto Sans', sans-serif;
}

.nav-links {
    display: flex;
    gap: 2rem;
}

.nav-links a {
    text-decoration: none;
    color: var(--text-color);
    font-weight: 500;
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 1rem;
}

.nav-links a::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 2px;
    background: var(--secondary-color);
    transition: all 0.3s ease;
    transform: translateX(-50%);
}

.nav-links a:hover::after {
    width: 100%;
}

.logout-btn {
    color: var(--accent-color) !important;
}

.mobile-menu {
    display: none;
    cursor: pointer;
    padding: 1rem;
    transition: all 0.3s ease;
}

.mobile-menu:hover {
    transform: scale(1.1);
}

/* Google Translate Styling */
#google_translate_element {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    background-color: var(--white);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    box-shadow: var(--shadow);
    font-family: inherit;
  }
  
  /* Hide default Google Translate banner */
  .goog-te-banner-frame.skiptranslate,
  body > .goog-te-banner-frame {
    display: none !important;
  }
  body {
    top: 0px !important;
  }
  
  /* Optional: Clean up the dropdown appearance */
  .goog-te-gadget {
    font-size: 0.9rem;
    color: var(--text-color);
  }
  
  
/* Hero Section */
.hero {
    background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url('https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80');
    background-size: cover;
    background-position: center;
    color: white;
    text-align: center;
    padding: 120px 20px;
}

.hero-content {
    max-width: 800px;
    margin: 0 auto;
    animation: fadeInUp 1s ease-out;
}

.hero-content h1 {
    font-size: 3.5rem;
    margin-bottom: 20px;
    font-weight: 700;
}

.hero-content p {
    font-size: 1.5rem;
    margin-bottom: 40px;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
}

.hero-buttons {
    display: flex;
    gap: 20px;
    justify-content: center;
}

.cta-button {
    position: relative;
    overflow: hidden;
    padding: 1rem 2rem;
    border-radius: 50px;
    font-weight: 600;
    letter-spacing: 1px;
    text-transform: uppercase;
    transition: all 0.3s ease;
}

.cta-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.6s ease, height 0.6s ease;
}

.cta-button:hover::after {
    width: 300px;
    height: 300px;
}

.cta-button.primary {
    background: linear-gradient(45deg, var(--secondary-color), #2980b9);
    color: white;
    border: none;
}

.cta-button.secondary {
    background: transparent;
    color: white;
    border: 2px solid white;
}

.cta-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
}

/* Features Section */
.features {
    padding: 5rem 2rem;
    background-color: var(--light-bg);
}

.features h2 {
    text-align: center;
    margin-bottom: 3rem;
    color: var(--primary-color);
}

.feature-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.feature-card {
    background: var(--white);
    padding: 2rem;
    border-radius: 10px;
    text-align: center;
    box-shadow: var(--shadow);
    transition: transform 0.3s ease;
    animation: scaleIn 0.5s ease-out forwards;
}

.feature-card:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.feature-card i {
    font-size: 2.5rem;
    color: var(--secondary-color);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.feature-card:hover i {
    transform: scale(1.1);
    color: var(--accent-color);
}

.feature-card h3 {
    margin-bottom: 1rem;
    color: var(--primary-color);
}

/* About Section */
.about {
    padding: 5rem 2rem;
    background-color: var(--white);
}

.about-content {
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
}

.about h2 {
    color: var(--primary-color);
    margin-bottom: 2rem;
}

/* Footer */
.footer {
    background: linear-gradient(45deg, var(--primary-color), #1a1a1a);
    color: var(--white);
    padding: 4rem 2rem 2rem;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
}

.footer-section h3 {
    margin-bottom: 1rem;
}

.footer-section a {
    color: var(--white);
    text-decoration: none;
    display: block;
    margin-bottom: 0.5rem;
    position: relative;
    padding-left: 1.5rem;
    transition: all 0.3s ease;
}

.footer-section a::before {
    content: 'â†’';
    position: absolute;
    left: 0;
    opacity: 0;
    transition: all 0.3s ease;
}

.footer-section a:hover {
    padding-left: 2rem;
}

.footer-section a:hover::before {
    opacity: 1;
}

.footer-bottom {
    text-align: center;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

/* Responsive Design */
@media (max-width: 768px) {
    .nav-links {
        position: fixed;
        top: 0;
        right: -100%;
        width: 80%;
        height: 100vh;
        background: var(--white);
        flex-direction: column;
        padding: 2rem;
        transition: right 0.3s ease;
    }

    .nav-links.active {
        right: 0;
    }

    .mobile-menu {
        display: block;
    }

    .hero-content h1 {
        font-size: 2.5rem;
    }

    .hero-content p {
        font-size: 1.2rem;
    }

    .hero-buttons {
        flex-direction: column;
        gap: 15px;
    }

    .feature-cards {
        grid-template-columns: 1fr;
    }
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes scaleIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateX(-30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Contact Section */
.contact-section {
    padding: 8rem 2rem;
    background-color: #f9f9f9;
    position: relative;
}

.contact-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('https://www.transparenttextures.com/patterns/coffee.png');
    opacity: 0.05;
    pointer-events: none;
}

.contact-section h2 {
    text-align: center;
    font-family: 'Playfair Display', serif;
    font-size: 3rem;
    margin-bottom: 4rem;
    color: #2c1810;
    position: relative;
    display: inline-block;
}

.contact-section h2::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 3px;
    background-color: #c0392b;
}

.contact-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 4rem;
    max-width: 1200px;
    margin: 0 auto;
}

.contact-info {
    display: flex;
    flex-direction: column;
    gap: 2.5rem;
}

.info-item {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    padding: 1.5rem;
    background: white;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
    animation: slideIn 0.5s ease-out forwards;
}

.info-item:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.info-item i {
    font-size: 2rem;
    color: #c0392b;
    background: rgba(192, 57, 43, 0.1);
    padding: 1rem;
    border-radius: 50%;
    transition: all 0.3s ease;
}

.info-item:hover i {
    transform: scale(1.1);
    color: var(--accent-color);
}

.contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    background: white;
    padding: 2.5rem;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    animation: slideIn 0.5s ease-out forwards;
}

.contact-form input,
.contact-form textarea {
    width: 100%;
    padding: 1rem;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-radius: var(--border-radius);
    background: var(--white);
    transition: all 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    outline: none;
}

.contact-form textarea {
    height: 150px;
    resize: vertical;
}

.contact-form button {
    background: linear-gradient(45deg, var(--secondary-color), #2980b9);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: var(--border-radius);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.contact-form button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
}

/* Why Choose Us Section */
.why-choose-us-section {
    padding: 5rem 2rem;
    background-color: var(--white); /* Matches the about section */
}

.why-choose-us-section h2 {
    color: var(--primary-color);
    text-align: center;
    margin-bottom: 2rem;
}

.choose-grid {
    max-width: 1100px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    padding-top: 1rem;
}

.choose-item {
    background-color: var(--light-gray, #f9f9f9); /* Add light background if needed */
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease;
    text-align: center;
    animation: slideIn 0.5s ease-out forwards;
}

.choose-item:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.choose-item i {
    font-size: 2.5rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.choose-item:hover i {
    transform: scale(1.1);
    color: var(--accent-color);
}

.choose-item h3 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
    color: var(--heading-color, #333);
}

.choose-item p {
    font-size: 0.95rem;
    color: var(--text-color, #555);
}

/* Section Content Wrapper */
.section-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    text-align: center;
}

/* Use Cases Section */
.use-cases {
    padding: 5rem 0;
    background-color: var(--light-bg);
}

.use-cases h2 {
    color: var(--primary-color);
    margin-bottom: 3rem;
    font-size: 2.5rem;
}

.use-cases-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.use-case-card {
    background: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    text-align: center;
    box-shadow: var(--shadow);
    transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
}

.use-case-card:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.use-case-card i {
    font-size: 2.5rem;
    color: var(--secondary-color);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.use-case-card:hover i {
    transform: scale(1.1);
    color: var(--accent-color);
}

/* How It Works Section */
.how-it-works {
    padding: 5rem 0;
    background-color: var(--white);
}

.how-it-works h2 {
    color: var(--primary-color);
    margin-bottom: 3rem;
    font-size: 2.5rem;
}

.steps-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.step {
    background: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    text-align: center;
    box-shadow: var(--shadow);
    position: relative;
    transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
}

.step:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.step-number {
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 40px;
    background: var(--secondary-color);
    color: var(--white);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.step i {
    font-size: 2.5rem;
    color: var(--secondary-color);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.step:hover i {
    transform: scale(1.1);
    color: var(--accent-color);
}

/* Technology Stack Section */
.tech-stack {
    padding: 80px 20px;
    background-color: #f9f9f9;
}

.tech-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 30px;
    max-width: 1200px;
    margin: 40px auto;
}

.tech-card {
    text-align: center;
    padding: 30px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    animation: slideIn 0.5s ease-out forwards;
}

.tech-card:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.tech-card img {
    max-width: 100px;
    height: auto;
    margin-bottom: 20px;
}

/* Enhanced Scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: var(--light-bg);
}

::-webkit-scrollbar-thumb {
    background: var(--secondary-color);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #2980b9;
}

/* Loading Animation */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.loading {
    animation: pulse 1.5s infinite;
}

/* Testimonials Section */
.testimonials {
    padding: 5rem 0;
    background-color: var(--light-bg);
}

.testimonials h2 {
    color: var(--primary-color);
    margin-bottom: 3rem;
    font-size: 2.5rem;
}

.testimonials-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.testimonial-card {
    background: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
}

.testimonial-card:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.testimonial-content {
    position: relative;
    margin-bottom: 2rem;
}

.testimonial-content i {
    color: var(--secondary-color);
    font-size: 2rem;
    margin-bottom: 1rem;
    opacity: 0.3;
}

.testimonial-content p {
    font-style: italic;
    color: var(--text-color);
    line-height: 1.6;
}

.testimonial-author {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.testimonial-author img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    object-fit: cover;
}

.author-info h4 {
    color: var(--primary-color);
    margin-bottom: 0.25rem;
}

.author-info p {
    color: var(--text-color);
    font-size: 0.9rem;
    opacity: 0.8;
}

/* Enhanced Contact Section */
.contact-section {
    padding: 5rem 0;
    background-color: var(--white);
}

.contact-section h2 {
    color: var(--primary-color);
    margin-bottom: 3rem;
    font-size: 2.5rem;
}

.contact-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 3rem;
    max-width: 1200px;
    margin: 0 auto;
}

.contact-info {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.info-item {
    display: flex;
    align-items: flex-start;
    gap: 1.5rem;
    padding: 1.5rem;
    background: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
}

.info-item:hover {
    transform: var(--hover-transform);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.info-item i {
    font-size: 1.5rem;
    color: var(--secondary-color);
    background: rgba(52, 152, 219, 0.1);
    padding: 1rem;
    border-radius: 50%;
    transition: all 0.3s ease;
}

.info-item:hover i {
    transform: scale(1.1);
    color: var(--accent-color);
}

.info-content h3 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
}

.info-content p {
    color: var(--text-color);
}

.contact-form {
    background: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.contact-form h3 {
    color: var(--primary-color);
    margin-bottom: 2rem;
    font-size: 1.5rem;
}

.form-group {
    position: relative;
    margin-bottom: 1.5rem;
}

.form-group i {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--secondary-color);
}

.form-group textarea + i {
    top: 1rem;
    transform: none;
}

.contact-form input,
.contact-form textarea {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    border: 2px solid rgba(0, 0, 0, 0.1);
    border-radius: var(--border-radius);
    background: var(--white);
    transition: all 0.3s ease;
}

.contact-form textarea {
    height: 150px;
    padding-top: 1rem;
    resize: vertical;
}

.contact-form input:focus,
.contact-form textarea:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    outline: none;
}

.submit-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;
    padding: 1rem;
    background: linear-gradient(45deg, var(--secondary-color), #2980b9);
    color: var(--white);
    border: none;
    border-radius: var(--border-radius);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.submit-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
}

.submit-btn i {
    transition: transform 0.3s ease;
}

.submit-btn:hover i {
    transform: translateX(5px);
}

/* Dark Mode Styles for New Sections */
[data-theme="dark"] .testimonial-card,
[data-theme="dark"] .info-item,
[data-theme="dark"] .contact-form {
    background-color: var(--primary-color);
}

[data-theme="dark"] .testimonial-content p,
[data-theme="dark"] .author-info p,
[data-theme="dark"] .info-content p {
    color: var(--text-color);
}

[data-theme="dark"] .contact-form input,
[data-theme="dark"] .contact-form textarea {
    background-color: var(--primary-color);
    color: var(--text-color);
    border-color: rgba(255, 255, 255, 0.1);
}

[data-theme="dark"] .contact-form input:focus,
[data-theme="dark"] .contact-form textarea:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}




================================================
FILE: templates/base.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}SwaBhoomi{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar {
            background-color: #2c3e50;
        }
        .navbar-brand, .nav-link {
            color: white !important;
        }
        .card {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark mb-4">
        <div class="container">
            <a class="navbar-brand" href="/">SwaBhoomi</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    {% if session.user_id %}
                        <li class="nav-item">
                            <a class="nav-link" href="/dashboard">Dashboard</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/profile">Profile</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/digital-identity">Digital Identity</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/land-registry">Land Registry</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/logout">Logout</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="/login">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/register">Register</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <!-- Main Content -->
    <main class="container">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-white mt-5 py-3">
        <div class="container text-center">
            <p class="mb-0">&copy; 2024 SwaBhoomi. All rights reserved.</p>
        </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Font Awesome -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    {% block extra_js %}{% endblock %}
    
    <!-- Chatbot Component -->
    {% include 'chatbot.html' %}
</body>
</html> 


================================================
FILE: templates/chatbot.html
================================================
<!-- Chatbot Component -->
<div class="chatbot-container" id="chatbotContainer">
    <div class="chatbot-header">
        <div class="header-content">
            <div class="avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="header-text">
                <h5>SwaBhoomi Assistant</h5>
                <span class="status">Online</span>
            </div>
        </div>
        <button class="btn-close" onclick="toggleChatbot()"></button>
    </div>
    <div class="chatbot-messages" id="chatbotMessages">
        <div class="message bot welcome">
            <div class="message-content">
                <p>Hello! I'm your SwaBhoomi assistant. How can I help you today?</p>
                <div class="suggestions">
                    <button onclick="sendSuggestion('What is SwaBhoomi?')">What is SwaBhoomi?</button>
                    <button onclick="sendSuggestion('How does SSI work?')">How does SSI work?</button>
                    <button onclick="sendSuggestion('Can I get a loan?')">Can I get a loan?</button>
                </div>
            </div>
        </div>
    </div>
    <div class="chatbot-input">
        <input type="text" id="userInput" placeholder="Type your question here..." autocomplete="off">
        <button onclick="toggleVoiceRecognition()" id="voiceButton" title="Voice Input">
            <i class="fas fa-microphone"></i>
        </button>
        <button onclick="sendMessage()" id="sendButton">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

<div class="chatbot-toggle" id="chatbotToggle" onclick="toggleChatbot()">
    <i class="fas fa-comments"></i>
</div>

<style>
:root {
    --primary-color: #2563eb;
    --primary-hover: #1d4ed8;
    --secondary-color: #f8fafc;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --border-color: #e2e8f0;
    --success-color: #22c55e;
    --error-color: #ef4444;
    --bot-message-bg: #eff6ff;
    --user-message-bg: #2563eb;
    --user-message-text: #ffffff;
    --animation-duration: 0.3s;
    --shadow-color: rgba(37, 99, 235, 0.15);
}

.chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 380px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 4px 20px var(--shadow-color);
    display: none;
    flex-direction: column;
    z-index: 1000;
    transform: translateY(20px);
    opacity: 0;
    transition: all var(--animation-duration) ease-out;
}

.chatbot-container.visible {
    transform: translateY(0);
    opacity: 1;
}

.chatbot-header {
    background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
    color: white;
    padding: 15px;
    border-radius: 15px 15px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.header-content {
    display: flex;
    align-items: center;
    gap: 10px;
}

.avatar {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(4px);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
}

.header-text h5 {
    margin: 0;
    font-size: 1rem;
}

.status {
    font-size: 0.7rem;
    opacity: 0.8;
}

.chatbot-messages {
    height: 400px;
    overflow-y: auto;
    padding: 20px;
    background: var(--secondary-color);
    scroll-behavior: smooth;
}

.message {
    margin-bottom: 15px;
    max-width: 85%;
    animation: messageAppear var(--animation-duration) ease-out;
}

@keyframes messageAppear {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.message-content {
    padding: 12px 15px;
    border-radius: 15px;
    position: relative;
}

.message.user {
    margin-left: auto;
}

.message.user .message-content {
    background: var(--user-message-bg);
    color: var(--user-message-text);
    box-shadow: 0 2px 8px var(--shadow-color);
    border-bottom-right-radius: 5px;
}

.message.bot {
    margin-right: auto;
}

.message.bot .message-content {
    background: var(--bot-message-bg);
    color: var(--text-primary);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    border-bottom-left-radius: 5px;
}

.message.welcome .message-content {
    background: var(--bot-message-bg);
    border-radius: 15px;
}

.suggestions {
    margin-top: 10px;
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
}

.suggestions button {
    background: rgba(37, 99, 235, 0.1);
    color: var(--primary-color);
    border: 1px solid rgba(37, 99, 235, 0.2);
    font-weight: 500;
    padding: 6px 12px;
    border-radius: 15px;
    cursor: pointer;
    transition: all 0.2s;
}

.suggestions button:hover {
    background: rgba(37, 99, 235, 0.15);
    border-color: rgba(37, 99, 235, 0.3);
}

.chatbot-input {
    padding: 15px;
    background: white;
    border-top: 1px solid var(--border-color);
    display: flex;
    gap: 10px;
    align-items: center;
}

.chatbot-input input {
    flex: 1;
    padding: 12px 15px;
    border: 2px solid var(--border-color);
    border-radius: 25px;
    outline: none;
    transition: all 0.3s;
    font-size: 0.9rem;
    background: var(--secondary-color);
}

.chatbot-input input:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.chatbot-input button#voiceButton {
    background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
    box-shadow: 0 2px 8px var(--shadow-color);
    color: white;
    border: none;
    width: 45px;
    height: 45px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 5px;
}

.chatbot-input button#voiceButton:hover {
    background: linear-gradient(135deg, #1d4ed8, #1e40af);
    transform: translateY(-1px);
}

.chatbot-input button#voiceButton.recording {
    background: linear-gradient(135deg, var(--error-color), #dc2626);
    box-shadow: 0 2px 8px rgba(239, 68, 68, 0.25);
}

.chatbot-input button {
    background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
    box-shadow: 0 2px 8px var(--shadow-color);
    color: white;
    border: none;
    width: 45px;
    height: 45px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chatbot-input button:hover {
    background: linear-gradient(135deg, #1d4ed8, #1e40af);
    transform: translateY(-1px);
}

.chatbot-input button:active {
    transform: scale(0.95);
}

.chatbot-toggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
    box-shadow: 0 4px 15px var(--shadow-color);
    color: white;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 1000;
    transition: all 0.3s;
    opacity: 1;
    visibility: visible;
}

.chatbot-toggle:hover {
    background: linear-gradient(135deg, #1d4ed8, #1e40af);
    transform: translateY(-2px) rotate(10deg);
    box-shadow: 0 6px 20px var(--shadow-color);
}

.chatbot-toggle.hidden {
    opacity: 0;
    visibility: hidden;
}

.chatbot-toggle i {
    font-size: 1.5rem;
}

/* Scrollbar styling */
.chatbot-messages::-webkit-scrollbar {
    width: 6px;
}

.chatbot-messages::-webkit-scrollbar-track {
    background: transparent;
}

.chatbot-messages::-webkit-scrollbar-thumb {
    background: rgba(37, 99, 235, 0.2);
    border-radius: 3px;
}

.chatbot-messages::-webkit-scrollbar-thumb:hover {
    background: rgba(37, 99, 235, 0.3);
}

/* Typing indicator */
.typing-indicator {
    display: flex;
    gap: 5px;
    padding: 10px 15px;
    background: rgba(37, 99, 235, 0.1);
    border-radius: 15px;
    width: fit-content;
    margin-bottom: 15px;
}

.typing-indicator span {
    width: 8px;
    height: 8px;
    background: var(--primary-color);
    opacity: 0.6;
    border-radius: 50%;
    animation: typing 1s infinite;
}

.typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes typing {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-5px); }
}

.voice-status {
    position: fixed;
    bottom: 100px;
    right: 20px;
    background: linear-gradient(135deg, var(--primary-color), #1d4ed8);
    box-shadow: 0 4px 15px var(--shadow-color);
    color: white;
    padding: 10px 20px;
    border-radius: 25px;
    display: none;
    z-index: 1001;
}
</style>

<script>
// Knowledge base organized by categories
const knowledgeBase = {
    "general": {
        "what is swabhoomi": "SwaBhoomi is a next-generation land registry platform using blockchain and Self-Sovereign Identity (SSI) to ensure secure, transparent, and fraud-proof land transactions in India.",
        "who can use swabhoomi": "Any Indian citizen, government official, bank, or legal stakeholder involved in land transactions can use the platform.",
        "is swabhoomi available nationwide": "It is currently being piloted in select regions, with a goal of scaling across India.",
        "what makes swabhoomi different": "It uses blockchain and digital identities to create a tamper-proof, transparent system that reduces fraud and manual errors."
    },
    "ssi": {
        "what is ssi": "SSI is a digital identity model where users fully control their personal information using cryptographic credentials.",
        "how does ssi benefit landowners": "SSI ensures that only verified users can access, manage, or transfer their land rights, increasing security and privacy.",
        "do i need aadhaar for ssi": "Aadhaar or other government IDs can be used as verifiable credentials within the SSI framework.",
        "can i revoke access to my digital identity": "Yes, you can revoke access to your credentials at any time, preserving your privacy."
    },
    "blockchain": {
        "what role does blockchain play": "Blockchain stores land records in an immutable and transparent way, making fraud or tampering nearly impossible.",
        "can land records be changed on the blockchain": "No. Records are immutable. Any change must be recorded as a new transaction, preserving history.",
        "is blockchain secure for legal documents": "Yes. It uses cryptographic proof to validate and protect all records.",
        "what kind of blockchain does swabhoomi use": "SwaBhoomi uses a permissioned blockchain for better scalability and governance."
    },
    "ai": {
        "how does ai detect fraud": "AI analyzes user behavior, document authenticity, and transactional anomalies to flag possible fraud attempts.",
        "can ai catch duplicate land claims": "Yes. The system flags duplicate submissions and identity mismatches using pattern recognition.",
        "is the ai system biased": "The AI is trained on unbiased datasets and regularly audited to maintain fairness.",
        "will ai replace government verifiers": "No, AI supports the verification process but final authentication is governed through cryptographic proofs and legal frameworks."
    },
    "documents": {
        "how do i upload land ownership documents": "You can upload them through the platform's secure portal. The system will guide you through verification.",
        "what if my documents are in regional languages": "The platform supports multiple languages and automatically transcribes documents using OCR and NLP.",
        "can i sell my land using swabhoomi": "Yes. Verified owners can digitally initiate ownership transfers securely.",
        "what happens if someone else submits my land documents": "Ownership is verified against your SSI credentials and blockchain history, preventing impersonation."
    },
    "disputes": {
        "how are land disputes handled": "Blockchain records create a verifiable chain of ownership, which can be used to resolve legal disputes.",
        "can i challenge a fraudulent claim": "Yes. The platform provides a digital process to raise and verify dispute cases.",
        "does this help post-conflict resettlement": "Absolutely. Historical ownership can be tracked and verified to resolve conflict-related disputes."
    },
    "geospatial": {
        "what is geotagging in land registry": "Geotagging links plots with real-world GPS coordinates for accuracy and visualization.",
        "how does gis integration help": "GIS helps visualize land parcels, boundaries, and zones for better clarity and compliance.",
        "can i see my land on a digital map": "Yes. Users can view their property with boundaries, zoning, and valuation data."
    },
    "financial": {
        "can this help me get a loan": "Yes. Verified land credentials can be shared with banks to process property-based loans quickly.",
        "is my land valuation available online": "Yes. The platform uses market data to give dynamic land valuations.",
        "are banks integrated with swabhoomi": "Selected banks are being onboarded for secure document-based loan processing."
    },
    "privacy": {
        "who can see my land information": "Only you and authorized entities with your permission via SSI credentials.",
        "can i delete my data from the system": "Blockchain records can't be deleted, but you can revoke access to your identity or credentials.",
        "is this compliant with indian privacy laws": "Yes. The system is designed to comply with the DPDP Act and similar global privacy standards."
    }
};

// Keywords for category detection
const categoryKeywords = {
    "ssi": ["ssi", "identity", "digital identity", "aadhaar", "credentials"],
    "blockchain": ["blockchain", "immutable", "tamper", "records"],
    "ai": ["ai", "artificial intelligence", "fraud", "detection"],
    "documents": ["documents", "upload", "sell", "ownership"],
    "disputes": ["disputes", "fraudulent", "claim", "conflict"],
    "geospatial": ["geotagging", "gis", "map", "coordinates"],
    "financial": ["loan", "bank", "valuation", "financial"],
    "privacy": ["privacy", "data", "delete", "compliance"]
};

// Feature redirection mapping
const featureRedirects = {
    "digital identity": "/digital-identity",
    "land registry": "/land-registry",
    "transactions": "/transactions",
    "documents": "/documents",
    "settings": "/settings",
    "dashboard": "/dashboard"
};

// Voice recognition setup
let recognition = null;
let isRecording = false;

function initializeVoiceRecognition() {
    if ('webkitSpeechRecognition' in window) {
        recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';

        recognition.onstart = function() {
            isRecording = true;
            document.getElementById('voiceButton').classList.add('recording');
            showVoiceStatus('Listening...');
        };

        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            document.getElementById('userInput').value = transcript;
            sendMessage();
        };

        recognition.onerror = function(event) {
            console.error('Speech recognition error:', event.error);
            showVoiceStatus('Error: ' + event.error);
        };

        recognition.onend = function() {
            isRecording = false;
            document.getElementById('voiceButton').classList.remove('recording');
            hideVoiceStatus();
        };
    } else {
        console.error('Speech recognition not supported');
        showVoiceStatus('Voice input not supported in this browser');
    }
}

function toggleVoiceRecognition() {
    if (!recognition) {
        initializeVoiceRecognition();
    }

    if (isRecording) {
        recognition.stop();
    } else {
        recognition.start();
    }
}

function showVoiceStatus(message) {
    let statusDiv = document.getElementById('voiceStatus');
    if (!statusDiv) {
        statusDiv = document.createElement('div');
        statusDiv.id = 'voiceStatus';
        statusDiv.className = 'voice-status';
        document.body.appendChild(statusDiv);
    }
    statusDiv.textContent = message;
    statusDiv.style.display = 'block';
}

function hideVoiceStatus() {
    const statusDiv = document.getElementById('voiceStatus');
    if (statusDiv) {
        statusDiv.style.display = 'none';
    }
}

function toggleChatbot() {
    const container = document.getElementById('chatbotContainer');
    const toggle = document.getElementById('chatbotToggle');
    
    if (container.style.display === 'none' || container.style.display === '') {
        container.style.display = 'flex';
        setTimeout(() => {
            container.classList.add('visible');
            toggle.classList.add('hidden');
        }, 10);
    } else {
        container.classList.remove('visible');
        setTimeout(() => {
            container.style.display = 'none';
            toggle.classList.remove('hidden');
        }, 300);
    }
}

function showTypingIndicator() {
    const messagesContainer = document.getElementById('chatbotMessages');
    messagesContainer.innerHTML += `
        <div class="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
        </div>
    `;
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function removeTypingIndicator() {
    const typingIndicator = document.querySelector('.typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

function sendSuggestion(question) {
    document.getElementById('userInput').value = question;
    sendMessage();
}

function findBestMatch(message) {
    message = message.toLowerCase().trim();
    let bestMatch = "";
    let bestMatchKey = "";
    let bestMatchCategory = "";

    // Check for feature redirection
    for (const [feature, url] of Object.entries(featureRedirects)) {
        if (message.includes(feature)) {
            return { redirect: url };
        }
    }

    // First, try to determine the category
    let detectedCategory = "general";
    for (const [category, keywords] of Object.entries(categoryKeywords)) {
        if (keywords.some(keyword => message.includes(keyword))) {
            detectedCategory = category;
            break;
        }
    }

    // Search within the detected category
    for (const [key, value] of Object.entries(knowledgeBase[detectedCategory])) {
        if (message.includes(key) && key.length > bestMatchKey.length) {
            bestMatch = value;
            bestMatchKey = key;
            bestMatchCategory = detectedCategory;
        }
    }

    // If no match found in detected category, search all categories
    if (!bestMatch) {
        for (const category of Object.keys(knowledgeBase)) {
            for (const [key, value] of Object.entries(knowledgeBase[category])) {
                if (message.includes(key) && key.length > bestMatchKey.length) {
                    bestMatch = value;
                    bestMatchKey = key;
                    bestMatchCategory = category;
                }
            }
        }
    }

    // If still no match, try partial matching
    if (!bestMatch) {
        for (const category of Object.keys(knowledgeBase)) {
            for (const [key, value] of Object.entries(knowledgeBase[category])) {
                const words = message.split(' ');
                const keyWords = key.split(' ');
                const matchCount = words.filter(word => keyWords.some(kw => kw.includes(word) || word.includes(kw))).length;
                
                if (matchCount > 0 && matchCount > bestMatchKey.split(' ').length) {
                    bestMatch = value;
                    bestMatchKey = key;
                    bestMatchCategory = category;
                }
            }
        }
    }

    return { answer: bestMatch, category: bestMatchCategory };
}

function sendMessage() {
    const input = document.getElementById('userInput');
    const message = input.value.trim();
    const messagesContainer = document.getElementById('chatbotMessages');

    if (message) {
        // Add user message
        messagesContainer.innerHTML += `
            <div class="message user">
                <div class="message-content">
                    <p>${message}</p>
                </div>
            </div>
        `;

        // Show typing indicator
        showTypingIndicator();

        // Find best matching answer or redirect
        const result = findBestMatch(message);

        // Add bot response after a delay
        setTimeout(() => {
            removeTypingIndicator();
            
            if (result.redirect) {
                messagesContainer.innerHTML += `
                    <div class="message bot">
                        <div class="message-content">
                            <p>I'll redirect you to the ${result.redirect.split('/')[1]} section.</p>
                        </div>
                    </div>
                `;
                setTimeout(() => {
                    window.location.href = result.redirect;
                }, 1500);
            } else if (result.answer) {
                messagesContainer.innerHTML += `
                    <div class="message bot">
                        <div class="message-content">
                            <p>${result.answer}</p>
                        </div>
                    </div>
                `;
            } else {
                messagesContainer.innerHTML += `
                    <div class="message bot">
                        <div class="message-content">
                            <p>I'm sorry, I don't have information about that. Please try rephrasing your question or ask about a different topic. You can ask about:</p>
                            <div class="suggestions">
                                <button onclick="sendSuggestion('What is SwaBhoomi?')">What is SwaBhoomi?</button>
                                <button onclick="sendSuggestion('How does SSI work?')">How does SSI work?</button>
                                <button onclick="sendSuggestion('Can I get a loan?')">Can I get a loan?</button>
                            </div>
                        </div>
                    </div>
                `;
            }
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }, 1000);

        input.value = '';
    }
}

// Add event listener for Enter key
document.getElementById('userInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// Initialize voice recognition when the page loads
document.addEventListener('DOMContentLoaded', initializeVoiceRecognition);
</script> 


================================================
FILE: templates/dashboard.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Dashboard - SwaBhoomi</title>

  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">

  <style>
    :root {
      --primary-color: #4299e1;
      --secondary-color: #4a5568;
      --success-color: #48bb78;
      --warning-color: #ed8936;
      --danger-color: #f56565;
    }
    
    body {
      background: #f7fafc;
      min-height: 100vh;
    }
    
    .sidebar {
      background: white;
      min-height: 100vh;
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      position: fixed;
      width: 250px;
      padding: 1.5rem;
    }
    
    .main-content {
      margin-left: 250px;
      padding: 2rem;
    }
    
    .nav-link {
      color: var(--secondary-color);
      padding: 0.8rem 1rem;
      border-radius: 10px;
      margin-bottom: 0.5rem;
      transition: all 0.3s ease;
    }
    
    .nav-link:hover, .nav-link.active {
      background: #ebf8ff;
      color: var(--primary-color);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 10px;
    }
    
    .card {
      border: none;
      border-radius: 15px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
      transition: transform 0.3s ease;
    }
    
    .card:hover {
      transform: translateY(-5px);
    }
    
    .stat-card {
      background: white;
      padding: 1.5rem;
      border-radius: 15px;
      margin-bottom: 1.5rem;
    }
    
    .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 1rem;
    }
    
    .stat-icon.primary { background: #ebf8ff; color: var(--primary-color); }
    .stat-icon.success { background: #f0fff4; color: var(--success-color); }
    .stat-icon.warning { background: #fffaf0; color: var(--warning-color); }
    .stat-icon.danger { background: #fff5f5; color: var(--danger-color); }
    
    .did-badge {
      background: #ebf8ff;
      color: var(--primary-color);
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.9rem;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .action-button {
      padding: 0.8rem 1.5rem;
      border-radius: 10px;
      border: none;
      font-weight: 500;
      transition: all 0.3s ease;
    }
    
    .action-button:hover {
      transform: translateY(-2px);
    }
    
    .table {
      background: white;
      border-radius: 15px;
      overflow: hidden;
    }
    
    .table th {
      background: #f7fafc;
      border: none;
      padding: 1rem;
    }
    
    .table td {
      padding: 1rem;
      vertical-align: middle;
    }
    
    .status-badge {
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.9rem;
      font-weight: 500;
    }
    
    .status-badge.verified { background: #f0fff4; color: var(--success-color); }
    .status-badge.pending { background: #fffaf0; color: var(--warning-color); }
    .status-badge.rejected { background: #fff5f5; color: var(--danger-color); }
  </style>
</head>
<body>

<div class="dashboard">
  <!-- Sidebar -->
  <div class="sidebar">
    <div class="d-flex align-items-center mb-4">
      <img src="{{ url_for('static', filename='sblg-removebg (1).png') }}" alt="SwaBhoomi Logo" style="width: 40px; margin-right: 10px;">
      <h5 class="mb-0">SwaBhoomi</h5>
    </div>
    
    <nav class="nav flex-column">
      <a class="nav-link active" href="/dashboard">
        <i class="fas fa-home"></i>
        Dashboard
      </a>
      <a class="nav-link" href="/digital-identity">
        <i class="fas fa-id-card"></i>
        Digital Identity
      </a>
      <a class="nav-link" href="/land-registry">
        <i class="fas fa-landmark"></i>
        Land Registry
      </a>
      <a class="nav-link" href="/transactions">
        <i class="fas fa-exchange-alt"></i>
        Transactions
      </a>
      <a class="nav-link" href="/documents">
        <i class="fas fa-file-alt"></i>
        Documents
      </a>
      <div class="dropdown">
        <a class="nav-link dropdown-toggle" href="#" role="button" id="settingsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
          <i class="fas fa-cog"></i>
          Settings
        </a>
        <ul class="dropdown-menu" aria-labelledby="settingsDropdown">
          <li><a class="dropdown-item" href="/profile">Profile</a></li>
          <li><a class="dropdown-item" href="/settings">Account Settings</a></li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item text-danger" href="/logout">Logout</a></li>
        </ul>
      </div>
    </nav>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2>Dashboard</h2>
      <div class="d-flex align-items-center gap-3">
        <span class="did-badge">
          <i class="fas fa-fingerprint"></i>
          {{ current_user.did }}
        </span>
        <button class="action-button btn btn-primary" onclick="openWalletModal()">
          <i class="fas fa-wallet"></i>
          Connect Wallet
        </button>
      </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
      <div class="col-md-3">
        <div class="stat-card">
          <div class="stat-icon primary">
            <i class="fas fa-landmark"></i>
          </div>
          <h3>{{ land_count }}</h3>
          <p class="text-muted mb-0">Registered Properties</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stat-card">
          <div class="stat-icon success">
            <i class="fas fa-check-circle"></i>
          </div>
          <h3>{{ verified_count }}</h3>
          <p class="text-muted mb-0">Verified Properties</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stat-card">
          <div class="stat-icon warning">
            <i class="fas fa-clock"></i>
          </div>
          <h3>{{ pending_count }}</h3>
          <p class="text-muted mb-0">Pending Verifications</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stat-card">
          <div class="stat-icon danger">
            <i class="fas fa-exclamation-circle"></i>
          </div>
          <h3>{{ issues_count }}</h3>
          <p class="text-muted mb-0">Open Issues</p>
        </div>
      </div>
    </div>

    <!-- Recent Properties -->
    <div class="card mb-4">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h5 class="card-title mb-0">Recent Properties</h5>
          <button class="action-button btn btn-primary">
            <i class="fas fa-plus"></i>
            Add New Property
          </button>
        </div>
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Property ID</th>
                <th>Location</th>
                <th>Area</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for property in recent_properties %}
              <tr>
                <td>{{ property.id }}</td>
                <td>{{ property.location }}</td>
                <td>{{ property.area }} sq ft</td>
                <td>
                  <span class="status-badge {{ property.status }}">
                    {{ property.status|title }}
                  </span>
                </td>
                <td>
                  <button class="btn btn-sm btn-outline-primary me-2">
                    <i class="fas fa-eye"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-secondary">
                    <i class="fas fa-edit"></i>
                  </button>
                </td>
              </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Digital Identity Section -->
    <div class="card">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h5 class="card-title mb-0">Digital Identity</h5>
          <button class="action-button btn btn-primary" onclick="issueVC()">
            <i class="fas fa-id-card"></i>
            Issue Verifiable Credential
          </button>
        </div>
        <div class="row">
          <div class="col-md-6">
            <div class="card mb-3">
              <div class="card-body">
                <h6 class="card-subtitle mb-3 text-muted">Your DID</h6>
                <p class="card-text">{{ current_user.did }}</p>
                <button class="btn btn-outline-primary btn-sm">
                  <i class="fas fa-copy"></i>
                  Copy DID
                </button>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card mb-3">
              <div class="card-body">
                <h6 class="card-subtitle mb-3 text-muted">Verifiable Credentials</h6>
                <ul class="list-unstyled">
                  {% for vc in verifiable_credentials %}
                  <li class="mb-2">
                    <i class="fas fa-check-circle text-success me-2"></i>
                    {{ vc.type }}
                  </li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Wallet Connection Modal -->
<div class="modal fade" id="walletModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header border-0">
        <h5 class="modal-title">Connect Your Wallet</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-4">
          <div class="qr-code-container">
            <div class="qr-code">
              <i class="fas fa-qrcode fa-5x text-muted"></i>
            </div>
            <p class="mt-3 mb-0 text-muted">Scan with your digital identity wallet</p>
          </div>
        </div>
        <div class="d-grid gap-2">
          <button class="action-button btn btn-primary" onclick="connectWallet()">
            <i class="fas fa-plug"></i>
            Connect Browser Wallet
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  function openWalletModal() {
    var modal = new bootstrap.Modal(document.getElementById('walletModal'));
    modal.show();
  }

  function connectWallet() {
    // Placeholder for wallet connection logic
    alert('Wallet connection feature coming soon!');
  }

  function issueVC() {
    // Placeholder for VC issuance logic
    alert('VC issuance feature coming soon!');
  }

  // Copy DID to clipboard
  function copyDID() {
    navigator.clipboard.writeText('{{ current_user.did }}');
    // Show toast notification
    showToast('DID copied to clipboard!');
  }

  function showToast(message, type = 'success') {
    // Implementation for toast notifications
  }
</script>

</body>
</html>



================================================
FILE: templates/digital_identity.html
================================================
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-id-card me-2"></i>Digital Identity</h4>
                </div>
                <div class="card-body">
                    {% if user and user.did %}
                        <div class="alert alert-success d-flex align-items-center">
                            <i class="fas fa-check-circle me-2 fs-4"></i>
                            <div>
                                <h5 class="alert-heading mb-1">Your Decentralized Identifier (DID)</h5>
                                <p class="mb-0"><code class="bg-light p-2 rounded">{{ user.did }}</code></p>
                                <button class="btn btn-sm btn-outline-success mt-2" onclick="copyToClipboard('{{ user.did }}')">
                                    <i class="fas fa-copy me-1"></i>Copy DID
                                </button>
                            </div>
                        </div>
                        
                        <div class="mt-4">
                            <h5 class="mb-3"><i class="fas fa-shield-alt me-2"></i>Verifiable Credentials</h5>
                            {% if credentials %}
                                <div class="list-group">
                                    {% for credential in credentials %}
                                        <div class="list-group-item list-group-item-action">
                                            <div class="d-flex w-100 justify-content-between align-items-center">
                                                <h6 class="mb-1">
                                                    <i class="fas fa-certificate me-2 text-primary"></i>
                                                    {{ credential.credential_type }}
                                                </h6>
                                                <small class="text-muted">{{ credential.created_at }}</small>
                                            </div>
                                            <div class="mt-2">
                                                <button class="btn btn-sm btn-primary" onclick="showCredential('{{ credential.credential_data }}')">
                                                    <i class="fas fa-eye me-1"></i>View Credential
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary ms-2" onclick="downloadCredential('{{ credential.credential_data }}', '{{ credential.credential_type }}')">
                                                    <i class="fas fa-download me-1"></i>Download
                                                </button>
                                            </div>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% else %}
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    No verifiable credentials found. Your credentials will appear here once they are issued.
                                </div>
                            {% endif %}
                        </div>
                    {% else %}
                        <div class="alert alert-warning d-flex align-items-center">
                            <i class="fas fa-exclamation-triangle me-2 fs-4"></i>
                            <div>
                                <h5 class="alert-heading mb-1">No DID Found</h5>
                                <p class="mb-0">Please log out and log in again to generate your DID.</p>
                                <a href="/logout" class="btn btn-warning btn-sm mt-2">
                                    <i class="fas fa-sign-out-alt me-1"></i>Logout
                                </a>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for displaying credential details -->
<div class="modal fade" id="credentialModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="fas fa-certificate me-2"></i>Credential Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <pre id="credentialData" class="bg-light p-3 rounded"></pre>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="copyCredentialToClipboard()">
                    <i class="fas fa-copy me-1"></i>Copy
                </button>
            </div>
        </div>
    </div>
</div>

<script>
function showCredential(credentialData) {
    try {
        const credential = JSON.parse(credentialData);
        document.getElementById('credentialData').textContent = JSON.stringify(credential, null, 2);
        new bootstrap.Modal(document.getElementById('credentialModal')).show();
    } catch (e) {
        console.error('Error parsing credential:', e);
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        alert('DID copied to clipboard!');
    }).catch(err => {
        console.error('Failed to copy text: ', err);
    });
}

function copyCredentialToClipboard() {
    const credentialData = document.getElementById('credentialData').textContent;
    navigator.clipboard.writeText(credentialData).then(() => {
        alert('Credential copied to clipboard!');
    }).catch(err => {
        console.error('Failed to copy credential: ', err);
    });
}

function downloadCredential(credentialData, credentialType) {
    try {
        const credential = JSON.parse(credentialData);
        const blob = new Blob([JSON.stringify(credential, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${credentialType}-credential.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    } catch (e) {
        console.error('Error downloading credential:', e);
    }
}
</script>

<style>
.card {
    border: none;
    border-radius: 15px;
}

.card-header {
    border-radius: 15px 15px 0 0 !important;
}

.list-group-item {
    border-radius: 10px !important;
    margin-bottom: 10px;
    transition: all 0.3s ease;
}

.list-group-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.btn {
    border-radius: 8px;
}

.alert {
    border-radius: 10px;
}
</style>
{% endblock %} 


================================================
FILE: templates/documents.html
================================================
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <h2>Documents</h2>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Document Management</h5>
            <p class="card-text">Upload, view, and manage your documents here.</p>
            <!-- Add your documents content here -->
        </div>
    </div>
</div>
{% endblock %} 


================================================
FILE: templates/index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SwaBhoomi - Blockchain Land Registry</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Google Translate Script -->
<!-- Google Translate Script with Indian Languages -->
<script type="text/javascript">
    function googleTranslateElementInit() {
      new google.translate.TranslateElement(
        {
          pageLanguage: 'en',
          includedLanguages: 'en,hi,bn,te,mr,ta,ur,gu,kn,or,ml,pa,as,mai,kok,sa',
          layout: google.translate.TranslateElement.InlineLayout.SIMPLE
        },
        'google_translate_element'
      );
    }
  </script>
  
  <script type="text/javascript" 
    src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit">
  </script>
  
  

</head>
<body>
    <!-- Header / Navigation -->
    <header class="header">
        <nav class="nav-container">
            <div class="logo">
                <img src="{{ url_for('static', filename='sblg-removebg (1).png') }}" alt="SwaBhoomi Logo" class="logo-img">
                <h1>SwaBhoomi</h1>
            </div>
            <div class="nav-links">
                {% if session.get('user_id') %}
                    <a href="/dashboard">Dashboard</a>
                    <a href="#features">Features</a>
                    <a href="#why-choose-us">Why Choose Us</a>
                    <a href="#track">Track Transactions</a>
                    <a href="/profile">Profile</a>
                    <div id="google_translate_element"></div>
                    <a href="/logout" class="logout-btn">Logout</a>
                {% else %}
                    <a href="#features" onclick="return checkLogin()">Features</a>
                    <a href="#why-choose-us">Why Choose Us</a>
                    <div id="google_translate_element"></div>
                    <a href="/login" class="login-btn">Login</a>
                    <a href="/register" class="register-btn">Register</a>
                {% endif %}
            </div>
            <div class="mobile-menu">
                <i class="fas fa-bars"></i>
            </div>
        </nav>
    </header>

    <!-- Hero Section -->
    <section class="hero">
        <div class="hero-content">
            <h1>Revolutionizing Land Ownership in India</h1>
            <p>Building a transparent, secure, and inclusive land registry system powered by blockchain and AI</p>
            <div class="hero-buttons">
                <button class="cta-button primary">Explore Demo</button>
                <button class="cta-button secondary">Learn More</button>
            </div>
        </div>
    </section>

    <!-- About Us / Vision Section -->
    <section class="about">
        <div class="about-content">
            <h2>Our Vision</h2>
            <p>SwaBhoomi is transforming India's land registry system by leveraging cutting-edge technology to create a transparent, secure, and accessible platform for land ownership and transactions. We're solving the critical challenges of land fraud, unclear ownership, and bureaucratic inefficiencies that have plagued the system for decades.</p>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="features">
        <h2>Key Features</h2>
        <div class="feature-cards">
            <div class="feature-card">
                <i class="fas fa-shield-alt"></i>
                <h3>Transparent Ownership Verification</h3>
                <p>Verify land ownership instantly with blockchain technology</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-robot"></i>
                <h3>AI-Based Fraud Detection</h3>
                <p>Advanced AI algorithms to prevent fraudulent transactions</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-map-marker-alt"></i>
                <h3>Real-time Geotagging</h3>
                <p>Accurate land mapping with real-time geolocation</p>
            </div>
            <div class="feature-card">
                <i class="fas fa-lock"></i>
                <h3>Immutable Land Records</h3>
                <p>Permanent, tamper-proof records on the blockchain</p>
            </div>
        </div>
    </section>

    <!-- Why Choose Us Section -->
    <section id="why-choose-us" class="why-choose-us-section">
    <h2>Why Choose SwaBhoomi?</h2>
    <div class="choose-grid">
        <div class="choose-item">
            <i class="fas fa-shield-alt"></i>
            <h3>Secure & Tamper-Proof</h3>
            <p>Powered by blockchain and SSI, SwaBhoomi ensures every land record is encrypted, traceable, and fraud-resistant.</p>
        </div>
        <div class="choose-item">
            <i class="fas fa-brain"></i>
            <h3>AI-Driven Intelligence</h3>
            <p>Real-time AI fraud detection and land valuation tools help automate and de-risk property transactions.</p>
        </div>
        <div class="choose-item">
            <i class="fas fa-globe"></i>
            <h3>Accessible & Inclusive</h3>
            <p>Built with open-source tools, SwaBhoomi is scalable, cost-effective, and inclusive for allâ€”urban and rural alike.</p>
        </div>
        <div class="choose-item">
            <i class="fas fa-map-marked-alt"></i>
            <h3>Geo-Integrated</h3>
            <p>Geotagging and GIS mapping provide precise boundary visualization and real-world data overlay for clarity and accuracy.</p>
        </div>
        <div class="choose-item">
            <i class="fas fa-user-shield"></i>
            <h3>User-Centric Identity</h3>
            <p>Self-Sovereign Identity puts you in controlâ€”share only what's needed, when it's needed, with complete privacy.</p>
        </div>
        <div class="choose-item">
            <i class="fas fa-leaf"></i>
            <h3>Eco & Legal Compliant</h3>
            <p>Environmental zoning, regulation tracking, and smart compliance features ensure every deal respects the planet and the law.</p>
        </div>
    </div>
    </section>

    <!-- Use Cases Section -->
    <section class="use-cases">
        <div class="section-content">
            <h2>Who It's For</h2>
            <div class="use-cases-grid">
                <div class="use-case-card">
                    <i class="fas fa-user-tie"></i>
                    <h3>Landowners & Farmers</h3>
                    <p>Secure your land rights and access financial services</p>
                </div>
                <div class="use-case-card">
                    <i class="fas fa-university"></i>
                    <h3>Banks & Lenders</h3>
                    <p>Verify land ownership and reduce lending risks</p>
                </div>
                <div class="use-case-card">
                    <i class="fas fa-landmark"></i>
                    <h3>Government & Regulators</h3>
                    <p>Streamline land administration and reduce fraud</p>
                </div>
                <div class="use-case-card">
                    <i class="fas fa-hands-helping"></i>
                    <h3>NGOs & Development Agencies</h3>
                    <p>Support land rights and post-conflict reconstruction</p>
                </div>
            </div>
        </div>
    </section>

    <!-- How It Works Section -->
    <section class="how-it-works">
        <div class="section-content">
            <h2>How It Works</h2>
            <div class="steps-container">
                <div class="step">
                    <div class="step-number">1</div>
                    <i class="fas fa-user-check"></i>
                    <h3>Register & Verify Identity</h3>
                    <p>Create your SSI-based digital identity and complete KYC verification</p>
                </div>
                <div class="step">
                    <div class="step-number">2</div>
                    <i class="fas fa-file-upload"></i>
                    <h3>Upload Land Documents</h3>
                    <p>Securely upload and verify your land ownership documents</p>
                </div>
                <div class="step">
                    <div class="step-number">3</div>
                    <i class="fas fa-map-marked-alt"></i>
                    <h3>Geo-tag & Map</h3>
                    <p>Accurately map and verify land boundaries using GIS technology</p>
                </div>
                <div class="step">
                    <div class="step-number">4</div>
                    <i class="fas fa-link"></i>
                    <h3>Tokenize & Record</h3>
                    <p>Create digital tokens representing your land ownership on the blockchain</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Testimonials Section -->
    <section class="testimonials">
        <div class="section-content">
            <h2>What Our Users Say</h2>
            <div class="testimonials-grid">
                <div class="testimonial-card">
                    <div class="testimonial-content">
                        <i class="fas fa-quote-left"></i>
                        <p>SwaBhoomi has revolutionized how we manage our agricultural land. The transparency and security are unmatched.</p>
                    </div>
                    <div class="testimonial-author">
                        <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="Rajesh Kumar">
                        <div class="author-info">
                            <h4>Rajesh Kumar</h4>
                            <p>Farmer, Punjab</p>
                        </div>
                    </div>
                </div>
                <div class="testimonial-card">
                    <div class="testimonial-content">
                        <i class="fas fa-quote-left"></i>
                        <p>As a bank, we've seen a significant reduction in fraud cases since implementing SwaBhoomi's verification system.</p>
                    </div>
                    <div class="testimonial-author">
                        <img src="https://randomuser.me/api/portraits/women/44.jpg" alt="Priya Sharma">
                        <div class="author-info">
                            <h4>Priya Sharma</h4>
                            <p>Bank Manager, Mumbai</p>
                        </div>
                    </div>
                </div>
                <div class="testimonial-card">
                    <div class="testimonial-content">
                        <i class="fas fa-quote-left"></i>
                        <p>The platform has made land registration so much easier for our rural clients. Truly a game-changer!</p>
                    </div>
                    <div class="testimonial-author">
                        <img src="https://randomuser.me/api/portraits/men/67.jpg" alt="Amit Patel">
                        <div class="author-info">
                            <h4>Amit Patel</h4>
                            <p>NGO Director, Gujarat</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="contact-section">
        <div class="section-content">
            <h2>Visit Us</h2>
            <div class="contact-grid">
                <div class="contact-info">
                    <div class="info-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <div class="info-content">
                            <h3>Our Location</h3>
                            <p>VIPSTC, Delhi, India</p>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-clock"></i>
                        <div class="info-content">
                            <h3>Working Hours</h3>
                            <p>Mon - Fri: 7:00 AM - 8:00 PM</p>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-phone"></i>
                        <div class="info-content">
                            <h3>Contact Us</h3>
                            <p>+91 9999777772</p>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-envelope"></i>
                        <div class="info-content">
                            <h3>Email Us</h3>
                            <p>contact@swabhoomi.com</p>
                        </div>
                    </div>
                </div>
                <form class="contact-form">
                    <h3>Send Us a Message</h3>
                    <div class="form-group">
                        <input type="text" placeholder="Your Name" required>
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="form-group">
                        <input type="email" placeholder="Your Email" required>
                        <i class="fas fa-envelope"></i>
                    </div>
                    <div class="form-group">
                        <textarea placeholder="Your Message" required></textarea>
                        <i class="fas fa-comment"></i>
                    </div>
                    <button type="submit" class="submit-btn">
                        <span>Send Message</span>
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <div class="footer-section">
                <h3>Team Bhen Code</h3>
                <p>Building the future of land registry</p>
            </div>
            <div class="footer-section">
                <h3>Contact</h3>
                <a href="mailto:contact@swabhoomi.com">contact@swabhoomi.com</a>
                <a href="tel:+911234567890">+91 1234567890</a>
            </div>
            <div class="footer-section">
                <h3>Links</h3>
                <a href="#privacy">Privacy Policy</a>
                <a href="https://github.com/teambhencode" target="_blank">GitHub</a>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 SwaBhoomi. All rights reserved.</p>
        </div>
    </footer>

    <script src="script.js"></script>
    <script>
        function checkLogin() {
            {% if not session.get('user_id') %}
                alert('Please login to access this feature');
                window.location.href = '/login';
                return false;
            {% endif %}
            return true;
        }
    </script>
</body>
</html> 


================================================
FILE: templates/land_registry.html
================================================
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-landmark me-2"></i>Land Registry</h4>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-search fa-3x text-primary mb-3"></i>
                                    <h5 class="card-title">Search Properties</h5>
                                    <p class="card-text">Search for land records and property details</p>
                                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#searchModal">
                                        <i class="fas fa-search me-1"></i>Search
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-file-alt fa-3x text-success mb-3"></i>
                                    <h5 class="card-title">Register Property</h5>
                                    <p class="card-text">Register new land or property</p>
                                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#registerModal">
                                        <i class="fas fa-plus me-1"></i>Register
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0"><i class="fas fa-list me-2"></i>Your Properties</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Property ID</th>
                                            <th>Location</th>
                                            <th>Area</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td colspan="5" class="text-center">
                                                <div class="alert alert-info">
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    No properties found. Register a new property to get started.
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Search Modal -->
<div class="modal fade" id="searchModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="fas fa-search me-2"></i>Search Properties</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label class="form-label">Property ID</label>
                        <input type="text" class="form-control" placeholder="Enter Property ID">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Location</label>
                        <input type="text" class="form-control" placeholder="Enter Location">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Owner Name</label>
                        <input type="text" class="form-control" placeholder="Enter Owner Name">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">
                    <i class="fas fa-search me-1"></i>Search
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Register Modal -->
<div class="modal fade" id="registerModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title"><i class="fas fa-file-alt me-2"></i>Register Property</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label class="form-label">Property Location</label>
                        <input type="text" class="form-control" placeholder="Enter Property Location">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Area (in sq. ft.)</label>
                        <input type="number" class="form-control" placeholder="Enter Area">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Upload Documents</label>
                        <input type="file" class="form-control" multiple>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success">
                    <i class="fas fa-save me-1"></i>Register
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.card {
    border: none;
    border-radius: 15px;
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

.card-header {
    border-radius: 15px 15px 0 0 !important;
}

.table th {
    background-color: #f8f9fa;
}

.btn {
    border-radius: 8px;
}

.modal-content {
    border-radius: 15px;
}

.modal-header {
    border-radius: 15px 15px 0 0 !important;
}
</style>
{% endblock %} 


================================================
FILE: templates/login.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Login - SwaBhoomi</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <style>
        .login-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 2rem 0;
        }
        .login-card {
            max-width: 500px;
            margin: auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
            padding: 2.5rem;
        }
        .login-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        .login-logo {
            width: 120px;
            margin-bottom: 1rem;
        }
        .login-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 0.5rem;
        }
        .login-subtitle {
            color: #718096;
            margin-bottom: 2rem;
        }
        .did-button {
            width: 100%;
            padding: 0.8rem;
            background: #4a5568;
            color: white;
            border: none;
            border-radius: 10px;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }
        .did-button:hover {
            background: #2d3748;
            transform: translateY(-2px);
        }
        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
        }
        .divider::before, .divider::after {
            content: "";
            position: absolute;
            top: 50%;
            width: 45%;
            height: 1px;
            background: #e2e8f0;
        }
        .divider::before { left: 0; }
        .divider::after { right: 0; }
        .form-control {
            padding: 0.8rem;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
        }
        .form-control:focus {
            border-color: #4a5568;
            box-shadow: 0 0 0 2px rgba(74, 85, 104, 0.2);
        }
        .btn-primary {
            background: #4299e1;
            border: none;
            padding: 0.8rem;
            border-radius: 10px;
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background: #3182ce;
            transform: translateY(-2px);
        }
        .alert {
            border-radius: 10px;
            margin-bottom: 1.5rem;
        }
        #walletModal .modal-content {
            border-radius: 20px;
            padding: 1.5rem;
        }
        .qr-code-container {
            text-align: center;
            padding: 1.5rem;
            background: #f7fafc;
            border-radius: 10px;
            margin: 1rem 0;
        }
        .qr-code {
            width: 200px;
            height: 200px;
            margin: auto;
            background: #fff;
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="container">
            <div class="login-card">
                <div class="login-header">
                    <img src="{{ url_for('static', filename='sblg-removebg (1).png') }}" alt="SwaBhoomi Logo" class="login-logo">
                    <h2 class="login-title">Welcome Back</h2>
                    <p class="login-subtitle">Login to manage your land registry</p>
                </div>

                <!-- Flash Messages -->
                {% with messages = get_flashed_messages() %}
                    {% if messages %}
                        <div class="alert alert-danger">
                            <ul class="mb-0">
                                {% for message in messages %}
                                    <li>{{ message }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                {% endwith %}

                <!-- DID Login Button -->
                <button class="did-button" onclick="openWalletModal()">
                    <i class="fas fa-wallet"></i>
                    Login with Digital Identity Wallet
                </button>

                <div class="divider">
                    <span class="bg-white px-3 text-muted">or</span>
                </div>

                <!-- Traditional Login Form -->
                <form action="/login" method="POST">
                    {{ form.hidden_tag() }}

                    <div class="mb-3">
                        {{ form.email.label(class_='form-label') }}
                        {{ form.email(class='form-control', placeholder='Enter your email') }}
                        {% if form.email.errors %}
                            <ul class="text-danger">
                                {% for error in form.email.errors %}
                                    <li>{{ error }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}
                    </div>

                    <div class="mb-4">
                        {{ form.password.label(class_='form-label') }}
                        {{ form.password(class='form-control', placeholder='Enter your password') }}
                        {% if form.password.errors %}
                            <ul class="text-danger">
                                {% for error in form.password.errors %}
                                    <li>{{ error }}</li>
                                {% endfor %}
                            </ul>
                        {% endif %}
                    </div>

                    <div class="d-grid gap-2">
                        {{ form.submit(class_='btn btn-primary btn-lg') }}
                        <a href="/register" class="btn btn-outline-secondary">Create New Account</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Wallet Connection Modal -->
    <div class="modal fade" id="walletModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title">Connect Your Wallet</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="qr-code-container">
                        <div class="qr-code">
                            <!-- Placeholder for QR Code -->
                            <i class="fas fa-qrcode fa-5x text-muted"></i>
                        </div>
                        <p class="mt-3 mb-0 text-muted">Scan with your digital identity wallet</p>
                    </div>
                    <div class="d-grid gap-2">
                        <button class="did-button" onclick="connectWallet()">
                            <i class="fas fa-plug"></i>
                            Connect Browser Wallet
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function openWalletModal() {
            var modal = new bootstrap.Modal(document.getElementById('walletModal'));
            modal.show();
        }

        function connectWallet() {
            // Placeholder for wallet connection logic
            alert('Wallet connection feature coming soon!');
        }

        // Toast notifications
        function showToast(message, type = 'success') {
            // Implementation for toast notifications
        }
    </script>
</body>
</html>



================================================
FILE: templates/profile.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .profile-card {
            max-width: 800px;
            margin: 40px auto;
            padding: 30px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        .profile-header {
            text-align: center;
            margin-bottom: 30px;
        }
        .profile-avatar {
            width: 120px;
            height: 120px;
            border-radius: 60px;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
        }
        .profile-avatar i {
            font-size: 48px;
            color: #6c757d;
        }
        .info-section {
            margin-bottom: 30px;
        }
        .info-section h3 {
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e9ecef;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="profile-card">
            <div class="profile-header">
                <div class="profile-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <h2>{{ user_data[1] }}</h2>
                <p class="text-muted">{{ user_data[2] }}</p>
            </div>

            <div class="row">
                <div class="col-md-6 info-section">
                    <h3>Personal Information</h3>
                    <p><strong>Name:</strong> {{ user_data[1] }}</p>
                    <p><strong>Email:</strong> {{ user_data[2] }}</p>
                </div>

                <div class="col-md-6 info-section">
                    <h3>Address Information</h3>
                    <p><strong>Street Address:</strong> {{ user_data[7] }}</p>
                    <p><strong>City:</strong> {{ user_data[8] }}</p>
                    <p><strong>State:</strong> {{ user_data[9] }}</p>
                    <p><strong>Postal Code:</strong> {{ user_data[10] }}</p>
                    <p><strong>Country:</strong> {{ user_data[11] }}</p>
                </div>
            </div>

            <div class="d-grid gap-2">
                <a href="/dashboard" class="btn btn-primary">Back to Dashboard</a>
                <a href="/logout" class="btn btn-danger">Logout</a>
            </div>
        </div>
    </div>
</body>
</html> 


================================================
FILE: templates/register.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Register - SwaBhoomi</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <style>
        .register-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 2rem 0;
        }
        .register-card {
            max-width: 600px;
            margin: auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
            padding: 2.5rem;
        }
        .register-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        .register-logo {
            width: 120px;
            margin-bottom: 1rem;
        }
        .register-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 0.5rem;
        }
        .register-subtitle {
            color: #718096;
            margin-bottom: 2rem;
        }
        .form-section {
            background: #f8fafc;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 1rem;
        }
        .form-control {
            padding: 0.8rem;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
        }
        .form-control:focus {
            border-color: #4a5568;
            box-shadow: 0 0 0 2px rgba(74, 85, 104, 0.2);
        }
        .btn-primary {
            background: #4299e1;
            border: none;
            padding: 0.8rem;
            border-radius: 10px;
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background: #3182ce;
            transform: translateY(-2px);
        }
        .did-options {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        .did-option {
            flex: 1;
            padding: 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .did-option:hover {
            border-color: #4299e1;
            background: #ebf8ff;
        }
        .did-option.selected {
            border-color: #4299e1;
            background: #ebf8ff;
        }
        .did-option i {
            font-size: 2rem;
            color: #4a5568;
            margin-bottom: 0.5rem;
        }
        .alert {
            border-radius: 10px;
            margin-bottom: 1.5rem;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="container">
            <div class="register-card">
                <div class="register-header">
                    <img src="{{ url_for('static', filename='sblg-removebg (1).png') }}" alt="SwaBhoomi Logo" class="register-logo">
                    <h2 class="register-title">Create Account</h2>
                    <p class="register-subtitle">Join SwaBhoomi's secure land registry platform</p>
                </div>

                <!-- Flash Messages -->
                {% with messages = get_flashed_messages() %}
                    {% if messages %}
                        <div class="alert alert-danger">
                            <ul class="mb-0">
                                {% for message in messages %}
                                    <li>{{ message }}</li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                {% endwith %}

                <form action="/register" method="POST">
                    {{ form.hidden_tag() }}

                    <!-- Personal Information Section -->
                    <div class="form-section">
                        <h3 class="section-title">Personal Information</h3>
                        <div class="row g-3">
                            <div class="col-md-6">
                                {{ form.first_name.label(class_='form-label') }}
                                {{ form.first_name(class='form-control', placeholder='Enter your first name') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.last_name.label(class_='form-label') }}
                                {{ form.last_name(class='form-control', placeholder='Enter your last name') }}
                            </div>
                            <div class="col-12">
                                {{ form.email.label(class_='form-label') }}
                                {{ form.email(class='form-control', placeholder='Enter your email') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.password.label(class_='form-label') }}
                                {{ form.password(class='form-control', placeholder='Choose a password') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.confirm_password.label(class_='form-label') }}
                                {{ form.confirm_password(class='form-control', placeholder='Confirm your password') }}
                            </div>
                        </div>
                    </div>

                    <!-- Digital Identity Section -->
                    <div class="form-section">
                        <h3 class="section-title">Digital Identity</h3>
                        <p class="text-muted mb-3">Choose how you want to manage your digital identity</p>
                        
                        <div class="did-options">
                            <div class="did-option" onclick="selectDIDOption('generate')">
                                <i class="fas fa-plus-circle"></i>
                                <h4>Generate New DID</h4>
                                <p class="text-muted mb-0">Create a new digital identity</p>
                            </div>
                            <div class="did-option" onclick="selectDIDOption('link')">
                                <i class="fas fa-link"></i>
                                <h4>Link Existing Wallet</h4>
                                <p class="text-muted mb-0">Connect your digital wallet</p>
                            </div>
                        </div>
                        <input type="hidden" name="did_option" id="did_option" value="">
                    </div>

                    <!-- Address Section -->
                    <div class="form-section">
                        <h3 class="section-title">Address Information</h3>
                        <div class="row g-3">
                            <div class="col-12">
                                {{ form.street.label(class_='form-label') }}
                                {{ form.street(class='form-control', placeholder='Enter street address') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.city.label(class_='form-label') }}
                                {{ form.city(class='form-control', placeholder='Enter city') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.state.label(class_='form-label') }}
                                {{ form.state(class='form-control', placeholder='Enter state') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.country.label(class_='form-label') }}
                                {{ form.country(class='form-control', placeholder='Enter country') }}
                            </div>
                            <div class="col-md-6">
                                {{ form.pincode.label(class_='form-label') }}
                                {{ form.pincode(class='form-control', placeholder='Enter pincode') }}
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2">
                        {{ form.submit(class_='btn btn-primary btn-lg') }}
                        <a href="/login" class="btn btn-outline-secondary">Already have an account? Login</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h5 class="modal-title">Registration Successful!</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center">
                    <i class="fas fa-check-circle text-success fa-4x mb-3"></i>
                    <h4>Your DID has been created</h4>
                    <p class="text-muted" id="userDID">did:example:123abc</p>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        Your Verifiable Credential has been issued and saved to your wallet
                    </div>
                    <button class="btn btn-primary" onclick="downloadVC()">
                        <i class="fas fa-download"></i>
                        Download Verifiable Credential
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function selectDIDOption(option) {
            document.querySelectorAll('.did-option').forEach(el => el.classList.remove('selected'));
            event.currentTarget.classList.add('selected');
            document.getElementById('did_option').value = option;
            
            if (option === 'link') {
                // Show wallet connection modal or trigger wallet connect
                alert('Wallet connection feature coming soon!');
            }
        }

        function downloadVC() {
            // Placeholder for VC download logic
            alert('VC download feature coming soon!');
        }

        // Show success modal after successful registration
        {% if registration_success %}
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        {% endif %}
    </script>
</body>
</html>



================================================
FILE: templates/settings.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Settings - SwaBhoomi</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background: #f7fafc;
            min-height: 100vh;
        }
        
        .settings-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }
        
        .settings-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .settings-section {
            margin-bottom: 2rem;
        }
        
        .settings-section h3 {
            color: #2d3748;
            margin-bottom: 1rem;
        }
        
        .settings-card {
            background: #f8fafc;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
        }
        
        .settings-card h4 {
            color: #4a5568;
            margin-bottom: 1rem;
        }
        
        .btn-danger {
            background: #f56565;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 10px;
        }
        
        .btn-danger:hover {
            background: #e53e3e;
        }
    </style>
</head>
<body>
    <div class="settings-container">
        <div class="settings-header">
            <h2>Account Settings</h2>
            <p class="text-muted">Manage your account preferences and security settings</p>
        </div>

        <!-- Account Information -->
        <div class="settings-section">
            <h3>Account Information</h3>
            <div class="settings-card">
                <h4>Personal Details</h4>
                <p><strong>Name:</strong> {{ current_user.name }}</p>
                <p><strong>Email:</strong> {{ current_user.email }}</p>
                <button class="btn btn-outline-primary">Edit Profile</button>
            </div>
        </div>

        <!-- Security Settings -->
        <div class="settings-section">
            <h3>Security</h3>
            <div class="settings-card">
                <h4>Password</h4>
                <p>Last changed: Never</p>
                <button class="btn btn-outline-primary">Change Password</button>
            </div>
            <div class="settings-card">
                <h4>Two-Factor Authentication</h4>
                <p>Status: Not enabled</p>
                <button class="btn btn-outline-primary">Enable 2FA</button>
            </div>
        </div>

        <!-- Digital Identity -->
        <div class="settings-section">
            <h3>Digital Identity</h3>
            <div class="settings-card">
                <h4>DID Management</h4>
                <p><strong>Your DID:</strong> {{ current_user.did }}</p>
                <button class="btn btn-outline-primary">Manage DID</button>
            </div>
        </div>

        <!-- Danger Zone -->
        <div class="settings-section">
            <h3>Danger Zone</h3>
            <div class="settings-card">
                <h4>Delete Account</h4>
                <p>Once you delete your account, there is no going back. Please be certain.</p>
                <button class="btn btn-danger">Delete Account</button>
            </div>
            <div class="settings-card">
                <h4>Logout</h4>
                <p>Sign out of your account on this device.</p>
                <a href="/logout" class="btn btn-outline-danger">Logout</a>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html> 


================================================
FILE: templates/test_db.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Database Test</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1>Database Test Results</h1>
        
        <div class="card mt-4">
            <div class="card-header">
                <h2>Tables in Database</h2>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    {% for table in tables %}
                    <li class="list-group-item">
                        <h3>{{ table['Tables_in_swabhoomi'] }}</h3>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Field</th>
                                    <th>Type</th>
                                    <th>Null</th>
                                    <th>Key</th>
                                    <th>Default</th>
                                    <th>Extra</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for field in table_info[table['Tables_in_swabhoomi']] %}
                                <tr>
                                    <td>{{ field['Field'] }}</td>
                                    <td>{{ field['Type'] }}</td>
                                    <td>{{ field['Null'] }}</td>
                                    <td>{{ field['Key'] }}</td>
                                    <td>{{ field['Default'] }}</td>
                                    <td>{{ field['Extra'] }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
</body>
</html> 


================================================
FILE: templates/transactions.html
================================================
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0"><i class="fas fa-exchange-alt me-2"></i>Transactions</h4>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-handshake fa-3x text-success mb-3"></i>
                                    <h5 class="card-title">Transfer Property</h5>
                                    <p class="card-text">Transfer property ownership to another user</p>
                                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#transferModal">
                                        <i class="fas fa-exchange-alt me-1"></i>Transfer
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-history fa-3x text-info mb-3"></i>
                                    <h5 class="card-title">Transaction History</h5>
                                    <p class="card-text">View your past transactions</p>
                                    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#historyModal">
                                        <i class="fas fa-history me-1"></i>View History
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0"><i class="fas fa-list me-2"></i>Recent Transactions</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Transaction ID</th>
                                            <th>Type</th>
                                            <th>Property</th>
                                            <th>Date</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td colspan="6" class="text-center">
                                                <div class="alert alert-info">
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    No recent transactions found.
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Transfer Modal -->
<div class="modal fade" id="transferModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title"><i class="fas fa-exchange-alt me-2"></i>Transfer Property</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label class="form-label">Select Property</label>
                        <select class="form-select">
                            <option selected>Choose property...</option>
                            <option>Property 1</option>
                            <option>Property 2</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Recipient DID</label>
                        <input type="text" class="form-control" placeholder="Enter recipient's DID">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Transfer Reason</label>
                        <textarea class="form-control" rows="3" placeholder="Enter reason for transfer"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success">
                    <i class="fas fa-exchange-alt me-1"></i>Transfer
                </button>
            </div>
        </div>
    </div>
</div>

<!-- History Modal -->
<div class="modal fade" id="historyModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title"><i class="fas fa-history me-2"></i>Transaction History</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Property</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="4" class="text-center">
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>
                                        No transaction history found.
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
.card {
    border: none;
    border-radius: 15px;
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

.card-header {
    border-radius: 15px 15px 0 0 !important;
}

.table th {
    background-color: #f8f9fa;
}

.btn {
    border-radius: 8px;
}

.modal-content {
    border-radius: 15px;
}

.modal-header {
    border-radius: 15px 15px 0 0 !important;
}

.status-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.8rem;
}

.status-pending {
    background-color: #fff3cd;
    color: #856404;
}

.status-completed {
    background-color: #d4edda;
    color: #155724;
}

.status-failed {
    background-color: #f8d7da;
    color: #721c24;
}
</style>
{% endblock %} 


================================================
FILE: test/.gitkeep
================================================
[Empty file]

