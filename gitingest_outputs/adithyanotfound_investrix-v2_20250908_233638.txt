Directory structure:
└── adithyanotfound-investrix-v2/
    ├── README.md
    ├── components.json
    ├── eslint.config.mjs
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    └── src/
        ├── app/
        │   ├── firebase.ts
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── page.tsx
        │   ├── api/
        │   │   └── edgestore/
        │   │       └── [...edgestore]/
        │   │           └── route.ts
        │   ├── dashboard/
        │   │   ├── investee/
        │   │   │   ├── page.tsx
        │   │   │   ├── application/
        │   │   │   │   ├── page.tsx
        │   │   │   │   └── documents/
        │   │   │   │       └── page.tsx
        │   │   │   ├── bidconfirmation/
        │   │   │   │   └── page.tsx
        │   │   │   ├── bids/
        │   │   │   │   └── page.tsx
        │   │   │   ├── viewapplication/
        │   │   │   │   └── page.tsx
        │   │   │   └── viewdetails/
        │   │   │       └── page.tsx
        │   │   └── investor/
        │   │       ├── page.tsx
        │   │       ├── bid/
        │   │       │   └── [id]/
        │   │       │       └── page.tsx
        │   │       ├── MyBids/
        │   │       │   └── page.tsx
        │   │       ├── preferences/
        │   │       │   └── page.tsx
        │   │       ├── recom/
        │   │       │   └── [id]/
        │   │       │       └── page.tsx
        │   │       └── viewapplication/
        │   │           └── page.tsx
        │   ├── login/
        │   │   └── page.tsx
        │   └── signup/
        │       └── page.tsx
        ├── components/
        │   ├── ChatToggleButton.tsx
        │   ├── clientProviders.tsx
        │   ├── Navbar.tsx
        │   ├── magicui/
        │   │   ├── interactive-grid-pattern.tsx
        │   │   ├── retro-grid.tsx
        │   │   └── sparkles-text.tsx
        │   └── ui/
        │       ├── button.tsx
        │       ├── input.tsx
        │       └── percentage-circle.tsx
        └── lib/
            ├── contracts.ts
            ├── edgestore.ts
            └── utils.ts

================================================
FILE: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}


================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "investrix",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@aptos-labs/ts-sdk": "^1.35.0",
    "@aptos-labs/wallet-adapter-react": "^4.1.0",
    "@edgestore/react": "^0.3.2",
    "@edgestore/server": "^0.3.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@react-google-maps/api": "^2.20.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "firebase": "^11.3.1",
    "lucide-react": "^0.475.0",
    "motion": "^12.4.5",
    "next": "^15.2.3",
    "next-themes": "^0.4.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}



================================================
FILE: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
FILE: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		animation: {
  			grid: 'grid 15s linear infinite'
  		},
  		keyframes: {
  			grid: {
  				'0%': {
  					transform: 'translateY(-50%)'
  				},
  				'100%': {
  					transform: 'translateY(0)'
  				}
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: src/app/firebase.ts
================================================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

export  {auth ,  db};


================================================
FILE: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@keyframes gradientMove {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}

@keyframes blob {
  0% {
    transform: translate(0px, 0px) scale(1);
  }
  33% {
    transform: translate(30px, -50px) scale(1.1);
  }
  66% {
    transform: translate(-20px, 20px) scale(0.9);
  }
  100% {
    transform: translate(0px, 0px) scale(1);
  }
}

.animate-blob {
  animation: blob 7s infinite;
}

.animation-delay-2000 {
  animation-delay: 2s;
}

.animation-delay-4000 {
  animation-delay: 4s;
}


================================================
FILE: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Suspense } from "react";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ChatToggleButton } from "@/components/ChatToggleButton";
import { ClientProviders } from "@/components/clientProviders";

const geistSans = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
  display: "swap",
});

const geistMono = Geist_Mono({
  subsets: ["latin"],
  variable: "--font-geist-mono",
  display: "swap",
});

export const metadata: Metadata = {
  title: "Investrix - Where Innovation Meets Investment",
  description: "AI-powered investment platform connecting investors with opportunities",
  icons: {
    icon: "/favicon.ico",
  },
};

export const viewport = {
  width: "device-width",
  initialScale: 1,
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Suspense fallback={<div>Loading...</div>}>
          <ClientProviders>
            {children}
            <ChatToggleButton />
          </ClientProviders>
        </Suspense>
      </body>
    </html>
  );
}


================================================
FILE: src/app/page.tsx
================================================
"use client";
import { Button } from "@/components/ui/button";
import { RetroGrid } from "@/components/magicui/retro-grid";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { Sparkles, Shield, Rocket, ChartBar, ArrowRight } from "lucide-react";

export default function Home() {
  const router = useRouter();

  const features = [
    {
      icon: <Sparkles className="w-6 h-6" />,
      title: "Smart Investments",
      description: "AI-powered matching with verified investors"
    },
    {
      icon: <Shield className="w-6 h-6" />,
      title: "Secure Platform",
      description: "Enterprise-grade security for your investments"
    },
    {
      icon: <ChartBar className="w-6 h-6" />,
      title: "Real-time Analytics",
      description: "Track your investment performance live"
    }
  ];

  // Add error boundaries around router pushes
  const handleNavigation = (path: string) => {
    try {
      router.push(path);
    } catch (error) {
      console.error('Navigation error:', error);
    }
  };

  return (
    <div className="relative min-h-screen w-full bg-black overflow-hidden">
      {/* Animated Background Grid */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.4 }}
        transition={{ duration: 1 }}
        className="absolute inset-0 -z-10"
      >
        <RetroGrid className="stroke-white" />
      </motion.div>
      <RetroGrid className="stroke-white opacity-0.9 " />
      {/* Navigation */}
      <motion.nav 
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.5 }}
        className="fixed top-0 w-full z-50 px-6 py-4 backdrop-blur-sm border-b border-white/10"
      >
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Rocket className="w-8 h-8 text-white" />
            <span className="text-white text-xl font-medium">Investrix</span>
          </div>
          <div className="flex gap-4">
            <Button 
              variant="ghost" 
              className="text-white hover:text-black hover:bg-white/90 transition-all duration-300"
              onClick={() => handleNavigation('/login')}
            >
              Log in
            </Button>
            <Button 
              className="bg-white text-black hover:bg-gray-100 transition-all duration-300"
              onClick={() => handleNavigation('/signup')}
            >
              Sign up
            </Button>
          </div>
        </div>
      </motion.nav>

      {/* Main Content */}
      <main className="relative flex min-h-screen flex-col items-center justify-center px-4">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="relative z-10 max-w-5xl text-center space-y-8"
        >
          {/* Main Heading */}
          <div className="space-y-6">
            <div className="relative inline-block">
              <motion.h1 
                initial={{ scale: 0.9 }}
                animate={{ scale: 1 }}
                transition={{ duration: 0.5 }}
                className="text-7xl md:text-8xl font-bold tracking-tight"
              >
                <span className="relative">
                  <span className="text-white">Invest</span>
                  {/* Animated underline for "Invest" */}
                  <motion.div
                    initial={{ scaleX: 0 }}
                    animate={{ scaleX: 1 }}
                    transition={{
                      duration: 1,
                      delay: 0.5,
                      ease: "easeInOut",
                      repeat: Infinity,
                      repeatType: "reverse",
                      repeatDelay: 0.5
                    }}
                    className="absolute bottom-2 left-0 w-full h-0.5 origin-left "
                    style={{
                      background: "linear-gradient(90deg, #22c55e, #10b981, #22c55e)",
                      backgroundSize: "200% 100%",
                      animation: "gradientMove 2s linear infinite"
                    }}
                  />
                </span>
                <span className="text-white">rix</span>
              </motion.h1>
            </div>
            <motion.p 
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.3 }}
              className="text-xl md:text-2xl text-gray-400"
            >
              Where Innovation Meets Investment
            </motion.p>

            {/* Make in India line */}
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.6 }}
              className="text-lg md:text-xl font-medium text-white"
            >
              Support{" "}
              <span className="text-[#FF9933]">#Ma</span>
              <span className="text-[#FFFFFF]">ke</span>
              <span className="text-[#138808]">In</span>
              <span className="text-[#0cb1cf]">India</span>
              {" "}by Investing today!
            </motion.p>
          </div>

          {/* Features Grid */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12"
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 + 0.5 }}
                className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10 hover:border-white/20 transition-all duration-300"
              >
                <div className="text-white mb-4">{feature.icon}</div>
                <h3 className="text-white text-lg font-medium mb-2">{feature.title}</h3>
                <p className="text-gray-400 text-sm">{feature.description}</p>
              </motion.div>
            ))}
          </motion.div>

          {/* CTA Button */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 1 }}
            className="mt-12"
          >
            <Button 
              className="bg-gradient-to-r from-green-500 to-emerald-600 text-white hover:opacity-90 px-8 py-6 text-lg rounded-full group transition-all duration-300"
              onClick={() => handleNavigation('/signup')}
            >
              Get Started for free
              <ArrowRight className="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform" />
            </Button>
          </motion.div>
        </motion.div>
      </main>

      {/* Floating Elements */}
      <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-green-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob" />
      <div className="absolute top-1/3 right-1/4 w-72 h-72 bg-emerald-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000" />
      <div className="absolute bottom-1/4 left-1/3 w-72 h-72 bg-green-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-4000" />

      {/* Background Gradients */}
      <div className="absolute inset-0 bg-gradient-to-t from-black via-black/80 to-transparent" />
      <div className="absolute bottom-0 left-0 w-full h-1/3 bg-gradient-to-t from-black to-transparent" />
    </div>
  );
}


================================================
FILE: src/app/api/edgestore/[...edgestore]/route.ts
================================================
import { initEdgeStore } from '@edgestore/server';
import { createEdgeStoreNextHandler } from '@edgestore/server/adapters/next/app';
Â 
const es = initEdgeStore.create();
Â 
/**
 * This is the main router for the Edge Store buckets.
 */
const edgeStoreRouter = es.router({
  publicFiles: es.fileBucket(),
});
Â 
const handler = createEdgeStoreNextHandler({
  router: edgeStoreRouter,
});
Â 
export { handler as GET, handler as POST };
Â 
/**
 * This type is used to create the type-safe client for the frontend.
 */
export type EdgeStoreRouter = typeof edgeStoreRouter;


================================================
FILE: src/app/dashboard/investee/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useEffect, useState } from "react";
import Navbar from "@/components/Navbar";
import { auth, db } from '@/app/firebase';
import { collection, getDocs, query, where, doc, getDoc } from "firebase/firestore";
import { onAuthStateChanged } from 'firebase/auth';
import { toast } from 'react-hot-toast';

type LoanApplication = {
  businessType: String;
  id: string;
  userId: string;
  companyName: string;
  loanAmount: number;
  loanAmountInINR: number;
  fundingStatus: 'pending' | 'approved' | 'finalized';
  purpose: string;
  interestRateExpected: string;
  tenure: string;
  date: string;
  isSpecial: boolean;
  acceptedBid?: {
    interestRate: string;
    tenure: string;
  };
};

export default function InvesteeDashboard() {
  const router = useRouter();
  const [loanApplications, setLoanApplications] = useState<LoanApplication[]>([]);
  const [finalizedLoans, setFinalizedLoans] = useState<LoanApplication[]>([]);
  const [loggedInUser, setLoggedInUser] = useState<string>('');

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setLoggedInUser(user.uid);
      } else {
        router.push('/');
      }
    });

    return () => unsubscribe();
  }, [router]);

  useEffect(() => {
    if (loggedInUser) {
      fetchLoanApplications();
    }
  }, [loggedInUser]);

  const fetchAcceptedBidForApplication = async (applicationId: string) => {
    try {
      const q = query(
        collection(db, 'bids'), 
        where('applicationId', '==', applicationId),
        where('status', '==', 'accepted')
      );
      const querySnapshot = await getDocs(q);
      
      if (!querySnapshot.empty) {
        const acceptedBid = querySnapshot.docs[0].data();
        return {
          interestRate: acceptedBid.interestRate,
          tenure: acceptedBid.tenure
        };
      }
      return null;
    } catch (error) {
      console.error('Error fetching accepted bid:', error);
      return null;
    }
  };

  const fetchLoanApplications = async () => {
    try {
      const docRef = getDocs(collection(db, "applications"));
      if (docRef) {
        const applications: LoanApplication[] = [];
        const finalized: LoanApplication[] = [];
        
        const docs = await docRef;
        
        for (const doc of docs.docs) {
          const application = { id: doc.id, ...doc.data() } as LoanApplication;
          if (application.userId === loggedInUser) {
            if (application.fundingStatus === 'finalized') {
              // Fetch accepted bid for finalized applications
              const acceptedBid = await fetchAcceptedBidForApplication(application.id);
              if (acceptedBid) {
                application.acceptedBid = acceptedBid;
              }
              finalized.push(application);
            } else {
              applications.push(application);
            }
          }
        }
        
        const sortedApplications = applications.sort((a, b) => {
          if (a.isSpecial === b.isSpecial) return 0;
          return a.isSpecial ? -1 : 1;
        });
        
        setLoanApplications(sortedApplications);
        setFinalizedLoans(finalized);
      } else {
        toast("No applications found!");
        setLoanApplications([]);
        setFinalizedLoans([]);
      }
    } catch (error) {
      toast.error("Error fetching loan applications!");
      console.error('Error fetching loan applications:', error);
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <Navbar />
      {/* Main Content */}
      <div className="p-6">
        {/* Header Actions */}
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-2xl font-bold">Investee Dashboard</h1>
          <Button 
            variant="outline" 
            className="border-white text-black hover:bg-white hover:text-black"
            onClick={() => router.push('/dashboard/investee/application')}
          >
            Create New Application
          </Button>
        </div>

        {/* Two Column Layout */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Active Loan Applications */}
          <div className="space-y-4">
            <h2 className="text-xl font-semibold mb-4">Your Active Applications</h2>
            <div className="space-y-4 max-h-[600px] overflow-y-auto">
              {loanApplications.length === 0 ? (
                <div className="p-4 rounded-lg border border-[#333333] bg-black text-center">
                  No Active Loan Applications Found
                </div>
              ) : (
                loanApplications.map((app) => (
                  <div 
                    key={app.id} 
                    className={`p-4 rounded-lg border ${app.isSpecial ? 'border-green-500' : 'border-[#333333]'} bg-black hover:border-white transition-colors`}
                  >
                    <div className="flex justify-between items-start mb-4">
                      <div className="flex items-center gap-2">
                        <h3 className="text-lg font-medium">{app.companyName}</h3>
                        {app.isSpecial && (
                          <span title="No transaction fees for this application!" className="text-green-500">
                            ðŸŒ±
                          </span>
                        )}
                      </div>
                      <span className={`px-3 py-1 text-black text-sm rounded-full ${
                        app.fundingStatus === 'pending' ? 'bg-yellow-500' : 
                        app.fundingStatus === 'approved' ? 'bg-green-500' : 'bg-blue-500'
                      }`}>
                        {app.fundingStatus.charAt(0).toUpperCase() + app.fundingStatus.slice(1)}
                      </span>
                    </div>
                    
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                      <div>
                        <p className="text-sm text-gray-400">Amount</p>
                        <p className="text-white font-medium">{app.loanAmount} APT</p>
                        <p className="text-sm text-gray-500">â‚¹{app.loanAmountInINR}</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-400">Purpose</p>
                        <p className="text-white font-medium">{app.businessType}</p>
                      </div>
                    </div>

                    <div className="mt-4 flex gap-3">
                      <Button 
                        className="bg-white text-black hover:bg-gray-200"
                        onClick={() => router.push(`/dashboard/investee/viewapplication?id=${app.id}`)}
                      >
                        View Details
                      </Button>
                      {app.fundingStatus !== 'finalized' && (
                        <Button 
                          className="bg-white text-black hover:bg-gray-200"
                          onClick={() => router.push(`/dashboard/investee/bids?id=${app.id}`)}
                        >
                          View Bids
                        </Button>
                      )}
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Active Loans and Chatbot */}
          <div className="space-y-8">
            {/* Active Loans Section */}
            <div className="space-y-4">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">Your Active Loans</h2>
                <p className="text-gray-400">
                  Total Borrowed: {finalizedLoans.reduce((sum, loan) => sum + loan.loanAmount, 0)} APT
                </p>
              </div>
              
              <div className="space-y-4 max-h-[600px] overflow-y-auto">
                {finalizedLoans.length === 0 ? (
                  <div className="p-4 rounded-lg border border-[#333333] bg-black text-center">
                    No Active Loans Found
                  </div>
                ) : (
                  finalizedLoans.map((loan) => (
                    <div 
                      key={loan.id}
                      className="p-4 rounded-lg border border-[#333333] bg-black hover:border-white transition-colors"
                    >
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold">
                          {loan.companyName.split(' ').map(word => word[0]).join('')}
                        </div>
                        <div className="flex-1">
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-medium text-white text-lg">{loan.companyName}</h3>
                              <p className="text-sm text-gray-400">{loan.businessType}</p>
                            </div>
                            <span className="px-3 py-1 bg-green-500 text-black text-sm rounded-full">
                              Active
                            </span>
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-4">
                            <div>
                              <p className="text-sm text-gray-400">Amount</p>
                              <p className="text-white font-medium">{loan.loanAmount} APT</p>
                              <p className="text-sm text-gray-500">â‚¹{loan.loanAmountInINR}</p>
                            </div>
                            <div>
                              <p className="text-sm text-gray-400">Interest Rate</p>
                              <p className="text-white font-medium">10 %</p>
                            </div>
                            <div>
                              <p className="text-sm text-gray-400">Tenure</p>
                              <p className="text-white font-medium">12 Months</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investee/application/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from 'react-hot-toast';
import { onAuthStateChanged } from 'firebase/auth';
import { doc, setDoc } from "firebase/firestore";
import { auth, db } from '@/app/firebase';

interface FormData {
  companyName: string;
  ownerName: string;
  contactNumber: string;
  businessType: string;
  yearsInOperation: string;
  annualRevenue: string;
  loanAmount: string;
  purpose: string;
  companyDescription: string;
  agreeToTerms: boolean;
}

export default function NewApplication() {
  const router = useRouter();
  const [loggedInUser, setLoggedInUser] = useState("");
  const [submittedApplicationId, setSubmittedApplicationId] = useState(0);
  
  const [formData, setFormData] = useState<FormData>({
    companyName: "",
    ownerName: "",
    contactNumber: "",
    businessType: "",
    yearsInOperation: "",
    annualRevenue: "",
    loanAmount: "",
    purpose: "",
    companyDescription: "",
    agreeToTerms: false
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Authentication check
  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setLoggedInUser(user.uid);
      } else {
        router.push("/login");
      }
    });
  }, [router]);

  const businessTypes = [
    "Manufacturing",
    "Retail",
    "Technology",
    "Services",
    "Healthcare",
    "Food & Beverage",
    "Construction",
    "Other",
  ];

  const loanPurposes = [
    "Working Capital",
    "Equipment Purchase",
    "Expansion",
    "Inventory",
    "Debt Refinancing",
    "Other",
  ];

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value, type } = e.target as HTMLInputElement;
    const inputValue = type === 'checkbox' ? (e.target as HTMLInputElement).checked : value;
    
    setFormData((prev) => ({
      ...prev,
      [name]: inputValue,
    }));
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.companyName) newErrors.companyName = "Company name is required";
    if (!formData.ownerName) newErrors.ownerName = "Owner name is required";
    if (!formData.contactNumber) {
      newErrors.contactNumber = "Contact number is required";
    } else if (!/^\d{10}$/.test(formData.contactNumber)) {
      newErrors.contactNumber = "Please enter a valid 10-digit number";
    }
    if (!formData.businessType) newErrors.businessType = "Business type is required";
    if (!formData.yearsInOperation) newErrors.yearsInOperation = "Years in operation is required";
    if (!formData.annualRevenue) newErrors.annualRevenue = "Annual revenue is required";
    if (!formData.loanAmount) newErrors.loanAmount = "Loan amount is required";
    if (!formData.purpose) newErrors.purpose = "Loan purpose is required";
    if (!formData.companyDescription) newErrors.companyDescription = "Company description is required";
    if (!formData.agreeToTerms) newErrors.agreeToTerms = "You must agree to the terms and conditions";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const randomID = () => {
    return Math.floor(Math.random() * 1000000000);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      setIsSubmitting(true);
      try {
        const applicationId = randomID();
        setSubmittedApplicationId(applicationId);
        
        // Map form data to application data structure
        const applicationData = {
          userId: loggedInUser,
          id: applicationId,
          applicationId,
          companyName: formData.companyName,
          contactPerson: formData.ownerName,
          phone: formData.contactNumber,
          businessType: formData.businessType,
          yearsInOperation: formData.yearsInOperation,
          annualRevenue: formData.annualRevenue,
          loanAmount: formData.loanAmount,
          loanPurpose: formData.purpose,
          companyDescription: formData.companyDescription,
          loanAmountInINR: parseInt(formData.loanAmount) * 777.36,
          fundingReceived: 0,
          fundingStatus: "pending",
          agreeTerms: formData.agreeToTerms
        };

        // Save to Firestore
        const applicationRef = doc(db, "applications", applicationId.toString());
        await setDoc(applicationRef, applicationData);

        toast.success("Application submitted successfully!");
        router.push(`/dashboard/investee/application/documents?id=${applicationId}&userId=${loggedInUser}`);
      } catch (error) {
        console.error("Error submitting application:", error);
        toast.error("Failed to submit the application. Please try again.");
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button 
          variant="ghost" 
          className="text-gray-300 hover:text-white"
          onClick={() => router.push('/dashboard/investee')}
        >
          Back to Dashboard
        </Button>
      </nav>

      <div className="max-w-3xl mx-auto p-6">
        <h1 className="text-2xl font-bold mb-6">New Loan Application</h1>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Company Details */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Company Name</label>
                <Input
                  name="companyName"
                  value={formData.companyName}
                  onChange={handleInputChange}
                  className={`bg-transparent border-[#333333] ${
                    errors.companyName ? 'border-red-500' : ''
                  }`}
                />
                {errors.companyName && (
                  <p className="text-red-500 text-sm mt-1">{errors.companyName}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Owner Name</label>
                <Input
                  name="ownerName"
                  value={formData.ownerName}
                  onChange={handleInputChange}
                  className={`bg-transparent border-[#333333] ${
                    errors.ownerName ? 'border-red-500' : ''
                  }`}
                />
                {errors.ownerName && (
                  <p className="text-red-500 text-sm mt-1">{errors.ownerName}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Contact Number</label>
                <Input
                  name="contactNumber"
                  value={formData.contactNumber}
                  onChange={handleInputChange}
                  type="tel"
                  className={`bg-transparent border-[#333333] ${
                    errors.contactNumber ? 'border-red-500' : ''
                  }`}
                />
                {errors.contactNumber && (
                  <p className="text-red-500 text-sm mt-1">{errors.contactNumber}</p>
                )}
              </div>
            </div>

            {/* Business Details */}
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Business Type</label>
                <select
                  name="businessType"
                  value={formData.businessType}
                  onChange={handleInputChange}
                  className={`w-full p-2 bg-transparent border rounded-md border-[#333333] ${
                    errors.businessType ? 'border-red-500' : ''
                  }`}
                >
                  <option value="" className="bg-black">Select business type</option>
                  {businessTypes.map((type) => (
                    <option key={type} value={type} className="bg-black">
                      {type}
                    </option>
                  ))}
                </select>
                {errors.businessType && (
                  <p className="text-red-500 text-sm mt-1">{errors.businessType}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Years in Operation</label>
                <Input
                  name="yearsInOperation"
                  value={formData.yearsInOperation}
                  onChange={handleInputChange}
                  type="number"
                  className="bg-transparent border-[#333333]"
                />
                {errors.yearsInOperation && (
                  <p className="text-red-500 text-sm mt-1">{errors.yearsInOperation}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Annual Revenue (in APT)</label>
                <Input
                  name="annualRevenue"
                  value={formData.annualRevenue}
                  onChange={handleInputChange}
                  type="number"
                  className="bg-transparent border-[#333333]"
                />
                {errors.annualRevenue && (
                  <p className="text-red-500 text-sm mt-1">{errors.annualRevenue}</p>
                )}
              </div>
            </div>
          </div>

          {/* Loan Details */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Loan Amount (in APT)</label>
              <Input
                name="loanAmount"
                value={formData.loanAmount}
                onChange={handleInputChange}
                type="number"
                className="bg-transparent border-[#333333]"
              />
              {errors.loanAmount && (
                <p className="text-red-500 text-sm mt-1">{errors.loanAmount}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Purpose of Loan</label>
              <select
                name="purpose"
                value={formData.purpose}
                onChange={handleInputChange}
                className={`w-full p-2 bg-transparent border rounded-md border-[#333333] ${
                  errors.purpose ? 'border-red-500' : ''
                }`}
              >
                <option value="" className="bg-black">Select loan purpose</option>
                {loanPurposes.map((purpose) => (
                  <option key={purpose} value={purpose} className="bg-black">
                    {purpose}
                  </option>
                ))}
              </select>
              {errors.purpose && (
                <p className="text-red-500 text-sm mt-1">{errors.purpose}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Brief Company Description</label>
              <Input
                name="companyDescription"
                value={formData.companyDescription}
                onChange={handleInputChange}
                className="bg-transparent border-[#333333]"
                placeholder="Brief description of your company and business model"
              />
              {errors.companyDescription && (
                <p className="text-red-500 text-sm mt-1">{errors.companyDescription}</p>
              )}
            </div>
          </div>

          {/* Terms and Conditions */}
          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              name="agreeToTerms"
              id="agreeToTerms"
              checked={formData.agreeToTerms}
              onChange={handleInputChange}
              className="h-4 w-4"
            />
            <label htmlFor="agreeToTerms" className="text-sm text-gray-300">
              I agree to the terms and conditions
            </label>
          </div>
          {errors.agreeToTerms && (
            <p className="text-red-500 text-sm">{errors.agreeToTerms}</p>
          )}

          {/* Submit Button */}
          <Button
            type="submit"
            className="w-full bg-white text-black hover:bg-gray-200"
            disabled={isSubmitting}
          >
            {isSubmitting ? "Submitting..." : "Continue to Document Upload"}
          </Button>
        </form>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investee/application/documents/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter, useSearchParams } from "next/navigation";
import { useState, useEffect, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Upload, AlertCircle, CheckCircle, Loader2 } from "lucide-react";
import { toast } from "react-hot-toast";
import { onAuthStateChanged } from "firebase/auth";
import { getDocs, collection, updateDoc, DocumentSnapshot } from "firebase/firestore";
import { auth, db } from "@/app/firebase";
import { useEdgeStore } from "@/lib/edgestore";

interface DocumentStatus {
  file: File | null;
  status: "idle" | "validating" | "success" | "error";
  url: string;
}

export default function DocumentUpload() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const applicationId = searchParams.get("id");
  const userId = searchParams.get("userId");

  const [loggedInUser, setLoggedInUser] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { edgestore } = useEdgeStore();

  const [documents, setDocuments] = useState<Record<string, DocumentStatus>>({
    identityProof: { file: null, status: "idle", url: "" },
    bankStatements: { file: null, status: "idle", url: "" },
    taxReturns: { file: null, status: "idle", url: "" },
    addressProof: { file: null, status: "idle", url: "" },
  });

  const [video, setVideo] = useState<File | null>(null);
  const [videoError, setVideoError] = useState<string | null>(null);
  const [videoStatus, setVideoStatus] = useState<"idle" | "validating" | "success" | "error">("idle");
  const [videoUrl, setVideoUrl] = useState("");

  // Tags state
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [availableTags, setAvailableTags] = useState<string[]>([
    "Technology",
    "Manufacturing",
    "Healthcare",
    "Agribusiness",
    "Renewable-Energy",
    "Education",
    "E-commerce",
    "Infrastructure",
    "Financial-Services",
    "Consumer-Goods",
    "Artisanal-and-Handicrafts",
    "Sustainable-and-Social-Enterprises",
    "Green Buildings",
    "Sustainable Agriculture",
    "Sustainable Forestry",
    "Green Transportation",
    "Waste Management",
    "Recycling",
  ]);
  const [customTag, setCustomTag] = useState("");

  // Authentication check
  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setLoggedInUser(user.uid);
        // If there's a userId in the URL and it doesn't match the logged-in user, redirect
        if (userId && userId !== user.uid) {
          toast.error("Unauthorized access");
          router.push("/dashboard/investee");
        }
      } else {
        router.push("/login");
      }
    });
  }, [router, userId]);

  const validateFile = async (file: File, type: string): Promise<boolean> => {
    // For documents
    if (type !== "video") {
      // Validate file size (max 5MB for documents)
      if (file.size > 5 * 1024 * 1024) {
        toast.error(`File size should be less than 5MB`);
        return false;
      }

      // Validate file type
      const allowedTypes = ["application/pdf", "image/jpeg", "image/png"];
      if (!allowedTypes.includes(file.type)) {
        toast.error("Only PDF, JPEG, and PNG files are allowed");
        return false;
      }
    } else {
      // For video
      // Validate video size (max 50MB)
      if (file.size > 50 * 1024 * 1024) {
        toast.error("Video size should be less than 50MB");
        return false;
      }

      // Validate video type
      const allowedTypes = ["video/mp4", "video/quicktime"];
      if (!allowedTypes.includes(file.type)) {
        toast.error("Only MP4 and MOV formats are allowed");
        return false;
      }
    }

    return true;
  };

  const handleFileChange = async (documentId: string, file: File | null) => {
    if (!file) return;

    // Update state to show validating
    setDocuments((prev) => ({
      ...prev,
      [documentId]: {
        ...prev[documentId],
        file,
        status: "validating",
      },
    }));

    // Validate the file
    const isValid = await validateFile(file, "document");
    if (!isValid) {
      setDocuments((prev) => ({
        ...prev,
        [documentId]: {
          ...prev[documentId],
          status: "error",
        },
      }));
      return;
    }

    try {
      if (!edgestore) {
        toast.error("Upload service unavailable");
        setDocuments((prev) => ({
          ...prev,
          [documentId]: { ...prev[documentId], status: "error" },
        }));
        return;
      }

      // Upload to EdgeStore
      const res = await edgestore.publicFiles.upload({
        file,
        onProgressChange: (progress) => {
          console.log(`${documentId} upload progress:`, progress);
        },
      });

      // Update state with success
      setDocuments((prev) => ({
        ...prev,
        [documentId]: {
          file,
          status: "success",
          url: res.url,
        },
      }));
      toast.success(
        `${documentId.replace(/([A-Z])/g, " $1").trim()} uploaded successfully!`
      );
    } catch (error) {
      console.error(`Error uploading ${documentId}:`, error);
      setDocuments((prev) => ({
        ...prev,
        [documentId]: { ...prev[documentId], status: "error" },
      }));
      toast.error(
        `Failed to upload ${documentId.replace(/([A-Z])/g, " $1").trim()}`
      );
    }
  };

  const handleVideoUpload = async (file: File | null) => {
    if (!file) return;

    setVideoStatus("validating");
    setVideoError(null);

    // Validate the video
    const isValid = await validateFile(file, "video");
    if (!isValid) {
      setVideoStatus("error");
      return;
    }

    try {
      if (!edgestore) {
        throw new Error("Upload service unavailable");
      }

      // Upload to EdgeStore
      const res = await edgestore.publicFiles.upload({
        file,
        onProgressChange: (progress) => {
          console.log("Video upload progress:", progress);
        },
      });

      setVideo(file);
      setVideoStatus("success");
      setVideoUrl(res.url);
      toast.success("Pitch video uploaded successfully!");
    } catch (error) {
      console.error("Error uploading video:", error);
      setVideoStatus("error");
      setVideoError("Failed to upload video. Please try again.");
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = useCallback(
    async (e: React.DragEvent<HTMLDivElement>, documentId: string) => {
      e.preventDefault();
      e.stopPropagation();

      const droppedFile = e.dataTransfer.files[0];
      if (!droppedFile) return;

      await handleFileChange(documentId, droppedFile);
    },
    []
  );

  const handleSubmit = async () => {
    // Validate that all required documents, video, and at least one tag are provided
    const allDocumentsUploaded = Object.values(documents).every(
      (doc) => doc.status === "success"
    );
    if (!allDocumentsUploaded || videoStatus !== "success" || selectedTags.length === 0) {
      toast.error(
        "Please upload all required documents, pitch video, and select at least one tag"
      );
      return;
    }

    setIsSubmitting(true);
    try {
      if (!applicationId || !loggedInUser) {
        throw new Error("Missing application ID or user information");
      }

      // Get all document URLs
      const documentUrls = Object.entries(documents).reduce((acc, [key, value]) => {
        acc[key] = value.url;
        return acc;
      }, {} as Record<string, string>);

      // Find the application document and update it
      const applicationsRef = collection(db, "applications");
      const querySnapshot = await getDocs(applicationsRef);
      let applicationDoc: DocumentSnapshot<any> | null = null;

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        if (data.id.toString() === applicationId) {
          applicationDoc = doc;
        }
      });

      if (!applicationDoc) {
        throw new Error("Application not found");
      }
      //@ts-ignore
      await updateDoc(applicationDoc.ref as any, {
        documents: documentUrls,
        videoLink: videoUrl,
        tags: selectedTags,
      });

      toast.success("Application submitted successfully!");
      router.push(`/dashboard/investee/viewapplication?id=${applicationId}`);
    } catch (error) {
      console.error("Error submitting application:", error);
      toast.error("Failed to submit application. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button
          variant="ghost"
          className="text-white bg-black hover:bg-white hover:text-black"
          onClick={() => router.back()}
        >
          Back
        </Button>
      </nav>

      <div className="max-w-6xl mx-auto p-6">
        <h1 className="text-2xl font-bold mb-6">Upload Documents</h1>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Document Upload Section */}
          <div className="space-y-6">
            {Object.entries(documents).map(([docId, status]) => (
              <div key={docId} className="p-4 border border-[#333333] rounded-lg">
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <h3 className="font-medium capitalize">
                      {docId.replace(/([A-Z])/g, " $1").trim()}
                    </h3>
                    <p className="text-sm text-gray-400">
                      PDF, JPEG or PNG (max. 5MB)
                    </p>
                  </div>
                  {status.status === "success" && (
                    <CheckCircle className="text-green-500 h-5 w-5" />
                  )}
                  {status.status === "validating" && (
                    <Loader2 className="text-yellow-500 h-5 w-5 animate-spin" />
                  )}
                  {status.status === "error" && (
                    <AlertCircle className="text-red-500 h-5 w-5" />
                  )}
                </div>

                <div
                  className={`mt-4 border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors
                    ${status.status === "idle"
                      ? "border-gray-500 hover:border-white"
                      : ""
                    }
                    ${status.status === "validating" ? "border-yellow-500" : ""}
                    ${status.status === "success" ? "border-green-500" : ""}
                    ${status.status === "error" ? "border-red-500" : ""}`}
                  onDragOver={handleDragOver}
                  onDrop={(e) => handleDrop(e, docId)}
                >
                  <input
                    type="file"
                    id={docId}
                    className="hidden"
                    accept=".pdf,.jpg,.jpeg,.png"
                    onChange={(e) =>
                      handleFileChange(docId, e.target.files?.[0] || null)
                    }
                  />
                  <label
                    htmlFor={docId}
                    className="flex flex-col items-center justify-center gap-2 cursor-pointer"
                  >
                    <Upload className="h-6 w-6" />
                    {status.file ? "Change File" : "Drag & drop or click to upload"}
                  </label>
                  {status.file && (
                    <p className="text-sm text-gray-400 mt-2">
                      {status.file.name}
                    </p>
                  )}
                </div>
              </div>
            ))}
          </div>
          {/* Video Upload Section */}
          <div className="space-y-6">
            <div className="p-4 border border-[#333333] rounded-lg">
              <div className="flex justify-between items-start mb-2">
                <div>
                  <h3 className="font-medium">Pitch Video</h3>
                  <p className="text-sm text-gray-400">
                    Upload a short video (max. 50MB) pitching your business and loan requirement
                  </p>
                </div>
                {videoStatus === "success" && (
                  <CheckCircle className="text-green-500 h-5 w-5" />
                )}
                {videoStatus === "validating" && (
                  <Loader2 className="text-yellow-500 h-5 w-5 animate-spin" />
                )}
                {videoStatus === "error" && (
                  <AlertCircle className="text-red-500 h-5 w-5" />
                )}
              </div>

              <div
                className={`mt-4 border-2 border-dashed rounded-lg p-4 text-center cursor-pointer transition-colors
                  ${videoStatus === "idle"
                    ? "border-gray-500 hover:border-white"
                    : ""
                  }
                  ${videoStatus === "validating" ? "border-yellow-500" : ""}
                  ${videoStatus === "success" ? "border-green-500" : ""}
                  ${videoStatus === "error" ? "border-red-500" : ""}`}
              >
                <input
                  type="file"
                  id="pitchVideo"
                  className="hidden"
                  accept="video/mp4,video/quicktime"
                  onChange={(e) =>
                    handleVideoUpload(e.target.files?.[0] || null)
                  }
                />
                <label
                  htmlFor="pitchVideo"
                  className="flex flex-col items-center justify-center gap-2 cursor-pointer"
                >
                  <Upload className="h-6 w-6" />
                  {video ? "Change Video" : "Drag & drop or click to upload"}
                </label>
                {video && (
                  <p className="text-sm text-gray-400 mt-2">{video.name}</p>
                )}
                {videoError && (
                  <p className="text-red-500 text-sm mt-2">{videoError}</p>
                )}
              </div>

              {video && videoStatus === "success" && (
                <video
                  className="mt-4 w-full rounded-lg"
                  controls
                  src={videoUrl || URL.createObjectURL(video)}
                />
              )}
            </div>
            {/* Tags Section */}
          <div className="mt-8">
            <h2 className="text-2xl font-bold mb-4">Tags</h2>
            <p className="text-sm text-gray-400 mb-4">
              Select tags that best describe your business:
            </p>
            <div className="flex flex-wrap gap-2 mb-4">
              {availableTags.map((tag) => (
                <button
                  key={tag}
                  type="button"
                  onClick={() => {
                    setSelectedTags((prev) => [...prev, tag]);
                    setAvailableTags((prev) => prev.filter((t) => t !== tag));
                  }}
                  className="px-3 py-1 rounded-full text-sm bg-gray-700 hover:bg-gray-600"
                >
                  {tag}
                </button>
              ))}
            </div>
            <div className="flex gap-2 mb-4">
              <input
                type="text"
                value={customTag}
                onChange={(e) => setCustomTag(e.target.value)}
                placeholder="Enter custom tag"
                className="flex-1 px-3 py-2 border rounded-lg border-gray-600 bg-black text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
              <button
                type="button"
                onClick={() => {
                  if (customTag.trim()) {
                    setSelectedTags((prev) => [...prev, customTag.trim()]);
                    setCustomTag("");
                  }
                }}
                className="px-4 py-2 text-white bg-blue-800 rounded-lg"
              >
                Add
              </button>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Selected Tags:</h3>
              <div className="flex flex-wrap gap-2">
                {selectedTags.map((tag, index) => (
                  <div
                    key={index}
                    className="px-3 py-1 rounded-full text-sm bg-gray-800 text-white flex items-center gap-1"
                  >
                    {tag}
                    <button
                      type="button"
                      onClick={() => {
                        setSelectedTags((prev) =>
                          prev.filter((t) => t !== tag)
                        );
                        setAvailableTags((prev) => [...prev, tag]);
                      }}
                      className="text-red-400 hover:text-red-300"
                    >
                      Ã—
                    </button>
                  </div>
                ))}
              </div>

            </div>
          </div>
          </div>
          
        </div>

        {/* Submit Button */}
        <div className="mt-8 flex justify-end gap-4">
          <Button
            variant="outline"
            className="border-white text-white bg-black hover:bg-white hover:text-black"
            onClick={() => router.back()}
          >
            Back
          </Button>
          <Button
            className="bg-white text-black hover:bg-gray-200"
            onClick={handleSubmit}
            disabled={
              isSubmitting ||
              !Object.values(documents).every((doc) => doc.status === "success") ||
              videoStatus !== "success" ||
              selectedTags.length === 0
            }
          >
            {isSubmitting ? "Submitting..." : "Submit Application"}
          </Button>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/app/dashboard/investee/bidconfirmation/page.tsx
================================================
"use client";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  CheckCircle,
  Building,
  Calendar,
  DollarSign,
  TrendingUp,
  Clock,
  ArrowRight,
  FileText,
  Shield,
  AlertCircle
} from "lucide-react";

// Mock selected bid data - replace with actual data from your state management
const selectedBid = {
  id: "BID001",
  investorName: "Harshit",
  investorType: "Individual Investor",
  bidAmount: "120",
  currency: "APT",
  inrValue: "â‚¹93,283",
  interestRate: "10.5%",
  tenure: "12 months",
  monthlyPayment: "11 APT",
  disbursementDate: "2024-03-15",
  firstPaymentDate: "2024-04-15",
  documents: [
    "Loan Agreement",
    "Payment Schedule",
    "Terms & Conditions"
  ]
};


export default function BidConfirmation() {
  const router = useRouter();
  const [isConfirming, setIsConfirming] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [countdown, setCountdown] = useState(5);

  useEffect(() => {
    if (showSuccess) {
      const timer = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(timer);
            router.push('/dashboard/investee');
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [showSuccess, router]);

  const handleConfirm = async () => {
    setIsConfirming(true);
    try {
      // API call to confirm bid would go here
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call
      setShowSuccess(true);
    } catch (error) {
      console.error('Error confirming bid:', error);
    } finally {
      setIsConfirming(false);
    }
  };

  if (showSuccess) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center space-y-4 p-6">
          <CheckCircle className="w-16 h-16 text-green-500 mx-auto" />
          <h1 className="text-2xl font-bold">Bid Successfully Confirmed!</h1>
          <p className="text-gray-400">
            Your investment agreement has been finalized with {selectedBid.investorName}
          </p>
          <p className="text-sm text-gray-500">
            Redirecting to dashboard in {countdown} seconds...
          </p>
          <Button
            onClick={() => router.push('/dashboard/investee')}
            className="bg-white text-black hover:bg-gray-200"
          >
            Go to Dashboard Now
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button 
          variant="ghost" 
          className="text-gray-300 hover:text-white"
          onClick={() => router.push('/dashboard/investee/bids')}
        >
          Back to Bids
        </Button>
      </nav>

      <div className="max-w-4xl mx-auto p-6">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold mb-2">Confirm Investment Agreement</h1>
          <p className="text-gray-400">
            Please review the final terms before confirming the investment
          </p>
        </div>

        {/* Investor Details */}
        <div className="bg-[#111111] rounded-lg border border-[#333333] p-6 mb-6">
          <div className="flex items-start justify-between mb-6">
            <div className="flex items-center gap-2">
              <Building className="w-5 h-5 text-gray-400" />
              <div>
                <h2 className="text-lg font-medium">{selectedBid.investorName}</h2>
                <p className="text-sm text-gray-400">{selectedBid.investorType}</p>
              </div>
            </div>
            <Shield className="w-5 h-5 text-green-500" />
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
            <div>
              <p className="text-sm text-gray-400">Investment Amount</p>
              <div className="flex items-center mt-1">
                <DollarSign className="w-4 h-4 mr-1 text-gray-400" />
                <p className="font-medium">
                  {selectedBid.bidAmount} {selectedBid.currency}
                </p>
              </div>
              <p className="text-sm text-gray-500">{selectedBid.inrValue}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400">Interest Rate</p>
              <div className="flex items-center mt-1">
                <TrendingUp className="w-4 h-4 mr-1 text-gray-400" />
                <p className="font-medium">{selectedBid.interestRate}</p>
              </div>
            </div>
            <div>
              <p className="text-sm text-gray-400">Tenure</p>
              <div className="flex items-center mt-1">
                <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                <p className="font-medium">{selectedBid.tenure}</p>
              </div>
            </div>
            <div>
              <p className="text-sm text-gray-400">Monthly Payment</p>
              <p className="font-medium mt-1">{selectedBid.monthlyPayment}</p>
            </div>
          </div>
        </div>

        {/* Important Dates */}
        <div className="bg-[#111111] rounded-lg border border-[#333333] p-6 mb-6">
          <h3 className="text-lg font-medium mb-4">Important Dates</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <p className="text-sm text-gray-400">Disbursement Date</p>
              <div className="flex items-center mt-1">
                <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                <p className="font-medium">{selectedBid.disbursementDate}</p>
              </div>
            </div>
            <div>
              <p className="text-sm text-gray-400">First Payment Due</p>
              <div className="flex items-center mt-1">
                <Clock className="w-4 h-4 mr-1 text-gray-400" />
                <p className="font-medium">{selectedBid.firstPaymentDate}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Documents */}
        <div className="bg-[#111111] rounded-lg border border-[#333333] p-6 mb-8">
          <h3 className="text-lg font-medium mb-4">Required Documents</h3>
          <div className="space-y-3">
            {selectedBid.documents.map((doc, index) => (
              <div key={index} className="flex items-center gap-2">
                <FileText className="w-4 h-4 text-gray-400" />
                <span>{doc}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Warning */}
        <div className="bg-yellow-500/10 rounded-lg p-4 mb-8">
          <div className="flex items-start gap-3">
            <AlertCircle className="w-5 h-5 text-yellow-500 mt-0.5" />
            <div>
              <p className="font-medium text-yellow-500">Important Notice</p>
              <p className="text-sm text-gray-400 mt-1">
                By confirming this agreement, you are entering into a legally binding contract.
                Please ensure you have reviewed all terms and conditions.
              </p>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end gap-4">
          <Button
            variant="outline"
            className="border-[#333333] text-black hover:bg-[#222222]"
            onClick={() => router.push('/dashboard/investee/bids')}
          >
            Cancel
          </Button>
          <Button
            onClick={handleConfirm}
            disabled={isConfirming}
            className="bg-green-500 text-white hover:bg-green-600"
          >
            {isConfirming ? (
              'Confirming...'
            ) : (
              <>
                Confirm Agreement
                <ArrowRight className="w-4 h-4 ml-2" />
              </>
            )}
          </Button>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investee/bids/page.tsx
================================================
'use client';
/* eslint-disable */
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Button } from "@/components/ui/button";
import {
  Building,
  DollarSign,
  Calendar,
  TrendingUp,
  CheckCircle,
  Shield,
  AlertCircle,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { db, auth } from '@/app/firebase';
import { collection, query, where, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';

// Types
interface Bid {
  bidId: string;
  userId: string;
  applicationId: string;
  interestRate: string;
  tenure: string;
  status: string;
  loanAmount: string;
  currency: string;
  inrValue: string;
  monthlyPayment: string;
  bidDate: string;
  smeuserId?: string;
  investorDetails?: {
    portfolioSize: string;
    successfulInvestments: number;
    averageInvestmentSize: string;
    verificationStatus: string;
    description: string;
    previousInvestments: string[];
  };
}

interface UserData {
  displayName: string;
  finalizedBid?: {
    applicationId: string;
    finalized: boolean;
  };
  portfolioSize?: string;
  successfulInvestments?: number;
  averageInvestmentSize?: string;
  verificationStatus?: string;
  description?: string;
  previousInvestments?: string[];
}

export default function BidsOverview() {
  const [filteredBids, setFilteredBids] = useState<Bid[]>([]);
  const [names, setNames] = useState<{ [key: string]: string }>({});
  const [showModal, setShowModal] = useState(false);
  const [selectedBid, setSelectedBid] = useState<Bid | null>(null);
  const [expandedBid, setExpandedBid] = useState<string | null>(null);
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const [currentAptosKey, setCurrentAptosKey] = useState<string | null>(null);
  const search = useSearchParams();
  const router = useRouter();
  const id = search.get("id");

  useEffect(() => {
    // Get current user ID
    const unsubscribe = auth.onAuthStateChanged(async (user) => {
      if (user) {
        setCurrentUserId(user.uid);
        setCurrentAptosKey(user.phoneNumber);
        const userRef = doc(db, "users", user.uid); // Assuming uid is the document ID
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
          console.log("Phone Number:", userSnap.data().phoneNumber);
          setCurrentAptosKey(userSnap.data().phoneNumber);
        } else {
          console.log("No such user!");
          return null;
        }
      }
    });

    return () => unsubscribe();
  }, []);

  useEffect(() => {
    const fetchFilteredBids = async () => {
      if (!id) return;

      try {
        const q = query(collection(db, 'bids'), where('applicationId', '==', id));
        const querySnapshot = await getDocs(q);

        const bidsPromises = querySnapshot.docs.map(async (document) => {
          const bid = { ...document.data(), bidId: document.id } as Bid;
          const userRef = doc(db, 'users', bid.userId.toString());
          const userSnap = await getDoc(userRef);

          if (userSnap.exists()) {
            const userData = userSnap.data() as UserData;
            setNames(prevNames => ({ ...prevNames, [bid.userId]: userData.displayName }));

            // Add investor details to bid
            bid.investorDetails = {
              portfolioSize: userData.portfolioSize || "N/A",
              successfulInvestments: userData.successfulInvestments || 0,
              averageInvestmentSize: userData.averageInvestmentSize || "N/A",
              verificationStatus: userData.verificationStatus || "unverified",
              description: userData.description || "No description available",
              previousInvestments: userData.previousInvestments || []
            };
          }
          return bid;
        });

        const bidsData = await Promise.all(bidsPromises);
        setFilteredBids(bidsData);
      } catch (error) {
        console.error('Error fetching filtered bids:', error);
      }
    };

    fetchFilteredBids();
  }, [id]);

  const toggleBidDetails = (bidId: string) => {
    setExpandedBid(expandedBid === bidId ? null : bidId);
  };

  const handleFinalizeBid = async (bid: Bid) => {
    try {
      // Add smeuserId to the selected bid
      const selectedBidRef = doc(db, 'bids', bid.bidId);
      await updateDoc(selectedBidRef, {
        smeuserId: currentAptosKey,
        status: 'payment'
      });

      // Update all other bids for this application to 'payment' status
      const querySnapshot = await getDocs(
        query(collection(db, 'bids'), where('applicationId', '==', bid.applicationId))
      );

      const updatePromises = querySnapshot.docs.map(async (document) => {
        if (document.id !== bid.bidId) {  // Skip the selected bid as we've already updated it
          await updateDoc(doc(db, 'bids', document.id), { status: 'payment' });
        }
      });

      await Promise.all(updatePromises);

      // Update application status
      const applicationRef = doc(db, 'applications', bid.applicationId);
      await updateDoc(applicationRef, { fundingStatus: 'payment' });

      // Update user document
      const userRef = doc(db, 'users', bid.userId.toString());
      const userSnap = await getDoc(userRef);
      if (userSnap.exists()) {
        await updateDoc(userRef, {
          finalizedBid: {
            applicationId: bid.applicationId,
            finalized: true,
          },
        });
      }

      //send email

      setShowModal(false);
      router.push('/dashboard/investee/bidconfirmation');
    } catch (error) {
      console.error('Error finalizing bid:', error);
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button
          variant="outline"
          className="text-gray-300 bg-black hover:text-black hover:bg-white"
          onClick={() => router.push('/dashboard/investee')}
        >
          Back to Dashboard
        </Button>
      </nav>

      <div className="max-w-6xl mx-auto p-6">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold mb-2">Active Bids</h1>
            <p className="text-gray-400">Review and finalize investment bids for your application</p>
          </div>
          {selectedBid && (
            <Button
              onClick={() => setShowModal(true)}
              className="bg-green-500 text-white hover:bg-green-600"
            >
              <CheckCircle className="w-4 h-4 mr-2" />
              Finalize Selected Bid
            </Button>
          )}
        </div>

        {/* Bids List */}
        <div className="space-y-4">
          {filteredBids.map((bid) => (
            <div
              key={bid.bidId}
              className={`bg-[#111111] rounded-lg border ${selectedBid?.bidId === bid.bidId
                  ? 'border-green-500'
                  : 'border-[#333333]'
                }`}
            >
              {/* Bid Header */}
              <div className="p-6">
                <div className="flex justify-between items-start">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Building className="w-5 h-5 text-gray-400" />
                      <h3 className="text-lg font-medium">{names[bid.userId] || "Unknown"}</h3>
                      {bid.investorDetails?.verificationStatus === "verified" && (
                        <Shield className="w-4 h-4 text-green-500" />
                      )}
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <Button
                      variant="outline"
                      className={`border-[#333333] ${selectedBid?.bidId === bid.bidId
                          ? 'bg-green-500 text-black hover:bg-green-600'
                          : 'text-black hover:bg-black hover:text-white ]'
                        }`}
                      onClick={() => setSelectedBid(selectedBid?.bidId === bid.bidId ? null : bid)}
                    >
                      {selectedBid?.bidId === bid.bidId ? 'Selected' : 'Select Bid'}
                    </Button>
                    <button
                      onClick={() => toggleBidDetails(bid.bidId)}
                      className="text-gray-400 hover:text-white"
                    >
                      {expandedBid === bid.bidId ? (
                        <ChevronUp className="w-5 h-5" />
                      ) : (
                        <ChevronDown className="w-5 h-5" />
                      )}
                    </button>
                  </div>
                </div>

                {/* Bid Summary */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                  <div>
                    <p className="text-sm text-gray-400">Bid Amount</p>
                    <div className="flex items-center mt-1">
                      <DollarSign className="w-4 h-4 mr-1 text-gray-400" />
                      <p className="font-medium">{bid.loanAmount} {bid.currency}</p>
                    </div>
                    <p className="text-sm text-gray-500">{bid.inrValue}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">Interest Rate</p>
                    <div className="flex items-center mt-1">
                      <TrendingUp className="w-4 h-4 mr-1 text-gray-400" />
                      <p className="font-medium">{bid.interestRate}</p>
                    </div>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">Tenure</p>
                    <div className="flex items-center mt-1">
                      <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                      <p className="font-medium">{bid.tenure}</p>
                    </div>
                  </div>
                  <div>
                    <p className="text-sm text-gray-400">Monthly Payment</p>
                    <p className="font-medium mt-1">{bid.monthlyPayment}</p>
                  </div>
                </div>
              </div>

              {/* Expanded Details */}
              {expandedBid === bid.bidId && bid.investorDetails && (
                <div className="px-6 pb-6 border-t border-[#333333] mt-4 pt-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <h4 className="font-medium">Investor Profile</h4>
                      <div className="space-y-2">
                        <div>
                          <p className="text-sm text-gray-400">Portfolio Size</p>
                          <p className="font-medium">{bid.investorDetails.portfolioSize}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Successful Investments</p>
                          <p className="font-medium">{bid.investorDetails.successfulInvestments}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Average Investment</p>
                          <p className="font-medium">{bid.investorDetails.averageInvestmentSize}</p>
                        </div>
                      </div>
                    </div>
                    <div className="space-y-4">
                      <h4 className="font-medium">Previous Investments</h4>
                      <div className="flex flex-wrap gap-2">
                        {bid.investorDetails.previousInvestments.map((company) => (
                          <span
                            key={company}
                            className="px-3 py-1 rounded-full bg-[#333333] text-sm"
                          >
                            {company}
                          </span>
                        ))}
                      </div>
                      <p className="text-sm text-gray-400">
                        {bid.investorDetails.description}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {filteredBids.length === 0 && (
          <div className="text-center py-12">
            <AlertCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">No Active Bids</h3>
            <p className="text-gray-400">
              There are currently no bids on your application.
              Check back later or adjust your application details.
            </p>
          </div>
        )}
      </div>

      {/* Confirmation Modal */}
      {showModal && selectedBid && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-[#111111] p-8 rounded-lg border border-[#333333]">
            <h3 className="text-xl font-medium mb-4">Confirm Bid Finalization</h3>
            <p className="text-gray-400 mb-6">
              Are you sure you want to finalize this bid? This action cannot be undone.
            </p>
            <div className="flex justify-end gap-4">
              <Button
                variant="outline"
                onClick={() => setShowModal(false)}
                className="border-[#333333] text-black"
              >
                Cancel
              </Button>
              <Button
                onClick={() => handleFinalizeBid(selectedBid)}
                className="bg-green-500 hover:bg-green-600"
              >
                Confirm Finalization
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/app/dashboard/investee/viewapplication/page.tsx
================================================
"use client"
/* eslint-disable */
import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { db } from "@/app/firebase"
import { doc, getDoc } from "firebase/firestore"
import { Button } from "@/components/ui/button"
import {
  Calendar,
  DollarSign,
  Phone,
  X,
  Building,
  Briefcase,
  Clock,
  AlertCircle,
  CheckCircle,
  Users,
} from "lucide-react"
import toast from "react-hot-toast"

// Types
interface Application {
  id: string | number
  companyName: string
  businessType: string
  tags?: string[] // Simplified to just string array since Firebase data shows no special tags
  loanPurpose: string
  yearsInOperation: number | string
  annualRevenue: number | string
  phone: string
  fundingStatus: string
  fundingReceived: number
  loanAmount: number | string
  loanAmountInINR: number
  pitch?: string
  videoLink?: string
  videoUrl?: string
  companyDescription?: string
  status?: string
  contact?: {
    companyEmail: string
    companyPhone: string
  }
  documents?: {
    identityProof: string
    bankStatements: string
    taxReturns: string
    addressProof: string
  }
  contactPerson?: string
  submittedDate?: string
}

interface ShowGraphs {
  revenue: boolean
  customers: boolean
  market: boolean
  burnRate: boolean
}

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"]

// Default categories if none are provided
const DEFAULT_CATEGORIES = ["Financial Services", "Technology"]

export default function ApplicationView() {
  const router = useRouter()
  const search = useSearchParams()
  const applicationId = search.get("id")
  const [application, setApplication] = useState<Application | null>(null)
  const [showGraphs, setShowGraphs] = useState<ShowGraphs>({
    revenue: false,
    customers: false,
    market: false,
    burnRate: false,
  })
  const [showContactCard, setShowContactCard] = useState(false)

  // Generate current date if submittedDate is not available
  const currentDate = new Date().toISOString().split("T")[0]

  useEffect(() => {
    const fetchApplication = async () => {
      if (!applicationId) return

      try {
        const appRef = doc(db, "applications", applicationId)
        const appSnap = await getDoc(appRef)

        if (appSnap.exists()) {
          const appData = appSnap.data() as Application
          // Calculate INR value if not already present
          if (!appData.loanAmountInINR && appData.loanAmount) {
            appData.loanAmountInINR = Number(appData.loanAmount) * 777.36
          }
          // Set default status if none exists
          if (!appData.status) {
            appData.status = appData.fundingStatus || "Under Review"
          }
          // Set pitch from companyDescription if pitch is not available
          if (!appData.pitch && appData.companyDescription) {
            appData.pitch = appData.companyDescription
          }
          // Set videoLink from videoUrl if needed
          if (!appData.videoLink && appData.videoUrl) {
            appData.videoLink = appData.videoUrl
          }
          // Add default tags if none exist
          if (!appData.tags) {
            appData.tags = DEFAULT_CATEGORIES.map((cat) => cat)
          }
          // Add submission date if missing
          if (!appData.submittedDate) {
            appData.submittedDate = currentDate
          }

          setApplication(appData)
          toast.success("Application found!")
        } else {
          toast.error("Application not found!")
        }
      } catch (error) {
        console.error("Error fetching application:", error)
        toast.error("Error fetching application!")
      }
    }

    fetchApplication()
  }, [applicationId, currentDate])

  const toggleGraph = (metric: keyof ShowGraphs) => {
    setShowGraphs((prev) => ({
      ...prev,
      [metric]: !prev[metric],
    }))
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "approved":
        return "bg-green-500"
      case "rejected":
        return "bg-red-500"
      case "under review":
        return "bg-yellow-500"
      case "pending":
        return "bg-blue-500"
      default:
        return "bg-blue-500"
    }
  }

  const getDocumentStatus = (status: string) => {
    // Just check if URL exists
    if (status && status.startsWith("https://")) {
      return <CheckCircle className="w-5 h-5 text-green-500" />
    }
    return <Clock className="w-5 h-5 text-yellow-500" />
  }

  if (!application) {
    return (
      <div className="min-h-screen bg-black text-white p-6 flex items-center justify-center">
        <p className="text-xl">Loading application details...</p>
      </div>
    )
  }

  // Extract loan details for clear presentation
  const loanDetails = {
    amount: typeof application.loanAmount === "number" ? application.loanAmount.toString() : application.loanAmount,
    currency: "APT",
    inrValue: `â‚¹${application.loanAmountInINR.toLocaleString("en-IN", { maximumFractionDigits: 0 })}`,
    purpose: application.loanPurpose,
    tenure: "12 months", // Default value
    interestRate: "12%", // Default value
    repaymentSchedule: "Monthly", // Default value
    expectedMonthlyPayment: `${(Number(application.loanAmount) * 0.095).toFixed(1)} APT`, // Approximation
  }

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button
          variant="outline"
          className="text-white bg-black hover:text-black hover:bg-white"
          onClick={() => router.push("/dashboard/investee")}
        >
          Back to Dashboard
        </Button>
      </nav>

      <div className="max-w-6xl mx-auto p-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Main content area - Loan Details and Video */}
          <div className="md:col-span-2 space-y-6">
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Loan Details</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                <div>
                  <p className="text-gray-400 text-sm">Amount</p>
                  <div className="flex items-center mt-1">
                    <DollarSign className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{loanDetails.amount} APT</p>
                  </div>
                  <p className="text-sm text-gray-500">{loanDetails.inrValue}</p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Purpose</p>
                  <div className="flex items-center mt-1">
                    <Briefcase className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{loanDetails.purpose}</p>
                  </div>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Founded Since</p>
                  <div className="flex items-center mt-1">
                    <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{application.yearsInOperation} years</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Video Pitch Section */}
            {application.videoLink || application.videoUrl ? (
              <div className="border border-[#333333] rounded-xl p-6">
                <h2 className="text-xl font-bold mb-4">Company Pitch</h2>
                <div className="relative aspect-video w-full bg-black rounded-lg overflow-hidden">
                  <iframe
                    src={application.videoLink || application.videoUrl}
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                    className="absolute inset-0 w-full h-full"
                  />
                </div>
              </div>
            ) : null}
          </div>

          {/* Sidebar - Company Info & Documents */}
          <div className="space-y-6">
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Company Information</h2>
              <div className="space-y-4">
                <div>
                  <div className="flex items-center mb-2">
                    <Building className="w-4 h-4 mr-2 text-gray-400" />
                    <p className="font-medium">{application.companyName}</p>
                  </div>
                  <p className="text-sm text-gray-400">{application.businessType}</p>
                </div>

                <div className="pt-2">
                  <p className="text-sm text-gray-400 mb-2">Tags</p>
                  {/* Tags */}
                  <div className="flex flex-wrap gap-2 mb-3">
                    {Array.isArray(application.tags) ? (
                      application.tags.map((tag, index) => (
                        <span key={index} className="px-3 py-1 rounded-full text-sm bg-[#333333] text-white">
                          {tag}
                        </span>
                      ))
                    ) : (
                      <span className="text-sm text-gray-400">No tags available</span>
                    )}
                  </div>
                </div>

                <div className="pt-4">
                  <p className="text-sm text-gray-400 mb-3">Document Verification</p>
                  <div className="space-y-3">
                    {application.documents && (
                      <>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Identity Proof</p>
                          {getDocumentStatus(application.documents.identityProof)}
                        </div>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Bank Statements</p>
                          {getDocumentStatus(application.documents.bankStatements)}
                        </div>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Tax Returns</p>
                          {getDocumentStatus(application.documents.taxReturns)}
                        </div>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Address Proof</p>
                          {getDocumentStatus(application.documents.addressProof)}
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {application.fundingStatus === "pending" && (
              <div className="bg-yellow-500/10 p-4 rounded-lg border border-yellow-500/20">
                <div className="flex items-start gap-3">
                  <AlertCircle className="w-5 h-5 text-yellow-500 mt-0.5" />
                  <div>
                    <p className="font-medium text-yellow-500">Application Under Review</p>
                    <p className="text-sm text-gray-400 mt-1">
                      Your application is currently under review. You will be notified once a decision is made.
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Contact Card Modal */}
        {showContactCard && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center p-4 z-50">
            <div className="bg-black border border-[#333333] rounded-xl p-6 max-w-md w-full relative">
              <button
                onClick={() => setShowContactCard(false)}
                className="absolute top-4 right-4 text-gray-400 hover:text-white"
              >
                <X className="w-5 h-5" />
              </button>

              <h2 className="text-xl font-bold mb-6">Contact Information</h2>

              <div className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-400">Company</h3>
                  <div className="flex items-center gap-3">
                    <Phone className="w-5 h-5 text-gray-400" />
                    <div>
                      <p className="text-sm text-gray-400">Phone</p>
                      <p className="text-white">{application.phone}</p>
                    </div>
                  </div>
                  {application.contactPerson && (
                    <div className="flex items-center gap-3">
                      <Users className="w-5 h-5 text-gray-400" />
                      <div>
                        <p className="text-sm text-gray-400">Contact Person</p>
                        <p className="text-white">{application.contactPerson}</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <Button
                className="w-full mt-6 bg-white text-black hover:bg-gray-200"
                onClick={() => setShowContactCard(false)}
              >
                Close
              </Button>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-4 mt-6">
          <Button
            variant="outline"
            className="flex-1 bg-black text-white border-white hover:bg-white hover:text-black py-6 text-lg"
            onClick={() => router.push(`/dashboard/investor/bid/${application.id}`)}
          >
            Place Bid
          </Button>
          <Button
            variant="outline"
            className="flex-1 border-white bg-black text-white hover:bg-white hover:text-black py-6 text-lg"
            onClick={() => setShowContactCard(true)}
          >
            Contact Company
          </Button>
        </div>
      </div>
    </div>
  )
}




================================================
FILE: src/app/dashboard/investee/viewdetails/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter } from "next/navigation";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Calendar,
  DollarSign,
  Clock,
  Briefcase,
  Building,
  AlertCircle,
  CheckCircle,
  XCircle,
  Users,
  LineChart
} from "lucide-react";

const mockApplication = {
  id: "APP123",
  status: "Under Review", // Can be: "Pending", "Under Review", "Approved", "Rejected"
  submittedDate: "2024-02-20",
  loanDetails: {
    amount: "100",
    currency: "APT",
    inrValue: "â‚¹77,736",
    purpose: "Working Capital",
    tenure: "12 months",
    interestRate: "12%",
    repaymentSchedule: "Monthly",
    expectedMonthlyPayment: "9.5 APT"
  },
  companyDetails: {
    name: "Tech Solutions Inc",
    industry: "Technology",
    yearsInOperation: 3,
    annualRevenue: "â‚¹5 Cr",
    employeeCount: "50-100",
    categories: [
      "B2B",
      "SaaS",
      "Enterprise Software",
      "Cloud Services",
      "AI/ML",
      "Tech-enabled"
    ],
    businessModel: "Subscription-based",
    marketSize: "â‚¹1000 Cr",
    growthRate: "40% YoY"
  },
  documents: {
    identityProof: "verified",
    bankStatements: "verified",
    taxReturns: "pending",
    addressProof: "verified"
  }
};

export default function ApplicationDetails() {
  const router = useRouter();

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'approved':
        return 'bg-green-500';
      case 'rejected':
        return 'bg-red-500';
      case 'under review':
        return 'bg-yellow-500';
      default:
        return 'bg-blue-500';
    }
  };

  const getDocumentStatus = (status: string) => {
    switch (status) {
      case 'verified':
        return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'rejected':
        return <XCircle className="w-5 h-5 text-red-500" />;
      default:
        return <Clock className="w-5 h-5 text-yellow-500" />;
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button 
          variant="ghost" 
          className="text-gray-300 hover:text-white"
          onClick={() => router.push('/dashboard/investee')}
        >
          Back to Dashboard
        </Button>
      </nav>

      <div className="max-w-6xl mx-auto p-6">
        {/* Header Section */}
        <div className="flex justify-between items-start mb-8">
          <div>
            <div className="flex items-center gap-4 mb-2">
              <h1 className="text-2xl font-bold">Loan Application #{mockApplication.id}</h1>
              <span className={`px-3 py-1 rounded-full text-sm ${getStatusColor(mockApplication.status)} text-black`}>
                {mockApplication.status}
              </span>
            </div>
            <p className="text-gray-400">
              Submitted on {new Date(mockApplication.submittedDate).toLocaleDateString()}
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Loan Details */}
          <div className="md:col-span-2 space-y-6">
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Loan Details</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                <div>
                  <p className="text-gray-400 text-sm">Amount</p>
                  <div className="flex items-center mt-1">
                    <DollarSign className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{mockApplication.loanDetails.amount} APT</p>
                  </div>
                  <p className="text-sm text-gray-500">{mockApplication.loanDetails.inrValue}</p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Purpose</p>
                  <div className="flex items-center mt-1">
                    <Briefcase className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{mockApplication.loanDetails.purpose}</p>
                  </div>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Tenure</p>
                  <div className="flex items-center mt-1">
                    <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{mockApplication.loanDetails.tenure}</p>
                  </div>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Interest Rate</p>
                  <p className="font-medium mt-1">{mockApplication.loanDetails.interestRate}</p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Repayment</p>
                  <p className="font-medium mt-1">{mockApplication.loanDetails.repaymentSchedule}</p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Monthly Payment</p>
                  <p className="font-medium mt-1">{mockApplication.loanDetails.expectedMonthlyPayment}</p>
                </div>
              </div>
            </div>

            {/* Document Status */}
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Document Status</h2>
              <div className="grid grid-cols-2 gap-4">
                {Object.entries(mockApplication.documents).map(([doc, status]) => (
                  <div key={doc} className="flex items-center justify-between p-3 border border-[#333333] rounded-lg">
                    <span className="capitalize">{doc.replace(/([A-Z])/g, ' $1').trim()}</span>
                    {getDocumentStatus(status)}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Company Categories and Details */}
          <div className="space-y-6">
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Company Categories</h2>
              <div className="space-y-4">
                <div>
                  <div className="flex items-center mb-2">
                    <Building className="w-4 h-4 mr-2 text-gray-400" />
                    <p className="font-medium">{mockApplication.companyDetails.name}</p>
                  </div>
                  <p className="text-sm text-gray-400">{mockApplication.companyDetails.industry}</p>
                </div>

                <div className="pt-4">
                  <p className="text-sm text-gray-400 mb-3">Business Categories</p>
                  <div className="flex flex-wrap gap-2">
                    {mockApplication.companyDetails.categories.map((category, index) => (
                      <span
                        key={index}
                        className="px-3 py-1 rounded-full text-sm bg-[#333333] text-white hover:bg-[#444444] transition-colors"
                      >
                        {category}
                      </span>
                    ))}
                  </div>
                </div>

                <div className="space-y-3 pt-4 border-t border-[#333333]">
                  <div>
                    <p className="text-sm text-gray-400">Business Model</p>
                    <p className="font-medium">{mockApplication.companyDetails.businessModel}</p>
                  </div>
                  <div>
                    <div className="flex items-center gap-2">
                      <Users className="w-4 h-4 text-gray-400" />
                      <p className="text-sm text-gray-400">Team Size</p>
                    </div>
                    <p className="font-medium">{mockApplication.companyDetails.employeeCount}</p>
                  </div>
                  <div>
                    <div className="flex items-center gap-2">
                      <LineChart className="w-4 h-4 text-gray-400" />
                      <p className="text-sm text-gray-400">Growth Rate</p>
                    </div>
                    <p className="font-medium">{mockApplication.companyDetails.growthRate}</p>
                  </div>
                </div>
              </div>
            </div>

            {mockApplication.status === 'Under Review' && (
              <div className="bg-yellow-500/10 p-4 rounded-lg border border-yellow-500/20">
                <div className="flex items-start gap-3">
                  <AlertCircle className="w-5 h-5 text-yellow-500 mt-0.5" />
                  <div>
                    <p className="font-medium text-yellow-500">Application Under Review</p>
                    <p className="text-sm text-gray-400 mt-1">
                      Your application is currently under review. You will be notified once a decision is made.
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investor/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useState, useEffect } from "react";
import { MessageCircle, X } from "lucide-react";
import Navbar from "@/components/Navbar";
import { doc, collection, getDoc, getDocs, updateDoc } from "firebase/firestore";
import { db, auth } from '@/app/firebase';
import { onAuthStateChanged } from "firebase/auth";
import toast from 'react-hot-toast';
import { fundStartup } from "@/lib/contracts";
import {
  Network,
  AptosConfig,
  Aptos,
  APTOS_COIN,
} from "@aptos-labs/ts-sdk";
import { useWallet } from "@aptos-labs/wallet-adapter-react";

// Types
type LoanApplication = {
  id: string;
  companyName: string;
  loanAmount: number;
  loanAmountInINR?: number;
  fundingStatus: string;
  isSpecial?: boolean;
};

type FinalizedBid = {
  id: string;
  applicationId: string;
  additionalDetails?: string;
  interestRate: string | number;
  loanAmount: string | number;
  status: string;
  tenure: string;
  userId: string;
  createdAt?: any;
  companyName?: string;
  amount?: string | number;
  inrValue?: string;
  date?: string;
  fundingReceived?: number;
  smeWalletAddress?: string; // Added for wallet transfer
};

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  transactionHash: string | null;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, transactionHash }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-900 text-white p-8 rounded-lg max-w-md w-full">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Payment Successful!</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white"
          >
            <X size={20} />
          </button>
        </div>
        <div className="mb-6">
          <p className="mb-4">Thank you for using Innvestrix! Your payment is complete.</p>

          {transactionHash && (
            <a
              href={`https://explorer.aptoslabs.com/txn/${transactionHash}?network=testnet`}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 hover:underline block mt-4"
            >
              View transaction on Aptos Labs
            </a>
          )}
        </div>
        <div className="flex justify-end">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

export default function InvestorDashboard() {
  const router = useRouter();
  const [loanApplications, setLoanApplications] = useState<LoanApplication[]>([]);
  const [finalizedBids, setFinalizedBids] = useState<FinalizedBid[]>([]);
  const [userId, setUserId] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [transactionHash, setTransactionHash] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  // Get wallet functions from Aptos wallet adapter
  const { account, connected, connect, disconnect, wallets, signAndSubmitTransaction, network } = useWallet();

  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserId(user.uid);
        fetchFinalizedBids(user.uid);
        fetchLoanApplications(user.uid);
      } else {
        router.push("/login");
      }
    });
  }, [router]);

  // Check wallet connection
  useEffect(() => {
    if (!connected && account === null) {
      // Optional: You can auto-connect here or prompt user to connect
      console.log("Wallet not connected");
    } else if (connected && account) {
      console.log("Connected wallet:", account.address);
    }
  }, [connected, account]);

  const fetchLoanApplications = async (userId: string) => {
    try {
      const docRef = getDocs(collection(db, "applications"));
      if (docRef) {
        const applications: LoanApplication[] = [];
        (await docRef).forEach((doc) => {
          applications.push({ id: doc.id, ...doc.data() } as LoanApplication);
        });

        const sortedApplications = applications.sort((a, b) => {
          if (a.isSpecial === b.isSpecial) return 0;
          return a.isSpecial ? -1 : 1;
        });
        setLoanApplications(sortedApplications);
      } else {
        toast.error("No applications found");
        setLoanApplications([]);
      }
    } catch (error) {
      toast.error("Failed to load applications");
      console.error('Error fetching loan applications:', error);
    }
  };

  const fetchFinalizedBids = async (userId: string) => {
    try {
      const querySnapshot = await getDocs(collection(db, "bids"));
      const bids: FinalizedBid[] = [];

      for (const docSnapshot of querySnapshot.docs) {
        const data = docSnapshot.data();
        if ((data.status === 'finalized' || data.status === 'payment') && data.userId === userId) {
          // Get company name from application if needed
          let companyName = data.companyName || "";
          let smeWalletAddress = data.smeWalletAddress || "";

          try {
            if (data.applicationId) {
              const applicationDoc = await getDoc(doc(db, "applications", data.applicationId));
              if (applicationDoc.exists()) {
                const appData = applicationDoc.data();
                companyName = appData.companyName || "";

                // Get SME wallet address from user profile if available
                if (appData.userId) {
                  const userDoc = await getDoc(doc(db, "users", appData.userId));
                  if (userDoc.exists()) {
                    smeWalletAddress = userDoc.data().walletAddress || "";
                  }
                }
              }
            }
          } catch (err) {
            console.error("Error fetching company details:", err);
          }

          bids.push({
            id: docSnapshot.id,
            applicationId: data.applicationId || "",
            companyName: companyName,
            amount: data.amount || data.loanAmount || "0",
            inrValue: data.inrValue || `${(parseFloat(String(data.loanAmount || "0")) * 777.36).toFixed(2)}`,
            date: data.date || (data.createdAt ? new Date(data.createdAt.toDate()).toLocaleDateString() : new Date().toLocaleDateString()),
            status: data.status || "unknown",
            interestRate: data.interestRate || "0",
            tenure: data.tenure || "0",
            userId: data.userId || "",
            fundingReceived: data.fundingReceived || 0,
            loanAmount: data.loanAmount || "0",
            smeWalletAddress: smeWalletAddress,
          });
        }
      }

      setFinalizedBids(bids);
    } catch (error) {
      console.error('Error fetching finalized bids:', error);
      toast.error('Failed to load bids');
    }
  };

  const handleFund = async (applicationId: string, amount: number) => {
    try {
      const transactionHash = await fundStartup(Number(applicationId), amount * 10);
      setTransactionHash(transactionHash ?? null);
      setIsModalOpen(true);
      toast.success("Startup funded successfully!");

      // Find the relevant bid
      const bidsSnapshot = await getDocs(collection(db, "bids"));
      let targetBid: FinalizedBid | null = null as FinalizedBid | null;

      bidsSnapshot.docs.forEach(docSnapshot => {
        const data = docSnapshot.data();
        if (data.applicationId === applicationId && data.userId === userId) {
          targetBid = {
            ...data as FinalizedBid,
            id: docSnapshot.id
          };
        }
      });

      if (targetBid) {
        const docRef = doc(db, "bids", targetBid.id);
        // Safely convert funding values to numbers
        const currentFundingReceived = parseFloat(String(targetBid.fundingReceived || 0));
        const newFundingReceived = currentFundingReceived + amount;
        const targetLoanAmount = parseFloat(String(targetBid.loanAmount || 0));

        await updateDoc(docRef, { fundingReceived: newFundingReceived });

        if (newFundingReceived >= targetLoanAmount) {
          await updateDoc(docRef, { status: "completed" });
          if (newFundingReceived > targetLoanAmount) {
            toast("Funding exceeds requested amount");
          } else {
            toast.success("Bid fully funded!");
          }
        }

        // Update the application's loan amount
        const applicationRef = doc(db, "applications", applicationId);
        const applicationSnapshot = await getDoc(applicationRef);

        if (applicationSnapshot.exists()) {
          const applicationData = applicationSnapshot.data();
          const currentAppLoanAmount = parseFloat(String(applicationData.loanAmount || 0));
          const newLoanAmount = Math.max(0, currentAppLoanAmount - amount);
          await updateDoc(applicationRef, { loanAmount: newLoanAmount });
          fetchLoanApplications(userId!);
        }
      }

      fetchFinalizedBids(userId!);
    } catch (error) {
      console.error("Error funding the startup:", error);
      toast.error("Failed to fund startup");
    }
  };

  // Connect wallet function
  const handleConnectWallet = async () => {
    try {
      // If wallet is already connected, disconnect it
      if (connected && account) {
        await disconnect();
        toast.success("Wallet disconnected");
        return;
      }

      // If wallets are available, connect to the first one or show options
      if (wallets && wallets.length > 0) {
        // You might want to let the user choose which wallet to connect
        // For simplicity, we'll connect to the first available wallet
        await connect(wallets[0].name);
        toast.success("Wallet connected successfully");
      } else {
        toast.error("No wallets found. Please install an Aptos wallet extension");
      }
    } catch (error: any) {
      console.error("Wallet connection error:", error);
      toast.error(error.message || "Failed to connect wallet");
    }
  };
  // Disconnect wallet function
  const handleDisconnectWallet = async () => {
    try {
      await disconnect();
    } catch (error) {
      console.error("Failed to disconnect wallet:", error);
      toast.error("Failed to disconnect wallet");
    }
  };

  // New implementation of proceedToPayment using Aptos wallet
  async function proceedToPayment(bid: FinalizedBid) {
    try {
      // Show loading toast
      const loadingToast = toast.loading("Processing payment...");

      const bidRef = doc(db, "bids", bid.id);
      const bidSnap = await getDoc(bidRef);
      const appRef = doc(db, "applications", bidSnap.data()?.applicationId);
      const receiverId = bidSnap.data()?.smeuserId;
      const amount = safeParseFloat(bidSnap.data()?.loanAmount);

      const config = new AptosConfig({ network: Network.TESTNET });
      const aptos = new Aptos(config);

      if (!bidSnap.exists()) {
        toast.dismiss(loadingToast);
        toast.error("Bid not found");
        return;
      }

      const response = await signAndSubmitTransaction({
        data: {
          function: "0x1::coin::transfer",
          typeArguments: [APTOS_COIN],
          functionArguments: [receiverId, amount * 100000000], // 1 is in Octas
        },
      });
      // if you want to wait for transaction
      try {
        await aptos.waitForTransaction({ transactionHash: response.hash });
        setTransactionHash(String(response.hash));
      } catch (error) {
        console.error(error);
      }

      await updateDoc(bidRef, {
        status: 'finalized',
        // transactionHash: pendingTransaction.hash
      });
      await updateDoc(appRef, {
        fundingStatus: 'finalized'
      });

      // Dismiss loading toast and show success
      toast.dismiss(loadingToast);
      toast.success("Payment completed successfully!");

      setIsModalOpen(true);
    } catch (e) {
      toast.error("An error occurred. Try Again.")
    }
  }

  const safeParseFloat = (value: any): number => {
    if (value === undefined || value === null) return 0;
    if (typeof value === 'number') return value;
    try {
      return parseFloat(value.toString()) || 0;
    } catch (e) {
      return 0;
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <Navbar />

      <Modal
        isOpen={isModalOpen}
        onClose={() => { setIsModalOpen(false); router.push('/dashboard/investor'); }}
        transactionHash={transactionHash}
      />

      <div className="p-6">
        <div className="flex justify-between items-center mb-8">
          <div>
            <Button
              variant="outline"
              className="border-white bg-black text-white hover:bg-white hover:text-black mr-4"
              onClick={() => router.push('/dashboard/investor/MyBids')}
            >
              View My Bids
            </Button>

            {!connected && (
              <Button
                variant="outline"
                className="border-green-500 bg-black text-green-500 hover:bg-green-500 hover:text-black"
                onClick={handleConnectWallet}
              >
                Connect Wallet
              </Button>
            )}

            {connected && account && (
              <Button
                variant="outline"
                className="border-red-500 bg-black text-red-500 hover:bg-red-500 hover:text-black"
                onClick={handleDisconnectWallet}
              >
                Disconnect Wallet
              </Button>
            )}
          </div>

          <h1 className="text-2xl font-bold">Investor Dashboard</h1>

          <Button
            variant="outline"
            className="border-white bg-black text-white hover:bg-white hover:text-black"
            onClick={() => router.push('/dashboard/investor/preferences')}
          >
            View Personalised Preferences
          </Button>
        </div>

        {connected && account && (
          <div className="mb-6 p-4 rounded-lg border border-green-500 bg-green-500 bg-opacity-10">
            <p className="text-green-400">
              Connected: <span className="font-mono">{String(account.address).substring(0, 6)}...{String(account.address).substring(String(account.address).length - 4)}</span>
            </p>
            <p className="text-sm text-gray-400 mt-1">Network: {network?.name || 'Unknown'}</p>
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <h2 className="text-xl font-semibold mb-4">SMEs looking for funding</h2>
            <div className="space-y-4 max-h-[600px] overflow-y-auto">
              {loanApplications.map((application) => (
                <div
                  key={application.id}
                  className={`p-4 rounded-lg border ${application.isSpecial ? 'border-green-500' : 'border-[#333333]'} bg-black hover:border-white transition-colors`}
                >
                  <div className="relative group">
                    <h3 className="text-lg font-medium mb-2">
                      {application.companyName}
                      {application.isSpecial && (
                        <span className="ml-2" title="No transaction fees for this application!">ðŸŒ±</span>
                      )}
                    </h3>
                  </div>
                  <p className="text-gray-400 mb-2">
                    Amount: {application.loanAmount} APT (â‚¹{application.loanAmountInINR || (application.loanAmount * 777.36)})
                  </p>
                  <p className="text-gray-400 mb-3">Status: {application.fundingStatus}</p>
                  <div className="flex gap-3">
                    <Button
                      className="bg-white text-black hover:bg-gray-200"
                      onClick={() => router.push(`/dashboard/investor/viewapplication/?id=${application.id}`)}
                    >
                      View Application
                    </Button>
                    <Button
                      className="bg-white text-black hover:bg-gray-200"
                      onClick={() => router.push(`/dashboard/investor/bid/${application.id}`)}
                    >
                      Bid
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Your Finalized Bids</h2>
              <p className="text-gray-400">
                Total Invested: {finalizedBids.reduce((acc, bid) => acc + safeParseFloat(bid.amount || bid.loanAmount), 0).toFixed(2)} APT
              </p>
            </div>

            {finalizedBids.length === 0 ? (
              <div className="text-gray-400 text-center py-6">
                No finalized bids found.
              </div>
            ) : (
              <div className="space-y-4">
                {finalizedBids.map((bid) => (
                  <div key={bid.id} className="p-4 rounded-lg border border-[#333333] bg-black hover:border-white transition-colors">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold">
                        {bid.companyName && bid.companyName.length > 0
                          ? bid.companyName.slice(0, 2).toUpperCase()
                          : "SM"}
                      </div>
                      <div className="flex-1">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="font-medium text-white text-lg">{bid.companyName || "Unknown Company"}</h3>
                            <p className="text-sm text-gray-400">Amount: {bid.amount || bid.loanAmount || "0"} APT</p>
                          </div>
                          <span className={`px-3 py-1 ${bid.status === 'payment' ? 'bg-yellow-500' : 'bg-green-500'} text-black text-sm rounded-full`}>
                            {bid.status}
                          </span>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mt-4">
                          <div>
                            <p className="text-sm text-gray-400">Interest Rate</p>
                            <p className="text-white font-medium">{bid.interestRate}%</p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-400">Tenure</p>
                            <p className="text-white font-medium">{bid.tenure}</p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-400">Status</p>
                            <p className="text-white font-medium">{bid.status}</p>
                          </div>
                        </div>

                        {bid.status === 'payment' && (
                          <div className="mt-4">
                            <p className="text-sm text-red-400 mb-2">
                              Failure to complete payment within 7 days will result in account suspension.
                            </p>
                            <Button
                              className="bg-yellow-500 text-black hover:bg-yellow-600"
                              onClick={() => proceedToPayment(bid)}
                              disabled={isProcessing || !connected}
                            >
                              {isProcessing ? "Processing..." : "Proceed to Payment"}
                            </Button>
                            {!connected && (
                              <p className="text-sm text-yellow-400 mt-2">
                                Please connect your wallet to make a payment
                              </p>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investor/bid/[id]/page.tsx
================================================
"use client";
/* eslint-disable */
import { useState, useEffect } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { db, auth } from '@/app/firebase';
import { doc, getDoc, addDoc, collection } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';
import toast, { Toaster } from 'react-hot-toast';

interface BidDetails {
  amount: string;
  interestRate: string;
  tenure: string;
  additionalDetails: string;
}

interface Company {
  id: string;
  name: string;
  type: string;
  industry: string;
  foundedYear: string;
  teamSize: string;
  location: string;
  purpose: string;
  requestedAmount: string;
  inrValue: string;
  description: string;
  workDescription: string;
  highlights: string[];
  annualRevenue: string;
  businessType: string;
  contactPerson: string;
  phone: string;
  documents: string[];
  fundingReceived: number;
  fundingStatus: string;
  videoLink: string;
  tags: Array<{ tag: string; isSpecial: boolean }>;
  yearsInOperation: string;
}

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, onConfirm }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-900 text-white p-8 rounded-lg max-w-md w-full">
        <h2 className="text-xl font-bold mb-4">Confirm Bid Placement</h2>
        <div className="mb-6">
          <p className="mb-4">By proceeding, you agree to the following terms:</p>
          <ul className="list-disc pl-6 space-y-2">
            <li>Your bid will be evaluated by the startup</li>
            <li>You will receive a notification if your bid is finalized</li>
            <li>Once finalized, payment must be made within 7 days</li>
            <li className='text-red-700'>Failure to make payment will result in account suspension</li>
          </ul>
          <a href="https://github.com/adithyanotfound/Investrix/blob/main/frontend/TermsandConditions.md" className="text-blue-500 hover:underline block mt-4">
            View Full Terms and Conditions
          </a>
        </div>
        <div className="flex justify-end gap-4">
          <button onClick={onClose} className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-700">
            Cancel
          </button>
          <button onClick={onConfirm} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
            I Agree
          </button>
        </div>
      </div>
    </div>
  );
};

export default function BidPage() {
  const router = useRouter();
  const searchParams = useParams();
  const applicationId = searchParams.id;

  const [showNotification, setShowNotification] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [userId, setUserId] = useState<string | null>(null);
  const [company, setCompany] = useState<Company | null>(null);
  const [bidDetails, setBidDetails] = useState<BidDetails>({
    amount: "",
    interestRate: "",
    tenure: "",
    additionalDetails: ""
  });
  const [currentAptosKey, setCurrentAptosKey] = useState<string | null>(null);

  // Check authentication status
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setUserId(user.uid);
        const userRef = doc(db, "users", user.uid); // Assuming uid is the document ID
        const userSnap = await getDoc(userRef);

        if (userSnap.exists()) {
          console.log("Phone Number:", userSnap.data().phoneNumber);
          setCurrentAptosKey(userSnap.data().phoneNumber);
        } else {
          console.log("No such user!");
          return null;
        }
      } else {
        toast.error('Please login to continue');
        router.push('/login');
      }
    });

    return () => unsubscribe();
  }, [router]);

  // Fetch application/company details

  useEffect(() => {
    const fetchApplication = async () => {
      if (!applicationId) {
        toast.error('Application ID not found');
        router.push('/dashboard/investor');
        return;
      }

      try {
        const appRef = doc(db, 'applications', applicationId as string);
        const appSnap = await getDoc(appRef);

        if (appSnap.exists()) {
          const appData = appSnap.data();
          setCompany({
            id: Array.isArray(applicationId) ? applicationId[0] : applicationId,
            name: appData.companyName || "",
            type: appData.companyType || "",
            industry: appData.industry || "",
            foundedYear: appData.foundedYear || "",
            teamSize: appData.teamSize || "",
            location: appData.location || "",
            purpose: appData.loanPurpose || "",
            requestedAmount: `${Math.abs(appData.loanAmount) || ""} APT`,
            inrValue: `â‚¹${appData.loanAmountInINR?.toLocaleString() || ""}`,
            description: appData.pitch || "",
            workDescription: appData.workDescription || "",
            highlights: appData.highlights || [],
            annualRevenue: appData.annualRevenue || "",
            businessType: appData.businessType || "",
            contactPerson: appData.contactPerson || "",
            phone: appData.phone || "",
            documents: appData.documents || [],
            fundingReceived: appData.fundingReceived || 0,
            fundingStatus: appData.fundingStatus || "",
            videoLink: appData.videoLink || "",
            tags: appData.tags || [],
            yearsInOperation: appData.yearsInOperation || ""
          });
          toast.success('Application details loaded');
        } else {
          toast.error('Application not found');
          router.push('/dashboard/investor');
        }
      } catch (error) {
        console.error('Error fetching application:', error);
        toast.error('Failed to load application details');
        router.push('/dashboard/investor');
      }
    };

    fetchApplication();
  }, [applicationId, router]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!company) {
      toast.error('Cannot submit bid: Company details not available');
      return;
    }
    setShowModal(true);
  };

  const handleConfirmedSubmit = async () => {
    if (!userId || !applicationId) {
      toast.error('User ID or Application ID is missing');
      return;
    }

    setIsSubmitting(true);
    setShowModal(false);

    try {
      // Add document to Firestore
      const bidRef = await addDoc(collection(db, 'bids'), {
        userId: userId,
        investorUserId: currentAptosKey,
        applicationId: applicationId,
        loanAmount: bidDetails.amount,
        interestRate: bidDetails.interestRate,
        tenure: bidDetails.tenure,
        additionalDetails: bidDetails.additionalDetails,
        status: 'pending',
        createdAt: new Date()
      });

      console.log("Bid submitted with ID:", bidRef.id);

      // Show success notification
      setShowNotification(true);

      // Reset form
      setBidDetails({
        amount: "",
        interestRate: "",
        tenure: "",
        additionalDetails: ""
      });

      // Hide notification and redirect after 5 seconds
      setTimeout(() => {
        setShowNotification(false);
        router.push('/dashboard/investor');
      }, 5000);

    } catch (error) {
      console.error("Error submitting bid:", error);
      toast.error('Failed to place bid');
    } finally {
      setIsSubmitting(false);
    }
  };

  // If company data is not loaded yet, show loading state
  if (!company) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-white border-r-transparent" role="status">
            <span className="sr-only">Loading...</span>
          </div>
          <p className="mt-4">Loading application details...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white p-6 relative">
      {/* Success Notification */}
      {showNotification && (
        <div className="fixed top-6 right-6 bg-green-500 text-black px-6 py-3 rounded-md shadow-lg flex items-center gap-2 transition-all duration-300">
          <svg
            className="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M5 13l4 4L19 7"
            />
          </svg>
          <span className="font-medium">Bid made successfully!</span>
        </div>
      )}

      {/* Confirmation Modal */}
      <Modal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onConfirm={handleConfirmedSubmit}
      />

      <div className="max-w-6xl mx-auto">
        <Button
          className="mb-6 bg-white text-black hover:bg-gray-200"
          onClick={() => router.back()}
        >
          Back
        </Button>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Company Details Section */}
          <div className="lg:col-span-2 space-y-6">
            {/* Company Header */}
            <div className="border border-[#333333] rounded-xl p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h1 className="text-3xl font-bold mb-2">{company.name}</h1>
                  <p className="text-gray-400">{company.businessType} â€¢ {company.industry}</p>
                  <div className="flex gap-2 mt-2">
                    {company.tags.map((tag, index) => (
                      <span
                        key={index}
                        className={`px-2 py-1 rounded-full text-sm ${tag.isSpecial ? 'bg-blue-500' : 'bg-gray-700'
                          }`}
                      >
                        {tag.tag}
                      </span>
                    ))}
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-gray-400">Requested Amount</p>
                  <p className="text-xl font-bold">{company.requestedAmount}</p>
                  <p className="text-sm text-gray-500">{company.inrValue}</p>
                </div>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
                <div>
                  <p className="text-sm text-gray-400">Founded</p>
                  <p className="text-white">{company.yearsInOperation} years ago</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Annual Revenue</p>
                  <p className="text-white">{company.annualRevenue}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Contact</p>
                  <p className="text-white">{company.contactPerson}</p>
                  <p className="text-sm text-gray-400">{company.phone}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Purpose</p>
                  <p className="text-white">{company.purpose}</p>
                </div>
              </div>
            </div>

            {/* Company Description */}
            <div className="border border-[#333333] rounded-xl p-6">
              <h2 className="text-xl font-bold mb-4">About Company</h2>
              <p className="text-gray-400 mb-6">{company.description}</p>

              <h3 className="text-lg font-semibold mb-3">What they do</h3>
              {company.videoLink && (
                <div className="mb-6">
                  <video
                    controls
                    className="w-full rounded-lg"
                    poster={company.documents[0]}
                  >
                    <source src={company.videoLink} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                </div>
              )}
              <p className="text-gray-400 mb-6">{company.workDescription}</p>
            </div>
          </div>

          {/* Bid Details Section remains the same */}
          <div className="lg:col-span-1">
            <div className="border border-[#333333] rounded-xl p-6 sticky top-6">
              <h2 className="text-xl font-bold mb-6">Bid Details</h2>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm text-gray-400 mb-2">
                    Loan Amount (APT)
                  </label>
                  <input
                    type="number"
                    placeholder="Enter amount"
                    className="w-full bg-transparent border border-[#333333] rounded-md p-2 text-white placeholder-gray-500 focus:outline-none focus:border-white"
                    value={bidDetails.amount}
                    onChange={(e) => setBidDetails({ ...bidDetails, amount: e.target.value })}
                    required
                    disabled={isSubmitting}
                  />
                </div>

                <div>
                  <label className="block text-sm text-gray-400 mb-2">
                    Interest Rate (%)
                  </label>
                  <input
                    type="number"
                    placeholder="Enter rate"
                    className="w-full bg-transparent border border-[#333333] rounded-md p-2 text-white placeholder-gray-500 focus:outline-none focus:border-white"
                    value={bidDetails.interestRate}
                    onChange={(e) => setBidDetails({ ...bidDetails, interestRate: e.target.value })}
                    required
                    disabled={isSubmitting}
                  />
                </div>

                <div>
                  <label className="block text-sm text-gray-400 mb-2">
                    Tenure (months)
                  </label>
                  <input
                    type="number"
                    placeholder="Enter tenure"
                    className="w-full bg-transparent border border-[#333333] rounded-md p-2 text-white placeholder-gray-500 focus:outline-none focus:border-white"
                    value={bidDetails.tenure}
                    onChange={(e) => setBidDetails({ ...bidDetails, tenure: e.target.value })}
                    required
                    disabled={isSubmitting}
                  />
                </div>

                <div>
                  <label className="block text-sm text-gray-400 mb-2">
                    Additional Details
                  </label>
                  <textarea
                    placeholder="Any additional information..."
                    className="w-full bg-transparent border border-[#333333] rounded-md p-2 text-white placeholder-gray-500 focus:outline-none focus:border-white min-h-[100px] resize-none"
                    value={bidDetails.additionalDetails}
                    onChange={(e) => setBidDetails({ ...bidDetails, additionalDetails: e.target.value })}
                    disabled={isSubmitting}
                  />
                </div>

                <Button
                  type="submit"
                  className="w-full bg-white text-black hover:bg-gray-200 py-6 text-lg mt-6"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Submitting...' : 'Make Bid'}
                </Button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investor/MyBids/page.tsx
================================================
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { PercentageCircle } from "@/components/ui/percentage-circle"
import { db } from "@/app/firebase"
import { collection, query, where, getDocs, doc, getDoc } from "firebase/firestore"
import { getAuth, onAuthStateChanged } from "firebase/auth"
import { Loader2 } from "lucide-react"

export interface Bid {
  id: string
  userId: string
  applicationId: string
  loanAmount: string
  interestRate: string
  tenure: string
  status: string
  additionalDetails: string
}

export interface ApplicationDetails {
  id: number
  companyName: string
  fundingStatus: string
}

export default function MyBids() {
  const [bids, setBids] = useState<(Bid & { companyName: string; fundingStatus: string })[]>([])
  const [loading, setLoading] = useState(true)
  const [uid, setUid] = useState<string | null>(null)
  const router = useRouter()

  useEffect(() => {
    const auth = getAuth()
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUid(user.uid)
      } else {
        router.push("/login")
      }
    })
    return () => unsubscribe()
  }, [router])

  useEffect(() => {
    const fetchBids = async () => {
      if (!uid) return
      try {
        const q = query(collection(db, "bids"), where("userId", "==", uid))
        const querySnapshot = await getDocs(q)
        const fetchedBids: (Bid & { companyName: string; fundingStatus: string })[] = []

        for (const docSnap of querySnapshot.docs) {
          const bidData = docSnap.data() as Bid
          const applicationRef = doc(db, "applications", bidData.applicationId)
          const applicationSnap = await getDoc(applicationRef)
          if (applicationSnap.exists()) {
            const applicationData = applicationSnap.data() as ApplicationDetails
            fetchedBids.push({
              ...bidData,
              id: docSnap.id,
              companyName: applicationData.companyName,
              fundingStatus: applicationData.fundingStatus,
            })
          }
        }
        setBids(fetchedBids)
      } catch (error) {
        console.error("Error fetching bids:", error)
      } finally {
        setLoading(false)
      }
    }
    fetchBids()
  }, [uid])

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "pending":
        return "bg-orange-500"
      case "finalized":
        return "bg-green-500"
      default:
        return "bg-gray-500"
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <Button className="mb-6 bg-white text-black hover:bg-gray-200" onClick={() => router.push("/dashboard/investor")}>
        Back to Dashboard
      </Button>
      {bids.length === 0 ? (
        <div className="text-center mt-20">
          <p className="text-4xl">No bids yet :/</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {bids.map((bid) => (
            <div
              key={bid.id}
              className="border border-[#333333] rounded-xl bg-black p-6 space-y-4 hover:border-gray-600 transition-all"
            >
              <div className="flex justify-between items-start">
                <div>
                  <h2 className="text-xl font-semibold mb-1">{bid.companyName}</h2>
                </div>
                <span className={`px-3 py-1 rounded-full text-xs text-black ${getStatusColor(bid.fundingStatus)}`}>
                  {bid.fundingStatus}
                </span>
              </div>

              <p className="text-sm text-gray-400">{bid.additionalDetails}</p>

              <div className="grid grid-cols-3 gap-4 py-4 border-y border-[#333333]">
                <div>
                  <p className="text-sm text-gray-400">Invested Amount</p>
                  <p className="text-white font-medium">{bid.loanAmount}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Tenure</p>
                  <p className="text-white font-medium">{bid.tenure}</p>
                </div>
                <div className="flex flex-col items-center">
                  <p className="text-sm text-gray-400 mb-2">Interest Rate</p>
                  <PercentageCircle percentage={parseFloat(bid.interestRate)} />
                </div>
              </div>
              <div className="flex justify-end">
                <Button className="mt-4 bg-blue-500 text-white hover:bg-blue-600" onClick={() => router.push(`/dashboard/investor/viewapplication/?id=${bid.applicationId}`)}>
                  View Application
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}



================================================
FILE: src/app/dashboard/investor/preferences/page.tsx
================================================
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Leaf } from "lucide-react";
import { useRouter } from "next/navigation";
import { doc, setDoc } from "firebase/firestore";
import { onAuthStateChanged } from 'firebase/auth';
import { auth, db } from '@/app/firebase';

// Type definitions
type Category = {
  name: string;
  sustainable: boolean;
};

type InvestorInfo = {
  amount: string;
  duration: string;
  goals: string;
};

export default function Preferences() {
  const router = useRouter();
  const [userId, setUserId] = useState<string | null>(null);
  const [investorInfo, setInvestorInfo] = useState<InvestorInfo>({
    amount: "",
    duration: "",
    goals: ""
  });
  const [selectedPreferences, setSelectedPreferences] = useState<string[]>([]);

  // Categories with sustainability flags
  const categories: Category[] = [
    { name: "Technology", sustainable: false },
    { name: "Manufacturing", sustainable: false },
    { name: "Healthcare", sustainable: false },
    { name: "Agribusiness", sustainable: true },
    { name: "Renewable-Energy", sustainable: true },
    { name: "Education", sustainable: false },
    { name: "E-commerce", sustainable: false },
    { name: "Infrastructure", sustainable: false },
    { name: "Financial-Services", sustainable: false },
    { name: "Consumer-Goods", sustainable: false },
    { name: "Artisanal-and-Handicrafts", sustainable: true },
    { name: "Sustainable-and-Social-Enterprises", sustainable: true }
  ];

  // Check authentication status
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        router.push("/login");
      }
    });

    return () => unsubscribe();
  }, [router]);

  const togglePreference = (category: string) => {
    setSelectedPreferences(prev =>
      prev.includes(category)
        ? prev.filter(p => p !== category)
        : [...prev, category]
    );
  };

  const handleSubmit = async () => {
    const preferencesId = Math.floor(Math.random() * 1000000000);
    try {
      const preferenceData = {
        preferencesId,
        amountToInvest: investorInfo.amount,
        investmentDuration: investorInfo.duration,
        goals: investorInfo.goals,
        preferences: selectedPreferences,
        userId
      };
      
      await setDoc(doc(db, "preferences", preferencesId.toString()), preferenceData);
      router.push(`/dashboard/investor/recom/${preferencesId}`);
    } catch (error) {
      console.error("Error adding/updating document: ", error);
      // You might want to add error handling UI here
    }
  };

  return (
    <div className="min-h-screen bg-black text-white p-6 relative">
      <Button
        onClick={() => router.push("/dashboard/investor")}
        className="absolute top-6 right-6 bg-white hover:bg-gray-200 text-black px-4 py-2 rounded-lg"
      >
        Back to Dashboard
      </Button>

      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Investment Details Section */}
        <div className="space-y-6 bg-black border border-[#333333] rounded-xl p-6">
          <h2 className="text-2xl font-bold">Investment Details</h2>
          
          <div className="space-y-4">
            <div>
              <label className="block text-gray-400 mb-2">Amount to Invest</label>
              <input
                type="text"
                placeholder="Enter amount"
                value={investorInfo.amount}
                onChange={(e) => setInvestorInfo(prev => ({ ...prev, amount: e.target.value }))}
                className="w-full bg-black border border-[#333333] rounded-lg p-3 text-white placeholder:text-gray-600 focus:border-white focus:ring-0 transition-colors"
              />
            </div>

            <div>
              <label className="block text-gray-400 mb-2">Investment Duration</label>
              <input
                type="text"
                placeholder="e.g., 2 years"
                value={investorInfo.duration}
                onChange={(e) => setInvestorInfo(prev => ({ ...prev, duration: e.target.value }))}
                className="w-full bg-black border border-[#333333] rounded-lg p-3 text-white placeholder:text-gray-600 focus:border-white focus:ring-0 transition-colors"
              />
            </div>

            <div>
              <label className="block text-gray-400 mb-2">Goals and Objectives</label>
              <textarea
                placeholder="Describe your investment goals"
                value={investorInfo.goals}
                onChange={(e) => setInvestorInfo(prev => ({ ...prev, goals: e.target.value }))}
                className="w-full bg-black border border-[#333333] rounded-lg p-3 text-white placeholder:text-gray-600 focus:border-white focus:ring-0 transition-colors min-h-[150px]"
              />
            </div>
          </div>
        </div>

        {/* Investment Preferences Section */}
        <div className="space-y-6 bg-black border border-[#333333] rounded-xl p-6">
          <h2 className="text-2xl font-bold">Investment Preferences</h2>
          
          <div>
            <p className="text-gray-400 mb-4">Available Preferences:</p>
            <div className="flex flex-wrap gap-3">
              {categories.map((category) => (
                <button
                  key={category.name}
                  onClick={() => togglePreference(category.name)}
                  className={`group relative flex items-center gap-2 px-4 py-2 rounded-full border transition-all ${
                    selectedPreferences.includes(category.name)
                      ? "border-white text-white"
                      : "border-[#333333] text-gray-400 hover:border-white hover:text-white"
                  }`}
                >
                  {category.sustainable && (
                    <Leaf className="w-4 h-4 text-green-500" />
                  )}
                  {category.name.replace(/-/g, ' ')}
                  <span className="ml-1 text-gray-400 group-hover:text-white">+</span>
                </button>
              ))}
            </div>
          </div>

          <div className="mt-6">
            <p className="text-gray-400 mb-4">Selected Preferences:</p>
            <div className="min-h-[100px] border border-[#333333] rounded-lg p-4">
              {selectedPreferences.length === 0 ? (
                <p className="text-gray-600">No preferences selected</p>
              ) : (
                <div className="flex flex-wrap gap-2">
                  {selectedPreferences.map(pref => (
                    <span key={pref} className="px-3 py-1 rounded-full bg-white/10 text-white text-sm">
                      {pref.replace(/-/g, ' ')}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Submit Button */}
      <div className="max-w-6xl mx-auto mt-6">
        <Button 
          className="w-full bg-white text-black hover:bg-gray-200 py-6 text-lg rounded-xl"
          onClick={handleSubmit}
        >
          Submit Details
        </Button>
      </div>
    </div>
  );
}


================================================
FILE: src/app/dashboard/investor/recom/[id]/page.tsx
================================================
"use client";
/* eslint-disable */
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { useRouter } from "next/navigation";
import { doc, getDoc, collection, query, getDocs } from "firebase/firestore";
import { onAuthStateChanged } from "firebase/auth";
import { auth, db } from "@/app/firebase";
import { useParams } from "next/navigation";

// Type definitions
type Application = {
  applicationId: number;
  companyName: string;
  businessType: string;
  annualRevenue: string;
  contactPerson: string;
  loanAmount: number;
  loanAmountInINR: number;
  yearsInOperation: string;
  fundingStatus: string;
  loanPurpose: string;
  tags: string[];
};

export default function Preferences() {
  const router = useRouter();
  const params = useParams();
  const preferencesId = params.id;

  const [isLoading, setIsLoading] = useState(true);
  const [prefsFetched, setPrefsFetched] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [userId, setUserId] = useState<string | null>(null);
  const [selectedPreferences, setSelectedPreferences] = useState<string[]>([]);
  const [applications, setApplications] = useState<Application[]>([]);

  // Auth check
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        router.push("/login");
      }
    });

    return () => unsubscribe();
  }, [router]);

  // Fetch preferences
  useEffect(() => {
    if (!preferencesId) {
      setError("Missing preferences ID");
      setIsLoading(false);
      return;
    }

    const fetchPreferences = async () => {
      try {
        const prefDoc = await getDoc(doc(db, "preferences", String(preferencesId)));

        if (!prefDoc.exists()) {
          setError("Preferences not found");
          setIsLoading(false);
          return;
        }

        const data = prefDoc.data();

        if (!data.preferences || !Array.isArray(data.preferences)) {
          setError("Invalid preferences format");
          setIsLoading(false);
          return;
        }

        setSelectedPreferences(data.preferences);
        setPrefsFetched(true);
      } catch (error) {
        console.error("Error fetching preferences:", error);
        setError("Failed to load preferences");
        setIsLoading(false);
      }
    };

    fetchPreferences();
  }, [preferencesId]);

  // Fetch applications
  useEffect(() => {
    if (!prefsFetched || selectedPreferences.length === 0) {
      return;
    }

    const fetchApplications = async () => {
      try {
        const q = query(collection(db, "applications"));
        const querySnapshot = await getDocs(q);

        const allApps = querySnapshot.docs.map(doc => {
          const data = doc.data();
          return {
            applicationId: data.applicationId,
            companyName: data.companyName || "Unnamed Company",
            businessType: data.businessType || "Unknown",
            annualRevenue: data.annualRevenue || "0",
            contactPerson: data.contactPerson || "Unknown",
            loanAmount: data.loanAmount || 0,
            loanAmountInINR: data.loanAmountInINR || 0,
            yearsInOperation: data.yearsInOperation || "0",
            fundingStatus: data.fundingStatus || "pending",
            loanPurpose: data.loanPurpose || "Not specified",
            tags: Array.isArray(data.tags) ? data.tags : []
          } as Application;
        });

        const filteredApps = allApps.filter(app =>
          app.tags && app.tags.some(tag => selectedPreferences.includes(tag))
        );

        setApplications(filteredApps);
      } catch (error) {
        console.error("Error fetching applications:", error);
        setError("Failed to load applications");
      } finally {
        setIsLoading(false);
      }
    };

    fetchApplications();
  }, [prefsFetched, selectedPreferences]);

  // Format currency
  const formatCurrency = (amount: number) => {
    return `â‚¹${amount.toLocaleString()}`;
  };

  // Get status display
  const getStatusDisplay = (status: string) => {
    switch (status.toLowerCase()) {
      case "finalized":
        return { text: "Active", className: "bg-green-900/60 text-green-400" };
      case "pending":
        return { text: "Pending", className: "bg-yellow-900/60 text-yellow-400" };
      default:
        return { text: status, className: "bg-gray-900/60 text-gray-400" };
    }
  };

  return (
    <div className="min-h-screen bg-black text-white p-6 relative">
      <Button
        onClick={() => router.push("/dashboard/investor")}
        className="absolute top-6 right-6 bg-white hover:bg-gray-200 text-black px-4 py-2 rounded-lg"
      >
        Back to Dashboard
      </Button>

      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Matching Investments</h1>

        {isLoading && (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="h-12 w-12 animate-spin text-gray-400" />
          </div>
        )}

        {error && (
          <div className="bg-red-900/30 border border-red-500 rounded-lg p-4 mb-6">
            <p className="text-red-400">{error}</p>
          </div>
        )}

        {!isLoading && !error && applications.length === 0 && (
          <div className="bg-gray-900/30 border border-gray-700 rounded-lg p-8 text-center">
            <p className="text-gray-400 text-lg">No matching applications found based on your preferences.</p>
          </div>
        )}

        {!isLoading && !error && applications.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {applications.map(app => {
              const status = getStatusDisplay(app.fundingStatus);

              return (
                <div key={app.applicationId} className="bg-black border border-[#333333] rounded-xl p-6 flex flex-col">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <h2 className="text-2xl font-bold">{app.companyName}</h2>
                      <p className="text-gray-400">{app.businessType}</p>
                    </div>
                    <span className={`px-3 py-1 rounded-full text-xs ${status.className}`}>
                      {status.text}
                    </span>
                  </div>

                  <div className="grid grid-cols-2 gap-4 mb-4 mt-3">
                    <div>
                      <p className="text-gray-400 text-sm">Loan Amount</p>
                      <p className="font-bold">{Math.abs(app.loanAmount)} APT</p>
                      <p className="text-sm text-gray-500">{formatCurrency(app.loanAmountInINR)}</p>
                    </div>

                    <div>
                      <p className="text-gray-400 text-sm">Annual Revenue</p>
                      <p className="font-bold">{app.annualRevenue}</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 mb-4">
                    <div>
                      <p className="text-gray-400 text-sm">Years in Operation</p>
                      <p className="font-bold">{app.yearsInOperation} years</p>
                    </div>

                    <div className="mb-6">
                      <p className="text-gray-400 text-sm">Loan Purpose</p>
                      <p className="font-medium">{app.loanPurpose}</p>
                    </div>
                  </div>
                  <div className="mt-auto flex justify-end">
                    <Button
                      onClick={() => router.push(`/dashboard/investor/viewapplication?id=${app.applicationId}`)}
                      className="bg-white hover:bg-gray-200 text-black"
                    >
                      View Application
                    </Button>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}



================================================
FILE: src/app/dashboard/investor/viewapplication/page.tsx
================================================
"use client";
/* eslint-disable */
import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { db } from "@/app/firebase";
import { doc, getDoc } from "firebase/firestore";
import { Button } from "@/components/ui/button";
import {
  Award,
  Calendar,
  DollarSign,
  IndianRupee,
  Phone,
  Tag,
  X,
  Building,
  Briefcase,
  Clock,
  AlertCircle,
  CheckCircle,
  Users,

} from "lucide-react";
import toast from "react-hot-toast";
import {
  AreaChart,
  Area,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts';

// Types
interface Application {
  id: string | number;
  companyName: string;
  businessType: string;
  tags?: Array<string | { tag: string; isSpecial: boolean }>;
  loanPurpose: string;
  yearsInOperation: number | string;
  annualRevenue: number | string;
  phone: string;
  fundingStatus: string;
  fundingReceived: number;
  loanAmount: number | string;
  loanAmountInINR: number;
  pitch?: string;
  videoLink?: string;
  videoUrl?: string;
  companyDescription?: string;
  status?: string;
  contact?: {
    companyEmail: string;
    companyPhone: string;
  };
  documents?: {
    identityProof: string;
    bankStatements: string;
    taxReturns: string;
    addressProof: string;
  };
  contactPerson?: string;
  submittedDate?: string;
}

interface ShowGraphs {
  revenue: boolean;
  customers: boolean;
  market: boolean;
  burnRate: boolean;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];

// Default categories if none are provided
const DEFAULT_CATEGORIES = ["Financial Services", "Technology", "Services"];

export default function ApplicationView() {
  const router = useRouter();
  const search = useSearchParams();
  const applicationId = search.get("id");
  const [application, setApplication] = useState<Application | null>(null);
  const [showGraphs, setShowGraphs] = useState<ShowGraphs>({
    revenue: false,
    customers: false,
    market: false,
    burnRate: false
  });
  const [showContactCard, setShowContactCard] = useState(false);

  // Generate current date if submittedDate is not available
  const currentDate = new Date().toISOString().split('T')[0];

  useEffect(() => {
    const fetchApplication = async () => {
      if (!applicationId) return;

      try {
        const appRef = doc(db, "applications", applicationId);
        const appSnap = await getDoc(appRef);

        if (appSnap.exists()) {
          const appData = appSnap.data() as Application;
          // Calculate INR value if not already present
          if (!appData.loanAmountInINR && appData.loanAmount) {
            appData.loanAmountInINR = Number(appData.loanAmount) * 777.36;
          }
          // Set default status if none exists
          if (!appData.status) {
            appData.status = appData.fundingStatus || "Under Review";
          }
          // Set pitch from companyDescription if pitch is not available
          if (!appData.pitch && appData.companyDescription) {
            appData.pitch = appData.companyDescription;
          }
          // Set videoLink from videoUrl if needed
          if (!appData.videoLink && appData.videoUrl) {
            appData.videoLink = appData.videoUrl;
          }
          // Add default tags if none exist
          if (!appData.tags) {
            appData.tags = DEFAULT_CATEGORIES.map(cat => cat);
          }
          // Add submission date if missing
          if (!appData.submittedDate) {
            appData.submittedDate = currentDate;
          }
          
          setApplication(appData);
          toast.success('Application found!');
        } else {
          toast.error("Application not found!");
        }
      } catch (error) {
        console.error("Error fetching application:", error);
        toast.error("Error fetching application!");
      }
    };

    fetchApplication();
  }, [applicationId, currentDate]);

  const toggleGraph = (metric: keyof ShowGraphs) => {
    setShowGraphs(prev => ({
      ...prev,
      [metric]: !prev[metric]
    }));
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'approved':
        return 'bg-green-500';
      case 'rejected':
        return 'bg-red-500';
      case 'under review':
        return 'bg-yellow-500';
      case 'pending':
        return 'bg-blue-500';
      default:
        return 'bg-blue-500';
    }
  };

  const getDocumentStatus = (status: string) => {
    // Just check if URL exists
    if (status && status.startsWith('https://')) {
      return <CheckCircle className="w-5 h-5 text-green-500" />;
    }
    return <Clock className="w-5 h-5 text-yellow-500" />;
  };

  if (!application) {
    return (
      <div className="min-h-screen bg-black text-white p-6 flex items-center justify-center">
        <p className="text-xl">Loading application details...</p>
      </div>
    );
  }

  const hasSpecialTag = application.tags?.some(
    (tag) => typeof tag === "object" && tag.isSpecial
  );

  // Extract loan details for clear presentation
  const loanDetails = {
    amount: typeof application.loanAmount === 'number' ? application.loanAmount.toString() : application.loanAmount,
    currency: "APT",
    inrValue: `â‚¹${application.loanAmountInINR.toLocaleString('en-IN', { maximumFractionDigits: 0 })}`,
    purpose: application.loanPurpose,
    tenure: "12 months", // Default value
    interestRate: "12%", // Default value
    repaymentSchedule: "Monthly", // Default value
    expectedMonthlyPayment: `${(Number(application.loanAmount) * 0.095).toFixed(1)} APT` // Approximation
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
        <span className="text-xl font-medium">Investrix</span>
        <Button 
          variant="outline" 
          className="text-white bg-black hover:text-black hover:bg-white"
          onClick={() => router.push('/dashboard/investor')}
        >
          Back to Dashboard
        </Button>
      </nav>

      <div className="max-w-6xl mx-auto p-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Main content area - Loan Details and Video */}
          <div className="md:col-span-2 space-y-6">
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Loan Details</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                <div>
                  <p className="text-gray-400 text-sm">Amount</p>
                  <div className="flex items-center mt-1">
                    <DollarSign className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{loanDetails.amount} APT</p>
                  </div>
                  <p className="text-sm text-gray-500">{loanDetails.inrValue}</p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Purpose</p>
                  <div className="flex items-center mt-1">
                    <Briefcase className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{loanDetails.purpose}</p>
                  </div>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Founded Since</p>
                  <div className="flex items-center mt-1">
                    <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                    <p className="font-medium">{application.yearsInOperation} years</p>
                  </div>
                </div>

              </div>
            </div>
            
            {/* Video Pitch Section */}
            {application.videoLink || application.videoUrl ? (
              <div className="border border-[#333333] rounded-xl p-6">
                <h2 className="text-xl font-bold mb-4">Company Pitch</h2>
                <div className="relative aspect-video w-full bg-black rounded-lg overflow-hidden">
                  <iframe
                    src={application.videoLink || application.videoUrl}
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                    className="absolute inset-0 w-full h-full"
                  />
                </div>
              </div>
            ) : null}
            
            

          </div>

          {/* Sidebar - Company Info & Documents */}
          <div className="space-y-6">
            <div className="bg-[#111111] p-6 rounded-lg border border-[#333333]">
              <h2 className="text-xl font-semibold mb-4">Company Information</h2>
              <div className="space-y-4">
                <div>
                  <div className="flex items-center mb-2">
                    <Building className="w-4 h-4 mr-2 text-gray-400" />
                    <p className="font-medium">{application.companyName}</p>
                  </div>
                  <p className="text-sm text-gray-400">{application.businessType}</p>
                </div>

                <div className="pt-2">
                  <p className="text-sm text-gray-400 mb-2">Tags</p>
                  {/* Tags */}
              <div className="flex flex-wrap gap-2 mb-3">
                {application.tags?.map((tag, index) => {
                  const tagText = typeof tag === "object" ? tag.tag : tag;
                  const isSpecial = typeof tag === "object" && tag.isSpecial;

                  return (
                    <span
                      key={index}
                      className={`px-3 py-1 rounded-full text-sm ${
                        isSpecial ? "bg-green-500 text-black" : "bg-[#333333] text-white"
                      }`}
                    >
                      {tagText}
                    </span>
                  );
                })}
              </div>
                </div>

                <div className="pt-4">
                  <p className="text-sm text-gray-400 mb-3">Document Verification</p>
                  <div className="space-y-3">
                    {application.documents && (
                      <>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Identity Proof</p>
                          {getDocumentStatus(application.documents.identityProof)}
                        </div>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Bank Statements</p>
                          {getDocumentStatus(application.documents.bankStatements)}
                        </div>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Tax Returns</p>
                          {getDocumentStatus(application.documents.taxReturns)}
                        </div>
                        <div className="flex items-center justify-between">
                          <p className="text-sm">Address Proof</p>
                          {getDocumentStatus(application.documents.addressProof)}
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Contact Card Modal */}
        {showContactCard && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center p-4 z-50">
            <div className="bg-black border border-[#333333] rounded-xl p-6 max-w-md w-full relative">
              <button
                onClick={() => setShowContactCard(false)}
                className="absolute top-4 right-4 text-gray-400 hover:text-white"
              >
                <X className="w-5 h-5" />
              </button>

              <h2 className="text-xl font-bold mb-6">Contact Information</h2>

              <div className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-400">Company</h3>
                  <div className="flex items-center gap-3">
                    <Phone className="w-5 h-5 text-gray-400" />
                    <div>
                      <p className="text-sm text-gray-400">Phone</p>
                      <p className="text-white">{application.phone}</p>
                    </div>
                  </div>
                  {application.contactPerson && (
                    <div className="flex items-center gap-3">
                      <Users className="w-5 h-5 text-gray-400" />
                      <div>
                        <p className="text-sm text-gray-400">Contact Person</p>
                        <p className="text-white">{application.contactPerson}</p>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <Button
                className="w-full mt-6 bg-white text-black hover:bg-gray-200"
                onClick={() => setShowContactCard(false)}
              >
                Close
              </Button>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-4 mt-6">
          <Button
          variant="outline"
            className="flex-1 bg-black text-white border-white hover:bg-white hover:text-black py-6 text-lg"
            onClick={() => router.push(`/dashboard/investor/bid/${application.id}`)}
          >
            Place Bid
          </Button>
          <Button
            variant="outline"
            className="flex-1 border-white bg-black text-white hover:bg-white hover:text-black py-6 text-lg"
            onClick={() => setShowContactCard(true)}
          >
            Contact Company
          </Button>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/app/login/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { RetroGrid } from "@/components/magicui/retro-grid";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { motion } from "framer-motion";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "../firebase";
import toast from "react-hot-toast";
import { 
  Rocket, 
  Mail, 
  Lock, 
  ArrowRight, 
  Wallet, 
  Lightbulb,
  Eye,
  EyeOff 
} from "lucide-react";

export default function Login() {
  const router = useRouter();
  const [selectedRole, setSelectedRole] = useState<string>("");
  const [formData, setFormData] = useState({
    email: "",
    password: ""
  });
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState("");

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setError("");
  };

  const validateForm = () => {
    if (!selectedRole) {
      setError("Please select a role before signing in.");
      return false;
    }

    if (!formData.email || !formData.password) {
      setError("Please fill in all fields.");
      return false;
    }
    return true;
  };

  const handleSignIn = async () => {
    if (!validateForm()) return;

    setIsLoading(true);
    try {
      await signInWithEmailAndPassword(auth, formData.email, formData.password);
      toast.success("Sign in successful");
      
      // Route based on selected role
      if (selectedRole === 'investor') {
        router.push('/dashboard/investor');
      } else if (selectedRole === 'investee') {
        router.push('/dashboard/investee');
      }
    } catch (error: any) {
      console.error('Error signing in:', error);
      setError("Failed to sign in. Please try again.");
      toast.error("Sign in failed");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="relative flex h-screen w-full flex-col items-center justify-center bg-black overflow-hidden">
      {/* Animated Background */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.2 }}
        transition={{ duration: 1 }}
        className="absolute inset-0"
      >
        <RetroGrid className="stroke-white" />
      </motion.div>

      {/* Floating Elements */}
      <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-green-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob" />
      <div className="absolute bottom-1/4 right-1/4 w-72 h-72 bg-emerald-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000" />

      {/* Logo */}
      <motion.div
        initial={{ y: -50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="absolute top-8 left-8 flex items-center gap-2"
      >
        <Rocket className="w-6 h-6 text-white" />
        <span className="text-white text-xl font-medium">Investrix</span>
      </motion.div>

      {/* Main Content */}
      <motion.div 
        initial={{ scale: 0.95, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="z-10 w-full max-w-md p-8 rounded-3xl border border-white/10 bg-black/80 backdrop-blur-xl"
      >
        <div className="space-y-8">
          {/* Header */}
          <div className="space-y-2">
            <h1 className="text-4xl font-medium tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-500">
              Welcome back
            </h1>
            <p className="text-base text-gray-500">
              Enter your credentials to access your account
            </p>
          </div>

          {/* Error Message */}
          {error && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="p-3 rounded-lg bg-red-500/10 border border-red-500/20 text-red-400 text-sm"
            >
              {error}
            </motion.div>
          )}

          {/* Sign In Form */}
          <div className="space-y-6">
            {/* Role Selector */}
            <div className="space-y-3">
              <label className="text-sm text-gray-400">Select your role</label>
              <div className="grid grid-cols-2 gap-4">
                {[
                  { 
                    id: 'investor', 
                    icon: <Wallet className="w-5 h-5" />, 
                    label: 'Investor',
                    gradient: 'from-white-300 via-green-400 to-green-500'
                  },
                  { 
                    id: 'investee', 
                    icon: <Lightbulb className="w-5 h-5" />, 
                    label: 'Investee',
                    gradient: 'from-white-300 via-emerald-400 to-emerald-500'
                  }
                ].map((role) => (
                  <motion.button
                    key={role.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => setSelectedRole(role.id)}
                    className={`
                      p-4 rounded-xl border relative overflow-hidden transition-all duration-300
                      ${selectedRole === role.id
                        ? 'border-green-400/30 text-white'
                        : 'border-white/5 text-gray-400 hover:border-white/10 hover:bg-white/5'
                      }
                    `}
                  >
                    {/* Background gradient when selected */}
                    {selectedRole === role.id && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ duration: 0.3 }}
                        className={`
                          absolute inset-0 bg-gradient-to-br ${role.gradient} 
                          opacity-10 backdrop-blur-sm
                        `}
                      />
                    )}
                    
                    {/* Glowing border effect when selected */}
                    {selectedRole === role.id && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ duration: 0.3 }}
                        className="absolute inset-0 rounded-xl"
                        style={{
                          background: `
                            linear-gradient(45deg, 
                              rgba(74, 222, 128, 0.1), 
                              rgba(34, 197, 94, 0.1), 
                              rgba(21, 128, 61, 0.1)
                            )
                          `,
                        }}
                      />
                    )}

                    {/* Content */}
                    <div className="relative flex flex-col items-center gap-2">
                      <div className={`
                        ${selectedRole === role.id 
                          ? 'text-green-400' 
                          : 'text-gray-400'
                        } transition-colors duration-300
                      `}>
                        {role.icon}
                      </div>
                      <span className={`
                        ${selectedRole === role.id 
                          ? 'text-green-400' 
                          : 'text-gray-400'
                        } font-medium transition-colors duration-300
                      `}>
                        {role.label}
                      </span>
                    </div>
                  </motion.button>
                ))}
              </div>
            </div>

            {/* Input Fields */}
            <div className="space-y-4">
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
                <Input
                  type="email"
                  name="email"
                  placeholder="Email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className="h-12 pl-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
                />
              </div>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
                <Input
                  type={showPassword ? "text" : "password"}
                  name="password"
                  placeholder="Password"
                  value={formData.password}
                  onChange={handleInputChange}
                  className="h-12 pl-10 pr-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-white transition-colors"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>

            {/* Sign In Button */}
            <motion.div
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <Button
                onClick={handleSignIn}
                disabled={isLoading}
                className="w-full h-12 bg-gradient-to-r from-green-400 to-emerald-500 hover:from-green-500 hover:to-emerald-600 text-white font-medium rounded-xl transition-all duration-200 group"
              >
                {isLoading ? (
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                ) : (
                  <>
                    Sign in
                    <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-0.5 transition-transform" />
                  </>
                )}
              </Button>
            </motion.div>
          </div>

          {/* Additional Options */}
          <div className="flex items-center justify-between">
            <motion.div whileHover={{ scale: 1.05 }}>
              <Button
                variant="link"
                className="text-gray-500 hover:text-green-400 transition-colors duration-200"
                onClick={() => router.push("/signup")}
              >
                Don't have an account? Sign up
              </Button>
            </motion.div>
            <motion.div whileHover={{ scale: 1.05 }}>
              <Button
                variant="link"
                className="text-gray-500 hover:text-green-400 transition-colors duration-200"
                onClick={() => router.push("/forgot-password")}
              >
                Forgot password?
              </Button>
            </motion.div>
          </div>
        </div>
      </motion.div>

      {/* Background Gradients */}
      <div className="absolute inset-0 bg-gradient-to-t from-black via-black/80 to-black" />
      <div className="absolute bottom-0 left-0 w-full h-1/3 bg-gradient-to-t from-black to-transparent" />
    </div>
  );
}


================================================
FILE: src/app/signup/page.tsx
================================================
"use client";
/* eslint-disable */
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { RetroGrid } from "@/components/magicui/retro-grid";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { createUserWithEmailAndPassword, updateProfile } from "firebase/auth";
import { doc, setDoc } from "firebase/firestore";
import { auth, db } from "../firebase";
import toast from "react-hot-toast";
import {
  Rocket,
  Mail,
  Lock,
  User,
  Building,
  ArrowRight,
  ArrowLeft,
  Wallet,
  Lightbulb,
  Eye,
  EyeOff,
  Check,
  Phone,
  AlertCircle,
  Key
} from "lucide-react";

type Step = {
  id: number;
  title: string;
  subtitle: string;
};

const steps: Step[] = [
  {
    id: 1,
    title: "Choose your role",
    subtitle: "Select how you'll use Investrix"
  },
  {
    id: 2,
    title: "Create account",
    subtitle: "Enter your basic information"
  }
];

export default function Signup() {
  const router = useRouter();
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    role: "",
    email: "",
    password: "",
    confirmPassword: "",
    fullName: "",
    companyName: "",
    phoneNumber: ""
  });
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleRoleSelect = (role: string) => {
    setFormData(prev => ({ ...prev, role }));
    setError("");
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setError("");
  };

  const validateStep = () => {
    switch (currentStep) {
      case 1:
        if (!formData.role) {
          setError("Please select a role to continue");
          return false;
        }
        break;
      case 2:
        if (!formData.email || !formData.password || !formData.confirmPassword) {
          setError("Please fill in all fields");
          return false;
        }
        if (formData.password !== formData.confirmPassword) {
          setError("Passwords do not match");
          return false;
        }
        if (formData.password.length < 8) {
          setError("Password must be at least 8 characters long");
          return false;
        }
        break;
    }
    return true;
  };

  const handleNext = () => {
    if (validateStep()) {
      setCurrentStep(prev => prev + 1);
      setError("");
    }
  };

  const handleBack = () => {
    setCurrentStep(prev => prev - 1);
    setError("");
  };

  const handleSubmit = async () => {
    if (!validateStep()) return;

    setIsLoading(true);
    try {
      // Create user with Firebase
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        formData.email,
        formData.password
      );
      const user = userCredential.user;

      // Update profile
      await updateProfile(user, {
        displayName: formData.fullName || formData.email.split("@")[0],
      });

      // Store additional user data
      await setDoc(doc(db, "users", user.uid), {
        email: user.email,
        role: formData.role,
        fullName: formData.fullName,
        companyName: formData.role === 'investee' ? formData.companyName : null,
        phoneNumber: formData.phoneNumber
      });

      toast.success("Account created successfully");

      // Route based on selected role
      if (formData.role === 'investor') {
        router.push('/dashboard/investor');
      } else if (formData.role === 'investee') {
        router.push('/dashboard/investee');
      }
    } catch (error: any) {
      console.error(error);
      setError(error.message || "Failed to create account");
      toast.error(error.message || "Failed to create account");
    } finally {
      setIsLoading(false);
    }
  };

  // Rest of the component remains the same...
  // (Keep all the renderStepContent and return JSX exactly as it was)
  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            className="space-y-6"
          >
            <div className="grid grid-cols-2 gap-4">
              {[
                {
                  id: 'investor',
                  icon: <Wallet className="w-6 h-6" />,
                  label: 'Investor',
                  description: 'I want to invest in companies',
                  gradient: 'from-white-300 via-green-400 to-green-500'
                },
                {
                  id: 'investee',
                  icon: <Lightbulb className="w-6 h-6" />,
                  label: 'Investee',
                  description: 'I want to raise funds for my company',
                  gradient: 'from-grey-300 via-emerald-400 to-emerald-500'
                }
              ].map((role) => (
                <motion.button
                  key={role.id}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleRoleSelect(role.id)}
                  className={`
                    p-6 rounded-xl border relative overflow-hidden text-left
                    ${formData.role === role.id
                      ? 'border-green-400/30 text-white'
                      : 'border-white/5 text-gray-400 hover:border-white/10 hover:bg-white/5'
                    }
                  `}
                >
                  {formData.role === role.id && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className={`
                        absolute inset-0 bg-gradient-to-br ${role.gradient} 
                        opacity-10 backdrop-blur-sm
                      `}
                    />
                  )}
                  <div className="relative space-y-2">
                    <div className={`
                      ${formData.role === role.id ? 'text-green-400' : 'text-gray-400'}
                      transition-colors duration-300
                    `}>
                      {role.icon}
                    </div>
                    <div>
                      <h3 className={`
                        font-medium text-lg
                        ${formData.role === role.id ? 'text-green-400' : 'text-gray-300'}
                      `}>
                        {role.label}
                      </h3>
                      <p className="text-sm text-gray-500 mt-1">{role.description}</p>
                    </div>
                  </div>
                </motion.button>
              ))}
            </div>
          </motion.div>
        );

      case 2:
        return (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            className="space-y-4"
          >
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
              <Input
                type="email"
                name="email"
                placeholder="Email address"
                value={formData.email}
                onChange={handleInputChange}
                className="h-12 pl-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
              />
            </div>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
              <Input
                type={showPassword ? "text" : "password"}
                name="password"
                placeholder="Password"
                value={formData.password}
                onChange={handleInputChange}
                className="h-12 pl-10 pr-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-white transition-colors"
              >
                {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
              </button>
            </div>
            <div className="relative">
              <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
              <Input
                type={showPassword ? "text" : "password"}
                name="confirmPassword"
                placeholder="Confirm password"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                className="h-12 pl-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
              />
            </div>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
              <Input
                type="text"
                name="fullName"
                placeholder="Full name"
                value={formData.fullName}
                onChange={handleInputChange}
                className="h-12 pl-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
              />
            </div>
            {formData.role === 'investee' && (
              <div className="relative">
                <Building className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
                <Input
                  type="text"
                  name="companyName"
                  placeholder="Company name"
                  value={formData.companyName}
                  onChange={handleInputChange}
                  className="h-12 pl-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
                />
              </div>
            )}
            <div className="relative">
              <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500" />
              <Input
                type="tel"
                name="phoneNumber"
                placeholder="APTOS Private Key"
                value={formData.phoneNumber}
                onChange={handleInputChange}
                className="h-12 pl-10 bg-white/5 border-white/10 text-white placeholder:text-gray-500 focus:border-green-400/30 focus:ring-0 rounded-xl"
              />
            </div>
          </motion.div>
        );
    }
  };

  return (
    <div className="relative flex h-screen w-full flex-col items-center justify-center bg-black overflow-hidden">
      {/* Background Elements */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.2 }}
        transition={{ duration: 1 }}
        className="absolute inset-0"
      >
        <RetroGrid className="stroke-white" />
      </motion.div>

      <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-green-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob" />
      <div className="absolute bottom-1/4 right-1/4 w-72 h-72 bg-emerald-500/20 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000" />

      {/* Logo */}
      <motion.div
        initial={{ y: -50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="absolute top-8 left-8 flex items-center gap-2"
      >
        <Rocket className="w-6 h-6 text-white" />
        <span className="text-white text-xl font-medium">Investrix</span>
      </motion.div>

      {/* Main Content */}
      <motion.div
        initial={{ scale: 0.95, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="z-10 w-full max-w-2xl p-8 rounded-3xl border border-white/10 bg-black/80 backdrop-blur-xl"
      >
        {/* Progress Steps */}
        <div className="mb-8">
          <div className="flex justify-between">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <div className={`
                  flex items-center justify-center w-8 h-8 rounded-full
                  ${currentStep > step.id
                    ? 'bg-green-400 text-black'
                    : currentStep === step.id
                      ? 'bg-white/10 text-white border border-white/20'
                      : 'bg-white/5 text-gray-500 border border-white/10'
                  }
                `}>
                  {currentStep > step.id ? (
                    <Check className="w-5 h-5 rounded-full" />
                  ) : (
                    <span>{step.id}</span>
                  )}
                </div>
                {index < steps.length - 1 && (
                  <div className={`
                    w-full h-1 mx-2
                    ${currentStep > step.id + 1
                      ? 'bg-green-400'
                      : 'bg-white/10'
                    }
                  `} />
                )}
              </div>
            ))}
          </div>
          <div className="mt-4">
            <h2 className="text-2xl font-medium text-white">
              {steps[currentStep - 1].title}
            </h2>
            <p className="text-gray-400 mt-1">
              {steps[currentStep - 1].subtitle}
            </p>
          </div>
        </div>

        {/* Error Message */}
        <AnimatePresence mode="wait">
          {error && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="mb-6 p-3 rounded-lg bg-red-500/10 border border-red-500/20 text-red-400 text-sm flex items-center gap-2"
            >
              <AlertCircle className="w-4 h-4" />
              {error}
            </motion.div>
          )}
        </AnimatePresence>

        {/* Form Content */}
        <div className="min-h-[280px]">
          <AnimatePresence mode="wait">
            {renderStepContent()}
          </AnimatePresence>
        </div>

        {/* Navigation Buttons */}
        <div className="flex justify-between mt-8">
          {currentStep > 1 ? (
            <Button
              onClick={handleBack}
              variant="outline"
              className="border-white/10 bg-black text-white"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
          ) : (
            <Button
              variant="ghost"
              onClick={() => router.push('/login')}
              className="text-gray-400 hover:bg-black hover:text-white"
            >
              Already have an account? Log in
            </Button>
          )}

          <Button
            onClick={currentStep === steps.length ? handleSubmit : handleNext}
            disabled={isLoading}
            className="bg-gradient-to-r from-green-400 to-emerald-500 hover:from-green-500 hover:to-emerald-600 text-white px-8"
          >
            {isLoading ? (
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
            ) : (
              <>
                {currentStep === steps.length ? 'Create Account' : 'Continue'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </>
            )}
          </Button>
        </div>
      </motion.div>

      {/* Background Gradients */}
      <div className="absolute inset-0 bg-gradient-to-t from-black via-black/80 to-black" />
      <div className="absolute bottom-0 left-0 w-full h-1/3 bg-gradient-to-t from-black to-transparent" />
    </div>
  );
}


================================================
FILE: src/components/ChatToggleButton.tsx
================================================
'use client';
/* eslint-disable */
import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, X } from 'lucide-react';

export function ChatToggleButton() {
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [botresponse, setBotresponse] = useState([
    { message: "Hello, I am Investrix. How can I help you?", type: "bot" },
  ]);

  const handleToggle = useCallback(() => {
    setIsChatOpen((prev) => !prev);
  }, []);

  const handleInputChange = useCallback((e: any) => {
    setInputValue(e.target.value);
  }, []);

  const handleSubmit = useCallback(
    async (e: any) => {
      e.preventDefault();
      try {
        setBotresponse((prev) => [...prev, { message: inputValue, type: "user" }]);

        const response = await fetch(`${process.env.NEXT_PUBLIC_CHATBOT_URL}/chat`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ message: inputValue }),
        });

        const data = await response.json();

        setBotresponse((prev) => [
          ...prev,
          { message: data.response || "Error: No response from server.", type: "bot" },
        ]);

        setInputValue("");
      } catch (error) {
        console.error("Fetch error:", error);
        setBotresponse((prev) => [
          ...prev,
          { message: "Error: Unable to reach the server.", type: "bot" },
        ]);
      }
    },
    [inputValue]
  );

  return (
    <>
      <AnimatePresence>
        {isChatOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.95 }}
            transition={{ duration: 0.2 }}
            className="fixed bottom-24 right-6 w-[350px] h-[500px] bg-white rounded-2xl shadow-2xl z-50 overflow-hidden"
          >
            <div className="bg-gradient-to-r from-green-500 to-emerald-600 p-4">
              <h3 className="text-white font-medium">AI Assistant</h3>
            </div>
            <div className="p-4 h-[380px] overflow-y-auto">
              {botresponse.map((item, index) => (
                <div
                  key={index}
                  className={`rounded-lg p-3 mb-2 max-w-[80%] ${
                    item.type === "bot" ? "bg-gray-100 text-gray-800" : "bg-green-500 text-white self-end"
                  }`}
                >
                  <p className="text-sm">{item.message}</p>
                </div>
              ))}
            </div>
            <form onSubmit={handleSubmit} className="absolute bottom-0 left-0 right-0 p-4 bg-white border-t">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={inputValue}
                  onChange={handleInputChange}
                  placeholder="Type your message..."
                  className="flex-1 px-4 py-2 border rounded-full focus:outline-none focus:ring-2 focus:ring-green-500"
                />
                <button
                  type="submit"
                  className="p-2 bg-green-500 text-white rounded-full hover:bg-green-600 transition-colors"
                >
                  <MessageCircle className="w-5 h-5" />
                </button>
              </div>
            </form>
          </motion.div>
        )}
      </AnimatePresence>
      <motion.button
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", stiffness: 260, damping: 20, delay: 1.5 }}
        onClick={handleToggle}
        className="fixed bottom-6 right-6 z-50 p-4 rounded-full bg-white text-green-500 shadow-lg hover:shadow-xl transition-all duration-300 group"
      >
        <motion.div animate={{ rotate: isChatOpen ? 180 : 0 }} transition={{ duration: 0.3 }}>
          {isChatOpen ? <X className="w-6 h-6" /> : <MessageCircle className="w-6 h-6" />}
        </motion.div>
      </motion.button>
    </>
  );
}



================================================
FILE: src/components/clientProviders.tsx
================================================
'use client'

import { AptosWalletAdapterProvider } from "@aptos-labs/wallet-adapter-react"
import { EdgeStoreProvider } from "@/lib/edgestore"
import { Toaster } from "react-hot-toast"

export function ClientProviders({ children }: { children: React.ReactNode }) {
  return (
    <EdgeStoreProvider>
      <AptosWalletAdapterProvider optInWallets={["Petra"]}>
        <Toaster position="bottom-right" />
        {children}
      </AptosWalletAdapterProvider>
    </EdgeStoreProvider>
  )
}


================================================
FILE: src/components/Navbar.tsx
================================================
'use client';
/* eslint-disable */
import React, { useEffect, useState } from 'react';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import { auth } from '@/app/firebase';
import { useRouter } from 'next/navigation';
import toast from 'react-hot-toast';
import { Button } from '@/components/ui/button';
import { Rocket } from 'lucide-react';

const Navbar = () => {
  const [user, setUser] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user: any) => {
      setUser(user);
    });
    return () => unsubscribe();
  }, []);

  const handleSignOut = () => {
    signOut(auth)
      .then(() => {
        toast.success('Sign out successful');
        setUser(null);
        router.push('/');
      })
      .catch((error) => {
        console.error(error);
        toast.error('Unable to sign out');
      });
  };

  return (
    <nav className="flex justify-between items-center px-6 py-4 bg-black border-b border-[#333333]">
      <Rocket className="w-8 h-8 text-white" />
      <span className="text-white text-xl font-medium">Investrix</span>
      <div className="flex gap-4">
        {user ? (
          <Button variant="ghost" className="text-gray-300" onClick={handleSignOut}>Sign Out</Button>
        ) : (
          <Button variant="ghost" className="text-gray-300" onClick={() => router.push('/login')}>Login</Button>
        )}
      </div>
    </nav>
  );
};

export default Navbar;



================================================
FILE: src/components/magicui/interactive-grid-pattern.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import React, { useState } from "react";

/**
 * InteractiveGridPattern is a component that renders a grid pattern with interactive squares.
 *
 * @param width - The width of each square.
 * @param height - The height of each square.
 * @param squares - The number of squares in the grid. The first element is the number of horizontal squares, and the second element is the number of vertical squares.
 * @param className - The class name of the grid.
 * @param squaresClassName - The class name of the squares.
 */
interface InteractiveGridPatternProps extends React.SVGProps<SVGSVGElement> {
  width?: number;
  height?: number;
  squares?: [number, number]; // [horizontal, vertical]
  className?: string;
  squaresClassName?: string;
}

/**
 * The InteractiveGridPattern component.
 *
 * @see InteractiveGridPatternProps for the props interface.
 * @returns A React component.
 */
export function InteractiveGridPattern({
  width = 40,
  height = 40,
  squares = [24, 24],
  className,
  squaresClassName,
  ...props
}: InteractiveGridPatternProps) {
  const [horizontal, vertical] = squares;
  const [hoveredSquare, setHoveredSquare] = useState<number | null>(null);

  return (
    <svg
      width={width * horizontal}
      height={height * vertical}
      className={cn(
        "absolute inset-0 h-full w-full border border-gray-400/30",
        className,
      )}
      {...props}
    >
      {Array.from({ length: horizontal * vertical }).map((_, index) => {
        const x = (index % horizontal) * width;
        const y = Math.floor(index / horizontal) * height;
        return (
          <rect
            key={index}
            x={x}
            y={y}
            width={width}
            height={height}
            className={cn(
              "stroke-gray-400/30 transition-all duration-100 ease-in-out [&:not(:hover)]:duration-1000",
              hoveredSquare === index ? "fill-gray-300/30" : "fill-transparent",
              squaresClassName,
            )}
            onMouseEnter={() => setHoveredSquare(index)}
            onMouseLeave={() => setHoveredSquare(null)}
          />
        );
      })}
    </svg>
  );
}



================================================
FILE: src/components/magicui/retro-grid.tsx
================================================
import { cn } from "@/lib/utils";

interface RetroGridProps extends React.HTMLAttributes<HTMLDivElement> {
  /**
   * Additional CSS classes to apply to the grid container
   */
  className?: string;
  /**
   * Rotation angle of the grid in degrees
   * @default 65
   */
  angle?: number;
  /**
   * Grid cell size in pixels
   * @default 60
   */
  cellSize?: number;
  /**
   * Grid opacity value between 0 and 1
   * @default 0.5
   */
  opacity?: number;
  /**
   * Grid line color in light mode
   * @default "gray"
   */
  lightLineColor?: string;
  /**
   * Grid line color in dark mode
   * @default "gray"
   */
  darkLineColor?: string;
}

export function RetroGrid({
  className,
  angle = 65,
  cellSize = 60,
  opacity = 0.5,
  lightLineColor = "gray",
  darkLineColor = "gray",
  ...props
}: RetroGridProps) {
  const gridStyles = {
    "--grid-angle": `${angle}deg`,
    "--cell-size": `${cellSize}px`,
    "--opacity": opacity,
    "--light-line": lightLineColor,
    "--dark-line": darkLineColor,
  } as React.CSSProperties;

  return (
    <div
      className={cn(
        "pointer-events-none absolute size-full overflow-hidden [perspective:200px]",
        `opacity-[var(--opacity)]`,
        className,
      )}
      style={gridStyles}
      {...props}
    >
      <div className="absolute inset-0 [transform:rotateX(var(--grid-angle))]">
        <div className="animate-grid [background-image:linear-gradient(to_right,var(--light-line)_1px,transparent_0),linear-gradient(to_bottom,var(--light-line)_1px,transparent_0)] [background-repeat:repeat] [background-size:var(--cell-size)_var(--cell-size)] [height:300vh] [inset:0%_0px] [margin-left:-200%] [transform-origin:100%_0_0] [width:600vw] dark:[background-image:linear-gradient(to_right,var(--dark-line)_1px,transparent_0),linear-gradient(to_bottom,var(--dark-line)_1px,transparent_0)]" />
      </div>

      <div className="absolute inset-0 bg-gradient-to-t from-white to-transparent to-90% dark:from-black" />
    </div>
  );
}



================================================
FILE: src/components/magicui/sparkles-text.tsx
================================================
"use client";

import { motion } from "motion/react";
import { CSSProperties, ReactElement, useEffect, useState } from "react";

import { cn } from "@/lib/utils";

interface Sparkle {
  id: string;
  x: string;
  y: string;
  color: string;
  delay: number;
  scale: number;
  lifespan: number;
}

const Sparkle: React.FC<Sparkle> = ({ id, x, y, color, delay, scale }) => {
  return (
    <motion.svg
      key={id}
      className="pointer-events-none absolute z-20"
      initial={{ opacity: 0, left: x, top: y }}
      animate={{
        opacity: [0, 1, 0],
        scale: [0, scale, 0],
        rotate: [75, 120, 150],
      }}
      transition={{ duration: 0.8, repeat: Infinity, delay }}
      width="21"
      height="21"
      viewBox="0 0 21 21"
    >
      <path
        d="M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z"
        fill={color}
      />
    </motion.svg>
  );
};

interface SparklesTextProps {
  /**
   * @default <div />
   * @type ReactElement
   * @description
   * The component to be rendered as the text
   * */
  as?: ReactElement;

  /**
   * @default ""
   * @type string
   * @description
   * The className of the text
   */
  className?: string;

  /**
   * @required
   * @type string
   * @description
   * The text to be displayed
   * */
  text: string;

  /**
   * @default 10
   * @type number
   * @description
   * The count of sparkles
   * */
  sparklesCount?: number;

  /**
   * @default "{first: '#9E7AFF', second: '#FE8BBB'}"
   * @type string
   * @description
   * The colors of the sparkles
   * */
  colors?: {
    first: string;
    second: string;
  };
}

export const SparklesText: React.FC<SparklesTextProps> = ({
  text,
  colors = { first: "#9E7AFF", second: "#FE8BBB" },
  className,
  sparklesCount = 10,
  ...props
}) => {
  const [sparkles, setSparkles] = useState<Sparkle[]>([]);

  useEffect(() => {
    const generateStar = (): Sparkle => {
      const starX = `${Math.random() * 100}%`;
      const starY = `${Math.random() * 100}%`;
      const color = Math.random() > 0.5 ? colors.first : colors.second;
      const delay = Math.random() * 2;
      const scale = Math.random() * 1 + 0.3;
      const lifespan = Math.random() * 10 + 5;
      const id = `${starX}-${starY}-${Date.now()}`;
      return { id, x: starX, y: starY, color, delay, scale, lifespan };
    };

    const initializeStars = () => {
      const newSparkles = Array.from({ length: sparklesCount }, generateStar);
      setSparkles(newSparkles);
    };

    const updateStars = () => {
      setSparkles((currentSparkles) =>
        currentSparkles.map((star) => {
          if (star.lifespan <= 0) {
            return generateStar();
          } else {
            return { ...star, lifespan: star.lifespan - 0.1 };
          }
        }),
      );
    };

    initializeStars();
    const interval = setInterval(updateStars, 100);

    return () => clearInterval(interval);
  }, [colors.first, colors.second, sparklesCount]);

  return (
    <div
      className={cn("text-6xl font-bold", className)}
      {...props}
      style={
        {
          "--sparkles-first-color": `${colors.first}`,
          "--sparkles-second-color": `${colors.second}`,
        } as CSSProperties
      }
    >
      <span className="relative inline-block">
        {sparkles.map((sparkle) => (
          <Sparkle key={sparkle.id} {...sparkle} />
        ))}
        <strong>{text}</strong>
      </span>
    </div>
  );
};



================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================
FILE: src/components/ui/percentage-circle.tsx
================================================
interface PercentageCircleProps {
    percentage: number;
    size?: number;
    strokeWidth?: number;
  }
  
  export const PercentageCircle = ({ 
    percentage, 
    size = 80, 
    strokeWidth = 4 
  }: PercentageCircleProps) => {
    const radius = (size - strokeWidth) / 2;
    const circumference = radius * 2 * Math.PI;
    const offset = circumference - (percentage / 100) * circumference;
  
    return (
      <div className="relative" style={{ width: size, height: size }}>
        <svg className="transform -rotate-90" width={size} height={size}>
          {/* Background circle */}
          <circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            stroke="#333333"
            strokeWidth={strokeWidth}
            fill="none"
          />
          {/* Percentage circle */}
          <circle
            cx={size / 2}
            cy={size / 2}
            r={radius}
            stroke="white"
            strokeWidth={strokeWidth}
            strokeDasharray={circumference}
            strokeDashoffset={offset}
            fill="none"
            className="transition-all duration-500 ease-out"
          />
        </svg>
        <div className="absolute inset-0 flex items-center justify-center">
          <span className="text-white text-sm font-medium">{percentage}%</span>
        </div>
      </div>
    );
  };


================================================
FILE: src/lib/contracts.ts
================================================
/* eslint-disable */

import { Account, Aptos, AptosConfig, Network, AccountAddress, NetworkToNetworkName, Ed25519PrivateKey } from "@aptos-labs/ts-sdk";
import { initializeApp } from "firebase/app";
import { getFirestore, collection, query, where, getDocs } from "firebase/firestore";
import { updateDoc, doc } from "firebase/firestore";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};


const app = initializeApp(firebaseConfig);
console.log(app);
const db = getFirestore(app);
const APTOS_COIN = "0x1::aptos_coin::AptosCoin";
const COIN_STORE = `0x1::coin::CoinStore<${APTOS_COIN}>`;
const config = new AptosConfig({ network: Network.TESTNET });
const aptos = new Aptos(config);

async function get_acc_no(id: number) {
  const collectionRef = collection(db, "applications");
  const q = query(collectionRef, where("id", "==", id));
  const querySnapshot = await getDocs(q);
  let data1: string = "";

  querySnapshot.forEach((doc) => {
    const data: any = doc.data();
    data1 = data["acc_no"];
  });

  return data1;

}


async function push_acc_no(id: number, acc_hash: any) {
  const collectionRef = collection(db, "applications");
  const q = query(collectionRef, where("applicationId", "==", id));

  // Get the matching documents
  const querySnapshot = await getDocs(q);
  querySnapshot.forEach(async (docSnap) => {
    const docRef = doc(db, "applications", docSnap.id);
    await updateDoc(docRef, {
      ["acc_hash"]: acc_hash,
    });

    console.log(`Field 'acc_hash' updated successfully for document with applicationId: ${id} and the hash is ${acc_hash}`);
  });
}

export async function createStartup(startup_id: number) {
  const startup_acc = Account.generate();
  console.log(`Startup created with hash:  ${startup_acc.accountAddress}`);
  try {
    push_acc_no(startup_id, startup_acc.accountAddress);
  }
  catch (error) {
    console.error("Firebase errror!");
  }
}

export async function fundStartup(startupId: number, amt: number) {
  try {
    const investorStringKey = process.env.NEXT_PUBLIC_INVESTOR_PRIVATE_KEY || "";
    const investorPrivateKey = new Ed25519PrivateKey(investorStringKey);


    const investorAccount = Account.fromPrivateKey({
      privateKey: investorPrivateKey
    });
    console.log("Investor pvt: ", investorAccount.privateKey);

    const startupAddress = await get_acc_no(startupId);
    console.log(startupAddress);

    const startupStringKey = process.env.NEXT_PUBLIC_STARTUP_PRIVATE_KEY || "";

    const startupPrivateKey = new Ed25519PrivateKey(startupStringKey);

    const startupAccount = Account.fromPrivateKey({
      privateKey: startupPrivateKey
    });

    console.log("Startup pvt: ", startupAccount.privateKey);

    const aliceBalance = await balance("Investor", investorAccount.accountAddress);
    const bobBalance = await balance("Startup", startupAccount.accountAddress);

    console.log("Balances are : ", aliceBalance, bobBalance);


    // await aptos.fundAccount({ accountAddress: investorAccount.accountAddress, amount: 100_000_000 });
    // await aptos.fundAccount({ accountAddress: startupAccount.accountAddress, amount: 1_000 });


    const transaction = await aptos.transferCoinTransaction({
      sender: investorAccount.accountAddress,
      recipient: startupAccount.accountAddress,
      amount: amt,
    });


    const pendingTxn = await aptos.signAndSubmitTransaction({
      signer: investorAccount,
      transaction,
    });

    const response = await aptos.waitForTransaction({
      transactionHash: pendingTxn.hash,
    });


    console.log("Transaction submitted:", response.hash);
    console.log("Transaction confirmed!: ", response.hash);

    return response.hash;
  } catch (error) {
    console.error("Error funding startup:", error);
  }
}

const balance = async (name: string, accountAddress: AccountAddress, versionToWaitFor?: bigint): Promise<number> => {
  const amount = await aptos.getAccountAPTAmount({
    accountAddress,
    minimumLedgerVersion: versionToWaitFor,
  });
  console.log(`${name}'s balance is: ${amount}`);
  return amount;
};


================================================
FILE: src/lib/edgestore.ts
================================================
'use client';
import { type EdgeStoreRouter } from '@/app/api/edgestore/[...edgestore]/route';
import { createEdgeStoreProvider } from '@edgestore/react';
const { EdgeStoreProvider, useEdgeStore } =
  createEdgeStoreProvider<EdgeStoreRouter>();
export { EdgeStoreProvider, useEdgeStore };


================================================
FILE: src/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


