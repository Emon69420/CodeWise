Directory structure:
└── emon69420-hazmap/
    ├── README.md
    ├── app.json
    ├── package.json
    ├── tsconfig.json
    ├── .npmrc
    ├── .prettierrc
    ├── app/
    │   ├── +not-found.tsx
    │   ├── _layout.tsx
    │   ├── index.tsx
    │   ├── (auth)/
    │   │   ├── _layout.tsx
    │   │   ├── login.tsx
    │   │   └── signup.tsx
    │   └── (tabs)/
    │       ├── _layout.tsx
    │       ├── air-quality.tsx
    │       ├── evacuation.tsx
    │       ├── index.tsx
    │       ├── profile.tsx
    │       └── updates.tsx
    ├── hooks/
    │   └── useFrameworkReady.ts
    ├── types/
    │   └── env.d.ts
    └── .bolt/
        └── config.json

================================================
FILE: README.md
================================================
hazmap



================================================
FILE: app.json
================================================
{
  "expo": {
    "name": "bolt-expo-nativewind",
    "slug": "bolt-expo-nativewind",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "web": {
      "bundler": "metro",
      "output": "single",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": ["expo-router", "expo-font", "expo-web-browser"],
    "experiments": {
      "typedRoutes": true
    }
  }
}



================================================
FILE: package.json
================================================
{
  "name": "bolt-expo-starter",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "EXPO_NO_TELEMETRY=1 expo start",
    "build:web": "expo export --platform web",
    "lint": "expo lint"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "@lucide/lab": "^0.1.2",
    "@react-native-async-storage/async-storage": "^2.2.0",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "expo": "^53.0.0",
    "expo-blur": "~14.1.3",
    "expo-camera": "~16.1.5",
    "expo-constants": "~17.1.3",
    "expo-font": "~13.2.2",
    "expo-haptics": "~14.1.3",
    "expo-linear-gradient": "~14.1.3",
    "expo-linking": "~7.1.3",
    "expo-location": "^18.1.6",
    "expo-notifications": "^0.31.4",
    "expo-router": "~5.0.2",
    "expo-secure-store": "^14.2.3",
    "expo-splash-screen": "~0.30.6",
    "expo-status-bar": "~2.2.2",
    "expo-symbols": "~0.4.3",
    "expo-system-ui": "~5.0.5",
    "expo-web-browser": "~14.1.5",
    "lucide-react-native": "^0.475.0",
    "mapbox-gl": "^3.13.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-map-gl": "^8.0.4",
    "react-native": "0.79.1",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-paper": "^5.14.5",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.3.0",
    "react-native-screens": "~4.10.0",
    "react-native-svg": "15.11.2",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-web": "^0.20.0",
    "react-native-webview": "13.13.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/react": "~19.0.10",
    "typescript": "~5.8.3"
  }
}



================================================
FILE: tsconfig.json
================================================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts",
    "nativewind-env.d.ts"
  ]
}



================================================
FILE: .npmrc
================================================
legacy-peer-deps=true



================================================
FILE: .prettierrc
================================================
{
  "useTabs": false,
  "bracketSpacing": true,
  "singleQuote": true,
  "tabWidth": 2
}



================================================
FILE: app/+not-found.tsx
================================================
import { Link, Stack } from 'expo-router';
import { StyleSheet, Text, View } from 'react-native';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <View style={styles.container}>
        <Text style={styles.text}>This screen doesn't exist.</Text>
        <Link href="/" style={styles.link}>
          <Text>Go to home screen!</Text>
        </Link>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  text: {
    fontSize: 20,
    fontWeight: 600,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});



================================================
FILE: app/_layout.tsx
================================================
import { useEffect } from 'react';
import { Stack } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { useFrameworkReady } from '@/hooks/useFrameworkReady';

export default function RootLayout() {
  useFrameworkReady();

  return (
    <>
      <Stack screenOptions={{ headerShown: false }}>
        <Stack.Screen name="+not-found" />
      </Stack>
      <StatusBar style="auto" />
    </>
  );
}



================================================
FILE: app/index.tsx
================================================
import { router } from 'expo-router';
import { useEffect } from 'react';

export default function App() {
  useEffect(() => {
    // Simple timeout to ensure router is ready
    const timeout = setTimeout(() => {
      router.replace('/(auth)/login');
    }, 100);

    return () => clearTimeout(timeout);
  }, []);

  return null;
}


================================================
FILE: app/(auth)/_layout.tsx
================================================
import { Stack } from 'expo-router';

export default function AuthLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="login" />
      <Stack.Screen name="signup" />
    </Stack>
  );
}


================================================
FILE: app/(auth)/login.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from 'react-native';
import { Link, router } from 'expo-router';
import { Shield, TriangleAlert as AlertTriangle } from 'lucide-react-native';

export default function LoginScreen() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }

    setIsLoading(true);
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
      router.replace('/(tabs)');
    }, 1000);
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardContainer}
      >
        <View style={styles.content}>
          <View style={styles.header}>
            <View style={styles.iconContainer}>
              <Shield size={48} color="#FF6B35" />
              <AlertTriangle size={32} color="#FFD23F" style={styles.alertIcon} />
            </View>
            <Text style={styles.title}>WildSafe</Text>
            <Text style={styles.subtitle}>Emergency Response System</Text>
          </View>

          <View style={styles.form}>
            <Text style={styles.label}>Email</Text>
            <TextInput
              style={styles.input}
              value={email}
              onChangeText={setEmail}
              placeholder="Enter your email"
              placeholderTextColor="#666"
              keyboardType="email-address"
              autoCapitalize="none"
            />

            <Text style={styles.label}>Password</Text>
            <TextInput
              style={styles.input}
              value={password}
              onChangeText={setPassword}
              placeholder="Enter your password"
              placeholderTextColor="#666"
              secureTextEntry
            />

            <TouchableOpacity
              style={[styles.button, isLoading && styles.buttonDisabled]}
              onPress={handleLogin}
              disabled={isLoading}
            >
              <Text style={styles.buttonText}>
                {isLoading ? 'Signing In...' : 'Sign In'}
              </Text>
            </TouchableOpacity>

            <View style={styles.linkContainer}>
              <Text style={styles.linkText}>Don't have an account? </Text>
              <Link href="/(auth)/signup" style={styles.link}>
                <Text style={styles.linkHighlight}>Sign Up</Text>
              </Link>
            </View>
          </View>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  keyboardContainer: {
    flex: 1,
  },
  content: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
  },
  header: {
    alignItems: 'center',
    marginBottom: 48,
  },
  iconContainer: {
    position: 'relative',
    marginBottom: 16,
  },
  alertIcon: {
    position: 'absolute',
    top: -8,
    right: -8,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#888',
    textAlign: 'center',
  },
  form: {
    width: '100%',
  },
  label: {
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 8,
    fontWeight: '500',
  },
  input: {
    backgroundColor: '#1A1A1A',
    borderColor: '#333',
    borderWidth: 1,
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 24,
  },
  button: {
    backgroundColor: '#FF6B35',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginBottom: 24,
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  linkContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  linkText: {
    color: '#888',
    fontSize: 16,
  },
  link: {
    marginLeft: 4,
  },
  linkHighlight: {
    color: '#FF6B35',
    fontSize: 16,
    fontWeight: '600',
  },
});


================================================
FILE: app/(auth)/signup.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  KeyboardAvoidingView,
  Platform,
  Alert,
  ScrollView,
} from 'react-native';
import { Link, router } from 'expo-router';
import { Shield, TriangleAlert as AlertTriangle } from 'lucide-react-native';

export default function SignUpScreen() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    role: 'citizen', // citizen, official, responder
  });
  const [isLoading, setIsLoading] = useState(false);

  const handleSignUp = async () => {
    if (!formData.firstName || !formData.lastName || !formData.email || !formData.password) {
      Alert.alert('Error', 'Please fill in all required fields');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      Alert.alert('Error', 'Passwords do not match');
      return;
    }

    setIsLoading(true);
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
      router.replace('/(tabs)');
    }, 1000);
  };

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardContainer}
      >
        <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
          <View style={styles.content}>
            <View style={styles.header}>
              <View style={styles.iconContainer}>
                <Shield size={48} color="#FF6B35" />
                <AlertTriangle size={32} color="#FFD23F" style={styles.alertIcon} />
              </View>
              <Text style={styles.title}>Join WildSafe</Text>
              <Text style={styles.subtitle}>Create your emergency response account</Text>
            </View>

            <View style={styles.form}>
              <Text style={styles.label}>First Name *</Text>
              <TextInput
                style={styles.input}
                value={formData.firstName}
                onChangeText={(value) => updateFormData('firstName', value)}
                placeholder="Enter your first name"
                placeholderTextColor="#666"
              />

              <Text style={styles.label}>Last Name *</Text>
              <TextInput
                style={styles.input}
                value={formData.lastName}
                onChangeText={(value) => updateFormData('lastName', value)}
                placeholder="Enter your last name"
                placeholderTextColor="#666"
              />

              <Text style={styles.label}>Email *</Text>
              <TextInput
                style={styles.input}
                value={formData.email}
                onChangeText={(value) => updateFormData('email', value)}
                placeholder="Enter your email"
                placeholderTextColor="#666"
                keyboardType="email-address"
                autoCapitalize="none"
              />

              <Text style={styles.label}>Password *</Text>
              <TextInput
                style={styles.input}
                value={formData.password}
                onChangeText={(value) => updateFormData('password', value)}
                placeholder="Create a password"
                placeholderTextColor="#666"
                secureTextEntry
              />

              <Text style={styles.label}>Confirm Password *</Text>
              <TextInput
                style={styles.input}
                value={formData.confirmPassword}
                onChangeText={(value) => updateFormData('confirmPassword', value)}
                placeholder="Confirm your password"
                placeholderTextColor="#666"
                secureTextEntry
              />

              <TouchableOpacity
                style={[styles.button, isLoading && styles.buttonDisabled]}
                onPress={handleSignUp}
                disabled={isLoading}
              >
                <Text style={styles.buttonText}>
                  {isLoading ? 'Creating Account...' : 'Create Account'}
                </Text>
              </TouchableOpacity>

              <View style={styles.linkContainer}>
                <Text style={styles.linkText}>Already have an account? </Text>
                <Link href="/(auth)/login" style={styles.link}>
                  <Text style={styles.linkHighlight}>Sign In</Text>
                </Link>
              </View>
            </View>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  keyboardContainer: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: 24,
    paddingTop: 48,
  },
  header: {
    alignItems: 'center',
    marginBottom: 32,
  },
  iconContainer: {
    position: 'relative',
    marginBottom: 16,
  },
  alertIcon: {
    position: 'absolute',
    top: -8,
    right: -8,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#888',
    textAlign: 'center',
  },
  form: {
    width: '100%',
  },
  label: {
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 8,
    fontWeight: '500',
  },
  input: {
    backgroundColor: '#1A1A1A',
    borderColor: '#333',
    borderWidth: 1,
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#FF6B35',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginBottom: 24,
    marginTop: 8,
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  linkContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  linkText: {
    color: '#888',
    fontSize: 16,
  },
  link: {
    marginLeft: 4,
  },
  linkHighlight: {
    color: '#FF6B35',
    fontSize: 16,
    fontWeight: '600',
  },
});


================================================
FILE: app/(tabs)/_layout.tsx
================================================
import { Tabs } from 'expo-router';
import { 
  MapPin, 
  Wind, 
  Shield, 
  MessageSquare, 
  User 
} from 'lucide-react-native';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        headerShown: false,
        tabBarStyle: {
          backgroundColor: '#1A1A1A',
          borderTopColor: '#333',
          borderTopWidth: 1,
          height: 88,
          paddingBottom: 8,
          paddingTop: 8,
        },
        tabBarActiveTintColor: '#FF6B35',
        tabBarInactiveTintColor: '#666',
        tabBarLabelStyle: {
          fontSize: 12,
          fontWeight: '500',
        },
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Map',
          tabBarIcon: ({ size, color }) => (
            <MapPin size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="air-quality"
        options={{
          title: 'Air Quality',
          tabBarIcon: ({ size, color }) => (
            <Wind size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="evacuation"
        options={{
          title: 'Evacuation',
          tabBarIcon: ({ size, color }) => (
            <Shield size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="updates"
        options={{
          title: 'Updates',
          tabBarIcon: ({ size, color }) => (
            <MessageSquare size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="profile"
        options={{
          title: 'Profile',
          tabBarIcon: ({ size, color }) => (
            <User size={size} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}


================================================
FILE: app/(tabs)/air-quality.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Platform,
} from 'react-native';
import { Wind, Thermometer, Eye, Droplets, CircleAlert as AlertCircle } from 'lucide-react-native';

interface AirQualityData {
  aqi: number;
  category: 'Good' | 'Moderate' | 'Unhealthy for Sensitive' | 'Unhealthy' | 'Very Unhealthy' | 'Hazardous';
  primaryPollutant: string;
  pollutants: {
    pm25: number;
    pm10: number;
    o3: number;
    no2: number;
    so2: number;
    co: number;
  };
  location: string;
  timestamp: string;
}

export default function AirQualityScreen() {
  const [airQuality, setAirQuality] = useState<AirQualityData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedTimeframe, setSelectedTimeframe] = useState<'current' | '24h' | '7d'>('current');

  useEffect(() => {
    loadAirQualityData();
  }, []);

  const loadAirQualityData = async () => {
    setIsLoading(true);
    // Simulate API call to Google Maps Air Quality API
    setTimeout(() => {
      const mockData: AirQualityData = {
        aqi: 156,
        category: 'Unhealthy',
        primaryPollutant: 'PM2.5',
        pollutants: {
          pm25: 65.4,
          pm10: 89.2,
          o3: 45.1,
          no2: 23.8,
          so2: 12.3,
          co: 1.2,
        },
        location: 'Los Angeles, CA',
        timestamp: new Date().toISOString(),
      };
      setAirQuality(mockData);
      setIsLoading(false);
    }, 1000);
  };

  const getAQIColor = (aqi: number) => {
    if (aqi <= 50) return '#22C55E'; // Good
    if (aqi <= 100) return '#EAB308'; // Moderate
    if (aqi <= 150) return '#F97316'; // Unhealthy for Sensitive
    if (aqi <= 200) return '#EF4444'; // Unhealthy
    if (aqi <= 300) return '#A855F7'; // Very Unhealthy
    return '#DC2626'; // Hazardous
  };

  const getHealthRecommendation = (category: string) => {
    switch (category) {
      case 'Good':
        return 'Air quality is considered satisfactory. Ideal time for outdoor activities.';
      case 'Moderate':
        return 'Air quality is acceptable. Unusually sensitive people should consider limiting prolonged outdoor activities.';
      case 'Unhealthy for Sensitive':
        return 'Sensitive groups may experience health effects. Limit prolonged outdoor activities if you have heart or lung disease.';
      case 'Unhealthy':
        return 'Everyone may experience health effects. Avoid prolonged outdoor activities. Stay indoors if possible.';
      case 'Very Unhealthy':
        return 'Health alert! Everyone should avoid outdoor activities. Keep windows closed and use air purifiers.';
      case 'Hazardous':
        return 'Emergency conditions. Everyone should remain indoors and avoid all outdoor activities.';
      default:
        return 'Monitor air quality regularly and follow health recommendations.';
    }
  };

  const getPollutantLevel = (value: number, type: string) => {
    // Simplified pollutant level assessment
    if (value <= 12) return { level: 'Low', color: '#22C55E' };
    if (value <= 35) return { level: 'Moderate', color: '#EAB308' };
    if (value <= 55) return { level: 'High', color: '#F97316' };
    return { level: 'Very High', color: '#EF4444' };
  };

  if (!airQuality) {
    return (
      <SafeAreaView style={styles.container}>
        <Text style={styles.loadingText}>Loading air quality data...</Text>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <Text style={styles.title}>Air Quality Index</Text>
          <Text style={styles.location}>{airQuality.location}</Text>
        </View>

        <View style={styles.mainCard}>
          <View style={styles.aqiContainer}>
            <View style={[styles.aqiCircle, { borderColor: getAQIColor(airQuality.aqi) }]}>
              <Text style={[styles.aqiNumber, { color: getAQIColor(airQuality.aqi) }]}>
                {airQuality.aqi}
              </Text>
            </View>
            <View style={styles.aqiInfo}>
              <Text style={[styles.aqiCategory, { color: getAQIColor(airQuality.aqi) }]}>
                {airQuality.category}
              </Text>
              <Text style={styles.primaryPollutant}>
                Primary: {airQuality.primaryPollutant}
              </Text>
            </View>
          </View>

          <View style={styles.healthAlert}>
            <AlertCircle size={20} color={getAQIColor(airQuality.aqi)} />
            <Text style={styles.healthText}>
              {getHealthRecommendation(airQuality.category)}
            </Text>
          </View>
        </View>

        <View style={styles.timeframeSelector}>
          {(['current', '24h', '7d'] as const).map((timeframe) => (
            <TouchableOpacity
              key={timeframe}
              style={[
                styles.timeframeButton,
                selectedTimeframe === timeframe && styles.timeframeButtonActive,
              ]}
              onPress={() => setSelectedTimeframe(timeframe)}
            >
              <Text
                style={[
                  styles.timeframeText,
                  selectedTimeframe === timeframe && styles.timeframeTextActive,
                ]}
              >
                {timeframe === 'current' ? 'Now' : timeframe === '24h' ? '24 Hours' : '7 Days'}
              </Text>
            </TouchableOpacity>
          ))}
        </View>

        <View style={styles.pollutantsSection}>
          <Text style={styles.sectionTitle}>Pollutant Breakdown</Text>
          
          <View style={styles.pollutantGrid}>
            {Object.entries(airQuality.pollutants).map(([key, value]) => {
              const level = getPollutantLevel(value, key);
              return (
                <View key={key} style={styles.pollutantCard}>
                  <Text style={styles.pollutantName}>
                    {key.toUpperCase().replace('PM', 'PM')}
                  </Text>
                  <Text style={styles.pollutantValue}>
                    {value} {key.includes('pm') ? 'Î¼g/mÂ³' : 'ppb'}
                  </Text>
                  <Text style={[styles.pollutantLevel, { color: level.color }]}>
                    {level.level}
                  </Text>
                </View>
              );
            })}
          </View>
        </View>

        <View style={styles.recommendationsSection}>
          <Text style={styles.sectionTitle}>Health Recommendations</Text>
          
          <View style={styles.recommendationCard}>
            <Eye size={20} color="#3B82F6" />
            <View style={styles.recommendationContent}>
              <Text style={styles.recommendationTitle}>Visibility</Text>
              <Text style={styles.recommendationText}>
                Reduced visibility due to smoke and particulates. Use caution when driving.
              </Text>
            </View>
          </View>

          <View style={styles.recommendationCard}>
            <Wind size={20} color="#10B981" />
            <View style={styles.recommendationContent}>
              <Text style={styles.recommendationTitle}>Indoor Air</Text>
              <Text style={styles.recommendationText}>
                Keep windows closed and use air purifiers. Avoid outdoor exercise.
              </Text>
            </View>
          </View>

          <View style={styles.recommendationCard}>
            <Droplets size={20} color="#8B5CF6" />
            <View style={styles.recommendationContent}>
              <Text style={styles.recommendationTitle}>Hydration</Text>
              <Text style={styles.recommendationText}>
                Stay hydrated and consider wearing N95 masks when outdoors.
              </Text>
            </View>
          </View>
        </View>

        <View style={styles.footer}>
          <Text style={styles.footerText}>
            Last updated: {new Date(airQuality.timestamp).toLocaleTimeString()}
          </Text>
          <TouchableOpacity onPress={loadAirQualityData} disabled={isLoading}>
            <Text style={styles.refreshText}>Refresh</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  scrollView: {
    flex: 1,
  },
  loadingText: {
    color: '#FFFFFF',
    fontSize: 16,
    textAlign: 'center',
    marginTop: 100,
  },
  header: {
    padding: 20,
    paddingTop: Platform.OS === 'ios' ? 8 : 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  location: {
    fontSize: 16,
    color: '#888',
  },
  mainCard: {
    backgroundColor: '#1A1A1A',
    margin: 20,
    borderRadius: 16,
    padding: 24,
    borderWidth: 1,
    borderColor: '#333',
  },
  aqiContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  aqiCircle: {
    width: 100,
    height: 100,
    borderRadius: 50,
    borderWidth: 4,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 20,
  },
  aqiNumber: {
    fontSize: 36,
    fontWeight: 'bold',
  },
  aqiInfo: {
    flex: 1,
  },
  aqiCategory: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  primaryPollutant: {
    fontSize: 16,
    color: '#888',
  },
  healthAlert: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#2A2A2A',
    padding: 16,
    borderRadius: 12,
    gap: 12,
  },
  healthText: {
    flex: 1,
    color: '#FFFFFF',
    fontSize: 14,
    lineHeight: 20,
  },
  timeframeSelector: {
    flexDirection: 'row',
    margin: 20,
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 4,
  },
  timeframeButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  timeframeButtonActive: {
    backgroundColor: '#FF6B35',
  },
  timeframeText: {
    color: '#888',
    fontSize: 14,
    fontWeight: '500',
  },
  timeframeTextActive: {
    color: '#FFFFFF',
  },
  pollutantsSection: {
    margin: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  pollutantGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  pollutantCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 16,
    width: '47%',
    borderWidth: 1,
    borderColor: '#333',
  },
  pollutantName: {
    fontSize: 14,
    color: '#888',
    marginBottom: 4,
  },
  pollutantValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  pollutantLevel: {
    fontSize: 12,
    fontWeight: '600',
  },
  recommendationsSection: {
    margin: 20,
  },
  recommendationCard: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#333',
    gap: 12,
  },
  recommendationContent: {
    flex: 1,
  },
  recommendationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  recommendationText: {
    fontSize: 14,
    color: '#888',
    lineHeight: 20,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: 20,
    paddingTop: 20,
    borderTopWidth: 1,
    borderTopColor: '#333',
  },
  footerText: {
    color: '#888',
    fontSize: 14,
  },
  refreshText: {
    color: '#FF6B35',
    fontSize: 14,
    fontWeight: '600',
  },
});


================================================
FILE: app/(tabs)/evacuation.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  ScrollView,
  Platform,
  Alert,
} from 'react-native';
import { MapPin, Navigation, Clock, Users, Phone, Shield, TriangleAlert as AlertTriangle, CircleCheck as CheckCircle } from 'lucide-react-native';

interface Shelter {
  id: string;
  name: string;
  address: string;
  latitude: number;
  longitude: number;
  capacity: number;
  occupied: number;
  status: 'open' | 'full' | 'closed';
  amenities: string[];
  phoneNumber: string;
  distance: number; // in miles
}

interface EvacuationZone {
  id: string;
  name: string;
  level: 'mandatory' | 'warning' | 'watch';
  description: string;
  affectedAreas: string[];
  estimatedPopulation: number;
}

export default function EvacuationScreen() {
  const [shelters, setShelters] = useState<Shelter[]>([]);
  const [evacuationZones, setEvacuationZones] = useState<EvacuationZone[]>([]);
  const [selectedTab, setSelectedTab] = useState<'shelters' | 'zones' | 'routes'>('shelters');
  const [userZone, setUserZone] = useState<EvacuationZone | null>(null);

  useEffect(() => {
    loadEvacuationData();
  }, []);

  const loadEvacuationData = async () => {
    // Simulate API call to emergency services
    const mockShelters: Shelter[] = [
      {
        id: '1',
        name: 'Santa Monica Civic Center',
        address: '1855 Main St, Santa Monica, CA 90401',
        latitude: 34.0195,
        longitude: -118.4912,
        capacity: 500,
        occupied: 287,
        status: 'open',
        amenities: ['Pet Friendly', 'Medical Support', 'Food Service', 'WiFi'],
        phoneNumber: '(310) 458-8411',
        distance: 2.3,
      },
      {
        id: '2',
        name: 'UCLA Pauley Pavilion',
        address: '301 Westwood Plaza, Los Angeles, CA 90095',
        latitude: 34.0722,
        longitude: -118.4441,
        capacity: 1000,
        occupied: 892,
        status: 'open',
        amenities: ['Pet Friendly', 'Medical Support', 'Food Service', 'Showers'],
        phoneNumber: '(310) 825-2101',
        distance: 5.7,
      },
      {
        id: '3',
        name: 'Malibu High School',
        address: '30215 Morning View Dr, Malibu, CA 90265',
        latitude: 34.0259,
        longitude: -118.6847,
        capacity: 300,
        occupied: 300,
        status: 'full',
        amenities: ['Pet Friendly', 'Food Service'],
        phoneNumber: '(310) 456-6621',
        distance: 8.2,
      },
    ];

    const mockZones: EvacuationZone[] = [
      {
        id: '1',
        name: 'Pacific Palisades',
        level: 'mandatory',
        description: 'Immediate evacuation required due to approaching wildfire.',
        affectedAreas: ['Palisades Village', 'Riviera', 'Highlands'],
        estimatedPopulation: 25000,
      },
      {
        id: '2',
        name: 'Malibu Canyon',
        level: 'warning',
        description: 'Prepare for possible evacuation. Stay alert for updates.',
        affectedAreas: ['Malibu Canyon', 'Las Flores Canyon'],
        estimatedPopulation: 8500,
      },
      {
        id: '3',
        name: 'Topanga',
        level: 'watch',
        description: 'Monitor conditions closely. Be ready to evacuate if ordered.',
        affectedAreas: ['Topanga Canyon', 'Fernwood'],
        estimatedPopulation: 12000,
      },
    ];

    setShelters(mockShelters);
    setEvacuationZones(mockZones);
    setUserZone(mockZones[0]); // Simulate user being in mandatory evacuation zone
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return '#22C55E';
      case 'full': return '#EAB308';
      case 'closed': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'mandatory': return '#DC2626';
      case 'warning': return '#EA580C';
      case 'watch': return '#D97706';
      default: return '#6B7280';
    }
  };

  const handleGetDirections = (shelter: Shelter) => {
    Alert.alert(
      'Navigation',
      `Get directions to ${shelter.name}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Navigate', onPress: () => console.log('Opening navigation...') },
      ]
    );
  };

  const renderShelters = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {shelters.map((shelter) => (
        <View key={shelter.id} style={styles.shelterCard}>
          <View style={styles.shelterHeader}>
            <View style={styles.shelterInfo}>
              <Text style={styles.shelterName}>{shelter.name}</Text>
              <Text style={styles.shelterAddress}>{shelter.address}</Text>
              <Text style={styles.shelterDistance}>{shelter.distance} miles away</Text>
            </View>
            <View style={[styles.statusBadge, { backgroundColor: getStatusColor(shelter.status) }]}>
              <Text style={styles.statusText}>{shelter.status.toUpperCase()}</Text>
            </View>
          </View>

          <View style={styles.capacityInfo}>
            <Users size={16} color="#888" />
            <Text style={styles.capacityText}>
              {shelter.occupied}/{shelter.capacity} occupied
            </Text>
            <View style={styles.capacityBar}>
              <View 
                style={[
                  styles.capacityFill, 
                  { 
                    width: `${(shelter.occupied / shelter.capacity) * 100}%`,
                    backgroundColor: shelter.status === 'full' ? '#EAB308' : '#22C55E'
                  }
                ]} 
              />
            </View>
          </View>

          <View style={styles.amenitiesContainer}>
            {shelter.amenities.map((amenity, index) => (
              <View key={index} style={styles.amenityTag}>
                <Text style={styles.amenityText}>{amenity}</Text>
              </View>
            ))}
          </View>

          <View style={styles.shelterActions}>
            <TouchableOpacity 
              style={styles.actionButton}
              onPress={() => handleGetDirections(shelter)}
              disabled={shelter.status === 'closed'}
            >
              <Navigation size={16} color="#FFFFFF" />
              <Text style={styles.actionButtonText}>Get Directions</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.secondaryButton}>
              <Phone size={16} color="#FF6B35" />
              <Text style={styles.secondaryButtonText}>Call</Text>
            </TouchableOpacity>
          </View>
        </View>
      ))}
    </ScrollView>
  );

  const renderZones = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {userZone && (
        <View style={[styles.userZoneCard, { borderColor: getLevelColor(userZone.level) }]}>
          <View style={styles.zoneHeader}>
            <AlertTriangle size={24} color={getLevelColor(userZone.level)} />
            <Text style={styles.userZoneTitle}>Your Current Zone</Text>
          </View>
          <Text style={[styles.zoneLevel, { color: getLevelColor(userZone.level) }]}>
            {userZone.level.toUpperCase()} EVACUATION
          </Text>
          <Text style={styles.zoneName}>{userZone.name}</Text>
          <Text style={styles.zoneDescription}>{userZone.description}</Text>
        </View>
      )}

      {evacuationZones.map((zone) => (
        <View key={zone.id} style={styles.zoneCard}>
          <View style={styles.zoneHeader}>
            <View style={styles.zoneInfo}>
              <Text style={styles.zoneName}>{zone.name}</Text>
              <Text style={[styles.zoneLevel, { color: getLevelColor(zone.level) }]}>
                {zone.level.toUpperCase()}
              </Text>
            </View>
            <View style={[styles.levelIndicator, { backgroundColor: getLevelColor(zone.level) }]} />
          </View>
          
          <Text style={styles.zoneDescription}>{zone.description}</Text>
          
          <View style={styles.zoneStats}>
            <View style={styles.statItem}>
              <Users size={16} color="#888" />
              <Text style={styles.statText}>
                ~{zone.estimatedPopulation.toLocaleString()} people
              </Text>
            </View>
            <View style={styles.statItem}>
              <MapPin size={16} color="#888" />
              <Text style={styles.statText}>
                {zone.affectedAreas.length} areas affected
              </Text>
            </View>
          </View>
          
          <View style={styles.affectedAreas}>
            <Text style={styles.areasTitle}>Affected Areas:</Text>
            {zone.affectedAreas.map((area, index) => (
              <Text key={index} style={styles.areaText}>â€¢ {area}</Text>
            ))}
          </View>
        </View>
      ))}
    </ScrollView>
  );

  const renderRoutes = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      <View style={styles.routeCard}>
        <View style={styles.routeHeader}>
          <Shield size={24} color="#22C55E" />
          <Text style={styles.routeTitle}>Recommended Evacuation Route</Text>
        </View>
        
        <View style={styles.routeStep}>
          <View style={styles.stepNumber}>
            <Text style={styles.stepText}>1</Text>
          </View>
          <View style={styles.stepContent}>
            <Text style={styles.stepTitle}>Head East on Pacific Coast Highway</Text>
            <Text style={styles.stepDescription}>
              Continue for 2.3 miles. Avoid Malibu Canyon Road (closed).
            </Text>
          </View>
        </View>

        <View style={styles.routeStep}>
          <View style={styles.stepNumber}>
            <Text style={styles.stepText}>2</Text>
          </View>
          <View style={styles.stepContent}>
            <Text style={styles.stepTitle}>Turn North on 4th Street</Text>
            <Text style={styles.stepDescription}>
              Follow signs to Santa Monica Civic Center.
            </Text>
          </View>
        </View>

        <View style={styles.routeStep}>
          <View style={[styles.stepNumber, { backgroundColor: '#22C55E' }]}>
            <CheckCircle size={16} color="#FFFFFF" />
          </View>
          <View style={styles.stepContent}>
            <Text style={styles.stepTitle}>Arrive at Safe Zone</Text>
            <Text style={styles.stepDescription}>
              Santa Monica Civic Center - 1855 Main St
            </Text>
          </View>
        </View>

        <View style={styles.routeInfo}>
          <View style={styles.routeDetail}>
            <Clock size={16} color="#888" />
            <Text style={styles.routeDetailText}>15-20 min estimated</Text>
          </View>
          <View style={styles.routeDetail}>
            <MapPin size={16} color="#888" />
            <Text style={styles.routeDetailText}>7.2 miles total</Text>
          </View>
        </View>

        <TouchableOpacity style={styles.startNavigationButton}>
          <Navigation size={20} color="#FFFFFF" />
          <Text style={styles.startNavigationText}>Start Navigation</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.emergencyContacts}>
        <Text style={styles.contactsTitle}>Emergency Contacts</Text>
        
        <TouchableOpacity style={styles.contactItem}>
          <Phone size={20} color="#EF4444" />
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>Emergency Services</Text>
            <Text style={styles.contactNumber}>911</Text>
          </View>
        </TouchableOpacity>

        <TouchableOpacity style={styles.contactItem}>
          <Phone size={20} color="#3B82F6" />
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>LA County Emergency</Text>
            <Text style={styles.contactNumber}>(211) 211-2111</Text>
          </View>
        </TouchableOpacity>

        <TouchableOpacity style={styles.contactItem}>
          <Phone size={20} color="#10B981" />
          <View style={styles.contactInfo}>
            <Text style={styles.contactName}>Red Cross Shelter Info</Text>
            <Text style={styles.contactNumber}>(800) 733-2767</Text>
          </View>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Evacuation Center</Text>
        {userZone && (
          <View style={[styles.alertBadge, { backgroundColor: getLevelColor(userZone.level) }]}>
            <AlertTriangle size={16} color="#FFFFFF" />
            <Text style={styles.alertText}>{userZone.level.toUpperCase()}</Text>
          </View>
        )}
      </View>

      <View style={styles.tabSelector}>
        {([
          { key: 'shelters', label: 'Shelters' },
          { key: 'zones', label: 'Zones' },
          { key: 'routes', label: 'Routes' },
        ] as const).map((tab) => (
          <TouchableOpacity
            key={tab.key}
            style={[
              styles.tabButton,
              selectedTab === tab.key && styles.tabButtonActive,
            ]}
            onPress={() => setSelectedTab(tab.key)}
          >
            <Text
              style={[
                styles.tabText,
                selectedTab === tab.key && styles.tabTextActive,
              ]}
            >
              {tab.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {selectedTab === 'shelters' && renderShelters()}
      {selectedTab === 'zones' && renderZones()}
      {selectedTab === 'routes' && renderRoutes()}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: Platform.OS === 'ios' ? 8 : 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  alertBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    gap: 4,
  },
  alertText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  tabSelector: {
    flexDirection: 'row',
    backgroundColor: '#1A1A1A',
    margin: 20,
    marginTop: 0,
    borderRadius: 12,
    padding: 4,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  tabButtonActive: {
    backgroundColor: '#FF6B35',
  },
  tabText: {
    color: '#888',
    fontSize: 14,
    fontWeight: '500',
  },
  tabTextActive: {
    color: '#FFFFFF',
  },
  tabContent: {
    flex: 1,
    paddingHorizontal: 20,
  },
  shelterCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#333',
  },
  shelterHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  shelterInfo: {
    flex: 1,
  },
  shelterName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  shelterAddress: {
    fontSize: 14,
    color: '#888',
    marginBottom: 4,
  },
  shelterDistance: {
    fontSize: 14,
    color: '#666',
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  statusText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  capacityInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 8,
  },
  capacityText: {
    color: '#888',
    fontSize: 14,
  },
  capacityBar: {
    flex: 1,
    height: 4,
    backgroundColor: '#333',
    borderRadius: 2,
    marginLeft: 8,
  },
  capacityFill: {
    height: '100%',
    borderRadius: 2,
  },
  amenitiesContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginBottom: 16,
  },
  amenityTag: {
    backgroundColor: '#2A2A2A',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  amenityText: {
    color: '#FFFFFF',
    fontSize: 12,
  },
  shelterActions: {
    flexDirection: 'row',
    gap: 12,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FF6B35',
    borderRadius: 12,
    padding: 12,
    gap: 8,
  },
  actionButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#2A2A2A',
    borderRadius: 12,
    padding: 12,
    gap: 8,
    minWidth: 80,
  },
  secondaryButtonText: {
    color: '#FF6B35',
    fontSize: 14,
    fontWeight: '600',
  },
  userZoneCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    borderWidth: 2,
  },
  userZoneTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginLeft: 8,
  },
  zoneCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#333',
  },
  zoneHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  zoneInfo: {
    flex: 1,
  },
  zoneName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  zoneLevel: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  levelIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  zoneDescription: {
    fontSize: 14,
    color: '#888',
    marginBottom: 16,
    lineHeight: 20,
  },
  zoneStats: {
    flexDirection: 'row',
    marginBottom: 16,
    gap: 16,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  statText: {
    color: '#888',
    fontSize: 12,
  },
  affectedAreas: {
    marginTop: 8,
  },
  areasTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  areaText: {
    fontSize: 14,
    color: '#888',
    marginBottom: 4,
  },
  routeCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333',
  },
  routeHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
    gap: 12,
  },
  routeTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  routeStep: {
    flexDirection: 'row',
    marginBottom: 16,
    gap: 16,
  },
  stepNumber: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#333',
    alignItems: 'center',
    justifyContent: 'center',
  },
  stepText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 14,
  },
  stepContent: {
    flex: 1,
  },
  stepTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  stepDescription: {
    fontSize: 14,
    color: '#888',
    lineHeight: 20,
  },
  routeInfo: {
    flexDirection: 'row',
    marginTop: 16,
    marginBottom: 20,
    gap: 20,
  },
  routeDetail: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  routeDetailText: {
    color: '#888',
    fontSize: 14,
  },
  startNavigationButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#22C55E',
    borderRadius: 12,
    padding: 16,
    gap: 8,
  },
  startNavigationText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  emergencyContacts: {
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333',
  },
  contactsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  contactItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    gap: 12,
  },
  contactInfo: {
    flex: 1,
  },
  contactName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  contactNumber: {
    fontSize: 14,
    color: '#888',
  },
});


================================================
FILE: app/(tabs)/index.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  ScrollView,
  Platform,
} from 'react-native';
import * as Location from 'expo-location';
import { TriangleAlert as AlertTriangle, Flame, Shield, Navigation, RefreshCw, Eye, EyeOff } from 'lucide-react-native';

interface WildfireData {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  containment: number;
  acres: number;
  severity: 'low' | 'moderate' | 'high' | 'extreme';
  coordinates: Array<{ latitude: number; longitude: number }>;
}

export default function MapScreen() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [wildfires, setWildfires] = useState<WildfireData[]>([]);
  const [selectedFire, setSelectedFire] = useState<WildfireData | null>(null);
  const [mapLayers, setMapLayers] = useState({
    fires: true,
    evacuation: true,
    hazards: true,
  });
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        return;
      }

      let currentLocation = await Location.getCurrentPositionAsync({});
      setLocation(currentLocation);
    })();

    loadWildfireData();
  }, []);

  const loadWildfireData = async () => {
    setIsLoading(true);
    // Simulate API call to NASA FIRMS or other wildfire data sources
    setTimeout(() => {
      const mockData: WildfireData[] = [
        {
          id: '1',
          name: 'Palisades Fire',
          latitude: 34.0522,
          longitude: -118.2437,
          containment: 23,
          acres: 15420,
          severity: 'extreme',
          coordinates: [
            { latitude: 34.0522, longitude: -118.2537 },
            { latitude: 34.0622, longitude: -118.2337 },
            { latitude: 34.0422, longitude: -118.2337 },
            { latitude: 34.0422, longitude: -118.2537 },
          ],
        },
        {
          id: '2',
          name: 'Angeles Fire',
          latitude: 34.1022,
          longitude: -118.1937,
          containment: 67,
          acres: 8930,
          severity: 'moderate',
          coordinates: [
            { latitude: 34.1022, longitude: -118.2037 },
            { latitude: 34.1122, longitude: -118.1837 },
            { latitude: 34.0922, longitude: -118.1837 },
            { latitude: 34.0922, longitude: -118.2037 },
          ],
        },
      ];
      setWildfires(mockData);
      setIsLoading(false);
    }, 1000);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'extreme': return '#DC2626';
      case 'high': return '#EA580C';
      case 'moderate': return '#D97706';
      case 'low': return '#65A30D';
      default: return '#6B7280';
    }
  };

  const toggleLayer = (layer: keyof typeof mapLayers) => {
    setMapLayers(prev => ({ ...prev, [layer]: !prev[layer] }));
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Live Wildfire Map</Text>
        <TouchableOpacity
          style={styles.refreshButton}
          onPress={loadWildfireData}
          disabled={isLoading}
        >
          <RefreshCw size={20} color="#FF6B35" />
        </TouchableOpacity>
      </View>

      <View style={styles.layerControls}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <TouchableOpacity
            style={[styles.layerButton, mapLayers.fires && styles.layerButtonActive]}
            onPress={() => toggleLayer('fires')}
          >
            {mapLayers.fires ? <Eye size={16} color="#FFFFFF" /> : <EyeOff size={16} color="#666" />}
            <Text style={[styles.layerText, mapLayers.fires && styles.layerTextActive]}>
              Fires
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.layerButton, mapLayers.evacuation && styles.layerButtonActive]}
            onPress={() => toggleLayer('evacuation')}
          >
            {mapLayers.evacuation ? <Eye size={16} color="#FFFFFF" /> : <EyeOff size={16} color="#666" />}
            <Text style={[styles.layerText, mapLayers.evacuation && styles.layerTextActive]}>
              Evacuation
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[styles.layerButton, mapLayers.hazards && styles.layerButtonActive]}
            onPress={() => toggleLayer('hazards')}
          >
            {mapLayers.hazards ? <Eye size={16} color="#FFFFFF" /> : <EyeOff size={16} color="#666" />}
            <Text style={[styles.layerText, mapLayers.hazards && styles.layerTextActive]}>
              Hazards
            </Text>
          </TouchableOpacity>
        </ScrollView>
      </View>

      <View style={styles.mapContainer}>
        <View style={styles.mapPlaceholder}>
          <Text style={styles.mapPlaceholderText}>Interactive Map Loading...</Text>
          <Text style={styles.mapPlaceholderSubtext}>
            Wildfire data will be displayed here with real-time updates
          </Text>
          
          {location && (
            <View style={styles.locationInfo}>
              <Text style={styles.locationText}>
                Your Location: {location.coords.latitude.toFixed(4)}, {location.coords.longitude.toFixed(4)}
              </Text>
            </View>
          )}

          <ScrollView style={styles.firesList} showsVerticalScrollIndicator={false}>
            {wildfires.map((fire) => (
              <TouchableOpacity
                key={fire.id}
                style={[styles.fireItem, selectedFire?.id === fire.id && styles.fireItemSelected]}
                onPress={() => setSelectedFire(fire)}
              >
                <View style={styles.fireHeader}>
                  <View style={[styles.fireMarker, { backgroundColor: getSeverityColor(fire.severity) }]}>
                    <Flame size={16} color="#FFFFFF" />
                  </View>
                  <View style={styles.fireInfo}>
                    <Text style={styles.fireName}>{fire.name}</Text>
                    <Text style={styles.fireStats}>
                      {fire.acres.toLocaleString()} acres â€¢ {fire.containment}% contained
                    </Text>
                  </View>
                  <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(fire.severity) }]}>
                    <Text style={styles.severityText}>{fire.severity.toUpperCase()}</Text>
                  </View>
                </View>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {selectedFire && (
          <View style={styles.fireDetails}>
            <View style={styles.fireDetailsHeader}>
              <View style={styles.fireDetailsInfo}>
                <Text style={styles.fireDetailsName}>{selectedFire.name}</Text>
                <Text style={styles.fireDetailsStats}>
                  {selectedFire.acres.toLocaleString()} acres â€¢ {selectedFire.containment}% contained
                </Text>
              </View>
              <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(selectedFire.severity) }]}>
                <Text style={styles.severityText}>{selectedFire.severity.toUpperCase()}</Text>
              </View>
            </View>
            
            <View style={styles.fireActions}>
              <TouchableOpacity style={styles.actionButton}>
                <Shield size={16} color="#22C55E" />
                <Text style={styles.actionText}>Evacuation Info</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.actionButton}>
                <Navigation size={16} color="#3B82F6" />
                <Text style={styles.actionText}>Get Directions</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      </View>

      <View style={styles.alertBanner}>
        <AlertTriangle size={20} color="#FFD23F" />
        <Text style={styles.alertText}>
          {wildfires.length} active fires in your area. Stay alert and follow evacuation orders.
        </Text>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    paddingTop: Platform.OS === 'ios' ? 8 : 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  refreshButton: {
    padding: 8,
  },
  layerControls: {
    paddingHorizontal: 16,
    paddingBottom: 8,
  },
  layerButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#333',
  },
  layerButtonActive: {
    backgroundColor: '#FF6B35',
    borderColor: '#FF6B35',
  },
  layerText: {
    color: '#666',
    fontSize: 12,
    fontWeight: '500',
    marginLeft: 4,
  },
  layerTextActive: {
    color: '#FFFFFF',
  },
  mapContainer: {
    flex: 1,
    position: 'relative',
  },
  mapPlaceholder: {
    flex: 1,
    backgroundColor: '#1A1A1A',
    margin: 16,
    borderRadius: 12,
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  mapPlaceholderText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  mapPlaceholderSubtext: {
    color: '#888',
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 20,
  },
  locationInfo: {
    backgroundColor: '#2A2A2A',
    padding: 12,
    borderRadius: 8,
    marginBottom: 20,
  },
  locationText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontFamily: 'monospace',
  },
  firesList: {
    width: '100%',
    maxHeight: 200,
  },
  fireItem: {
    backgroundColor: '#2A2A2A',
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#333',
  },
  fireItemSelected: {
    borderColor: '#FF6B35',
    backgroundColor: '#2A1A1A',
  },
  fireHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  fireMarker: {
    width: 32,
    height: 32,
    borderRadius: 16,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  fireInfo: {
    flex: 1,
  },
  fireName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  fireStats: {
    fontSize: 12,
    color: '#888',
  },
  severityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  severityText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: 'bold',
  },
  fireDetails: {
    position: 'absolute',
    bottom: 16,
    left: 16,
    right: 16,
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#333',
  },
  fireDetailsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  fireDetailsInfo: {
    flex: 1,
  },
  fireDetailsName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  fireDetailsStats: {
    fontSize: 14,
    color: '#888',
  },
  fireActions: {
    flexDirection: 'row',
    gap: 12,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#2A2A2A',
    borderRadius: 8,
    padding: 12,
    gap: 8,
  },
  actionText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
  alertBanner: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    padding: 16,
    gap: 12,
    borderTopWidth: 1,
    borderTopColor: '#333',
  },
  alertText: {
    flex: 1,
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
});


================================================
FILE: app/(tabs)/profile.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  ScrollView,
  Switch,
  Platform,
  Alert,
} from 'react-native';
import { router } from 'expo-router';
import { User, Bell, MapPin, Shield, Settings, LogOut, ChevronRight, Moon, Smartphone, TriangleAlert as AlertTriangle, Heart } from 'lucide-react-native';

interface NotificationSettings {
  emergencyAlerts: boolean;
  evacuationUpdates: boolean;
  airQualityWarnings: boolean;
  communityUpdates: boolean;
  pushNotifications: boolean;
}

export default function ProfileScreen() {
  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({
    emergencyAlerts: true,
    evacuationUpdates: true,
    airQualityWarnings: true,
    communityUpdates: false,
    pushNotifications: true,
  });

  const [locationSettings, setLocationSettings] = useState({
    preciseLocation: true,
    backgroundLocation: true,
  });

  const user = {
    name: 'John Doe',
    email: 'john.doe@email.com',
    role: 'Citizen',
    joinDate: 'January 2024',
    location: 'Los Angeles, CA',
  };

  const toggleNotification = (key: keyof NotificationSettings) => {
    setNotificationSettings(prev => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  const toggleLocation = (key: keyof typeof locationSettings) => {
    setLocationSettings(prev => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  const handleLogout = () => {
    Alert.alert(
      'Sign Out',
      'Are you sure you want to sign out?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Sign Out', 
          style: 'destructive',
          onPress: () => router.replace('/(auth)/login')
        },
      ]
    );
  };

  const handleEmergencyContact = () => {
    Alert.alert(
      'Emergency Contact',
      'This will call 911. Continue?',
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Call 911', style: 'destructive', onPress: () => console.log('Calling 911...') },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <Text style={styles.title}>Profile</Text>
          <TouchableOpacity style={styles.settingsButton}>
            <Settings size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        <View style={styles.profileCard}>
          <View style={styles.avatarContainer}>
            <View style={styles.avatar}>
              <User size={32} color="#FFFFFF" />
            </View>
            <View style={styles.profileInfo}>
              <Text style={styles.userName}>{user.name}</Text>
              <Text style={styles.userEmail}>{user.email}</Text>
              <Text style={styles.userRole}>{user.role} â€¢ Member since {user.joinDate}</Text>
            </View>
          </View>
          
          <View style={styles.locationInfo}>
            <MapPin size={16} color="#888" />
            <Text style={styles.locationText}>{user.location}</Text>
          </View>
        </View>

        <View style={styles.emergencySection}>
          <TouchableOpacity 
            style={styles.emergencyButton}
            onPress={handleEmergencyContact}
          >
            <AlertTriangle size={24} color="#FFFFFF" />
            <Text style={styles.emergencyText}>Emergency Contact</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Notifications</Text>
          
          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <Bell size={20} color="#FF6B35" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Emergency Alerts</Text>
                <Text style={styles.settingDescription}>
                  Critical fire and evacuation alerts
                </Text>
              </View>
            </View>
            <Switch
              value={notificationSettings.emergencyAlerts}
              onValueChange={() => toggleNotification('emergencyAlerts')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <Shield size={20} color="#22C55E" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Evacuation Updates</Text>
                <Text style={styles.settingDescription}>
                  Zone changes and route updates
                </Text>
              </View>
            </View>
            <Switch
              value={notificationSettings.evacuationUpdates}
              onValueChange={() => toggleNotification('evacuationUpdates')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <Moon size={20} color="#8B5CF6" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Air Quality Warnings</Text>
                <Text style={styles.settingDescription}>
                  Unhealthy air quality notifications
                </Text>
              </View>
            </View>
            <Switch
              value={notificationSettings.airQualityWarnings}
              onValueChange={() => toggleNotification('airQualityWarnings')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <User size={20} color="#3B82F6" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Community Updates</Text>
                <Text style={styles.settingDescription}>
                  Nearby community posts and reports
                </Text>
              </View>
            </View>
            <Switch
              value={notificationSettings.communityUpdates}
              onValueChange={() => toggleNotification('communityUpdates')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <Smartphone size={20} color="#10B981" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Push Notifications</Text>
                <Text style={styles.settingDescription}>
                  Allow notifications on this device
                </Text>
              </View>
            </View>
            <Switch
              value={notificationSettings.pushNotifications}
              onValueChange={() => toggleNotification('pushNotifications')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Location & Privacy</Text>
          
          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <MapPin size={20} color="#F97316" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Precise Location</Text>
                <Text style={styles.settingDescription}>
                  Accurate location for emergency services
                </Text>
              </View>
            </View>
            <Switch
              value={locationSettings.preciseLocation}
              onValueChange={() => toggleLocation('preciseLocation')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>

          <View style={styles.settingItem}>
            <View style={styles.settingInfo}>
              <Shield size={20} color="#EAB308" />
              <View style={styles.settingText}>
                <Text style={styles.settingName}>Background Location</Text>
                <Text style={styles.settingDescription}>
                  Location updates when app is closed
                </Text>
              </View>
            </View>
            <Switch
              value={locationSettings.backgroundLocation}
              onValueChange={() => toggleLocation('backgroundLocation')}
              trackColor={{ false: '#333', true: '#FF6B35' }}
              thumbColor="#FFFFFF"
            />
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Support</Text>
          
          <TouchableOpacity style={styles.menuItem}>
            <Heart size={20} color="#EF4444" />
            <Text style={styles.menuText}>Emergency Contacts</Text>
            <ChevronRight size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.menuItem}>
            <Shield size={20} color="#3B82F6" />
            <Text style={styles.menuText}>Privacy Policy</Text>
            <ChevronRight size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity style={styles.menuItem}>
            <Settings size={20} color="#10B981" />
            <Text style={styles.menuText}>Help & Support</Text>
            <ChevronRight size={20} color="#666" />
          </TouchableOpacity>
        </View>

        <View style={styles.section}>
          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
            <LogOut size={20} color="#EF4444" />
            <Text style={styles.logoutText}>Sign Out</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.footer}>
          <Text style={styles.footerText}>WildSafe Emergency Response v1.0.0</Text>
          <Text style={styles.footerText}>Built for community safety</Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: Platform.OS === 'ios' ? 8 : 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  settingsButton: {
    padding: 4,
  },
  profileCard: {
    backgroundColor: '#1A1A1A',
    margin: 20,
    marginTop: 0,
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: '#333',
  },
  avatarContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  avatar: {
    width: 64,
    height: 64,
    borderRadius: 32,
    backgroundColor: '#FF6B35',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 16,
  },
  profileInfo: {
    flex: 1,
  },
  userName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  userEmail: {
    fontSize: 14,
    color: '#888',
    marginBottom: 4,
  },
  userRole: {
    fontSize: 12,
    color: '#666',
  },
  locationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  locationText: {
    fontSize: 14,
    color: '#888',
  },
  emergencySection: {
    margin: 20,
    marginTop: 0,
  },
  emergencyButton: {
    backgroundColor: '#DC2626',
    borderRadius: 12,
    padding: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 12,
  },
  emergencyText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  section: {
    margin: 20,
    marginTop: 0,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 16,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#333',
  },
  settingInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
    gap: 12,
  },
  settingText: {
    flex: 1,
  },
  settingName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  settingDescription: {
    fontSize: 12,
    color: '#888',
    lineHeight: 16,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 16,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#333',
    gap: 12,
  },
  menuText: {
    flex: 1,
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#333',
    gap: 12,
  },
  logoutText: {
    fontSize: 16,
    color: '#EF4444',
    fontWeight: '600',
  },
  footer: {
    alignItems: 'center',
    padding: 20,
    paddingBottom: 40,
  },
  footerText: {
    fontSize: 12,
    color: '#666',
    marginBottom: 4,
  },
});


================================================
FILE: app/(tabs)/updates.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  ScrollView,
  TextInput,
  Platform,
  Alert,
} from 'react-native';
import { MessageSquare, Plus, MapPin, Clock, TriangleAlert as AlertTriangle, CircleCheck as CheckCircle, User, Send } from 'lucide-react-native';

interface Update {
  id: string;
  author: string;
  role: 'citizen' | 'official' | 'responder';
  content: string;
  location: string;
  latitude: number;
  longitude: number;
  timestamp: string;
  verified: boolean;
  category: 'road_closure' | 'fire_sighting' | 'evacuation' | 'safety' | 'resources';
  likes: number;
  reports: number;
}

export default function UpdatesScreen() {
  const [updates, setUpdates] = useState<Update[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [isComposing, setIsComposing] = useState(false);
  const [newUpdate, setNewUpdate] = useState({
    content: '',
    category: 'safety' as Update['category'],
    location: '',
  });

  useEffect(() => {
    loadUpdates();
  }, []);

  const loadUpdates = async () => {
    // Simulate API call to get community updates
    const mockUpdates: Update[] = [
      {
        id: '1',
        author: 'LA Fire Department',
        role: 'official',
        content: 'Palisades Fire containment increased to 23%. Evacuation orders remain in effect for zones A-C. Residents in zone D should prepare for possible evacuation.',
        location: 'Pacific Palisades',
        latitude: 34.0522,
        longitude: -118.2437,
        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
        verified: true,
        category: 'evacuation',
        likes: 156,
        reports: 0,
      },
      {
        id: '2',
        author: 'Sarah Martinez',
        role: 'citizen',
        content: 'PCH is completely blocked between Topanga and Malibu Canyon. Emergency vehicles only. Heavy smoke, zero visibility.',
        location: 'Pacific Coast Highway',
        latitude: 34.0359,
        longitude: -118.6847,
        timestamp: new Date(Date.now() - 45 * 60 * 1000).toISOString(),
        verified: true,
        category: 'road_closure',
        likes: 89,
        reports: 2,
      },
      {
        id: '3',
        author: 'Emergency Responder',
        role: 'responder',
        content: 'New spot fire reported near Will Rogers State Park. Crews are responding. Hikers should evacuate the area immediately.',
        location: 'Will Rogers State Park',
        latitude: 34.0522,
        longitude: -118.5014,
        timestamp: new Date(Date.now() - 20 * 60 * 1000).toISOString(),
        verified: true,
        category: 'fire_sighting',
        likes: 203,
        reports: 0,
      },
      {
        id: '4',
        author: 'Mike Chen',
        role: 'citizen',
        content: 'Santa Monica Civic Center shelter has space available. They have pet accommodations and medical support on site.',
        location: 'Santa Monica',
        latitude: 34.0195,
        longitude: -118.4912,
        timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
        verified: false,
        category: 'resources',
        likes: 67,
        reports: 0,
      },
    ];
    setUpdates(mockUpdates);
  };

  const categories = [
    { key: 'all', label: 'All Updates', icon: MessageSquare },
    { key: 'evacuation', label: 'Evacuation', icon: AlertTriangle },
    { key: 'road_closure', label: 'Road Closures', icon: MapPin },
    { key: 'fire_sighting', label: 'Fire Sightings', icon: AlertTriangle },
    { key: 'safety', label: 'Safety', icon: CheckCircle },
    { key: 'resources', label: 'Resources', icon: CheckCircle },
  ];

  const getRoleColor = (role: Update['role']) => {
    switch (role) {
      case 'official': return '#3B82F6';
      case 'responder': return '#10B981';
      case 'citizen': return '#8B5CF6';
      default: return '#6B7280';
    }
  };

  const getCategoryColor = (category: Update['category']) => {
    switch (category) {
      case 'evacuation': return '#DC2626';
      case 'road_closure': return '#EA580C';
      case 'fire_sighting': return '#EF4444';
      case 'safety': return '#22C55E';
      case 'resources': return '#3B82F6';
      default: return '#6B7280';
    }
  };

  const handleSubmitUpdate = () => {
    if (!newUpdate.content.trim()) {
      Alert.alert('Error', 'Please enter update content');
      return;
    }

    const update: Update = {
      id: Date.now().toString(),
      author: 'You',
      role: 'citizen',
      content: newUpdate.content,
      location: newUpdate.location || 'Your Location',
      latitude: 34.0522,
      longitude: -118.2437,
      timestamp: new Date().toISOString(),
      verified: false,
      category: newUpdate.category,
      likes: 0,
      reports: 0,
    };

    setUpdates(prev => [update, ...prev]);
    setNewUpdate({ content: '', category: 'safety', location: '' });
    setIsComposing(false);
    
    Alert.alert('Success', 'Your update has been posted and is pending verification.');
  };

  const filteredUpdates = selectedCategory === 'all' 
    ? updates 
    : updates.filter(update => update.category === selectedCategory);

  const timeAgo = (timestamp: string) => {
    const now = new Date().getTime();
    const updateTime = new Date(timestamp).getTime();
    const diffMinutes = Math.floor((now - updateTime) / (1000 * 60));
    
    if (diffMinutes < 1) return 'Just now';
    if (diffMinutes < 60) return `${diffMinutes}m ago`;
    const diffHours = Math.floor(diffMinutes / 60);
    if (diffHours < 24) return `${diffHours}h ago`;
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays}d ago`;
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Community Updates</Text>
        <TouchableOpacity
          style={styles.composeButton}
          onPress={() => setIsComposing(true)}
        >
          <Plus size={20} color="#FFFFFF" />
        </TouchableOpacity>
      </View>

      <ScrollView 
        horizontal 
        style={styles.categorySelector}
        showsHorizontalScrollIndicator={false}
      >
        {categories.map((category) => {
          const IconComponent = category.icon;
          return (
            <TouchableOpacity
              key={category.key}
              style={[
                styles.categoryButton,
                selectedCategory === category.key && styles.categoryButtonActive,
              ]}
              onPress={() => setSelectedCategory(category.key)}
            >
              <IconComponent 
                size={16} 
                color={selectedCategory === category.key ? '#FFFFFF' : '#666'} 
              />
              <Text
                style={[
                  styles.categoryText,
                  selectedCategory === category.key && styles.categoryTextActive,
                ]}
              >
                {category.label}
              </Text>
            </TouchableOpacity>
          );
        })}
      </ScrollView>

      {isComposing && (
        <View style={styles.composeCard}>
          <Text style={styles.composeTitle}>Post Update</Text>
          
          <View style={styles.categoryPicker}>
            <Text style={styles.fieldLabel}>Category</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              {categories.slice(1).map((category) => (
                <TouchableOpacity
                  key={category.key}
                  style={[
                    styles.categoryChip,
                    newUpdate.category === category.key && styles.categoryChipActive,
                  ]}
                  onPress={() => setNewUpdate(prev => ({ ...prev, category: category.key as Update['category'] }))}
                >
                  <Text
                    style={[
                      styles.categoryChipText,
                      newUpdate.category === category.key && styles.categoryChipTextActive,
                    ]}
                  >
                    {category.label}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.fieldLabel}>Location (Optional)</Text>
            <TextInput
              style={styles.locationInput}
              value={newUpdate.location}
              onChangeText={(text) => setNewUpdate(prev => ({ ...prev, location: text }))}
              placeholder="Enter location..."
              placeholderTextColor="#666"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.fieldLabel}>Update Content</Text>
            <TextInput
              style={styles.contentInput}
              value={newUpdate.content}
              onChangeText={(text) => setNewUpdate(prev => ({ ...prev, content: text }))}
              placeholder="What's happening in your area? Be specific and factual..."
              placeholderTextColor="#666"
              multiline
              numberOfLines={4}
            />
          </View>

          <View style={styles.composeActions}>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={() => setIsComposing(false)}
            >
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.submitButton}
              onPress={handleSubmitUpdate}
            >
              <Send size={16} color="#FFFFFF" />
              <Text style={styles.submitButtonText}>Post Update</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      <ScrollView style={styles.updatesList} showsVerticalScrollIndicator={false}>
        {filteredUpdates.map((update) => (
          <View key={update.id} style={styles.updateCard}>
            <View style={styles.updateHeader}>
              <View style={styles.authorInfo}>
                <View style={[styles.roleIndicator, { backgroundColor: getRoleColor(update.role) }]}>
                  <User size={16} color="#FFFFFF" />
                </View>
                <View style={styles.authorDetails}>
                  <View style={styles.authorNameRow}>
                    <Text style={styles.authorName}>{update.author}</Text>
                    {update.verified && (
                      <CheckCircle size={16} color="#22C55E" />
                    )}
                  </View>
                  <Text style={styles.authorRole}>{update.role.charAt(0).toUpperCase() + update.role.slice(1)}</Text>
                </View>
              </View>
              <Text style={styles.timestamp}>{timeAgo(update.timestamp)}</Text>
            </View>

            <View style={styles.updateContent}>
              <View style={styles.categoryBadge}>
                <View style={[styles.categoryDot, { backgroundColor: getCategoryColor(update.category) }]} />
                <Text style={styles.categoryLabel}>
                  {update.category.replace('_', ' ').toUpperCase()}
                </Text>
              </View>
              
              <Text style={styles.updateText}>{update.content}</Text>

              {update.location && (
                <View style={styles.locationInfo}>
                  <MapPin size={14} color="#888" />
                  <Text style={styles.locationText}>{update.location}</Text>
                </View>
              )}
            </View>

            <View style={styles.updateActions}>
              <TouchableOpacity style={styles.actionItem}>
                <Text style={styles.actionCount}>{update.likes}</Text>
                <Text style={styles.actionLabel}>Helpful</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.actionItem}>
                <MapPin size={16} color="#666" />
                <Text style={styles.actionLabel}>View on Map</Text>
              </TouchableOpacity>

              {update.reports > 0 && (
                <TouchableOpacity style={styles.actionItem}>
                  <AlertTriangle size={16} color="#EAB308" />
                  <Text style={styles.actionLabel}>{update.reports} reports</Text>
                </TouchableOpacity>
              )}
            </View>
          </View>
        ))}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F0F0F',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: Platform.OS === 'ios' ? 8 : 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  composeButton: {
    backgroundColor: '#FF6B35',
    borderRadius: 20,
    width: 40,
    height: 40,
    alignItems: 'center',
    justifyContent: 'center',
  },
  categorySelector: {
    paddingHorizontal: 20,
    paddingBottom: 16,
    maxHeight: 60,
  },
  categoryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#333',
    gap: 6,
  },
  categoryButtonActive: {
    backgroundColor: '#FF6B35',
    borderColor: '#FF6B35',
  },
  categoryText: {
    color: '#666',
    fontSize: 12,
    fontWeight: '500',
  },
  categoryTextActive: {
    color: '#FFFFFF',
  },
  composeCard: {
    backgroundColor: '#1A1A1A',
    margin: 20,
    marginTop: 0,
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: '#333',
  },
  composeTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  categoryPicker: {
    marginBottom: 16,
  },
  fieldLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  categoryChip: {
    backgroundColor: '#2A2A2A',
    borderRadius: 16,
    paddingVertical: 6,
    paddingHorizontal: 12,
    marginRight: 8,
  },
  categoryChipActive: {
    backgroundColor: '#FF6B35',
  },
  categoryChipText: {
    color: '#888',
    fontSize: 12,
    fontWeight: '500',
  },
  categoryChipTextActive: {
    color: '#FFFFFF',
  },
  inputGroup: {
    marginBottom: 16,
  },
  locationInput: {
    backgroundColor: '#2A2A2A',
    borderColor: '#333',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    color: '#FFFFFF',
  },
  contentInput: {
    backgroundColor: '#2A2A2A',
    borderColor: '#333',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    color: '#FFFFFF',
    minHeight: 80,
    textAlignVertical: 'top',
  },
  composeActions: {
    flexDirection: 'row',
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#2A2A2A',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#888',
    fontSize: 14,
    fontWeight: '600',
  },
  submitButton: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: '#FF6B35',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
  },
  updatesList: {
    flex: 1,
    paddingHorizontal: 20,
  },
  updateCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#333',
  },
  updateHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  authorInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    flex: 1,
  },
  roleIndicator: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  authorDetails: {
    flex: 1,
  },
  authorNameRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  authorName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  authorRole: {
    fontSize: 12,
    color: '#888',
    textTransform: 'capitalize',
  },
  timestamp: {
    fontSize: 12,
    color: '#666',
  },
  updateContent: {
    marginBottom: 12,
  },
  categoryBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
    gap: 6,
  },
  categoryDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  categoryLabel: {
    fontSize: 12,
    color: '#888',
    fontWeight: '500',
  },
  updateText: {
    fontSize: 14,
    color: '#FFFFFF',
    lineHeight: 20,
    marginBottom: 8,
  },
  locationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  locationText: {
    fontSize: 12,
    color: '#888',
  },
  updateActions: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#333',
  },
  actionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  actionCount: {
    fontSize: 12,
    color: '#888',
    fontWeight: '600',
  },
  actionLabel: {
    fontSize: 12,
    color: '#666',
  },
});


================================================
FILE: hooks/useFrameworkReady.ts
================================================
import { useEffect } from 'react';

declare global {
  interface Window {
    frameworkReady?: () => void;
  }
}

export function useFrameworkReady() {
  useEffect(() => {
    window.frameworkReady?.();
  });
}



================================================
FILE: types/env.d.ts
================================================
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: string;
    }
  }
}

export {};


================================================
FILE: .bolt/config.json
================================================
{
  "template": "bolt-expo"
}


