Directory structure:
└── samay1011-project_ecommerce_react/
    ├── Backend/
    │   ├── package.json
    │   ├── server.js
    │   ├── public/
    │   │   ├── index.css
    │   │   ├── productDetail.css
    │   │   └── ProductForm.css
    │   └── src/
    │       ├── app.js
    │       ├── db/
    │       │   └── db.js
    │       ├── models/
    │       │   ├── cart.model.js
    │       │   ├── product.model.js
    │       │   └── user.model.js
    │       └── routes/
    │           ├── cart.router.js
    │           ├── index.router.js
    │           ├── login.router.js
    │           ├── product.router.js
    │           └── user.router.js
    └── Frontend/
        ├── README.md
        ├── eslint.config.js
        ├── index.html
        ├── package.json
        ├── vite.config.js
        └── src/
            ├── App.css
            ├── App.jsx
            ├── index.css
            ├── main.jsx
            ├── components/
            │   ├── Footer.css
            │   ├── Footer.jsx
            │   ├── Navbar.css
            │   └── Navbar.jsx
            └── Pages/
                ├── AddProducts.css
                ├── AddProducts.jsx
                ├── Cart.css
                ├── Cart.jsx
                ├── CartContext.jsx
                ├── Home.css
                ├── Home.jsx
                ├── ImageUploader.jsx
                ├── Login.css
                ├── Login.jsx
                ├── ProductDetail.css
                ├── ProductDetail.jsx
                ├── UserHome.css
                ├── UserHome.jsx
                ├── UserProduct.css
                └── UserProduct.jsx

================================================
FILE: Backend/package.json
================================================
{
  "name": "e-commerce",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcrypt": "^6.0.0",
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "ejs": "^3.1.10",
    "express": "^5.1.0",
    "imagekit": "^6.0.0",
    "mongoose": "^8.16.4",
    "morgan": "^1.10.1",
    "multer": "^2.0.2",
    "nodemon": "^3.1.10"
  }
}



================================================
FILE: Backend/server.js
================================================
const app = require("./src/app")
const connect = require("./src/db/db")

const PORT = process.env.PORT || 3000

app.listen(PORT, ()=>{
    console.log("server running on port no : ",PORT);
    connect()
})


================================================
FILE: Backend/public/index.css
================================================
[Empty file]


================================================
FILE: Backend/public/productDetail.css
================================================
[Empty file]


================================================
FILE: Backend/public/ProductForm.css
================================================
[Empty file]


================================================
FILE: Backend/src/app.js
================================================
const express = require("express")
const productRouter = require("./routes/product.router")
const indexRouter = require("./routes/index.router")
const userRouter = require("./routes/user.router")

const cartRouter = require("./routes/cart.router")
const loginRouter = require("./routes/login.router")
require("dotenv").config()
const app = express()
const path = require("path")
const morgon = require("morgan")
const cors = require("cors")

app.use(morgon("dev"))


app.use(cors())

app.use(express.json())
app.use(express.urlencoded({extended : true}))

console.log(process.env.MONGODB_URI);

app.use("/", indexRouter) 
app.use("/users", userRouter)
app.use("/products",productRouter)
app.use("/cart", cartRouter)
app.use("/login",loginRouter)


module.exports = app


================================================
FILE: Backend/src/db/db.js
================================================
const mongoose = require("mongoose")

const connect = ()=>{
    // mongoose.connect("mongodb://localhost:27017/VIPS")
    mongoose.connect(process.env.MONGODB_URI)
    .then(()=>{
        console.log("database connected");
    })
    .catch((err)=>{
        console.log(err);
    })
}

module.exports = connect


================================================
FILE: Backend/src/models/cart.model.js
================================================
const mongoose = require("mongoose");

const cartSchema = new mongoose.Schema({
  productId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: "product", 
  }
});

const cartModel = mongoose.model("Cart", cartSchema);

module.exports = cartModel;


================================================
FILE: Backend/src/models/product.model.js
================================================
const mongoose = require("mongoose")


const productSchema = new mongoose.Schema({
    title : {
        type : String
    },
    description : {
        type : String
    },
    category : {
        type : String
    },
    price : {
        type : String
    },
    image : {
        type : String
    }
})

const productModel = mongoose.model("product",productSchema)

module.exports = productModel


================================================
FILE: Backend/src/models/user.model.js
================================================
const mongoose = require("mongoose")


const userSchema = new mongoose.Schema({
    username : {
        type : String,
        required : true
    },
    email :  {
        type : String,
        required : true,
        unique : true
    },

    password : {
        type : String ,
        required : true
    }
})



const userModel = mongoose.model("User", userSchema)

module.exports = userModel


================================================
FILE: Backend/src/routes/cart.router.js
================================================
const express = require("express");
const cartModel = require("../models/cart.model");
const router = express.Router();



// GET /cart with product details
router.get("/", async (req, res) => {
    try {
        const cartItems = await cartModel.find().populate("productId"); // Populate the product details
        res.status(200).json(cartItems);
  } catch (error) {
      res.status(500).json({ error: "Failed to fetch cart items" });
  }
});

// POST /cart/add
router.post("/add/:productId", async (req, res) => {
  try {
    const { productId } = req.params;

    if (!productId) {
      return res.status(400).json({ error: "productId is required" });
    }

    const cartItem = new cartModel({ productId });
    await cartItem.save();

    res.status(201).json({ message: "Product added to cart", cartItem });
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
});


router.delete("/reduce/:productId", async (req, res) => {
  try {
    const { productId } = req.params;

    const deletedItem = await cartModel.findOneAndDelete({ productId });
    if (!deletedItem) {
      return res.status(404).json({ error: "Product not found in cart" });
    }

    res.status(200).json({ message: "One item removed", deletedItem });
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
});


router.delete("/delete/:productId", async (req, res) => {
  try {
    const { productId } = req.params;

    const result = await cartModel.deleteMany({ productId });
    res.status(200).json({ message: "All items of this product removed", deletedCount: result.deletedCount });
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
});






module.exports = router;


================================================
FILE: Backend/src/routes/index.router.js
================================================
const express = require("express")
const productModel = require("../models/product.model")

const router = express.Router()



router.get("/", async(req, res)=>{
   const products = await productModel.find()

    res.status(200).json({message : "data found" , products})
})



module.exports = router


================================================
FILE: Backend/src/routes/login.router.js
================================================
const express = require("express")
const loginModel = require("../models/login.model")

const router = express.Router()



router.get("/", async(req, res)=>{
   res.render()
})



module.exports = router


================================================
FILE: Backend/src/routes/product.router.js
================================================

const express = require("express");
const productModel = require("../models/product.model");
const ImageKit = require("imagekit");
const multer = require("multer");
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });
const router = express.Router();



router.get("/", (req, res) => {
 
});



router.post("/add", upload.single("image"), async (req, res) => {

  const imagekit = new ImageKit({
    publicKey: process.env.PUBLIC_KEY  ,
    privateKey :process.env.PRIVATE_KEY,
    urlEndpoint: process.env.URLENDPOINT ,
  });


  const result = await imagekit.upload({
    file : req.file.buffer,
    fileName : req.file.originalname,
    isPrivateFile : false,
    isPublished : true
  })

  const imageUrl = result.url

 
  const { title, description, category, price } = req.body;
  

      const product = new productModel(
          {
              title : title,
              description : description,
              category : category,
              price : price,
              image : imageUrl
           }
  )

      await product.save()

  res.json({message : "data aaya"})
});

router.get("/:id",async (req, res)=>{
    const productId = req.params.id

    const product = await productModel.findById(productId)

    console.log(product);


    res.status(200).json({message : "data mil gya " , product})
    
})

router.get("/update/:id", async(req, res)=>{

    const productId = req.params.id

    const product = await productModel.findById(productId)


    res.render("updateForm",{product : product})
})


router.post("/update/:id",upload.single("image") ,async(req, res)=>{

    const productId = req.params.id

    console.log(req.body);
    
  const { title, description, category, price } = req.body;

  
  // const imagekit = new ImageKit({
  //   publicKey: "public_M0PAK4NmC1d2995cVHB6hjiBgaE=",
  //   privateKey : "private_KT7FkfaTOTLNy6lVG+V7iKE2ba4=",
  //   urlEndpoint: "https://ik.imagekit.io/ls436o8px",
  // });


  // const result = await imagekit.upload({
  //   file : req.file.buffer,
  //   fileName : req.file.originalname,
  //   isPrivateFile : false,
  //   isPublished : true
  // })

  // const imageUrl = result.url

    await productModel.findByIdAndUpdate(productId,{
    title : title,
    description : description,
    category : category,
    price : price,
    image : imageUrl
  })

  res.redirect(`/products/${productId}`)
    
})


router.get("/delete/:id" , async (req,res)=>{
    const productId = req.params.id

    await productModel.findByIdAndDelete(productId)

    res.redirect("/")
})



module.exports = router;



================================================
FILE: Backend/src/routes/user.router.js
================================================
const express = require("express")
const bcrypt = require("bcrypt")
const userModel = require("../models/user.model")

const router = express.Router()

router.post("/register",async (req, res)=>{

    const {username , email , password} = req.body

    try {
      
        if(!username){
            return res.status(400).json({message : "username is required"})
        }
        if(!email){
            return res.status(400).json({message : "email is required"})
        }
        if(!password){
            return res.status(400).json({message : "password is required"})
        }
       

        const hashedPass = await bcrypt.hash(password ,10)

        const user = new userModel({
            username : username,
            email : email ,
            password : hashedPass
        })


        await user.save()
        
        res.send("register successfully....")

    } catch (error) {
        console.log(error);
        res.status(500).json({message : "internal server error", error : error.message})
    }

})


router.post("/login", async (req, res)=>{
    const {email , password} = req.body

    try {


        if(!email){
            return res.status(400).json({message : "email is required"})
        }
        if(!password){
            return res.status(400).json({message : "password is required"})
        }

        const user = await userModel.findOne({email : email})

        if(!user){
            return res.status(400).json({message : "user not exists"})
        }

        const isTrue = await bcrypt.compare(password ,user.password )


        if(!isTrue){
            return res.status(400).json({message : "email or password desnot match"})
        }

        res.status(200).json({message : "login successfully..."})

    } catch (error) {
        console.log(error); 
        res.status(500).json({message : "internal server error", error : error.message})
    
    }
})


module.exports = router


================================================
FILE: Frontend/README.md
================================================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.



================================================
FILE: Frontend/eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])



================================================
FILE: Frontend/index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================
FILE: Frontend/package.json
================================================
{
  "name": "ecommerce-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "imagekitio-react": "^4.3.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.7.1",
    "remixicon": "^4.6.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "vite": "^7.0.4"
  }
}



================================================
FILE: Frontend/vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})



================================================
FILE: Frontend/src/App.css
================================================
[Empty file]


================================================
FILE: Frontend/src/App.jsx
================================================
import React from 'react'
import Navbar from './components/Navbar'
import 'remixicon/fonts/remixicon.css'
import AddProducts from "./Pages/AddProducts"
// import { Routes , Route } from 'react-router-dom'
import Home from './Pages/Home'
import ProductDetail from './Pages/ProductDetail'
import UserHome from './Pages/UserHome'
import Cart from './Pages/Cart'
// import Login from './Pages/Login'
import Login from './Pages/Login'
import UserProduct from './Pages/UserProduct'
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { CartProvider } from "./Pages/CartContext";
import Footer from './components/Footer'


const App = () => {
  return (
    <div>
      {/* <CartProvider> */}
      {/* <Router> */}
        <Routes>
          <Route path='/' element={<UserHome/>}/>
          <Route path="/products/detail/:productId" element={<UserProduct/>} />
          <Route path="/cart" element={<Cart />} />
          <Route  path='/admin/' element={<Home/>}/>
          <Route  path='/admin/products/add' element={<AddProducts/>}/>
          <Route  path='/admin/products/detail/:productId'  element={<ProductDetail/>}/>
          <Route  path='/login'  element={<Login/>}/>
          </Routes>
      {/* </Router> */}
    {/* </CartProvider> */}

      {/* <Routes>
        <Route  path='/admin/' element={<Home/>}/>
        <Route  path='/admin/products/add' element={<AddProducts/>}/>
        <Route  path='/admin/products/detail/:productId'  element={<ProductDetail/>}/>
      </Routes>  */}

        <Footer />
    </div>


  )
}

export default App


================================================
FILE: Frontend/src/index.css
================================================
* {
  margin: 0%;
  padding: 0%;
  box-sizing: border-box;
}


html , body {
  height: 100%;
  width: 100%;
}


================================================
FILE: Frontend/src/main.jsx
================================================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import "./index.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(

    <BrowserRouter>
      <App />
    </BrowserRouter>
);


================================================
FILE: Frontend/src/components/Footer.css
================================================
.footer {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 5%;
  background-color: rgb(219, 219, 219);
  text-align: center;
  padding: 10px 0;
  font-size: 0.6rem;
  color: black;
  border-top: 1px solid #ccc;
  z-index: 100;
}



================================================
FILE: Frontend/src/components/Footer.jsx
================================================
import React from 'react';
import './Footer.css';

const Footer = () => {
  return (
    <footer className="footer">
      Â© Copyright - Samay Talwar
    </footer>
  );
};

export default Footer;



================================================
FILE: Frontend/src/components/Navbar.css
================================================
/* nav {
    height: 50px;
    width: 100%;
    background-color: rgb(201, 240, 247);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 5px 10px;
}

nav .search input {

    width: 500px;
    padding: 5px;
    border-radius: 5px;
    border: none;
}

.right{
    position: relative; */
    /* right : 200px;  */
    /* top : 10px */
/* } */


nav {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 60px;
  background-color: rgb(201, 240, 247);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 10px 16px;
  box-sizing: border-box;
  z-index: 9999;
  overflow: hidden;
}

nav .left {
  flex: 0 0 auto;
  white-space: nowrap;
}

nav .left h2 {
  margin: 0;
  font-size: 1.5rem;
}

nav .search {
  flex: 1 1 auto;
  display: flex;
  justify-content: center;
  min-width: 0;
}

nav .search input {
  width: 100%;
  max-width: 500px;
  padding: 8px 12px;
  border-radius: 5px;
  border: 1px solid #ccc;
  font-size: 1rem;
  box-sizing: border-box;
}

/* KEY FIX: Right section does NOT wrap or overflow */
nav .right {
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  gap: 1rem;
  white-space: nowrap;
  min-width: fit-content;
  max-width: 200px;
  overflow: hidden;
  text-overflow: ellipsis;
}



================================================
FILE: Frontend/src/components/Navbar.jsx
================================================
import React from 'react'
import "./Navbar.css"
import { Link } from 'react-router-dom'


const Navbar = () => {
  return (
    <nav>
        <div className="left">
             <Link to="/admin"><h2>Shopy</h2></Link>
        </div>
        <div className='search'>
            <input type="text" />
        </div>
        <div className="right">
          <Link to="/admin/products/add">Add new Product</Link>
        </div>
    </nav>
  )
}

export default Navbar


================================================
FILE: Frontend/src/Pages/AddProducts.css
================================================
html, body{
    margin: 0%;
    padding: 0%;
    box-sizing: border-box;
}

.head{
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(204, 204, 231);
    height: 50px;
    border: 2px solid black;
}

.formContainer {
   display: flex;
    flex-direction: column;
    align-items: center;
}

form{
   padding: 40px;
    border: 2px solid black;
    width: 350px;
    height: 550px;
    border-radius: 15px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: 40px 0px ;
}
.formGroup {
  margin-bottom: 18px;
}

label {
  display: block;
  margin-bottom: 6px;
  font-weight: 500;
  color: #333;
}

input[type="text"],
input[type="number"],
input[type="file"] {
  width: 100%;
  padding: 8px 10px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 1rem;
  margin-bottom: 4px;
}

button[type="submit"] {
  background: #007bff;
  color: #fff;
  border: none;
  padding: 10px 22px;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s;
}

button[type="submit"]:hover {
  background: #0056b3;
}



================================================
FILE: Frontend/src/Pages/AddProducts.jsx
================================================
import React, { useState } from 'react';
import axios from 'axios';
import './AddProducts.css';
import { useNavigate } from 'react-router-dom';
import ImageUploader from './ImageUploader';


const AddProducts = () => {

    const navigate = useNavigate()
    const [title, settitle] = useState('');
    const [image, setimage] = useState('');
    const [description, setdescription] = useState('');
    const [category, setcategory] = useState('');
    const [price, setprice] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        let formData = new FormData(e.target);
        axios.post("https://project-ecommerce-react-backend-rm5q.onrender.com/admin/products/add", formData)
            .then((res) => {
                console.log(res);
                navigate("/")
            })
            .catch((err) => {
                console.log(err);
            });
    };

    return (
        <div>
            <div className="head"><h1>Add New Products</h1></div>
            <div className='formContainer'>
            <form onSubmit={handleSubmit}>
                <div className="formGroup">
                    <label htmlFor="title">Title</label>
                    <input
                        type="text"
                        placeholder="Enter product title"
                        value={title}
                        onChange={(e) => settitle(e.target.value)}
                        name="title"
                        id="title"
                    />
                </div>
                
                {/* <ImageUploader/> */}
                <br />

                <div className="formGroup">
                    <label htmlFor="image">Image</label>
                    <input
                        type="file"
                        name="image"
                        id="image"
                        accept="image/*"
                        onChange={(e) => setimage(e.target.files[0])}
                    />
                </div>

                <div className="formGroup">
                    <label htmlFor="description">Description</label>
                    <input
                        type="text"
                        placeholder="Enter product description"
                        name="description"
                        id="description"
                        value={description}
                        onChange={(e) => setdescription(e.target.value)}
                    />
                </div>

                <div className="formGroup">
                    <label htmlFor="category">Category</label>
                    <input
                        type="text"
                        placeholder="Enter product category"
                        name="category"
                        id="category"
                        value={category}
                        onChange={(e) => setcategory(e.target.value)}
                    />
                </div>

                <div className="formGroup">
                    <label htmlFor="price">Price</label>
                    <input
                        type="number"
                        placeholder="Enter product price"
                        name="price"
                        id="price"
                        value={price}
                        onChange={(e) => setprice(e.target.value)}
                    />
                </div>

                <button type="submit">Submit</button>
            </form>
        </div>
        </div>
        
    );
};

export default AddProducts;


================================================
FILE: Frontend/src/Pages/Cart.css
================================================
.head{
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgb(204, 204, 231);
    height: 50px;
    border: 2px solid black;
}

.no{
    display: flex;
    text-align: center;
    font-size: 40px;
    justify-content: center;
    padding-top: 100px;
}


================================================
FILE: Frontend/src/Pages/Cart.jsx
================================================
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import "./Cart.css"

const Cart = () => {
  const [cart, setCart] = useState([]);

  useEffect(() => {
    fetchCart();
  }, []);

  const fetchCart = () => {
    axios.get('https://project-ecommerce-react-backend-rm5q.onrender.com/cart')
      .then((response) => {
        const grouped = groupByProduct(response.data);
        setCart(grouped);
      })
      .catch((error) => console.error('Error fetching cart:', error));
  };

  const groupByProduct = (items) => {
    const map = new Map();

    for (const item of items) {
      const id = item.productId._id;
      if (map.has(id)) {
        map.get(id).quantity += 1;
      } else {
        map.set(id, { ...item.productId, quantity: 1 });
      }
    }

    return Array.from(map.values());
  };

  const reduceQuantity = (productId) => {
    axios.delete(`https://project-ecommerce-react-backend-rm5q.onrender.com/cart/reduce/${productId}`)
      .then(() => fetchCart())
      .catch((err) => console.error('Error reducing quantity:', err));
  };

  const deleteProduct = (productId) => {
    axios.delete(`https://project-ecommerce-react-backend-rm5q.onrender.com/cart/delete/${productId}`)
      .then(() => fetchCart())
      .catch((err) => console.error('Error deleting product:', err));
  };

  return (
    <div>
      <div className='head'>
        <h2>Your Cart</h2>
      </div>

      {cart.length === 0 ? (
        <div className="no"><p>No items in cart</p></div>
      ) : (
        <div style={styles.cardContainer}>
          {cart.map((item) => (
            <div key={item._id} style={styles.card}>
              <img
                src={item.image}
                alt={item.title}
                style={styles.image}
              />
              <h3>{item.title}</h3>
              <p>â‚¹{item.price}</p>
              <p><strong>Quantity:</strong> {item.quantity}</p>

              <div style={{ marginTop: '10px' }}>
                <button onClick={() => reduceQuantity(item._id)} style={styles.btn}>âˆ’</button>
                <button onClick={() => deleteProduct(item._id)} style={{ ...styles.btn, backgroundColor: '#e74c3c' }}>Delete</button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

const styles = {
  cardContainer: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',
    gap: '20px',
    padding: '20px',
  },
  card: {
    border: '1px solid #ccc',
    borderRadius: '10px',
    padding: '16px',
    textAlign: 'center',
    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
  },
  image: {
    width: '100%',
    height: '150px',
    objectFit: 'cover',
    marginBottom: '10px',
  },
  btn: {
    margin: '5px',
    padding: '6px 12px',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#3498db',
    color: '#fff',
    cursor: 'pointer',
  },
};

export default Cart;



================================================
FILE: Frontend/src/Pages/CartContext.jsx
================================================
import { createContext, useState, useContext } from "react";

// Create context
const CartContext = createContext();

// Provide context
export const CartProvider = ({ children }) => {
  const [cart, setCart] = useState([]);

  const addToCart = (product) => {
    setCart((prevCart) => [...prevCart, product]);
  };

  return (
    <CartContext.Provider value={{ cart, addToCart }}>
      {children}
    </CartContext.Provider>
  );
};

// Custom hook
export const useCart = () => useContext(CartContext);



================================================
FILE: Frontend/src/Pages/Home.css
================================================
/* html, body{
    margin: 0%;
    padding: 0%;
    box-sizing: border-box;
    background-color:rgb(248, 248, 248);;
}

a{
    color: black;
    text-decoration: none;
} */

/* .container {
    margin-top: 50px; */
    /* display: flex;
    align-items: center;
    justify-content: center; */
    /* display: grid;
    grid-template-columns: repeat(4,1fr); */
    /* gap: 20px; */
    /* padding-left: 40px;
    background-color: rgb(247, 247, 247);
} */

/* .container .card {
    border : 2px solid black;
    height: 375px;
    width: 255px;
    border-radius: 20px ;
    padding: 15px;
    background-color: #fff;
} */

/* .card .top {
    width: 100%;
    height: 50%;

}

.card .top img {
    width: 100%;
    height: 100%;
} */

/* h4{
  position: relative;
  bottom: -23px
} */

html, body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  background-color: rgb(248, 248, 248);
  font-size: 16px;
  /* font-family: sans-serif; */
}

a {
  color: black;
  text-decoration: none;
}

.container {
    margin-top: 80px;
  /* margin-top: 5vh; */
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  padding: 0 5vw 5vh;
  background-color: rgb(247, 247, 247);
  justify-items: center;
}

.card {
  width: 100%;
  max-width: 260px;
  background-color: #fff;
  border: 2px solid #000;
  border-radius: 1rem;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease;
}

.card:hover {
  transform: scale(1.02);
}

.card .top {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 180px;
  overflow: hidden;
}

.card .top img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.card .bottom {
  margin-top: 1rem;
  display: flex;
  flex-direction: column;
  /* gap: 0.5rem; */
}

/* Allow long titles to wrap */
.card .bottom h1 {
  font-size: 1.3rem;
  margin: 0;
  line-height: 1.4;
  word-wrap: break-word;
}

/* Price always visible and wrapped */
.card .bottom h4 {
  font-size: 1rem;
  padding-bottom: 15px ;
  margin: 0;
  color: #333;
  font-weight: 500;
}




================================================
FILE: Frontend/src/Pages/Home.jsx
================================================
import axios from "axios";
import React, { useEffect, useState } from "react";
import "./Home.css";
import { Link } from "react-router-dom";
import Navbar from "../components/Navbar";


const Home = () => {
  const [productData, setProductData] = useState([]);

  useEffect(() => {
    getData();
  }, []);

  const getData = async () => {
    await axios
      .get("https://project-ecommerce-react-backend-rm5q.onrender.com/")
      .then((res) => {
        console.log(res.data.products);
        setProductData(res.data.products);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  return (
   <div>
      <Navbar/>
     <div className="container">

      {productData.map((elem, index) => {
        return <div className="card" key={index}>
          <div className="top">
            <img
              src={elem.image}
              alt=""
              width="200px"
            />
          </div>
          <div className="bottom">
            <Link to={`/admin/products/detail/${elem._id}`}><h1>{elem.title}</h1></Link>
            <h4>Price : {elem.price}</h4>
          </div>
        </div>;
      })}
    </div>
   </div>
  );
};

export default Home;


================================================
FILE: Frontend/src/Pages/ImageUploader.jsx
================================================
// ImageUploader.jsx
import React from "react";
import { IKContext, IKUpload } from "imagekitio-react";

const ImageUploader = () => {
  const onUploadSuccess = (res) => {
    console.log("Upload Success:", res);
    alert("Upload Success: " + res.url);
  };

  const onUploadError = (err) => {
    console.error("Upload Error:", err);
    alert("Upload Failed: " + err.message);
  };

  return (

    <IKContext
      publicKey= {process.env.PUBLIC_KEY}
    //   process.env.PRIVATE_KEY
      urlEndpoint= {process.env.URLENDPOINT}
      authenticationEndpoint="http://www.yourserver.com/auth" // <-- your backend auth API
    >
      <label htmlFor="">Upload an Image</label>
      <IKUpload
        fileName="user-upload.jpg"
        useUniqueFileName={true}
        isPrivateFile={false}
        onSuccess={onUploadSuccess}
        onError={onUploadError}
      />
    </IKContext>
  );
};

export default ImageUploader;



================================================
FILE: Frontend/src/Pages/Login.css
================================================

.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(135deg, #d3efff, #f0faff);
}

.login-form {
  background-color: #ffffff;
  padding: 2rem 2.5rem;
  border-radius: 10px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  min-width: 300px;
  max-width: 400px;
}

.login-form h2 {
  margin: 0;
  text-align: center;
  color: #333;
}

.login-form input {
  padding: 0.75rem;
  border-radius: 6px;
  border: 1px solid #ccc;
  font-size: 1rem;
}

.login-form button {
  padding: 0.75rem;
  background-color: #00bcd4;
  border: none;
  color: white;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease;
}

.login-form button:hover {
  background-color: #0097a7;
}

.login-form pre {
  font-size: 0.8rem;
  color: #666;
  background-color: #f7f7f7;
  padding: 0.5rem;
  border-radius: 5px;
}

.login-form .error {
  color: red;
  font-size: 0.9rem;
  text-align: center;
}



================================================
FILE: Frontend/src/Pages/Login.jsx
================================================

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Login.css';

const Login = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const allowedEmail = 'Sam10Admin@gmail.com';
  const allowedPassword = 'admin123';

  const handleSubmit = (e) => {
    e.preventDefault();
    if (email === allowedEmail && password === allowedPassword) {
      navigate('/admin');
    } else {
      setError('Invalid email or password');
    }
  };

  return (
    <div className="login-container">
      <form onSubmit={handleSubmit} className="login-form">
        <pre className="hint">
        For evaluation puropse : <br />
        Email: Sam10Admin@gmail.com <br />
        Password: admin123 <br />
        Only this email is allowed for Admin <br />
        </pre>
        <h2>Admin Login</h2>
        {error && <p className="error">{error}</p>}
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;



================================================
FILE: Frontend/src/Pages/ProductDetail.css
================================================
/* .product-container {
    height: 100%;
    width: 100%;
    background-color: rgb(226, 128, 128);
    display: flex;
    justify-content: center;
    align-items: center;
}

.main {
    height: 80%;
    width: 80%;
    border: 2px solid black;
    display: flex;
}

.left {
    width: 50%;
    height: 100%;

}

.left img {
    height: 100%;
    width: 100%;
}
.right {
    height: 100%;
    width: 50%;
} */




/* html, body{
    padding: 0px;
    margin: 0px;
    box-sizing: border-box;
    height: 100%;
    width: 100%;
}

.home {
    width: 100%;
    height: 600px;
    display: flex;
    align-items: center ;
    justify-content: center;
    background-color: #d7d7d7;
}

.pr{
    display: flex;
    align-items: center ;
    justify-content: center;
    border: 2px black solid;
    border-radius: 30px;
    background-color: #fff;
    width: 90%;
    height: 550px;
    padding: 0px 30px 0px 10px;
    gap: 20px;
}
 */


 html, body {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    height: 100%;
    width: 100%;
    font-size: 16px; /* Base font size for rem scaling */
}

.home {
    width: 100%;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #d7d7d7;
    padding: 5vh 5vw;
}

.pr {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    border: 0.125rem solid black;
    border-radius: 2rem;
    background-color: #fff;
    width: 100%;
    max-width: 90vw;
    padding: 2rem;
    gap: 2rem;
    flex-wrap: wrap;
}

/* Image section */
.pr img {
    width: 100%;
    max-width: 30vw;
    height: auto;
    border-radius: 1rem;
}

/* Text section */
.pr > div:last-child {
    flex: 1;
    min-width: 250px;
    font-size: 1rem;
}

h1 {
    font-size: 2rem;
}

h2 {
    font-size: 1.5rem;
}

p {
    font-size: 1rem;
    line-height: 1.5;
}



================================================
FILE: Frontend/src/Pages/ProductDetail.jsx
================================================
import React, { useEffect } from 'react'
import { useParams } from 'react-router-dom'
import "./ProductDetail.css"
import axios from 'axios'
import{ useState } from 'react';

const ProductDetail = () => {

   const {productId} = useParams()
   const [productData, setProductData] = useState([]);
    
    useEffect(() => {
        getProductDetail()

    }, [productId])
    

    const getProductDetail = async()=>{

       await axios.get("https://project-ecommerce-react-backend-rm5q.onrender.com/products/"+productId)
        .then((res)=>{
            console.log(res);
            setProductData(res.data.product);
            
        })
        .catch((err)=>{
            console.log(err);
        })

    }

  return (
    <div className='home'>
     
      <div className="pr">
        <div><img src={productData.image} alt="Product" height="450px" /></div>
            <div>
                <div>
                  <h1>{productData.title}</h1><br />
                  <h2>Price: â‚¹{productData.price}</h2><br />
                  <b>Description:</b>
                  <p>{productData.description}</p><br />
                  <p><b>Category:</b> {productData.category}</p><br />

                </div>
                
               {/* <div className="buttons">
                <button><a href="/products/update">Update</a></button>
                <button><a href="/products/delete">Delete</a></button>
               </div> */}

            </div>

      </div>
    </div>
  )
}

export default ProductDetail


================================================
FILE: Frontend/src/Pages/UserHome.css
================================================
/* html, body{
    margin: 0%;
    padding: 0%;
    box-sizing: border-box;
    background-color:rgb(248, 248, 248);;
}

a{
    color: black;
    text-decoration: none;
} */
/* 
.container {
    margin-top: 50px;
    /* display: flex;
    align-items: center;
    justify-content: center; */
    /* display: grid; */
    /* grid-template-columns: repeat(4,1fr); */
    /* gap: 20px; */
    /* padding-left: 40px; */
    /* background-color: rgb(247, 247, 247); */
/* } */

/* .container .card {
    border : 2px solid black;
    height: 375px;
    width: 255px;
    border-radius: 20px ;
    padding: 15px;
    background-color: #fff;
} */ 

/* .card .top {
    width: 100%;
    height: 50%;

}

.card .top img {
    width: 100%;
    height: 100%;
} */

/* h4{
  position: relative;
  bottom: -23px
}

nav {
    height: 50px;
    width: 100%;
    background-color: rgb(161, 219, 239);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 5px 10px;
}

nav .search input {

    width: 500px;
    padding: 5px;
    border-radius: 5px;
    border: none; */
/* }

.right{
    position: relative;
    right : -260px; 
     top : 10px
} */

html, body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background-color: rgb(248, 248, 248);
    font-size: 16px;
}

a {
    color: black;
    text-decoration: none;
}


nav {
  position: fixed;
  gap: 0.5rem;
  top: 0;
  left: 0;
  width: 100%;
  height: 60px;
  background-color: rgb(201, 240, 247);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 10px 16px;
  box-sizing: border-box;
  z-index: 9999;
  overflow: hidden;
}

nav .left {
  flex: 0 0 auto;
  white-space: nowrap;
}

nav .left h2 {
  margin: 0;
  font-size: 1.5rem;
}

nav .search {
  flex: 1 1 auto;
  display: flex;
  justify-content: center;
  min-width: 0;
}

nav .search input {
  width: 100%;
  max-width: 500px;
  padding: 8px 12px;
  border-radius: 5px;
  border: 1px solid #ccc;
  font-size: 1rem;
  box-sizing: border-box;
}

/* KEY FIX: Right section does NOT wrap or overflow */
nav .right {
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  gap: 1rem;
  white-space: nowrap;
  min-width: fit-content;
  max-width: 200px;
  overflow: hidden;
  text-overflow: ellipsis;
}


/* Product Grid */
.container {
    margin-top: 80px;
    /* margin-top: 5vh; */
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    padding: 0 5vw;
    background-color: rgb(247, 247, 247);
    justify-items: center;
}

/* Individual Card */
.container .card {
    border: 0.125rem solid black;
    width: 90%;
    max-width: 255px;
    height: auto;
    border-radius: 1.25rem;
    padding: 1rem;
    background-color: #fff;
    box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s;
}

.container .card:hover {
    transform: scale(1.02);
}

.container .card img {
    width: 100%;
    height: auto;
    object-fit: contain;
    border-radius: 0.5rem;
}

h4 {
    position: relative;
    bottom: -1.5rem;
    font-size: 1rem;
}



================================================
FILE: Frontend/src/Pages/UserHome.jsx
================================================
import axios from "axios";
import React, { useEffect, useState } from "react";
import "./UserHome.css";
import { Link } from "react-router-dom";
import Navbar from "../components/Navbar";


const Home = () => {
  const [productData, setProductData] = useState([]);

  useEffect(() => {
    getData();
  }, []);

  const getData = async () => {
    await axios
      .get("https://project-ecommerce-react-backend-rm5q.onrender.com")
      .then((res) => {
        console.log(res.data.products);
        setProductData(res.data.products);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  return (
   <div>
    <nav>
            <div className="left">
                 <Link ><h2>Shopy</h2></Link>
            </div>
            <div className='search'>
                <input type="text" />
            </div>
            <div className="right">
              {/* <Link to="/admin/products/add">Add new Product</Link> */}
              <Link to="/Cart"><i class="ri-shopping-cart-fill"></i></Link>
              <Link to="/login" className="ad"><h2>Admin</h2></Link>
            </div>
        </nav>      

     <div className="container">

      {productData.map((elem, index) => {
        return <div className="card" key={index}>
          <div className="top">
            <img
              src={elem.image}
              alt=""
              width="200px"
            />
          </div>
          <div className="bottom">
            <Link to={`/products/detail/${elem._id}`}><h1>{elem.title}</h1></Link>
            <h4>Price : {elem.price}</h4>
          </div>
        </div>;
      })}
    </div>
   </div>
  );
};

export default Home;


================================================
FILE: Frontend/src/Pages/UserProduct.css
================================================
/* .product-container {
    height: 100%;
    width: 100%;
    background-color: rgb(226, 128, 128);
    display: flex;
    justify-content: center;
    align-items: center;
}

.main {
    height: 80%;
    width: 80%;
    border: 2px solid black;
    display: flex;
}

.left {
    width: 50%;
    height: 100%;

}

.left img {
    height: 100%;
    width: 100%;
}
.right {
    height: 100%;
    width: 50%;
} */
/* 
html, body{
    padding: 0px;
    margin: 0px;
    box-sizing: border-box;
    height: 100%;
    width: 100%;
}

.home {
    width: 100%;
    height: 600px;
    display: flex;
    align-items: center ;
    justify-content: center;
    background-color: #d7d7d7;
}

.pr{
    display: flex;
    align-items: center ;
    justify-content: center;
    border: 2px black solid;
    border-radius: 30px;
    background-color: #fff;
    width: 90%;
    height: 550px;
    padding: 0px 30px 0px 10px;
    gap: 20px;
} */

/* .buttons{
    gap: 25px;
    height: 10px ;
    width : 30px;
} */


html, body {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    height: 100%;
    width: 100%;
    font-size: 16px;
}

.home {
    width: 100%;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #d7d7d7;
    padding: 5vh 5vw;
}

.pr {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    border: 0.125rem solid black;
    border-radius: 2rem;
    background-color: #fff;
    width: 100%;
    max-width: 90vw;
    padding: 2rem;
    gap: 2rem;
}

/* Image section */
.pr img {
    width: 100%;
    max-width: 30vw;
    height: auto;
    border-radius: 1rem;
    object-fit: contain;
}

/* Text section */
.pr > div:last-child {
    flex: 1;
    min-width: 250px;
}

/* Buttons */
.buttons {
    display: flex;
    gap: 1.5rem;
    margin-top: 1rem;
}

.buttons button {
    padding: 0.6rem 1.2rem;
    font-size: 1rem;
    border: none;
    border-radius: 0.5rem;
    background-color: #000;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s;
}

.buttons button:hover {
    background-color: #333;
}



================================================
FILE: Frontend/src/Pages/UserProduct.jsx
================================================
import React, { useEffect } from 'react'
import { useParams } from 'react-router-dom'
import "./UserProduct.css"
import axios from 'axios'
import{ useState } from 'react';
import { Link } from 'react-router-dom';

// const [cart, setCart] = useState([]); // local cart state

// const addToCart = () => {
//   setCart(prevCart => [...prevCart, productData]);
//   alert("Product added to cart!");
// };
// import { Link } from "react-router-dom";
// const { addToCart } = useCart();



const ProductDetail = () => {

   const {productId} = useParams()
   const [productData, setProductData] = useState([]);
    
    useEffect(() => {
        getProductDetail()

    }, [productId])

    const handleAddToCart = () => {
    axios.post(`https://project-ecommerce-react-backend-rm5q.onrender.com/cart/add/${productId}`)
      .then(response => alert('Product added to cart!'))
      .catch(error => console.error('Error adding to cart:', error));
  };

    const getProductDetail = async()=>{

       await axios.get("https://project-ecommerce-react-backend-rm5q.onrender.com/products/"+productId)
        .then((res)=>{
            console.log(res);
            setProductData(res.data.product);
            
        })
        .catch((err)=>{
            console.log(err);
        })

    }

  return (
    <div className='home'>
     
      <div className="pr">
        <div><img src={productData.image} alt="Product" height="450px" /></div>
            <div>
                <div>
                  <h1>{productData.title}</h1><br />
                  <h2>Price: â‚¹{productData.price}</h2><br />
                  <b>Description:</b>
                  <p>{productData.description}</p><br />
                  <p><b>Category:</b> {productData.category}</p><br />

                </div>
                
               <div className="buttons">
                <button>Buy</button>
                <button onClick={handleAddToCart}>Add to cart</button>
                {/* <button onClick={() => addToCart(productData)}>Add to Cart</button> */}
                {/* <button onClick={addToCart()}>Add to cart</button> */}
               </div>

            </div>

      </div>
    </div>
  )
}

export default ProductDetail

